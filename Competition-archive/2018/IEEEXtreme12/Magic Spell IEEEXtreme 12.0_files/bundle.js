define('Bundle', ['exports', 'PublicState', 'EmojiMini'], function (exports, PublicState, EmojiMini$1) { 'use strict';

// TODO: this whole file is mosly here to not break compatibility with pre-Stem code, need refactoring
var EPS = 1e-6;

// Check if a value is equal to zero. Use epsilon check.
var isZero = function isZero(val) {
    var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPS;

    return Math.abs(val) < epsilon;
};

// Simulate C/C++ rand() function
var rand = function rand(mod) {
    return Math.floor(Math.random() * mod);
};

var equal = function equal(val1, val2) {
    var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPS;

    return isZero(val1 - val2, epsilon);
};

var equalPoints = function equalPoints(p1, p2) {
    var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPS;

    return isZero(p1.x - p2.x, epsilon) && isZero(p1.y - p2.y, epsilon);
};

// Compute square of a number
var sqr = function sqr(x) {
    return x * x;
};

// Compute the distance between 2 points
var distance = function distance(p1, p2) {
    return Math.sqrt(sqr(p1.x - p2.x) + sqr(p1.y - p2.y));
};

var signedDistancePointLine = function signedDistancePointLine(point, line) {
    return (line.a * point.x + line.b * point.y + line.c) / Math.sqrt(sqr(line.a) + sqr(line.b));
};

var distancePointLine = function distancePointLine(point, line) {
    return Math.abs(signedDistancePointLine(point, line));
};

var pointOnSegment = function pointOnSegment(point, segmentStart, segmentEnd, epsilon) {
    epsilon = epsilon || EPS;
    return Math.abs(distance(point, segmentStart) + distance(point, segmentEnd) - distance(segmentStart, segmentEnd)) <= epsilon;
};

var perpendicularFoot = function perpendicularFoot(point, line) {
    var distance = (line.a * point.x + line.b * point.y + line.c) / (sqr(line.a) + sqr(line.b));
    return {
        x: point.x - line.a * distance,
        y: point.y - line.b * distance
    };
};

var lineEquation = function lineEquation(A, B) {
    return {
        a: B.y - A.y,
        b: A.x - B.x,
        c: A.y * B.x - A.x * B.y
    };
};

// Compute angle between 2 points in grad
var angleGrad = function angleGrad(p1, p2) {
    return gradian(angleRad(p1, p2));
};

// Transform gradian in radian
var radian = function radian(angle) {
    return angle * Math.PI / 180;
};

// Transform radian in gradian
var gradian = function gradian(angle) {
    return angle * 180 / Math.PI;
};

// Compute angle between 2 points in rad
var angleRad = function angleRad(p1, p2) {
    p2 = p2 || { 'x': 0, 'y': 0 };
    return Math.atan2(p1.y - p2.y, p1.x - p2.x);
};

// TODO: lots of these should be methods of the point class, not global functions
var crossProduct = function crossProduct(p1, p2, p0) {
    p0 = p0 || { x: 0, y: 0 };
    return (p1.x - p0.x) * (p2.y - p0.y) - (p1.y - p0.y) * (p2.x - p0.x);
};

var rotatePoint = function rotatePoint(point, orig, angle) {
    // TODO: WTF, default argument value in the middle of argument list?
    orig = orig || { x: 0, y: 0 };
    return {
        x: Math.cos(angle) * (point.x - orig.x) - Math.sin(angle) * (point.y - orig.y) + orig.x,
        y: Math.sin(angle) * (point.x - orig.x) + Math.cos(angle) * (point.y - orig.y) + orig.y
    };
};

var translatePoint = function translatePoint(point, dx, dy) {
    return {
        x: point.x + dx,
        y: point.y + dy
    };
};

var scalePoint = function scalePoint(point, orig, sx, sy) {
    sy = sy || sx;
    return {
        x: (point.x - orig.x) * sx + orig.x,
        y: (point.y - orig.y) * sy + orig.y
    };
};

var polarToCartesian = function polarToCartesian(angle, radius, orig) {
    orig = orig || { x: 0, y: 0 };
    return {
        x: radius * Math.cos(angle) + orig.x,
        y: radius * Math.sin(angle) + orig.y
    };
};

var circlesIntersection = function circlesIntersection(circle1, circle2) {
    var points;
    var centerDistance;
    // TODO(@all) These vars are magic. Find out what they do and add comments
    var l;
    var h;

    centerDistance = distance(circle1, circle2);
    if (centerDistance > circle1.r + circle2.r) {
        return [];
    }

    l = (sqr(circle1.r) - sqr(circle2.r) + sqr(centerDistance)) / (2 * centerDistance);
    if (sqr(circle1.r) - sqr(l) < 0) {
        return [];
    }

    h = Math.sqrt(sqr(circle1.r) - sqr(l));

    points = [];
    points.push({
        x: l / centerDistance * (circle2.x - circle1.x) + h / centerDistance * (circle2.y - circle1.y) + circle1.x,
        y: l / centerDistance * (circle2.y - circle1.y) - h / centerDistance * (circle2.x - circle1.x) + circle1.y
    });
    points.push({
        x: l / centerDistance * (circle2.x - circle1.x) - h / centerDistance * (circle2.y - circle1.y) + circle1.x,
        y: l / centerDistance * (circle2.y - circle1.y) + h / centerDistance * (circle2.x - circle1.x) + circle1.y
    });

    return points;
};

var bound = function bound(value, minValue, maxValue) {
    if (value < minValue) {
        return minValue;
    }
    if (value > maxValue) {
        return maxValue;
    }
    return value;
};

var getVector = function getVector(startPoint, endPoint) {
    return {
        x: endPoint.x - startPoint.x,
        y: endPoint.y - startPoint.y
    };
};

var vectorLength = function vectorLength(vector) {
    return distance({ x: 0, y: 0 }, vector);
};

var normalizeVector = function normalizeVector(vector) {
    var len = vectorLength(vector);
    if (Math.abs(len) < EPS) {
        return {
            x: 0,
            y: 0
        };
    }
    return {
        x: vector.x / len,
        y: vector.y / len
    };
};

var scaleVector = function scaleVector(vector, scalar) {
    return {
        x: vector.x * scalar,
        y: vector.y * scalar
    };
};

var addVectors = function addVectors(vector1, vector2) {
    return {
        x: vector1.x + vector2.x,
        y: vector1.y + vector2.y
    };
};

var subtractVectors = function subtractVectors(vector1, vector2) {
    return {
        x: vector1.x - vector2.x,
        y: vector1.y - vector2.y
    };
};

var triangleArea = function triangleArea(point1, point2, point3) {
    return 0.5 * Math.abs(crossProduct(point1, point2, point3));
};

var inRange = function inRange(value, minValue, maxValue) {
    if (isNaN(value)) {
        return false;
    }
    return minValue <= value && value <= maxValue;
};

var interpolationValue = function interpolationValue(interpolationArray, X) {
    var Y = 0;
    var aux;
    var i;
    var j;

    for (i = 0; i < interpolationArray.length; i += 1) {
        if (interpolationArray.x === X) {
            return interpolationArray.y;
        }
    }
    for (i = 0; i < interpolationArray.length; i += 1) {
        aux = interpolationArray[i].y;
        for (j = 0; j < interpolationArray.length; j += 1) {
            if (i !== j) {
                aux = aux * (X - interpolationArray[j].x) / (interpolationArray[i].x - interpolationArray[j].x);
            }
        }
        Y += aux;
    }

    return Y;
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var taggedTemplateLiteral = function (strings, raw) {
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
};

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var _class2, _temp2;

var _marked = /*#__PURE__*/regeneratorRuntime.mark(mapIterator),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(filterIterator);

// TODO: should this be renamed to "toUnwrappedArray"?
function unwrapArray(elements) {
    if (!elements) {
        return [];
    }

    if (!Array.isArray(elements)) {
        // In case this is an iterable, convert to array
        if (elements[Symbol.iterator]) {
            return unwrapArray(Array.from(elements));
        } else {
            return [elements];
        }
    }

    // Check if the passed in array is valid, and try to return it if possible to preserve references
    var allProperElements = true;
    for (var i = 0; i < elements.length; i++) {
        if (Array.isArray(elements[i]) || elements[i] == null) {
            allProperElements = false;
            break;
        }
    }

    if (allProperElements) {
        // Return the exact same array as was passed in
        return elements;
    }

    var result = [];
    for (var _i = 0; _i < elements.length; _i++) {
        if (Array.isArray(elements[_i])) {
            var unwrappedElement = unwrapArray(elements[_i]);
            for (var j = 0; j < unwrappedElement.length; j += 1) {
                result.push(unwrappedElement[j]);
            }
        } else {
            if (elements[_i] != null) {
                result.push(elements[_i]);
            }
        }
    }
    return result;
}

function isLocalUrl(url) {
    var host = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self.location.host;
    var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : self.location.origin;

    // Empty url is considered local
    if (!url) {
        return true;
    }
    // Protocol-relative url is local if the host matches
    if (url.startsWith("//")) {
        return url.startsWith("//" + host);
    }
    // Absolute url is local if the origin matches
    var r = new RegExp("^(?:[a-z]+:)?//", "i");
    if (r.test(url)) {
        return url.startsWith(origin);
    }
    // Root-relative and document-relative urls are always local
    return true;
}

// Trims a local url to root-relative or document-relative url.
// If the url is protocol-relative, removes the starting "//"+host, transforming it in a root-relative url.
// If the url is absolute, removes the origin, transforming it in a root-relative url.
// If the url is root-relative or document-relative, leaves it as is.
function trimLocalUrl(url) {
    var host = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self.location.host;
    var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : self.location.origin;

    if (!isLocalUrl(url, host, origin)) {
        throw Error("Trying to trim non-local url!");
    }
    if (!url) {
        return url;
    }
    if (url.startsWith("//" + host)) {
        return url.slice(("//" + host).length);
    }
    if (url.startsWith(origin)) {
        return url.slice(origin.length);
    }
    return url;
}

// Split the passed in array into arrays with at most maxChunkSize elements
function splitInChunks(array, maxChunkSize) {
    var chunks = [];
    while (array.length > 0) {
        chunks.push(array.splice(0, maxChunkSize));
    }
    return chunks;
}

function isIterable(obj) {
    if (obj == null) {
        return false;
    }
    return obj[Symbol.iterator] !== undefined;
}

function defaultComparator(a, b) {
    if (a == null && b == null) {
        return 0;
    }

    if (b == null) {
        return 1;
    }

    if (a == null) {
        return -1;
    }

    // TODO: might want to use valueof here
    if (isNumber(a) && isNumber(b)) {
        return a - b;
    }

    var aStr = a.toString();
    var bStr = b.toString();

    if (aStr === bStr) {
        return 0;
    }
    return aStr < bStr ? -1 : 1;
}

function slugify(string) {
    string = string.trim();

    string = string.replace(/[^a-zA-Z0-9-\s]/g, ""); // remove anything non-latin alphanumeric
    string = string.replace(/\s+/g, "-"); // replace whitespace with dashes
    string = string.replace(/-{2,}/g, "-"); // remove consecutive dashes
    string = string.toLowerCase();

    return string;
}

// If the first argument is a number, it's returned concatenated with the suffix, otherwise it's returned unchanged
function suffixNumber(value, suffix) {
    if (typeof value === "number" || value instanceof Number) {
        return value + suffix;
    }
    return value;
}

function setObjectPrototype(obj, Class) {
    obj.__proto__ = Class.prototype;
    return obj;
}

function isNumber(obj) {
    return typeof obj === "number" || obj instanceof Number;
}

function isString(obj) {
    return typeof obj === "string" || obj instanceof String;
}

function isPlainObject(obj) {
    if (!obj || (typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object" || obj.nodeType) {
        return false;
    }
    if (obj.constructor && obj.constructor != Object) {
        return false;
    }
    return true;
}

function deepCopy() {
    var target = arguments[0] || {};
    // Handle case when target is a string or something (possible in deep copy)
    if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && typeof target !== "function") {
        target = {};
    }

    for (var i = 1; i < arguments.length; i += 1) {
        var obj = arguments[i];
        if (obj == null) {
            continue;
        }

        // Extend the base object
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = Object.entries(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = slicedToArray(_step.value, 2),
                    key = _step$value[0],
                    value = _step$value[1];

                // Recurse if we're merging plain objects or arrays
                if (value && isPlainObject(value) || Array.isArray(value)) {
                    var clone = void 0;
                    var src = target[key];

                    if (Array.isArray(value)) {
                        clone = src && Array.isArray(src) ? src : [];
                    } else {
                        clone = src && isPlainObject(src) ? src : {};
                    }

                    target[key] = deepCopy(clone, value);
                } else {
                    // TODO: if value has .clone() method, use that?
                    target[key] = value;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }

    return target;
}

function objectFromKeyValue(key, value) {
    return defineProperty({}, key, value);
}

function dashCase(str) {
    var rez = "";
    for (var i = 0; i < str.length; i++) {
        if ("A" <= str[i] && str[i] <= "Z") {
            if (i > 0) {
                rez += "-";
            }
            rez += str[i].toLowerCase();
        } else {
            rez += str[i];
        }
    }
    return rez == str ? str : rez;
}

// TODO: have a Cookie helper file
function getCookie(name) {
    var cookies = (document.cookie || "").split(";");
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = cookies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var cookie = _step2.value;

            cookie = cookie.trim();
            if (cookie.startsWith(name + "=")) {
                return decodeURIComponent(cookie.substring(name.length + 1));
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return null;
}

function uniqueId(obj) {
    if (!uniqueId.objectWeakMap) {
        uniqueId.objectWeakMap = new WeakMap();
        uniqueId.constructorWeakMap = new WeakMap();
        uniqueId.totalObjectCount = 0;
    }
    var objectWeakMap = uniqueId.objectWeakMap;
    var constructorWeakMap = uniqueId.constructorWeakMap;
    if (!objectWeakMap.has(obj)) {
        var objConstructor = obj.constructor || obj.__proto__ || Object;
        // Increment the object count
        var objIndex = (constructorWeakMap.get(objConstructor) || 0) + 1;
        constructorWeakMap.set(objConstructor, objIndex);

        var objUniqueId = objIndex + "-" + ++uniqueId.totalObjectCount;
        objectWeakMap.set(obj, objUniqueId);
    }
    return objectWeakMap.get(obj);
}

// TODO: should be done with String.padLeft
function padNumber(num, minLength) {
    var strNum = String(num);
    while (strNum.length < minLength) {
        strNum = "0" + strNum;
    }
    return strNum;
}

// Returns the english ordinal suffix of a number
function getOrdinalSuffix(num) {
    var suffixes = ["th", "st", "nd", "rd"];
    var lastDigit = num % 10;
    var isTeen = Math.floor(num / 10) % 10 === 1;
    return !isTeen && suffixes[lastDigit] || suffixes[0];
}

function suffixWithOrdinal(num) {
    return num + getOrdinalSuffix(num);
}

function instantiateNative(BaseClass, NewClass) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
    }

    var obj = new (Function.prototype.bind.apply(BaseClass, [null].concat(args)))();
    obj.__proto__ = NewClass.prototype;
    return obj;
}

// This function can be used as a decorator in case we're extending native classes (Map/Set/Date)
// and we want to fix the way babel breaks this scenario
// WARNING: it destroys the code in constructor
// If you want a custom constructor, you need to implement a static create method that generates new objects
// Check the default constructor this code, or an example where this is done.
function extendsNative(targetClass) {
    if (targetClass.toString().includes(" extends ")) {
        // Native extended classes are cool, leave them as they are
        return;
    }
    var BaseClass = targetClass.__proto__;
    var allKeys = Object.getOwnPropertySymbols(targetClass).concat(Object.getOwnPropertyNames(targetClass));

    // Fill in the default constructor
    var newClass = targetClass.create || function create() {
        return instantiateNative.apply(undefined, [BaseClass, newClass].concat(Array.prototype.slice.call(arguments)));
    };
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = allKeys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var key = _step3.value;

            var property = Object.getOwnPropertyDescriptor(targetClass, key);
            Object.defineProperty(newClass, key, property);
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    newClass.prototype = targetClass.prototype;
    newClass.__proto__ = targetClass.__proto__;

    newClass.prototype.constructor = newClass;

    return newClass;
}

var NOOP_FUNCTION = function NOOP_FUNCTION() {
    return undefined;
};

// Helpers to wrap iterators, to wrap all values in a function or to filter them
function mapIterator(iter, func) {
    var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, value;

    return regeneratorRuntime.wrap(function mapIterator$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    _iteratorNormalCompletion4 = true;
                    _didIteratorError4 = false;
                    _iteratorError4 = undefined;
                    _context.prev = 3;
                    _iterator4 = iter[Symbol.iterator]();

                case 5:
                    if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                        _context.next = 12;
                        break;
                    }

                    value = _step4.value;
                    _context.next = 9;
                    return func(value);

                case 9:
                    _iteratorNormalCompletion4 = true;
                    _context.next = 5;
                    break;

                case 12:
                    _context.next = 18;
                    break;

                case 14:
                    _context.prev = 14;
                    _context.t0 = _context["catch"](3);
                    _didIteratorError4 = true;
                    _iteratorError4 = _context.t0;

                case 18:
                    _context.prev = 18;
                    _context.prev = 19;

                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }

                case 21:
                    _context.prev = 21;

                    if (!_didIteratorError4) {
                        _context.next = 24;
                        break;
                    }

                    throw _iteratorError4;

                case 24:
                    return _context.finish(21);

                case 25:
                    return _context.finish(18);

                case 26:
                case "end":
                    return _context.stop();
            }
        }
    }, _marked, this, [[3, 14, 18, 26], [19,, 21, 25]]);
}

function filterIterator(iter, func) {
    var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, value;

    return regeneratorRuntime.wrap(function filterIterator$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    _iteratorNormalCompletion5 = true;
                    _didIteratorError5 = false;
                    _iteratorError5 = undefined;
                    _context2.prev = 3;
                    _iterator5 = iter[Symbol.iterator]();

                case 5:
                    if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                        _context2.next = 13;
                        break;
                    }

                    value = _step5.value;

                    if (!func(value)) {
                        _context2.next = 10;
                        break;
                    }

                    _context2.next = 10;
                    return value;

                case 10:
                    _iteratorNormalCompletion5 = true;
                    _context2.next = 5;
                    break;

                case 13:
                    _context2.next = 19;
                    break;

                case 15:
                    _context2.prev = 15;
                    _context2.t0 = _context2["catch"](3);
                    _didIteratorError5 = true;
                    _iteratorError5 = _context2.t0;

                case 19:
                    _context2.prev = 19;
                    _context2.prev = 20;

                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }

                case 22:
                    _context2.prev = 22;

                    if (!_didIteratorError5) {
                        _context2.next = 25;
                        break;
                    }

                    throw _iteratorError5;

                case 25:
                    return _context2.finish(22);

                case 26:
                    return _context2.finish(19);

                case 27:
                case "end":
                    return _context2.stop();
            }
        }
    }, _marked2, this, [[3, 15, 19, 27], [20,, 22, 26]]);
}

var CallModifier = function () {
    function CallModifier() {
        classCallCheck(this, CallModifier);
    }

    createClass(CallModifier, [{
        key: "wrap",
        value: function wrap(func) {
            throw Error("Implement wrap method");
        }
    }, {
        key: "call",
        value: function call(func) {
            return this.wrap(func)();
        }
    }, {
        key: "toFunction",
        value: function toFunction() {
            var _this = this;

            return function (func) {
                return _this.wrap(func);
            };
        }
    }]);
    return CallModifier;
}();

var UnorderedCallDropper = function (_CallModifier) {
    inherits(UnorderedCallDropper, _CallModifier);

    function UnorderedCallDropper() {
        var _ref2;

        var _temp, _this2, _ret;

        classCallCheck(this, UnorderedCallDropper);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret = (_temp = (_this2 = possibleConstructorReturn(this, (_ref2 = UnorderedCallDropper.__proto__ || Object.getPrototypeOf(UnorderedCallDropper)).call.apply(_ref2, [this].concat(args))), _this2), _this2.index = 1, _this2.lastExecuted = 0, _temp), possibleConstructorReturn(_this2, _ret);
    }

    createClass(UnorderedCallDropper, [{
        key: "wrap",
        value: function wrap(callback) {
            var _this3 = this;

            var currentIndex = this.index++;
            return function () {
                if (currentIndex > _this3.lastExecuted) {
                    _this3.lastExecuted = currentIndex;
                    return callback.apply(undefined, arguments);
                }
            };
        }
    }]);
    return UnorderedCallDropper;
}(CallModifier);

/*
CallThrottler acts both as a throttler and a debouncer, allowing you to combine both types of functionality.
Available options:
    - debounce (ms): delays the function call by x ms, each call extending the delay
    - throttle (ms): keeps calls from happening with at most x ms between them. If debounce is also set, will make sure to
    fire a debounced even if over x ms have passed. If equal to CallTimer.ON_ANIMATION_FRAME, means that we want to use
    requestAnimationFrame instead of setTimeout, to execute before next frame redraw()
    - dropThrottled (boolean, default false): any throttled function call is not delayed, but dropped
 */
var CallThrottler = (_temp2 = _class2 = function (_CallModifier2) {
    inherits(CallThrottler, _CallModifier2);

    function CallThrottler() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, CallThrottler);

        var _this4 = possibleConstructorReturn(this, (CallThrottler.__proto__ || Object.getPrototypeOf(CallThrottler)).call(this));

        _this4.lastCallTime = 0;
        _this4.pendingCall = null;
        _this4.pendingCallArgs = [];
        _this4.pendingCallExpectedTime = 0;
        _this4.numCalls = 0;
        _this4.totalCallDuration = 0;

        Object.assign(_this4, options);
        return _this4;
    }

    createClass(CallThrottler, [{
        key: "isThrottleOnAnimationFrame",
        value: function isThrottleOnAnimationFrame() {
            return this.throttle === this.constructor.ON_ANIMATION_FRAME;
        }
    }, {
        key: "clearPendingCall",
        value: function clearPendingCall() {
            this.pendingCall = null;
            this.pendingCallArgs = [];
            this.pendingCallExpectedTime = 0;
        }
    }, {
        key: "cancel",
        value: function cancel() {
            this.pendingCall && this.pendingCall.cancel();
            this.clearPendingCall();
        }
    }, {
        key: "flush",
        value: function flush() {
            this.pendingCall && this.pendingCall.flush();
            this.clearPendingCall();
        }

        // API compatibility with cleanup jobs

    }, {
        key: "cleanup",
        value: function cleanup() {
            this.cancel();
        }
    }, {
        key: "computeExecutionDelay",
        value: function computeExecutionDelay(timeNow) {
            var executionDelay = null;
            if (this.throttle != null) {
                executionDelay = Math.max(this.lastCallTime + this.throttle - timeNow, 0);
            }
            if (this.debounce != null) {
                executionDelay = Math.min(executionDelay != null ? executionDelay : this.debounce, this.debounce);
            }
            return executionDelay;
        }
    }, {
        key: "replacePendingCall",
        value: function replacePendingCall(wrappedFunc, funcCall, funcCallArgs) {
            this.cancel();
            if (this.isThrottleOnAnimationFrame()) {
                var _cancelHandler = requestAnimationFrame(funcCall);
                wrappedFunc.cancel = function () {
                    return cancelAnimationFrame(_cancelHandler);
                };
                return;
            }

            var timeNow = Date.now();
            var executionDelay = this.computeExecutionDelay(timeNow);

            if (this.dropThrottled) {
                return executionDelay == 0 && funcCall();
            }

            var cancelHandler = setTimeout(funcCall, executionDelay);
            wrappedFunc.cancel = function () {
                return clearTimeout(cancelHandler);
            };
            this.pendingCall = wrappedFunc;
            this.pendingCallArgs = funcCallArgs;
            this.pendingCallExpectedTime = timeNow + executionDelay;
        }
    }, {
        key: "updatePendingCall",
        value: function updatePendingCall(args) {
            this.pendingCallArgs = args;
            if (!this.isThrottleOnAnimationFrame()) {
                var timeNow = Date.now();
                this.pendingCallExpectedTime = timeNow + this.computeExecutionDelay(timeNow);
            }
        }
    }, {
        key: "wrap",
        value: function wrap(func) {
            var _this5 = this;

            var funcCall = function funcCall() {
                var timeNow = Date.now();
                // The expected time when the function should be executed next might have been changed
                // Check if that's the case, while allowing a 1ms error for time measurement
                if (!_this5.isThrottleOnAnimationFrame() && timeNow + 1 < _this5.pendingCallExpectedTime) {
                    _this5.replacePendingCall(wrappedFunc, funcCall, _this5.pendingCallArgs);
                } else {
                    _this5.lastCallTime = timeNow;
                    _this5.clearPendingCall();
                    func.apply(undefined, toConsumableArray(_this5.pendingCallArgs));
                }
            };

            var wrappedFunc = function wrappedFunc() {
                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = arguments[_key3];
                }

                // Check if it's our function, and update the arguments and next execution time only
                if (_this5.pendingCall && func === _this5.pendingCall.originalFunc) {
                    // We only need to update the arguments, and maybe mark that we want to executed later than scheduled
                    // It's an optimization to not invoke too many setTimeout/clearTimeout pairs
                    return _this5.updatePendingCall(args);
                }
                return _this5.replacePendingCall(wrappedFunc, funcCall, args);
            };

            wrappedFunc.originalFunc = func;
            wrappedFunc.cancel = NOOP_FUNCTION;
            wrappedFunc.flush = function () {
                if (wrappedFunc === _this5.pendingCall) {
                    _this5.cancel();
                    wrappedFunc();
                }
            };
            return wrappedFunc;
        }
    }]);
    return CallThrottler;
}(CallModifier), _class2.ON_ANIMATION_FRAME = Symbol(), _class2.AUTOMATIC = Symbol(), _temp2);

// A map that supports multiple values to the same key

var MultiMap = function () {
    function MultiMap() {
        classCallCheck(this, MultiMap);

        this.map = new Map();
    }

    createClass(MultiMap, [{
        key: "normalizeKey",


        // Methods that are called before every access inside
        // the internal map
        value: function normalizeKey(key) {
            return key;
        }
    }, {
        key: "normalizeValue",
        value: function normalizeValue(value) {
            return value;
        }
    }, {
        key: "append",
        value: function append(key, value) {
            var nKey = this.normalizeKey(key);
            var nValue = this.normalizeValue(value);
            if (this.map.has(nKey)) {
                this.map.get(nKey).push(nValue);
            } else {
                this.map.set(nKey, [nValue]);
            }
        }
    }, {
        key: "has",
        value: function has(key) {
            return this.map.has(this.normalizeKey(key));
        }
    }, {
        key: "delete",
        value: function _delete(key) {
            this.map.delete(this.normalizeKey(key));
        }
    }, {
        key: "set",
        value: function set$$1(key, value) {
            this.map.set(this.normalizeKey(key), [this.normalizeValue(value)]);
        }
    }, {
        key: "get",
        value: function get$$1(key) {
            var nKey = this.normalizeKey(key);
            if (this.map.has(nKey)) {
                return this.map.get(nKey)[0];
            }
            return null;
        }
    }, {
        key: "getAll",
        value: function getAll(key) {
            var nKey = this.normalizeKey(key);
            if (this.map.has(nKey)) {
                return this.map.get(nKey).slice();
            }
            return null;
        }
    }, {
        key: "forEach",
        value: function forEach(callback, context) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _step$value = slicedToArray(_step.value, 2),
                        key = _step$value[0],
                        value = _step$value[1];

                    callback.call(context, value, key, this);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "keys",
        value: function keys() {
            return mapIterator(this.entries(), function (entry) {
                return entry[0];
            });
        }
    }, {
        key: "values",
        value: function values() {
            return mapIterator(this.entries(), function (entry) {
                return entry[1];
            });
        }
    }, {
        key: "entries",
        value: /*#__PURE__*/regeneratorRuntime.mark(function entries() {
            var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, key, values, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, value;

            return regeneratorRuntime.wrap(function entries$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _iteratorNormalCompletion2 = true;
                            _didIteratorError2 = false;
                            _iteratorError2 = undefined;
                            _context.prev = 3;
                            _iterator2 = this.map.entries()[Symbol.iterator]();

                        case 5:
                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                _context.next = 36;
                                break;
                            }

                            _step2$value = slicedToArray(_step2.value, 2), key = _step2$value[0], values = _step2$value[1];
                            _iteratorNormalCompletion3 = true;
                            _didIteratorError3 = false;
                            _iteratorError3 = undefined;
                            _context.prev = 10;
                            _iterator3 = values[Symbol.iterator]();

                        case 12:
                            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                                _context.next = 19;
                                break;
                            }

                            value = _step3.value;
                            _context.next = 16;
                            return [key, value];

                        case 16:
                            _iteratorNormalCompletion3 = true;
                            _context.next = 12;
                            break;

                        case 19:
                            _context.next = 25;
                            break;

                        case 21:
                            _context.prev = 21;
                            _context.t0 = _context["catch"](10);
                            _didIteratorError3 = true;
                            _iteratorError3 = _context.t0;

                        case 25:
                            _context.prev = 25;
                            _context.prev = 26;

                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }

                        case 28:
                            _context.prev = 28;

                            if (!_didIteratorError3) {
                                _context.next = 31;
                                break;
                            }

                            throw _iteratorError3;

                        case 31:
                            return _context.finish(28);

                        case 32:
                            return _context.finish(25);

                        case 33:
                            _iteratorNormalCompletion2 = true;
                            _context.next = 5;
                            break;

                        case 36:
                            _context.next = 42;
                            break;

                        case 38:
                            _context.prev = 38;
                            _context.t1 = _context["catch"](3);
                            _didIteratorError2 = true;
                            _iteratorError2 = _context.t1;

                        case 42:
                            _context.prev = 42;
                            _context.prev = 43;

                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }

                        case 45:
                            _context.prev = 45;

                            if (!_didIteratorError2) {
                                _context.next = 48;
                                break;
                            }

                            throw _iteratorError2;

                        case 48:
                            return _context.finish(45);

                        case 49:
                            return _context.finish(42);

                        case 50:
                        case "end":
                            return _context.stop();
                    }
                }
            }, entries, this, [[3, 38, 42, 50], [10, 21, 25, 33], [26,, 28, 32], [43,, 45, 49]]);
        })
    }, {
        key: Symbol.iterator,
        value: function value() {
            return this.entries();
        }
    }], [{
        key: "iterator",
        value: function iterator(items) {
            return items[Symbol.iterator];
        }
    }]);
    return MultiMap;
}();

var _class, _temp;

// This class currently mirrors the functionality of Headers on Chrome at the time of implementation
// TODO: It is specified that the function get() should return the result of getAll() and getAll() deprecated
var Headers$1 = (_temp = _class = function (_MultiMap) {
    inherits(Headers, _MultiMap);

    function Headers(obj) {
        classCallCheck(this, Headers);

        var _this = possibleConstructorReturn(this, (Headers.__proto__ || Object.getPrototypeOf(Headers)).call(this));

        if (obj instanceof Headers) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _step$value = slicedToArray(_step.value, 2),
                        key = _step$value[0],
                        value = _step$value[1];

                    _this.append(key, value);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        } else if (obj) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.keys(obj)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var key = _step2.value;

                    _this.append(key, obj[key]);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
        return _this;
    }

    createClass(Headers, [{
        key: 'normalizeKey',
        value: function normalizeKey(key) {
            if (typeof key !== 'string') {
                key = String(key);
            }
            if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(key)) {
                throw new TypeError('Invalid character in header field name');
            }
            return key.toLowerCase();
        }
    }, {
        key: 'normalizeValue',
        value: function normalizeValue(value) {
            if (typeof value !== "string") {
                value = String(value);
            }
            return value;
        }
    }]);
    return Headers;
}(MultiMap), _class.polyfill = true, _temp);


function polyfillHeaders(global) {
    global.Headers = global.Headers || Headers$1;
}

var _class$1, _temp$1;

var URLSearchParams$1 = (_temp$1 = _class$1 = function (_MultiMap) {
    inherits(URLSearchParams, _MultiMap);

    function URLSearchParams() {
        var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        classCallCheck(this, URLSearchParams);

        var _this = possibleConstructorReturn(this, (URLSearchParams.__proto__ || Object.getPrototypeOf(URLSearchParams)).call(this, obj));

        var str = String(obj);
        if (str.indexOf("?") === 0) {
            str = str.slice(1);
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = str.split("&")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var parameter = _step.value;

                var index = parameter.indexOf("=");
                if (index !== -1) {
                    var key = _this.constructor.decode(parameter.slice(0, index));
                    var value = _this.constructor.decode(parameter.slice(index + 1));
                    _this.append(key, value);
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return _this;
    }

    createClass(URLSearchParams, [{
        key: "normalizeKey",
        value: function normalizeKey(key) {
            return key.toString();
        }
    }, {
        key: "normalizeValue",
        value: function normalizeValue(value) {
            return value.toString();
        }
    }, {
        key: "toString",
        value: function toString() {
            var query = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.map.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _step2$value = slicedToArray(_step2.value, 2),
                        key = _step2$value[0],
                        values = _step2$value[1];

                    var name = this.constructor.encode(key);
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = values[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var value = _step3.value;

                            query.push(name + "=" + this.constructor.encode(value));
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return query.join("&");
        }
    }], [{
        key: "encode",
        value: function encode(str) {
            var replace = {
                '!': '%21',
                "'": '%27',
                '(': '%28',
                ')': '%29',
                '~': '%7E',
                '%20': '+',
                '%00': '\x00'
            };
            return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function (match) {
                return replace[match];
            });
        }
    }, {
        key: "decode",
        value: function decode(str) {
            return decodeURIComponent(str.replace(/\+/g, ' '));
        }
    }]);
    return URLSearchParams;
}(MultiMap), _class$1.polyfill = true, _temp$1);


function polyfillURLSearchParams(global) {
    global.URLSearchParams = global.URLSearchParams || URLSearchParams$1;
}

function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
        reader.onload = function () {
            resolve(reader.result);
        };
        reader.onerror = function () {
            reject(reader.error);
        };
    });
}

function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
}

function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
}

var Body = function () {
    function Body() {
        classCallCheck(this, Body);

        this.bodyUsed = false;
    }

    createClass(Body, [{
        key: "setBodyUsed",
        value: function setBodyUsed() {
            if (this.bodyUsed) {
                return Promise.reject(new TypeError("Already read"));
            }
            this.bodyUsed = true;
        }
    }, {
        key: "initialize",
        value: function initialize(bodyInit) {
            this._bodyInit = bodyInit;
            if (!bodyInit) {
                this._bodyText = "";
            } else if (typeof bodyInit === "string" || bodyInit instanceof String) {
                this._bodyText = bodyInit;
            } else if (Blob.prototype.isPrototypeOf(bodyInit)) {
                this._bodyBlob = bodyInit;
            } else if (FormData.prototype.isPrototypeOf(bodyInit)) {
                this._bodyFormData = bodyInit;
            } else if (URLSearchParams.prototype.isPrototypeOf(bodyInit)) {
                this._bodyText = bodyInit.toString();
            } else if (DataView.prototype.isPrototypeOf(bodyInit)) {
                this._bodyArrayBuffer = this.constructor.cloneBuffer(bodyInit.buffer);
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (ArrayBuffer.prototype.isPrototypeOf(bodyInit) || ArrayBuffer.isView(bodyInit)) {
                this._bodyArrayBuffer = this.constructor.cloneBuffer(bodyInit);
            } else {
                throw new Error("unsupported BodyInit type");
            }

            if (!this.headers.get("content-type")) {
                if (typeof bodyInit === "string" || bodyInit instanceof String) {
                    this.headers.set("content-type", "text/plain;charset=UTF-8");
                } else if (this._bodyBlob && this._bodyBlob.type) {
                    this.headers.set("content-type", this._bodyBlob.type);
                } else if (URLSearchParams.prototype.isPrototypeOf(bodyInit)) {
                    this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                }
            }
        }
    }, {
        key: "blob",
        value: function blob() {
            var rejected = this.setBodyUsed();
            if (rejected) {
                return rejected;
            }

            if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
            }
            if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            }
            if (this._bodyFormData) {
                // I know this is technically wrong, but only we can create this scenario
                return Promise.resolve(this._bodyFormData);
            }
            return Promise.resolve(new Blob([this._bodyText]));
        }
    }, {
        key: "arrayBuffer",
        value: function arrayBuffer() {
            if (this._bodyArrayBuffer) {
                return this.setBodyUsed() || Promise.resolve(this._bodyArrayBuffer);
            } else {
                return this.blob().then(readBlobAsArrayBuffer);
            }
        }
    }, {
        key: "readArrayBufferAsText",
        value: function readArrayBufferAsText() {
            var view = new Uint8Array(this._bodyArrayBuffer);
            var chars = new Array(view.length);

            for (var i = 0; i < view.length; i++) {
                chars[i] = String.fromCharCode(view[i]);
            }
            return chars.join("");
        }
    }, {
        key: "text",
        value: function text() {
            var rejected = this.setBodyUsed();
            if (rejected) {
                return rejected;
            }

            if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
            }
            if (this._bodyArrayBuffer) {
                return Promise.resolve(this.readArrayBufferAsText());
            }
            if (this._bodyFormData) {
                throw new Error("could not read FormData body as text");
            }
            return Promise.resolve(this._bodyText);
        }
    }, {
        key: "formData",
        value: function formData() {
            return this.text().then(this.constructor.decode);
        }
    }, {
        key: "json",
        value: function json() {
            return this.text().then(JSON.parse);
        }
    }], [{
        key: "decode",
        value: function decode(body) {
            var form = new FormData();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = body.trim().split('&')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var bytes = _step.value;

                    if (bytes) {
                        var split = bytes.split('=');
                        var name = split.shift().replace(/\+/g, ' ');
                        var value = split.join('=').replace(/\+/g, ' ');
                        form.append(decodeURIComponent(name), decodeURIComponent(value));
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return form;
        }
    }, {
        key: "cloneBuffer",
        value: function cloneBuffer(buffer) {
            if (buffer.slice) {
                return buffer.slice();
            } else {
                var view = new Uint8Array(buffer.byteLength);
                view.set(new Uint8Array(buffer));
                return view.buffer;
            }
        }
    }]);
    return Body;
}();

var _class$2, _temp$2;

var Request$1 = (_temp$2 = _class$2 = function (_Body) {
    inherits(Request, _Body);

    function Request(input) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, Request);

        var _this = possibleConstructorReturn(this, (Request.__proto__ || Object.getPrototypeOf(Request)).call(this));

        var body = options.body;

        if (typeof input === "string" || input instanceof String) {
            input = {
                url: input
            };
        }

        if (input.bodyUsed) {
            throw new TypeError("Already read");
        }
        if (!body && input.hasOwnProperty("_bodyInit") && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
        }

        _this.method = _this.constructor.normalizeMethod(options.method || input.method || "GET");
        _this.url = input.url;

        var headerArgs = options.headers || input.headers || null;
        _this.headers = headerArgs ? new Headers(headerArgs) : new Headers();
        _this.context = options.context || input.context || "";
        _this.referrer = options.referrer || input.referrer || "about:client";
        _this.referrerPolicy = options.referrerPolicy || input.referrerPolicy || "";
        _this.mode = options.mode || input.mode || null;
        _this.credentials = options.credentials || input.credentials || "omit";
        _this.cache = options.cache || input.cache || "default";

        if ((_this.method === "GET" || _this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
        }
        _this.initialize(body);
        return _this;
    }

    createClass(Request, [{
        key: "clone",
        value: function clone() {
            return new Request(this, { body: this._bodyInit });
        }
    }], [{
        key: "normalizeMethod",
        value: function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return this.methods.indexOf(upcased) > -1 ? upcased : method;
        }
    }]);
    return Request;
}(Body), _class$2.methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"], _temp$2);


function polyfillRequest(global) {
    global.Request = global.Request || Request$1;
}

var _class$3, _temp$3;

var Response$1 = (_temp$3 = _class$3 = function (_Body) {
    inherits(Response, _Body);

    function Response(bodyInit, options) {
        classCallCheck(this, Response);

        var _this = possibleConstructorReturn(this, (Response.__proto__ || Object.getPrototypeOf(Response)).call(this));

        options = options || {};

        _this.type = "default";
        if (options.hasOwnProperty("status")) {
            _this.status = options.status;
        } else {
            _this.status = 200;
        }
        _this.ok = _this.status >= 200 && _this.status < 300;
        if (options.hasOwnProperty("statusText")) {
            _this.statusText = options.statusText;
        } else {
            _this.statusText = "OK";
        }
        _this.headers = new Headers(options.headers);
        _this.url = options.url || "";
        _this.initialize(bodyInit);
        return _this;
    }

    createClass(Response, [{
        key: "clone",
        value: function clone() {
            return new Response(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new Headers(this.headers),
                url: this.url
            });
        }
    }], [{
        key: "error",
        value: function error() {
            var response = new Response(null, { status: 0, statusText: "" });
            response.type = "error";
            return response;
        }
    }, {
        key: "redirect",
        value: function redirect(url, status) {
            if (this.redirectStatuses.indexOf(status) === -1) {
                throw new RangeError("Invalid status code");
            }
            return new Response(null, { status: status, headers: { location: url } });
        }
    }]);
    return Response;
}(Body), _class$3.redirectStatuses = [301, 302, 303, 307, 308], _temp$3);


function polyfillResponse(global) {
    global.Response = global.Response || Response$1;
}

// Tries to be a more flexible implementation of fetch()

// TODO: should only call this in the first call to fetch, to not create unneeded dependencies?
if (window) {
    polyfillRequest(window);
    polyfillResponse(window);
    polyfillHeaders(window);
    polyfillURLSearchParams(window);
}

// Parse the headers from an xhr object, to return a native Headers object
function parseHeaders(xhr) {
    var rawHeader = xhr.getAllResponseHeaders() || "";
    var rawHeaderLines = rawHeader.split(/\r?\n/);
    var headers = new Headers();

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = rawHeaderLines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var line = _step.value;

            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
                var value = parts.join(":").trim();
                headers.append(key, value);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return headers;
}

// Creates a new URLSearchParams object from a plain object
// Fields that are arrays are spread
function getURLSearchParams(data) {
    if (!isPlainObject(data)) {
        return data;
    }

    var urlSearchParams = new URLSearchParams();
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = Object.keys(data)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            var value = data[key];
            if (Array.isArray(value)) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = value[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var instance = _step3.value;

                        urlSearchParams.append(key + "[]", instance);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            } else {
                urlSearchParams.set(key, value);
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return urlSearchParams;
}

// Appends search parameters from an object to a given URL or Request, and returns the new URL
function composeURL(url, params) {
    if (url.url) {
        url = url.url;
    }
    // TODO: also extract the preexisting arguments in the url
    if (params) {
        url += "?" + getURLSearchParams(params);
    }
    return url;
}

var XHRPromise = function () {
    function XHRPromise(request) {
        var _this = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, XHRPromise);

        request = new Request(request, options);
        var xhr = new XMLHttpRequest();
        this.options = options;
        this.request = request;
        this.xhr = xhr;

        this.promise = new Promise(function (resolve, reject) {
            _this.promiseResolve = resolve;
            _this.promiseReject = reject;

            xhr.onload = function () {
                var headers = _this.getResponseHeaders();

                var body = xhr.response || xhr.responseText;
                var responseInit = {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    headers: headers,
                    url: xhr.responseURL || headers.get("X-Request-URL")
                };
                var response = new Response(body, responseInit);
                // In case dataType is "arrayBuffer", "blob", "formData", "json", "text"
                // Response has methods to return these as promises
                if (typeof response[options.dataType] === "function") {
                    // TODO: should whitelist dataType to json, blob
                    response[options.dataType]().then(function (data) {
                        _this.resolve(data);
                    });
                } else {
                    _this.resolve(response);
                }
            };

            // TODO: also dispatch all arguments here on errors
            xhr.onerror = function () {
                _this.reject(new TypeError("Network error"));
            };

            // TODO: need to have an options to pass setting to xhr (like timeout value)
            xhr.ontimeout = function () {
                _this.reject(new TypeError("Network timeout"));
            };

            xhr.open(request.method, request.url, true);

            if (request.credentials === "include") {
                xhr.withCredentials = true;
            }

            // TODO: come back to this
            xhr.responseType = "blob";

            request.headers.forEach(function (value, name) {
                if (options.body instanceof FormData && name.toLowerCase() === "content-type") {
                    return;
                }
                xhr.setRequestHeader(name, value);
            });

            // TODO: there's no need to send anything on a GET or HEAD
            if (options.body instanceof FormData) {
                _this.send(options.body);
            } else {
                request.blob().then(function (blob) {
                    // The blob can be a FormData when we're polyfilling the Request class
                    var body = blob instanceof FormData || blob.size ? blob : null;
                    _this.send(body);
                });
            }
        });
    }

    createClass(XHRPromise, [{
        key: "getResponseHeaders",
        value: function getResponseHeaders() {
            return parseHeaders(this.xhr);
        }
    }, {
        key: "send",
        value: function send(body) {
            this.getXHR().send(body);
        }
    }, {
        key: "getPostprocessors",
        value: function getPostprocessors() {
            return this.options.postprocessors || fetch.defaultPostprocessors;
        }
    }, {
        key: "getErrorPostprocessors",
        value: function getErrorPostprocessors() {
            return this.options.errorPostprocessors || fetch.defaultErrorPostprocessors;
        }
    }, {
        key: "resolve",
        value: function resolve(payload) {
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.getPostprocessors()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var postprocessor = _step5.value;

                    try {
                        payload = postprocessor(payload, this) || payload;
                    } catch (exception) {
                        this.reject(exception);
                        return;
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            if (this.options.onSuccess) {
                var _options;

                (_options = this.options).onSuccess.apply(_options, arguments);
            } else {
                this.promiseResolve.apply(this, arguments);
            }
            if (this.options.onComplete) {
                this.options.onComplete();
            }
        }
    }, {
        key: "reject",
        value: function reject(error) {
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.getErrorPostprocessors()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var postprocessor = _step6.value;

                    error = postprocessor(error) || error;
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            if (this.options.onError) {
                var _options2;

                (_options2 = this.options).onError.apply(_options2, arguments);
            } else {
                if (this._chained) {
                    this.promiseReject.apply(this, arguments);
                } else {
                    if (this.options.errorHandler) {
                        var _options3;

                        (_options3 = this.options).errorHandler.apply(_options3, arguments);
                    } else {
                        var _console;

                        (_console = console).error.apply(_console, ["Unhandled fetch error"].concat(Array.prototype.slice.call(arguments)));
                    }
                }
            }
            if (this.options.onComplete) {
                this.options.onComplete();
            }
        }

        // TODO: next 2 functions should throw an exception if you have onSuccess/onError

    }, {
        key: "then",
        value: function then(onResolve, onReject) {
            this._chained = true;
            onReject = onReject || this.options.errorHandler;
            return this.getPromise().then(onResolve, onReject);
        }
    }, {
        key: "catch",
        value: function _catch() {
            var _getPromise;

            this._chained = true;
            return (_getPromise = this.getPromise()).catch.apply(_getPromise, arguments);
        }
    }, {
        key: "getXHR",
        value: function getXHR() {
            return this.xhr;
        }
    }, {
        key: "getPromise",
        value: function getPromise() {
            return this.promise;
        }
    }, {
        key: "getRequest",
        value: function getRequest() {
            return this.request;
        }
    }, {
        key: "abort",
        value: function abort() {
            this.getXHR().abort();
        }
    }, {
        key: "addXHRListener",
        value: function addXHRListener(name, callback) {
            var _getXHR;

            (_getXHR = this.getXHR()).addEventListener.apply(_getXHR, arguments);
        }
    }, {
        key: "addProgressListener",
        value: function addProgressListener(callback) {
            this.addXHRListener.apply(this, ["progress"].concat(Array.prototype.slice.call(arguments)));
        }
    }]);
    return XHRPromise;
}();

// TODO: this offers only partial compatibility with $.ajax


function jQueryCompatibilityPreprocessor(options) {
    if (options.type) {
        options.method = options.type.toUpperCase();
    }

    if (options.contentType) {
        options.headers.set("Content-Type", options.contentType);
    }

    options.headers.set("X-Requested-With", "XMLHttpRequest");

    if (isPlainObject(options.data)) {
        var method = options.method.toUpperCase();
        if (method === "GET" || method === "HEAD") {
            options.urlParams = options.urlParams || options.data;
            if (options.cache === false) {
                options.urlParams = getURLSearchParams(options.urlParams);
                options.urlParams.set("_", Date.now());
            }
        } else {
            var formData = new FormData();
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = Object.keys(options.data)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var key = _step7.value;

                    var value = options.data[key];
                    if (Array.isArray(value)) {
                        var _iteratorNormalCompletion8 = true;
                        var _didIteratorError8 = false;
                        var _iteratorError8 = undefined;

                        try {
                            for (var _iterator8 = value[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                                var arrayValue = _step8.value;

                                formData.append(key + "[]", arrayValue);
                            }
                        } catch (err) {
                            _didIteratorError8 = true;
                            _iteratorError8 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                                    _iterator8.return();
                                }
                            } finally {
                                if (_didIteratorError8) {
                                    throw _iteratorError8;
                                }
                            }
                        }
                    } else {
                        formData.append(key, value);
                    }
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            options.body = formData;
        }
    } else {
        options.body = options.body || options.data;
    }

    return options;
}

// Can either be called with
// - 1 argument: (Request)
// - 2 arguments: (url/Request, options)
function fetch(input) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }

    // In case we're being passed in a single plain object (not Request), assume it has a url field
    if (isPlainObject(input)) {
        return fetch.apply(undefined, [input.url].concat(Array.prototype.slice.call(arguments)));
    }

    var options = Object.assign.apply(Object, [{}].concat(args));

    // Ensure that there's a .headers field for preprocessors
    options.headers = new Headers(options.headers || {});

    var preprocessors = options.preprocessors || fetch.defaultPreprocessors || [];

    var _iteratorNormalCompletion9 = true;
    var _didIteratorError9 = false;
    var _iteratorError9 = undefined;

    try {
        for (var _iterator9 = preprocessors[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var preprocessor = _step9.value;

            options = preprocessor(options) || options;
        }
    } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
                _iterator9.return();
            }
        } finally {
            if (_didIteratorError9) {
                throw _iteratorError9;
            }
        }
    }

    options.onSuccess = options.onSuccess || options.success;
    options.onError = options.onError || options.error;
    options.onComplete = options.onComplete || options.complete;

    if (typeof options.cache === "boolean") {
        options.cache = options.cache ? "force-cache" : "reload";
        // TODO: cache still isn't fully done
    }

    options.method = options.method || "GET";

    // If there are any url search parameters, update the url from the urlParams or urlSearchParams fields
    // These fields can be plain objects (jQuery style) or can be URLSearchParams objects
    var urlParams = options.urlParams || options.urlSearchParams;
    if (urlParams) {
        // Change the URL of the request to add a query
        if (input instanceof Request) {
            input = new Request(composeURL(input.url, urlParams), input);
        } else {
            input = new Request(composeURL(input, urlParams), {});
        }
    }

    return new XHRPromise(input, options);
}

fetch.defaultPreprocessors = [jQueryCompatibilityPreprocessor];
fetch.defaultPostprocessors = [];
fetch.defaultErrorPostprocessors = [];

fetch.polyfill = true;

var AjaxHandler = function () {
    function AjaxHandler() {
        var ajaxHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Ajax;
        var errorHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        classCallCheck(this, AjaxHandler);

        this.parentHandler = ajaxHandler;
        this.preprocessors = ajaxHandler ? [] : Array.from(fetch.defaultPreprocessors);
        this.postprocessors = ajaxHandler ? [] : Array.from(fetch.defaultPostprocessors);
        this.errorPostprocessors = ajaxHandler ? [] : Array.from(fetch.defaultErrorPostprocessors);
        this.errorHandler = errorHandler;
    }

    createClass(AjaxHandler, [{
        key: "fetch",
        value: function fetch$$1(request) {
            var baseOptions = {
                preprocessors: this.getPreprocessors(),
                postprocessors: this.getPostprocessors(),
                errorPostprocessors: this.getErrorPostprocessors(),
                errorHandler: this.getErrorHandler()
            };

            // Request may be a plain object or a url, not going to duplicate code from fetch
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.keys(baseOptions)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    if (request[key]) {
                        delete baseOptions[key];
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            return fetch.apply(undefined, [request, baseOptions].concat(args));
        }
    }, {
        key: "request",
        value: function request() {
            return this.fetch.apply(this, arguments);
        }

        // Feel free to modify the post and get methods for your needs

    }, {
        key: "get",
        value: function get$$1(url, options) {
            return this.fetch.apply(this, Array.prototype.slice.call(arguments).concat([{ method: "GET" }]));
        }
    }, {
        key: "getJSON",
        value: function getJSON(url, data) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                args[_key2 - 2] = arguments[_key2];
            }

            return this.get.apply(this, [url, { dataType: "json", data: data }].concat(args));
        }
    }, {
        key: "post",
        value: function post(url, options) {
            return this.fetch.apply(this, Array.prototype.slice.call(arguments).concat([{ method: "POST" }]));
        }
    }, {
        key: "postJSON",
        value: function postJSON(url, data) {
            for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                args[_key3 - 2] = arguments[_key3];
            }

            return this.post.apply(this, [url, { dataType: "json", data: data }].concat(args));
        }
    }, {
        key: "addPreprocessor",
        value: function addPreprocessor(preprocessor) {
            this.preprocessors.push(preprocessor);
        }
    }, {
        key: "getPreprocessors",
        value: function getPreprocessors() {
            var inherited = this.parentHandler && this.parentHandler.getPreprocessors() || [];
            return [].concat(toConsumableArray(this.preprocessors), toConsumableArray(inherited));
        }
    }, {
        key: "addPostprocessor",
        value: function addPostprocessor(postprocessor) {
            this.postprocessors.push(postprocessor);
        }
    }, {
        key: "getPostprocessors",
        value: function getPostprocessors() {
            var inherited = this.parentHandler && this.parentHandler.getPostprocessors() || [];
            return [].concat(toConsumableArray(inherited), toConsumableArray(this.postprocessors));
        }
    }, {
        key: "addErrorPostprocessor",
        value: function addErrorPostprocessor(postprocessor) {
            this.errorPostprocessors.push(postprocessor);
        }
    }, {
        key: "getErrorPostprocessors",
        value: function getErrorPostprocessors() {
            var inherited = this.parentHandler && this.parentHandler.getErrorPostprocessors() || [];
            return [].concat(toConsumableArray(inherited), toConsumableArray(this.errorPostprocessors));
        }
    }, {
        key: "getErrorHandler",
        value: function getErrorHandler() {
            return this.errorHandler || this.parentHandler && this.parentHandler.getErrorHandler();
        }
    }]);
    return AjaxHandler;
}();

var FixedURLAjaxHandler = function (_AjaxHandler) {
    inherits(FixedURLAjaxHandler, _AjaxHandler);

    function FixedURLAjaxHandler(url) {
        var ajaxHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Ajax;
        var errorHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        classCallCheck(this, FixedURLAjaxHandler);

        var _this = possibleConstructorReturn(this, (FixedURLAjaxHandler.__proto__ || Object.getPrototypeOf(FixedURLAjaxHandler)).call(this, ajaxHandler, errorHandler));

        _this.url = url;
        return _this;
    }

    createClass(FixedURLAjaxHandler, [{
        key: "get",
        value: function get$$1(options) {
            var _babelHelpers$get;

            return (_babelHelpers$get = get(FixedURLAjaxHandler.prototype.__proto__ || Object.getPrototypeOf(FixedURLAjaxHandler.prototype), "get", this)).call.apply(_babelHelpers$get, [this, this.url].concat(Array.prototype.slice.call(arguments)));
        }
    }, {
        key: "getJSON",
        value: function getJSON(data) {
            return get(FixedURLAjaxHandler.prototype.__proto__ || Object.getPrototypeOf(FixedURLAjaxHandler.prototype), "getJSON", this).call(this, this.url, data);
        }
    }, {
        key: "post",
        value: function post(options) {
            var _babelHelpers$get2;

            return (_babelHelpers$get2 = get(FixedURLAjaxHandler.prototype.__proto__ || Object.getPrototypeOf(FixedURLAjaxHandler.prototype), "post", this)).call.apply(_babelHelpers$get2, [this, this.url].concat(Array.prototype.slice.call(arguments)));
        }
    }, {
        key: "postJSON",
        value: function postJSON(data) {
            return get(FixedURLAjaxHandler.prototype.__proto__ || Object.getPrototypeOf(FixedURLAjaxHandler.prototype), "postJSON", this).call(this, this.url, data);
        }
    }]);
    return FixedURLAjaxHandler;
}(AjaxHandler);

var Ajax = new AjaxHandler();

var DispatcherHandle = function () {
    function DispatcherHandle(dispatcher, callback) {
        classCallCheck(this, DispatcherHandle);

        this.dispatcher = dispatcher;
        this.callback = callback;
    }

    createClass(DispatcherHandle, [{
        key: "remove",
        value: function remove() {
            if (!this.dispatcher) {
                console.warn("Removing a dispatcher twice");
                return;
            }
            this.dispatcher.removeListener(this.callback);
            this.dispatcher = undefined;
            this.callback = undefined;
        }
    }, {
        key: "cleanup",
        value: function cleanup() {
            this.remove();
        }
    }]);
    return DispatcherHandle;
}();

var Dispatcher = function () {
    function Dispatcher() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, Dispatcher);

        this.options = options;
        this.listeners = [];
    }

    createClass(Dispatcher, [{
        key: "callbackExists",
        value: function callbackExists(callback) {
            for (var i = 0; i < this.listeners.length; i += 1) {
                if (this.listeners[i] === callback) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: "addListener",
        value: function addListener(callback) {
            if (!(typeof callback === "function")) {
                console.error("The listener needs to be a function: ", callback);
                return;
            }
            if (this.callbackExists(callback)) {
                console.error("Can't re-register for the same callback: ", this, " ", callback);
                return;
            }

            this.listeners.push(callback);
            return new DispatcherHandle(this, callback);
        }
    }, {
        key: "addListenerOnce",
        value: function addListenerOnce(callback) {
            var handler = this.addListener(function () {
                callback.apply(undefined, arguments);
                handler.remove();
            });
            return handler;
        }
    }, {
        key: "removeListener",
        value: function removeListener(callback) {
            for (var i = 0; i < this.listeners.length; i += 1) {
                if (this.listeners[i] === callback) {
                    // Erase and return
                    return this.listeners.splice(i, 1)[0];
                }
            }
        }
    }, {
        key: "removeAllListeners",
        value: function removeAllListeners() {
            this.listeners = [];
        }
    }, {
        key: "dispatch",
        value: function dispatch(payload) {
            for (var i = 0; i < this.listeners.length;) {
                var listener = this.listeners[i];
                // TODO: optimize common cases
                listener.apply(undefined, arguments);
                // In case the current listener deleted itself, keep the loop counter the same
                // If it deleted listeners that were executed before it, that's just wrong and there are no guaranteed about
                if (listener === this.listeners[i]) {
                    i++;
                }
            }
        }
    }]);
    return Dispatcher;
}();

var DispatchersSymbol = Symbol("Dispatchers");

var Dispatchable = function () {
    function Dispatchable() {
        classCallCheck(this, Dispatchable);
    }

    createClass(Dispatchable, [{
        key: "getDispatcher",
        value: function getDispatcher(name) {
            return this.dispatchers.get(name);
        }
    }, {
        key: "dispatch",
        value: function dispatch(name, payload) {
            var dispatcher = this.getDispatcher(name);
            if (dispatcher) {
                // Optimize the average case
                if (arguments.length <= 2) {
                    dispatcher.dispatch(payload);
                } else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    dispatcher.dispatch.apply(dispatcher, toConsumableArray(args));
                }
            }
        }
    }, {
        key: "addListener",
        value: function addListener(name, callback) {
            var _this = this;

            if (Array.isArray(name)) {
                return new CleanupJobs(name.map(function (x) {
                    return _this.addListener(x, callback);
                }));
            }
            var dispatcher = this.getDispatcher(name);
            if (!dispatcher) {
                dispatcher = new Dispatcher();
                this.dispatchers.set(name, dispatcher);
            }
            return dispatcher.addListener(callback);
        }

        // TODO: remove some duplicated logic with method above

    }, {
        key: "addListenerOnce",
        value: function addListenerOnce(name, callback) {
            var _this2 = this;

            if (Array.isArray(name)) {
                return new CleanupJobs(name.map(function (x) {
                    return _this2.addListenerOnce(x, callback);
                }));
            }
            var dispatcher = this.getDispatcher(name);
            if (!dispatcher) {
                dispatcher = new Dispatcher();
                this.dispatchers.set(name, dispatcher);
            }
            return dispatcher.addListenerOnce(callback);
        }
    }, {
        key: "removeListener",
        value: function removeListener(name, callback) {
            var dispatcher = this.getDispatcher(name);
            if (dispatcher) {
                dispatcher.removeListener(callback);
            }
        }
    }, {
        key: "cleanup",
        value: function cleanup() {
            this.runCleanupJobs();
            delete this[DispatchersSymbol];
        }

        // These function don't really belong here, but they don't really hurt here and I don't want a long proto chain
        // Add anything that needs to be called on cleanup here (dispatchers, etc)

    }, {
        key: "addCleanupJob",
        value: function addCleanupJob(cleanupJob) {
            if (!this.hasOwnProperty("_cleanupJobs")) {
                this._cleanupJobs = new CleanupJobs();
            }
            this._cleanupJobs.add(cleanupJob);
            return cleanupJob;
        }
    }, {
        key: "runCleanupJobs",
        value: function runCleanupJobs() {
            if (this._cleanupJobs) {
                this._cleanupJobs.cleanup();
            }
        }
    }, {
        key: "detachListener",
        value: function detachListener(dispatcherHandle) {
            if (this._cleanupJobs) {
                this._cleanupJobs.remove(dispatcherHandle);
            } else {
                dispatcherHandle.remove();
            }
        }
    }, {
        key: "dispatchers",
        get: function get$$1() {
            return this[DispatchersSymbol] || (this[DispatchersSymbol] = new Map());
        }
    }]);
    return Dispatchable;
}();

// Creates a method that calls the method methodName on obj, and adds the result as a cleanup task


function getAttachCleanupJobMethod(methodName) {
    return function (obj) {
        var args = Array.prototype.slice.call(arguments, 1);
        var handler = obj[methodName].apply(obj, toConsumableArray(args));
        this.addCleanupJob(handler);
        return handler;
    };
}

// Not sure if these should be added here, but meh
Dispatchable.prototype.attachListener = getAttachCleanupJobMethod("addListener");
Dispatchable.prototype.attachEventListener = getAttachCleanupJobMethod("addEventListener");
Dispatchable.prototype.attachCreateListener = getAttachCleanupJobMethod("addCreateListener");
Dispatchable.prototype.attachUpdateListener = getAttachCleanupJobMethod("addUpdateListener");
Dispatchable.prototype.attachDeleteListener = getAttachCleanupJobMethod("addDeleteListener");

Dispatcher.Global = new Dispatchable();

var RunOnce = function () {
    function RunOnce() {
        classCallCheck(this, RunOnce);
    }

    createClass(RunOnce, [{
        key: "run",
        value: function run(callback) {
            var _this3 = this;

            var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            if (this.timeout) {
                return;
            }
            this.timeout = setTimeout(function () {
                callback();
                _this3.timeout = undefined;
            }, timeout);
        }
    }]);
    return RunOnce;
}();

var CleanupJobs = function () {
    function CleanupJobs() {
        var jobs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        classCallCheck(this, CleanupJobs);

        this.jobs = jobs;
    }

    createClass(CleanupJobs, [{
        key: "add",
        value: function add(job) {
            this.jobs.push(job);
        }
    }, {
        key: "cleanup",
        value: function cleanup() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.jobs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var job = _step.value;

                    if (typeof job.cleanup === "function") {
                        job.cleanup();
                    } else if (typeof job.remove === "function") {
                        job.remove();
                    } else {
                        job();
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.jobs = [];
        }
    }, {
        key: "remove",
        value: function remove(job) {
            if (job) {
                var index = this.jobs.indexOf(job);
                if (index >= 0) {
                    this.jobs.splice(index, 1);
                }
                job.remove();
            } else {
                this.cleanup();
            }
        }
    }]);
    return CleanupJobs;
}();

// Class that can be used to pass around ownership of a resource.
// It informs the previous owner of the change (once) and dispatches the new element for all listeners
// TODO: a better name


var SingleActiveElementDispatcher = function (_Dispatcher) {
    inherits(SingleActiveElementDispatcher, _Dispatcher);

    function SingleActiveElementDispatcher() {
        classCallCheck(this, SingleActiveElementDispatcher);
        return possibleConstructorReturn(this, (SingleActiveElementDispatcher.__proto__ || Object.getPrototypeOf(SingleActiveElementDispatcher)).apply(this, arguments));
    }

    createClass(SingleActiveElementDispatcher, [{
        key: "setActive",
        value: function setActive(element, addChangeListener, forceDispatch) {
            if (!forceDispatch && element === this._active) {
                return;
            }
            this._active = element;
            this.dispatch(element);
            if (addChangeListener) {
                this.addListenerOnce(function (newElement) {
                    if (newElement != element) {
                        addChangeListener(newElement);
                    }
                });
            }
        }
    }, {
        key: "getActive",
        value: function getActive() {
            return this._active;
        }
    }]);
    return SingleActiveElementDispatcher;
}(Dispatcher);

// The FileSaver class is mean to be able to create a Save as... file dialog from text/bytes

var autoBom = function autoBom(blob) {
    // Add the unicode boom if not present
    if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
        return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type });
    }
    return blob;
};

var FileSaver = function (_Dispatchable) {
    inherits(FileSaver, _Dispatchable);

    function FileSaver(blob, fileName) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck(this, FileSaver);

        var _this = possibleConstructorReturn(this, (FileSaver.__proto__ || Object.getPrototypeOf(FileSaver)).call(this));

        _this.blob = blob;
        _this.fileName = fileName;
        _this.options = options;

        if (_this.options.autoBom) {
            _this.blob = autoBom(_this.blob);
        }

        // TODO: these should be static
        _this.saveLink = document.createElement("a");
        var canUseSaveLink = "download" in _this.saveLink;
        var is_safari = /constructor/i.test(window.HTMLElement) || window.safari;
        var is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent);

        var force = blob.type === "application/octet-stream";
        var objectUrl = void 0;

        _this.readyState = FileSaver.INIT;
        if (canUseSaveLink) {
            objectUrl = window.URL.createObjectURL(blob);
            setTimeout(function () {
                _this.saveLink.href = objectUrl;
                _this.saveLink.download = _this.fileName;
                _this.click();
                _this.revoke(objectUrl);
                _this.readyState = FileSaver.DONE;
            }, 0);
            return possibleConstructorReturn(_this);
        }

        if ((is_chrome_ios || force && is_safari) && window.FileReader) {
            // Safari doesn't allow downloading of blob urls
            var reader = new FileReader();
            reader.onloadend = function () {
                var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
                var popup = window.open(url, '_blank');
                if (!popup) {
                    window.location.href = url;
                }
                url = void 0; // release reference before dispatching
                _this.readyState = FileSaver.DONE;
            };
            reader.readAsDataURL(blob);
            _this.readyState = FileSaver.INIT;
            return possibleConstructorReturn(_this);
        }

        if (!objectUrl) {
            objectUrl = window.URL.createObjectURL(blob);
        }
        if (force) {
            window.location.href = objectUrl;
        } else {
            var opened = window.open(objectUrl, "_blank");
            if (!opened) {
                // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
                window.location.href = objectUrl;
            }
        }
        _this.readyState = FileSaver.DONE;
        _this.revoke(objectUrl);
        return _this;
    }

    createClass(FileSaver, [{
        key: "click",
        value: function click() {
            var clickEvent = new MouseEvent("click");
            this.saveLink.dispatchEvent(clickEvent);
        }
    }, {
        key: "revoke",
        value: function revoke(file) {
            setTimeout(function () {
                if (typeof file === "string") {
                    window.URL.revokeObjectURL(file);
                } else {
                    file.remove();
                }
            }, 1000 * 40);
        }
    }], [{
        key: "saveAs",
        value: function saveAs(blob, fileName) {
            var blobOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { type: "text/plain;charset=utf-8" };

            if (!(blob instanceof Blob)) {
                var value = blob;
                if (!Array.isArray(value)) {
                    value = [value];
                }
                blob = new Blob(value, blobOptions);
            }
            var fileSaver = new FileSaver(blob, fileName);

            return fileSaver;
        }
    }]);
    return FileSaver;
}(Dispatchable);

FileSaver.readyState = FileSaver.INIT = 0;
FileSaver.WRITING = 1;
FileSaver.DONE = 2;

if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
    FileSaver.saveAs = function (blob, name, no_auto_bom) {
        name = name || blob.name || "download";

        if (!no_auto_bom) {
            blob = autoBom(blob);
        }
        return navigator.msSaveOrOpenBlob(blob, name);
    };
}

// Plugins should be used to extends on runtime the functionality of a class, to easily split functionality

var Plugin = function (_Dispatchable) {
    inherits(Plugin, _Dispatchable);

    function Plugin(parent) {
        classCallCheck(this, Plugin);

        var _this = possibleConstructorReturn(this, (Plugin.__proto__ || Object.getPrototypeOf(Plugin)).call(this));

        _this.linkToParent(parent);
        return _this;
    }

    createClass(Plugin, [{
        key: "linkToParent",
        value: function linkToParent(parent) {
            this.parent = parent;
        }
    }, {
        key: "name",
        value: function name() {
            return this.constructor.pluginName();
        }
    }], [{
        key: "pluginName",
        value: function pluginName() {
            return this.name;
        }
    }]);
    return Plugin;
}(Dispatchable);

// TODO: rename this to use Mixin in title


var Pluginable = function Pluginable(BaseClass) {
    return function (_BaseClass) {
        inherits(Pluginable, _BaseClass);

        function Pluginable() {
            classCallCheck(this, Pluginable);
            return possibleConstructorReturn(this, (Pluginable.__proto__ || Object.getPrototypeOf(Pluginable)).apply(this, arguments));
        }

        createClass(Pluginable, [{
            key: "registerPlugin",

            // TODO: this should probably take in a plugin instance also
            value: function registerPlugin(PluginClass) {
                if (!this.hasOwnProperty("plugins")) {
                    this.plugins = new Map();
                }
                // TODO: figure out plugin dependencies
                var plugin = new PluginClass(this);
                var pluginName = plugin.name();

                if (this.plugins.has(pluginName)) {
                    console.error("You are overwriting an existing plugin: ", pluginName, " for object ", this);
                }

                this.plugins.set(pluginName, plugin);
            }
        }, {
            key: "removePlugin",
            value: function removePlugin(pluginName) {
                var plugin = this.getPlugin(pluginName);
                if (plugin) {
                    plugin.remove(this);
                    this.plugins.delete(plugin.name());
                } else {
                    console.error("Can't remove plugin ", pluginName);
                }
            }
        }, {
            key: "getPlugin",
            value: function getPlugin(pluginName) {
                if (!(typeof pluginName === "string")) {
                    pluginName = pluginName.pluginName();
                }
                if (this.plugins) {
                    return this.plugins.get(pluginName);
                } else {
                    return null;
                }
            }
        }]);
        return Pluginable;
    }(BaseClass);
};

var _class$4, _temp$4;

// Class for working with the Window.localStorage and Window.sessionStorage objects
// All keys are prefixed with our custom name, so we don't have to worry about polluting the global storage namespace
// Keys must be strings, and values are modified by the serialize/deserialize methods,
// which by default involve JSON conversion
var StorageMap = (_temp$4 = _class$4 = function (_Dispatchable) {
    inherits(StorageMap, _Dispatchable);

    function StorageMap(storage) {
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        classCallCheck(this, StorageMap);

        var _this = possibleConstructorReturn(this, (StorageMap.__proto__ || Object.getPrototypeOf(StorageMap)).call(this));

        _this.storage = storage;
        _this.name = name;
        _this.prefix = name + _this.constructor.SEPARATOR;
        return _this;
    }

    createClass(StorageMap, [{
        key: "getPrefix",
        value: function getPrefix() {
            return this.prefix;
        }
    }, {
        key: "getRawKey",
        value: function getRawKey(key) {
            return this.getPrefix() + key;
        }

        // Method to serialize the values

    }, {
        key: "serialize",
        value: function serialize(value) {
            return JSON.stringify(value);
        }

        // Method to deserialize the value (which can be null if there is no value)

    }, {
        key: "deserialize",
        value: function deserialize(value) {
            return value && JSON.parse(value);
        }
    }, {
        key: "set",
        value: function set$$1(key, value) {
            try {
                this.storage.setItem(this.getRawKey(key), this.serialize(value));
            } catch (e) {
                return false;
            }
            return true;
        }
    }, {
        key: "delete",
        value: function _delete(key) {
            this.storage.removeItem(this.getRawKey(key));
        }
    }, {
        key: "getRaw",
        value: function getRaw(key) {
            return this.storage.getItem(this.getRawKey(key));
        }
    }, {
        key: "get",
        value: function get$$1(key) {
            var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var value = this.getRaw(key);
            if (value == null) {
                return defaultValue;
            }
            return this.deserialize(value);
        }
    }, {
        key: "has",
        value: function has(key) {
            return this.getRaw(key) != null;
        }
    }, {
        key: "keys",
        value: function keys() {
            var result = [];
            var totalStorageKeys = this.storage.length;
            var prefixLenth = this.getPrefix().length;
            for (var i = 0; i < totalStorageKeys; i++) {
                var key = this.storage.key(i);
                if (key.startsWith(this.getPrefix())) {
                    result.push(key.substr(prefixLenth));
                }
            }
            return result;
        }
    }, {
        key: "values",
        value: function values() {
            var _this2 = this;

            return this.keys().map(function (key) {
                return _this2.get(key);
            });
        }
    }, {
        key: "entries",
        value: function entries() {
            var _this3 = this;

            return this.keys().map(function (key) {
                return [key, _this3.get(key)];
            });
        }
    }, {
        key: Symbol.iterator,
        value: function value() {
            return this.entries();
        }

        // Remove all of the keys that start with out prefix

    }, {
        key: "clear",
        value: function clear() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    this.delete(key);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);
    return StorageMap;
}(Dispatchable), _class$4.SEPARATOR = "-@#%-", _temp$4);

// SessionStorageMap can be used to preserve data on tab refreshes

var SessionStorageMap = function (_StorageMap) {
    inherits(SessionStorageMap, _StorageMap);

    function SessionStorageMap() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        classCallCheck(this, SessionStorageMap);
        return possibleConstructorReturn(this, (SessionStorageMap.__proto__ || Object.getPrototypeOf(SessionStorageMap)).call(this, window.sessionStorage, name));
    }

    return SessionStorageMap;
}(StorageMap);

// LocalStorageMap can be used to store data across all our tabs
var LocalStorageMap = function (_StorageMap2) {
    inherits(LocalStorageMap, _StorageMap2);

    function LocalStorageMap() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        classCallCheck(this, LocalStorageMap);
        return possibleConstructorReturn(this, (LocalStorageMap.__proto__ || Object.getPrototypeOf(LocalStorageMap)).call(this, window.localStorage, name));
    }

    // Since we don't want a listener attached to window storage event for each map, we create a global one
    // Any raw key that contains our separator has its original map identified and gets dispatched only for that map


    createClass(LocalStorageMap, [{
        key: "addChangeListener",


        // Add a listener for all change event on the current map
        // Only works if we're being backed by Window.localStorage and only received events from other tabs (not the current tab)
        // The event has the following fields: key, oldValue, newValue, url, storageArea, originalEvent
        // The key is modified to be the same the one you used in the map
        value: function addChangeListener(callback) {
            var _this6 = this;

            var doDeserialization = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var realCallback = callback;
            if (doDeserialization) {
                realCallback = function realCallback(event) {
                    event.oldValue = _this6.deserialize(event.oldValue);
                    event.newValue = _this6.deserialize(event.newValue);
                    callback(event);
                };
            }

            return this.constructor.getChangeDispatchable().addListener(this.name, realCallback);
        }
    }], [{
        key: "getChangeDispatchable",
        value: function getChangeDispatchable() {
            var _this7 = this;

            if (!this.CHANGE_DISPATCHABLE) {
                this.CHANGE_DISPATCHABLE = new Dispatchable();
                window.addEventListener("storage", function (event) {
                    var separatorIndex = event.key.indexOf(_this7.SEPARATOR);
                    if (separatorIndex === -1) {
                        // This is not an event associated with a storage map
                        return;
                    }
                    var name = event.key.substr(0, separatorIndex);
                    var actualKey = event.key.substr(separatorIndex + _this7.SEPARATOR.length);
                    var newEvent = {
                        originalEvent: event,
                        key: actualKey,
                        oldValue: event.oldValue,
                        newValue: event.newValue
                    };
                    _this7.CHANGE_DISPATCHABLE.dispatch(name, newEvent);
                });
            }
            return this.CHANGE_DISPATCHABLE;
        }
    }]);
    return LocalStorageMap;
}(StorageMap);

// TODO: might need a redesign, to handle full urls

var URLRouterClass = function (_Dispatchable) {
    inherits(URLRouterClass, _Dispatchable);

    function URLRouterClass() {
        classCallCheck(this, URLRouterClass);

        var _this = possibleConstructorReturn(this, (URLRouterClass.__proto__ || Object.getPrototypeOf(URLRouterClass)).call(this));

        window.onhashchange = function () {
            _this.routeCallback();
        };
        return _this;
    }

    createClass(URLRouterClass, [{
        key: "routeCallback",
        value: function routeCallback() {
            var location = this.getLocation();
            if (location) {
                this.dispatch("route", location);
            }
        }
    }, {
        key: "addRouteListener",
        value: function addRouteListener(callback) {
            return this.addListener("route", callback);
        }
    }, {
        key: "removeRouteListener",
        value: function removeRouteListener(callback) {
            this.removeListener("route", callback);
        }
    }, {
        key: "route",
        value: function route() {
            var args = Array.from(arguments);

            // we allow the function to be called with an array of arguments
            args = unwrapArray(args);

            var newPath = "#" + args.join("/");

            if (newPath === window.location.hash) {
                return; // prevent stackoverflow when accidentally routing in callback
            }

            // Do we need to use state object?
            history.pushState({}, "", newPath);
            this.routeCallback();
        }
    }, {
        key: "routeNewTab",
        value: function routeNewTab() {
            var args = Array.from(arguments);

            // we allow the function to be called with an array of arguments
            args = unwrapArray(args);

            var newPath = window.location.origin + window.location.pathname + "#" + args.join("/");
            window.open(newPath, "_blank");
        }
    }, {
        key: "getLocation",
        value: function getLocation() {
            var hash = window.location.hash;
            if (hash.length === 0) {
                return {
                    location: hash,
                    args: []
                };
            } else if (/^#(?:[\w+-]\/?)+$/.test(hash)) {
                // Check if hash is of type '#foo/bar'. Test guarantees non-empty array.
                var args = hash.slice(1).split("/"); // slice to ignore hash
                if (args[args.length - 1].length === 0) {
                    // In case of trailing '/'
                    args.pop();
                }

                return {
                    location: hash,
                    args: args
                };
            } else {
                console.log("Invalid hash route ", hash);
                return null;
            }
        }
    }]);
    return URLRouterClass;
}(Dispatchable);

// Singleton


var URLRouter = new URLRouterClass();

// Primitive utils for wrapping browser info
var Device = function () {
    function Device() {
        classCallCheck(this, Device);
    }

    createClass(Device, null, [{
        key: "isTouchDevice",
        value: function isTouchDevice() {
            if (!this.hasOwnProperty("_isTouchDevice")) {
                this._isTouchDevice = !!("createTouch" in window.document || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 || "ontouchstart" in window);
            }
            return this._isTouchDevice;
        }
    }, {
        key: "isMobileDevice",
        value: function isMobileDevice() {
            if (!this.hasOwnProperty("_isMobileDevice")) {
                var mobileDevices = ["Android", "webOS", "iPad", "iPhone", "iPod", "BlackBerry", "Windows Phone"];
                this._isMobileDevice = false;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = mobileDevices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var device = _step.value;

                        if (navigator.userAgent.indexOf(device) !== -1) {
                            this._isMobileDevice = true;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            return this._isMobileDevice;
        }
    }, {
        key: "getEventTouchIdentifier",
        value: function getEventTouchIdentifier(event) {
            return Math.min.apply(Math, toConsumableArray([].concat(toConsumableArray(event.touches)).map(function (touch) {
                return touch.identifier;
            })));
        }
    }, {
        key: "getEventTouch",
        value: function getEventTouch(event) {
            var identifier = this.getEventTouchIdentifier(event);
            return [].concat(toConsumableArray(event.touches)).find(function (touch) {
                return touch.identifier === identifier;
            });
        }
    }, {
        key: "getEventCoord",
        value: function getEventCoord(event, axis) {
            var reference = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "client";

            var coordName = reference + axis;
            if (event[coordName]) {
                return event[coordName];
            }
            if (event.touches) {
                return this.getEventTouch(event)[coordName];
            }
            if (event.originalEvent) {
                return this.getEventCoord(event.originalEvent, axis, reference);
            }

            console.warn("Couldn't find coordinates for event. Maybe wrong reference point? (client/page/screen)");
        }
    }, {
        key: "getEventX",
        value: function getEventX(event) {
            var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "client";

            return this.getEventCoord(event, "X", reference);
        }
    }, {
        key: "getEventY",
        value: function getEventY(event) {
            var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "client";

            return this.getEventCoord(event, "Y", reference);
        }
    }, {
        key: "getBrowser",
        value: function getBrowser() {
            // TODO: should try to use navigator
            if (!!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0) {
                return "Opera";
            }
            if (typeof InstallTrigger !== 'undefined') {
                return "Firefox";
            }
            if (Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0) {
                return "Safari";
            }
            if (document.documentMode) {
                return "Internet Explorer";
            }
            if (window.StyleMedia) {
                return "Edge";
            }
            if (window.chrome && window.chrome.webstore) {
                return "Chrome";
            }
            return "Unknown";
        }
    }, {
        key: "supportsEvent",
        value: function supportsEvent(eventName) {
            if (!this.cachedSupportedValues.has(eventName)) {
                var element = document.createElement("div");
                var onEventName = "on" + eventName;
                var isSupported = onEventName in element;
                if (!isSupported) {
                    element.setAttribute(onEventName, "return;");
                    isSupported = typeof element[onEventName] === "function";
                }
                element = null;
                this.cachedSupportedValues.set(eventName, isSupported);
            }
            return this.cachedSupportedValues.get(eventName);
        }
    }]);
    return Device;
}();

Device.cachedSupportedValues = new Map();

var Deque = function () {
    function Deque() {
        classCallCheck(this, Deque);

        this._values = new Array(8);
        this._length = 0;
        this._offset = this._values.length / 2 | 0;
    }

    createClass(Deque, [{
        key: "shouldShrink",
        value: function shouldShrink() {
            return this._values.length > 4 * this._length + 8;
        }
    }, {
        key: "maybeShrink",
        value: function maybeShrink() {
            if (this.shouldShrink()) {
                this.rebalance(true);
            }
        }
    }, {
        key: "rebalance",
        value: function rebalance(forceResize) {
            var capacity = this._values.length;
            var length = this._length;
            var optimalCapacity = length * 1.618 + 8 | 0;
            var shouldResize = forceResize || capacity < optimalCapacity;

            if (shouldResize) {
                // Allocate a new array and balance objects around the middle
                var values = new Array(optimalCapacity);
                var optimalOffset = optimalCapacity / 2 - length / 2 | 0;
                for (var i = 0; i < length; i += 1) {
                    values[optimalOffset + i] = this._values[this._offset + i];
                }
                this._values = values;
                this._offset = optimalOffset;
            } else {
                //Just balance the elements in the middle of the array
                var _optimalOffset = capacity / 2 - length / 2 | 0;
                this._values.copyWithin(_optimalOffset, this._offset, this._offset + this._length);
                // Remove references, to not mess up gc
                if (_optimalOffset < this._offset) {
                    this._values.fill(undefined, _optimalOffset + this._length, this._offset + this._length);
                } else {
                    this._values.fill(undefined, this._offset + this._length, _optimalOffset + this._length);
                }
                this._offset = _optimalOffset;
            }
        }
    }, {
        key: "pushFront",
        value: function pushFront(value) {
            if (this._offset == 0) {
                this.rebalance();
            }
            this._values[--this._offset] = value;
            this._length += 1;
        }
    }, {
        key: "popFront",
        value: function popFront() {
            var value = this.peekBack();

            this._values[this._offset++] = undefined;
            this._length -= 1;
            this.maybeShrink();

            return value;
        }
    }, {
        key: "peekFront",
        value: function peekFront() {
            if (this._length == 0) {
                throw Error("Invalid operation, empty deque");
            }
            return this._values[this._offset];
        }
    }, {
        key: "pushBack",
        value: function pushBack(value) {
            if (this._offset + this._length === this._values.length) {
                this.rebalance();
            }
            this._values[this._offset + this._length] = value;
            this._length += 1;
        }
    }, {
        key: "popBack",
        value: function popBack() {
            var value = this.peekFront();

            this._length -= 1;
            this._values[this._offset + this._length] = undefined;
            this.maybeShrink();

            return value;
        }
    }, {
        key: "peekBack",
        value: function peekBack() {
            if (this._length == 0) {
                throw Error("Invalid operation, empty deque");
            }
            return this._values[this._offset + this._length - 1];
        }
    }, {
        key: "get",
        value: function get$$1(index) {
            if (index < 0 || index >= this._length) {
                throw Error("Invalid index", index);
            }
            return this._values[this._offset + index];
        }
    }, {
        key: "toArray",
        value: function toArray$$1() {
            return this._values.slice(this._offset, this._offset + this._length);
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.toArray().toString();
        }
    }, {
        key: "entries",
        value: function entries() {
            // TODO: implement with yield?
            return this.toArray()[Symbol.iterator];
        }
    }, {
        key: Symbol.iterator,
        value: function value() {
            return this.entries();
        }
    }, {
        key: "length",
        get: function get$$1() {
            return this._length;
        },
        set: function set$$1(value) {
            throw Error("Can't resize a deque");
        }
    }]);
    return Deque;
}();

// Also support the standard javascript method names


Deque.prototype.pop = Deque.prototype.popBack;
Deque.prototype.push = Deque.prototype.pushBack;
Deque.prototype.shift = Deque.prototype.popFront;
Deque.prototype.unshift = Deque.prototype.pushFront;

function isDescriptor(desc) {
    if (!desc || !desc.hasOwnProperty) {
        return false;
    }

    var keys = ['value', 'initializer', 'get', 'set'];

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (desc.hasOwnProperty(key)) {
                return true;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return false;
}

function decorate(handleDescriptor, entryArgs) {
    if (isDescriptor(entryArgs[entryArgs.length - 1])) {
        return handleDescriptor.apply(undefined, toConsumableArray(entryArgs).concat([[]]));
    } else {
        return function () {
            return handleDescriptor.apply(undefined, Array.prototype.slice.call(arguments).concat([entryArgs]));
        };
    }
}

function createDefaultSetter(key) {
    return function set$$1(newValue) {
        Object.defineProperty(this, key, {
            configurable: true,
            writable: true,
            // IS enumerable when reassigned by the outside word
            enumerable: true,
            value: newValue
        });

        return newValue;
    };
}

var DEFAULT_MSG = 'This function will be removed in future versions.';

function handleDescriptor(target, key, descriptor, _ref) {
    var _ref2 = slicedToArray(_ref, 2),
        _ref2$ = _ref2[0],
        msg = _ref2$ === undefined ? DEFAULT_MSG : _ref2$,
        _ref2$2 = _ref2[1],
        options = _ref2$2 === undefined ? {} : _ref2$2;

    if (typeof descriptor.value !== 'function') {
        throw new SyntaxError('Only functions can be marked as deprecated');
    }

    var methodSignature = target.constructor.name + '#' + key;

    if (options.url) {
        msg += '\n\n        See ' + options.url + ' for more details.\n\n';
    }

    // return {
    //     ...descriptor,
    //     value: function deprecationWrapper() {
    //         console.warn(`DEPRECATION ${methodSignature}: ${msg}`);
    //         return descriptor.value.apply(this, arguments);
    //     }
    // };
    return Object.assign({}, descriptor, {
        value: function deprecationWrapper() {
            console.warn('DEPRECATION ' + methodSignature + ': ' + msg);
            return descriptor.value.apply(this, arguments);
        }
    });
}

function deprecate() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    return decorate(handleDescriptor, args);
}

function handleDescriptor$1(target, key, descriptor) {
    var configurable = descriptor.configurable,
        enumerable = descriptor.enumerable,
        initializer = descriptor.initializer,
        value = descriptor.value;
    // The "key" property is constructed with accessor descriptor (getter / setter),
    // but the first time the getter is used, the property is reconstructed with data descriptor.

    return {
        configurable: configurable,
        enumerable: enumerable,

        get: function get() {
            // This happens if someone accesses the property directly on the prototype
            if (this === target) {
                return;
            }

            var ret = initializer ? initializer.call(this) : value;

            Object.defineProperty(this, key, {
                configurable: configurable,
                enumerable: enumerable,
                writable: true,
                value: ret
            });

            return ret;
        },


        set: createDefaultSetter(key)
    };
}

function lazyInitialize() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    return decorate(handleDescriptor$1, args);
}

var lazyInit = lazyInitialize;

// TODO: this file should be refactored

function evaluateInitializer(target, initializer, value) {
    var result = initializer ? initializer.call(target) : value;
    if (typeof result === "function") {
        result = result();
    }
    return result;
}

function handleDescriptor$2(target, key, descriptor) {
    var initializer = descriptor.initializer,
        value = descriptor.value;

    // Change the prototype of this object to keep the old initializer

    target["__style__" + key] = { initializer: initializer, value: value };

    descriptor.initializer = function () {
        var style = evaluateInitializer(this, initializer, value);
        return this.css(style);
    };
    delete descriptor.value;

    return lazyInitialize(target, key, descriptor);
}

function lazyCSS() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    return decorate(handleDescriptor$2, args);
}

function handleInheritDescriptor(target, key, descriptor) {
    var initializer = descriptor.initializer,
        value = descriptor.value;

    descriptor.initializer = function () {
        // Get the value we set in the prototype of the parent object
        var parentDesc = Object.getPrototypeOf(this.__proto__)["__style__" + key];
        var parentStyle = evaluateInitializer(this, parentDesc.initializer, parentDesc.value);

        var style = evaluateInitializer(this, initializer, value);
        style = Object.assign(parentStyle, style);

        return style;
    };
    delete descriptor.value;

    return lazyCSS(target, key, descriptor);
}

function lazyInheritCSS() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
    }

    return decorate(handleInheritDescriptor, args);
}

function handleDescriptor$3(target, key, descriptor) {
    descriptor.writable = false;
    return descriptor;
}

function readOnly() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    return decorate(handleDescriptor$3, args);
}

// TODO: add bind decorator

// TODO: this file is in dire need of a rewrite
var StringStream = function () {
    function StringStream(string, options) {
        classCallCheck(this, StringStream);

        this.string = string;
        this.pointer = 0;
    }

    createClass(StringStream, [{
        key: "done",
        value: function done() {
            return this.pointer >= this.string.length;
        }
    }, {
        key: "advance",
        value: function advance() {
            var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            this.pointer += steps;
        }
    }, {
        key: "char",
        value: function char() {
            var ch = this.string.charAt(this.pointer);
            this.pointer += 1;
            return ch;
        }
    }, {
        key: "whitespace",
        value: function whitespace() {
            var whitespaceChar = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /\s/;

            var whitespaceStart = this.pointer;

            while (!this.done() && whitespaceChar.test(this.at(0))) {
                this.pointer += 1;
            }

            // Return the actual whitespace in case it is needed
            return this.string.substring(whitespaceStart, this.pointer);
        }

        // Gets first encountered non-whitespace substring

    }, {
        key: "word",
        value: function word() {
            var validChars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /\S/;
            var skipWhitespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (skipWhitespace) {
                this.whitespace();
            }

            var wordStart = this.pointer;
            while (!this.done() && validChars.test(this.at(0))) {
                this.pointer += 1;
            }
            return this.string.substring(wordStart, this.pointer);
        }
    }, {
        key: "number",
        value: function number() {
            var skipWhitespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (skipWhitespace) {
                this.whitespace();
            }

            var nanString = "NaN";
            if (this.startsWith(nanString)) {
                this.advance(nanString.length);
                return NaN;
            }

            var sign = "+";
            if (this.at(0) === "-" || this.at(0) === "+") {
                sign = this.char();
            }

            var infinityString = "Infinity";
            if (this.startsWith(infinityString)) {
                this.advance(infinityString.length);
                return sign === "+" ? Infinity : -Infinity;
            }

            var isDigit = function isDigit(char) {
                return char >= "0" || char <= "9";
            };

            if (this.at(0) === "0" && (this.at(1) === "X" || this.at(1) === "x")) {
                // hexadecimal number
                this.advance(2);

                var isHexDigit = function isHexDigit(char) {
                    return isDigit(char) || char >= "A" && char <= "F" || char >= "a" && char <= "f";
                };

                var _numberStart = this.pointer;
                while (!this.done() && isHexDigit(this.at(0))) {
                    this.pointer += 1;
                }

                return parseInt(sign + this.string.substring(_numberStart), 16);
            }

            var numberStart = this.pointer;
            while (!this.done() && isDigit(this.at(1))) {
                this.pointer += 1;
                if (this.peek === ".") {
                    this.advance(1);
                    while (!this.done() && isDigit(this.at(1))) {
                        this.pointer += 1;
                    }
                    break;
                }
            }
            return parseFloat(sign + this.string.substring(numberStart, this.pointer));
        }

        // Gets everything up to delimiter, usually end of line, limited to maxLength

    }, {
        key: "line",
        value: function line() {
            var delimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /\r*\n/;
            var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;

            if (delimiter instanceof RegExp) {
                // Treat regex differently. It will probably be slower.
                var str = this.string.substring(this.pointer);
                var delimiterMatch = str.match(delimiter);

                var _delimiterIndex = void 0,
                    delimiterLength = void 0;
                if (delimiterMatch === null) {
                    // End of string encountered
                    _delimiterIndex = str.length;
                    delimiterLength = 0;
                } else {
                    _delimiterIndex = delimiterMatch.index;
                    delimiterLength = delimiterMatch[0].length;
                }

                if (_delimiterIndex >= maxLength) {
                    this.pointer += maxLength;
                    return str.substring(0, maxLength);
                }

                this.advance(_delimiterIndex + delimiterLength);
                return str.substring(0, _delimiterIndex);
            }

            var delimiterIndex = this.string.indexOf(delimiter, this.pointer);

            if (delimiterIndex === -1) {
                delimiterIndex = this.string.length;
            }

            if (delimiterIndex - this.pointer > maxLength) {
                var _result = this.string.substring(this.pointer, this.pointer + maxLength);
                this.advance(maxLength);
                return _result;
            }

            var result = this.string.substring(this.pointer, delimiterIndex);
            this.pointer = delimiterIndex + delimiter.length;
            return result;
        }

        // The following methods have no side effects

        // Access char at offset position, relative to current pointer

    }, {
        key: "at",
        value: function at(index) {
            return this.string.charAt(this.pointer + index);
        }
    }, {
        key: "peek",
        value: function peek() {
            var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            return this.string.substring(this.pointer, this.pointer + length);
        }
    }, {
        key: "startsWith",
        value: function startsWith(prefix) {
            if (prefix instanceof RegExp) {
                // we modify the regex to only check for the beginning of the string
                prefix = new RegExp("^" + prefix.toString().slice(1, -1));
                return prefix.test(this.string.substring(this.pointer));
            }
            return this.peek(prefix.length) === prefix;
        }

        // Returns first position of match

    }, {
        key: "search",
        value: function search(pattern) {
            var position = void 0;
            if (pattern instanceof RegExp) {
                position = this.string.substring(this.pointer).search(pattern);
            } else {
                position = this.string.indexOf(pattern, this.pointer) - this.pointer;
            }
            return position < 0 ? -1 : position;
        }
    }, {
        key: "clone",
        value: function clone() {
            var newStream = new this.constructor(this.string);
            newStream.pointer = this.pointer;
            return newStream;
        }
    }]);
    return StringStream;
}();

function kmp(input) {
    if (input.length === 0) {
        return [];
    }

    var prefix = [0];
    var prefixLength = 0;

    for (var i = 1; i < input.length; i += 1) {
        while (prefixLength > 0 && input[i] !== input[prefixLength]) {
            prefixLength = prefix[prefixLength];
        }

        if (input[i] === input[prefixLength]) {
            prefixLength += 1;
        }

        prefix.push(prefixLength);
    }
    return prefix;
}

var ModifierAutomation = function () {
    // build automaton from string
    function ModifierAutomation(options) {
        var _this = this;

        classCallCheck(this, ModifierAutomation);

        this.options = options;
        this.steps = 0;
        this.startNode = {
            value: null,
            startNode: true
        };
        this.node = this.startNode;

        var lastNode = this.startNode;

        var char = options.pattern.charAt(0);
        var startPatternNode = {
            value: char,
            startNode: true
        };

        var patternPrefix = kmp(options.pattern);
        var patternNode = [startPatternNode];

        if (options.leftWhitespace) {
            // We don't want to match if the first char is not preceeded by whitespace
            var whitespaceNode = {
                value: " ",
                whitespaceNode: true
            };
            whitespaceNode.next = function (input) {
                if (input === char) return startPatternNode;
                return (/\s/.test(input) ? whitespaceNode : _this.startNode
                );
            };
            lastNode.next = function (input) {
                return (/\s/.test(input) ? whitespaceNode : _this.startNode
                );
            };
            this.node = whitespaceNode;
        } else {
            lastNode.next = function (input) {
                return input === char ? startPatternNode : _this.startNode;
            };
        }
        lastNode = startPatternNode;

        var _loop = function _loop(i) {
            var char = options.pattern[i];
            var newNode = {
                value: char
            };
            patternNode.push(newNode);

            var backNode = patternPrefix[i - 1] === 0 ? _this.startNode : patternNode[patternPrefix[i - 1] - 1];

            lastNode.next = function (input) {
                if (input === char) {
                    return newNode;
                }

                return backNode.next(input);
            };
            lastNode = newNode;
        };

        for (var i = 1; i < options.pattern.length; i += 1) {
            _loop(i);
        }
        lastNode.patternLastNode = true;

        if (options.captureContent) {
            this.capture = [];
            var captureNode = {
                value: "",
                captureNode: true
            };

            // We treat the first character separately in order to support empty capture
            var _char = options.endPattern.charAt(0);
            var endCaptureNode = {
                value: _char
            };

            var endPatternPrefix = kmp(options.endPattern);
            var endPatternNodes = [endCaptureNode];

            lastNode.next = captureNode.next = function (input) {
                return input === _char ? endCaptureNode : captureNode;
            };

            lastNode = endCaptureNode;

            var _loop2 = function _loop2(i) {
                var char = options.endPattern[i];
                var newNode = {
                    value: char
                };
                endPatternNodes.push(newNode);

                var backNode = endPatternPrefix[i - 1] === 0 ? captureNode : endPatternNodes[endPatternPrefix[i - 1] - 1];

                lastNode.next = function (input) {
                    if (input === char) {
                        return newNode;
                    }
                    return backNode.next(input);
                };
                lastNode = newNode;
            };

            for (var i = 1; i < options.endPattern.length; i += 1) {
                _loop2(i);
            }

            lastNode.endPatternLastNode = true;
        }

        lastNode.endNode = true;
        lastNode.next = function (input) {
            return _this.startNode.next(input);
        };
    }

    createClass(ModifierAutomation, [{
        key: "nextState",
        value: function nextState(input) {
            this.steps += 1;

            this.node = this.node.next(input);

            if (this.node.startNode) {
                this.steps = 0;
                delete this.patternStep;
                delete this.endPatternStep;
            }

            if (this.node.patternLastNode) {
                this.patternStep = this.steps - this.options.pattern.length + 1;
            }
            if (this.node.endPatternLastNode) {
                // TODO(@all): Shouldn't it be this.options.endPattern.length instead of this.options.pattern.length?
                this.endPatternStep = this.steps - this.options.pattern.length + 1;
            }

            return this.node;
        }
    }, {
        key: "done",
        value: function done() {
            return this.node.endNode;
        }
    }]);
    return ModifierAutomation;
}();

var Modifier = function () {
    function Modifier(options) {
        classCallCheck(this, Modifier);
    }

    createClass(Modifier, [{
        key: "modify",
        value: function modify(currentArray, originalString) {
            var matcher = new ModifierAutomation({
                pattern: this.pattern,
                captureContent: this.captureContent, // TODO: some elements should not wrap
                endPattern: this.endPattern,
                leftWhitespace: this.leftWhitespace
            });

            var arrayLocation = 0;
            var currentElement = currentArray[arrayLocation];
            var newArray = [];

            for (var i = 0; i < originalString.length; i += 1) {
                var char = originalString[i];

                if (i >= currentElement.end) {
                    newArray.push(currentElement);

                    arrayLocation += 1;
                    currentElement = currentArray[arrayLocation];
                }

                if (currentElement.isJSX) {
                    matcher.nextState("\\" + char); // prevent char from advancing automata
                    continue;
                }

                matcher.nextState(char);

                if (matcher.done()) {
                    var modifierStart = i - (matcher.steps - matcher.patternStep);
                    var modifierEnd = i - (matcher.steps - matcher.endPatternStep) + this.endPattern.length;

                    var modifierCapture = [];

                    while (newArray.length > 0 && modifierStart <= newArray[newArray.length - 1].start) {
                        var element = newArray.pop();

                        modifierCapture.push(element);
                    }

                    if (newArray.length > 0 && modifierStart < newArray[newArray.length - 1].end) {
                        var _element = newArray.pop();
                        newArray.push({
                            isString: true,
                            start: _element.start,
                            end: modifierStart
                        });
                        modifierCapture.push({
                            isString: true,
                            start: modifierStart,
                            end: _element.end
                        });
                    }

                    if (currentElement.start < modifierStart) {
                        newArray.push({
                            isString: true,
                            start: currentElement.start,
                            end: modifierStart
                        });
                    }
                    modifierCapture.reverse();

                    // this is the end of the capture
                    modifierCapture.push({
                        isString: true,
                        start: Math.max(currentElement.start, modifierStart),
                        end: modifierEnd
                    });

                    newArray.push({
                        content: this.wrap(this.processChildren(modifierCapture, originalString)),
                        start: modifierStart,
                        end: modifierEnd
                    });

                    // We split the current element to in two(one will be captured, one replaces the current element
                    currentElement = {
                        isString: true,
                        start: modifierEnd,
                        end: currentElement.end
                    };
                }
            }

            if (currentElement.start < originalString.length) {
                newArray.push(currentElement);
            }

            return newArray;
        }
    }, {
        key: "processChildren",
        value: function processChildren(capture, originalString) {
            var _this2 = this;

            return capture.map(function (element) {
                return _this2.processChild(element, originalString);
            });
        }
    }, {
        key: "processChild",
        value: function processChild(element, originalString) {
            if (element.isDummy) {
                return "";
            }if (element.isString) {
                return originalString.substring(element.start, element.end);
            } else {
                return element.content;
            }
        }
    }]);
    return Modifier;
}();

function InlineModifierMixin(BaseModifierClass) {
    return function (_BaseModifierClass) {
        inherits(InlineModifier, _BaseModifierClass);

        function InlineModifier(options) {
            classCallCheck(this, InlineModifier);

            var _this3 = possibleConstructorReturn(this, (InlineModifier.__proto__ || Object.getPrototypeOf(InlineModifier)).call(this, options));

            _this3.captureContent = true;
            return _this3;
        }

        createClass(InlineModifier, [{
            key: "wrap",
            value: function wrap(content) {
                if (content.length > 0) {
                    content[0] = content[0].substring(content[0].indexOf(this.pattern) + this.pattern.length);

                    var lastElement = content.pop();
                    lastElement = lastElement.substring(0, lastElement.lastIndexOf(this.endPattern));
                    content.push(lastElement);

                    return {
                        tag: this.tag,
                        children: content
                    };
                }
            }
        }]);
        return InlineModifier;
    }(BaseModifierClass);
}

function LineStartModifierMixin(BaseModifierClass) {
    return function (_BaseModifierClass2) {
        inherits(LineStartModifier, _BaseModifierClass2);

        function LineStartModifier(options) {
            classCallCheck(this, LineStartModifier);

            var _this4 = possibleConstructorReturn(this, (LineStartModifier.__proto__ || Object.getPrototypeOf(LineStartModifier)).call(this, options));

            _this4.groupConsecutive = false;
            return _this4;
        }

        createClass(LineStartModifier, [{
            key: "isValidElement",
            value: function isValidElement(element) {
                return element.content && element.content.tag === "p" && element.content.children.length > 0 && !element.content.children[0].tag && // child is text string
                element.content.children[0].startsWith(this.pattern);
            }
        }, {
            key: "modify",
            value: function modify(currentArray, originalString) {
                var newArray = [];

                for (var i = 0; i < currentArray.length; i += 1) {
                    var element = currentArray[i];
                    if (this.isValidElement(element)) {
                        if (this.groupConsecutive) {
                            var elements = [];

                            var start = void 0,
                                end = void 0;
                            start = currentArray[i].start;
                            while (i < currentArray.length && this.isValidElement(currentArray[i])) {
                                elements.push(this.wrapItem(currentArray[i].content.children));

                                i += 1;
                            }
                            // we make sure no elements are skipped
                            i -= 1;

                            end = currentArray[i].end;

                            newArray.push({
                                start: start,
                                end: end,
                                content: this.wrap(elements)
                            });
                        } else {
                            // We use object assign here to keep the start and end properties. (Maybe along with others)
                            var newElement = Object.assign({}, element, {
                                content: this.wrap(element.content.children)
                            });
                            newArray.push(newElement);
                        }
                    } else {
                        newArray.push(element);
                    }
                }
                return newArray;
            }
        }, {
            key: "wrapItem",
            value: function wrapItem(content) {
                var firstChild = content[0];

                var patternIndex = firstChild.indexOf(this.pattern);
                var patternEnd = patternIndex + this.pattern.length;

                content[0] = firstChild.substring(patternEnd);

                return {
                    tag: this.itemTag,
                    children: content
                };
            }
        }, {
            key: "wrap",
            value: function wrap(content) {
                return {
                    tag: this.tag,
                    children: content
                };
            }
        }]);
        return LineStartModifier;
    }(BaseModifierClass);
}

function RawContentModifierMixin(BaseModifierClass) {
    return function (_BaseModifierClass3) {
        inherits(RawContentModifier, _BaseModifierClass3);

        function RawContentModifier() {
            classCallCheck(this, RawContentModifier);
            return possibleConstructorReturn(this, (RawContentModifier.__proto__ || Object.getPrototypeOf(RawContentModifier)).apply(this, arguments));
        }

        createClass(RawContentModifier, [{
            key: "processChildren",
            value: function processChildren(children, originalString) {
                if (children.length === 0) {
                    return [];
                }

                return [originalString.substring(children[0].start, children[children.length - 1].end)];
            }
        }]);
        return RawContentModifier;
    }(BaseModifierClass);
}

var BlockCodeModifier = function (_Modifier) {
    inherits(BlockCodeModifier, _Modifier);

    function BlockCodeModifier(options) {
        classCallCheck(this, BlockCodeModifier);

        var _this6 = possibleConstructorReturn(this, (BlockCodeModifier.__proto__ || Object.getPrototypeOf(BlockCodeModifier)).call(this, options));

        _this6.pattern = "```";
        _this6.endPattern = "\n```";
        _this6.leftWhitespace = true;
        _this6.captureContent = true;
        return _this6;
    }

    createClass(BlockCodeModifier, [{
        key: "processChildren",
        value: function processChildren(capture, originalString) {
            this.codeOptions = null;
            if (capture.length > 0) {
                var codeBlock = originalString.substring(capture[0].start, capture[capture.length - 1].end);

                codeBlock = codeBlock.substring(codeBlock.indexOf(this.pattern) + this.pattern.length);
                codeBlock = codeBlock.substring(0, codeBlock.lastIndexOf(this.endPattern));

                var firstLineEnd = codeBlock.indexOf("\n") + 1;
                var firstLine = codeBlock.substring(0, firstLineEnd).trim();
                codeBlock = codeBlock.substring(firstLineEnd);

                if (firstLine.length > 0) {
                    this.codeOptions = {};
                    var lineStream = new StringStream(firstLine);
                    this.codeOptions.aceMode = lineStream.word();

                    Object.assign(this.codeOptions, MarkupParser.parseOptions(lineStream));
                }

                return codeBlock;
            }
            return "";
        }
    }, {
        key: "getElement",
        value: function getElement(content) {
            return {
                tag: this.constructor.tag || "pre",
                children: [content]
            };
        }
    }, {
        key: "wrap",
        value: function wrap(content, options) {
            var codeHighlighter = this.getElement(content);

            // TODO: this code should not be here
            var codeOptions = {
                aceMode: "c_cpp",
                maxLines: 32
            };

            if (this.codeOptions) {
                Object.assign(codeOptions, this.codeOptions);
                delete this.codeOptions;
            }

            Object.assign(codeOptions, codeHighlighter);
            return codeOptions;
        }
    }]);
    return BlockCodeModifier;
}(Modifier);

var HeaderModifier = function (_LineStartModifierMix) {
    inherits(HeaderModifier, _LineStartModifierMix);

    function HeaderModifier(options) {
        classCallCheck(this, HeaderModifier);

        var _this7 = possibleConstructorReturn(this, (HeaderModifier.__proto__ || Object.getPrototypeOf(HeaderModifier)).call(this, options));

        _this7.pattern = "#";
        return _this7;
    }

    createClass(HeaderModifier, [{
        key: "wrap",
        value: function wrap(content) {
            var firstChild = content[0];

            var hashtagIndex = firstChild.indexOf("#");
            var hashtagEnd = hashtagIndex + 1;
            var headerLevel = 1;

            var nextChar = firstChild.charAt(hashtagEnd);
            if (nextChar >= "1" && nextChar <= "6") {
                headerLevel = parseInt(nextChar);
                hashtagEnd += 1;
            } else if (nextChar === "#") {
                while (headerLevel < 6 && firstChild.charAt(hashtagEnd) === "#") {
                    headerLevel += 1;
                    hashtagEnd += 1;
                }
            }

            content[0] = firstChild.substring(hashtagEnd);
            return {
                tag: "h" + headerLevel,
                children: content
            };
        }
    }]);
    return HeaderModifier;
}(LineStartModifierMixin(Modifier));

var HorizontalRuleModifier = function (_LineStartModifierMix2) {
    inherits(HorizontalRuleModifier, _LineStartModifierMix2);

    function HorizontalRuleModifier(options) {
        classCallCheck(this, HorizontalRuleModifier);

        var _this8 = possibleConstructorReturn(this, (HorizontalRuleModifier.__proto__ || Object.getPrototypeOf(HorizontalRuleModifier)).call(this, options));

        _this8.pattern = "---";
        return _this8;
    }

    createClass(HorizontalRuleModifier, [{
        key: "wrap",
        value: function wrap(content) {
            return {
                tag: "hr"
            };
        }
    }]);
    return HorizontalRuleModifier;
}(LineStartModifierMixin(Modifier));

var UnorderedListModifier = function (_LineStartModifierMix3) {
    inherits(UnorderedListModifier, _LineStartModifierMix3);

    function UnorderedListModifier(options) {
        classCallCheck(this, UnorderedListModifier);

        var _this9 = possibleConstructorReturn(this, (UnorderedListModifier.__proto__ || Object.getPrototypeOf(UnorderedListModifier)).call(this, options));

        _this9.tag = "ul";
        _this9.itemTag = "li";
        _this9.pattern = "- ";
        _this9.groupConsecutive = true;
        return _this9;
    }

    return UnorderedListModifier;
}(LineStartModifierMixin(Modifier));

var OrderedListModifier = function (_LineStartModifierMix4) {
    inherits(OrderedListModifier, _LineStartModifierMix4);

    function OrderedListModifier(options) {
        classCallCheck(this, OrderedListModifier);

        var _this10 = possibleConstructorReturn(this, (OrderedListModifier.__proto__ || Object.getPrototypeOf(OrderedListModifier)).call(this, options));

        _this10.tag = "ol";
        _this10.itemTag = "li";
        _this10.pattern = "1. ";
        _this10.groupConsecutive = true;
        return _this10;
    }

    return OrderedListModifier;
}(LineStartModifierMixin(Modifier));

var ParagraphModifier = function (_Modifier2) {
    inherits(ParagraphModifier, _Modifier2);

    function ParagraphModifier() {
        classCallCheck(this, ParagraphModifier);
        return possibleConstructorReturn(this, (ParagraphModifier.__proto__ || Object.getPrototypeOf(ParagraphModifier)).apply(this, arguments));
    }

    createClass(ParagraphModifier, [{
        key: "modify",
        value: function modify(currentArray, originalString) {
            var newArray = [];
            var capturedContent = [];
            var arrayLocation = 0;
            var currentElement = currentArray[arrayLocation];
            var lineStart = 0;

            for (var i = 0; i < originalString.length; i += 1) {
                if (i >= currentElement.end) {
                    capturedContent.push(currentElement);
                    arrayLocation += 1;
                    currentElement = currentArray[arrayLocation];
                }

                if (currentElement.isJSX) {
                    continue;
                }

                if (originalString[i] === "\n") {
                    if (currentElement.start < i) {
                        capturedContent.push({
                            isString: true,
                            start: currentElement.start,
                            end: i
                        });
                    }

                    newArray.push({
                        content: this.wrap(this.processChildren(capturedContent, originalString)),
                        start: lineStart,
                        end: i + 1
                    });
                    capturedContent = [];
                    lineStart = i + 1;

                    if (originalString[i + 1] === "\n") {
                        var start = void 0,
                            end = void 0;
                        start = i;

                        while (i + 1 < originalString.length && originalString[i + 1] === "\n") {
                            i += 1;
                        }
                        end = i + 1;

                        newArray.push({
                            content: {
                                tag: "br"
                            },
                            start: start,
                            end: end
                        });

                        lineStart = i + 1;
                    } else {
                        // TODO: these dummies break code. Refactor!
                        // newArray.push({
                        //     isDummy: true,
                        //     start: i,
                        //     end: i + 1,
                        // });
                    }

                    currentElement = {
                        isString: true,
                        start: lineStart,
                        end: currentElement.end
                    };
                }
            }

            if (currentElement.start < originalString.length) {
                capturedContent.push(currentElement);
            }
            if (capturedContent.length > 0) {
                newArray.push({
                    content: this.wrap(this.processChildren(capturedContent, originalString)),
                    start: lineStart,
                    end: originalString.length
                });
            }
            return newArray;
        }
    }, {
        key: "wrap",
        value: function wrap(capture) {
            return {
                tag: "p",
                children: capture
            };
        }
    }]);
    return ParagraphModifier;
}(Modifier);

var StrongModifier = function (_InlineModifierMixin) {
    inherits(StrongModifier, _InlineModifierMixin);

    function StrongModifier(options) {
        classCallCheck(this, StrongModifier);

        var _this12 = possibleConstructorReturn(this, (StrongModifier.__proto__ || Object.getPrototypeOf(StrongModifier)).call(this, options));

        _this12.leftWhitespace = true;
        _this12.pattern = "*";
        _this12.endPattern = "*";
        _this12.tag = "strong";
        return _this12;
    }

    return StrongModifier;
}(InlineModifierMixin(Modifier));

var ItalicModifier = function (_InlineModifierMixin2) {
    inherits(ItalicModifier, _InlineModifierMixin2);

    function ItalicModifier(options) {
        classCallCheck(this, ItalicModifier);

        var _this13 = possibleConstructorReturn(this, (ItalicModifier.__proto__ || Object.getPrototypeOf(ItalicModifier)).call(this, options));

        _this13.leftWhitespace = true;
        _this13.pattern = "/";
        _this13.endPattern = "/";
        _this13.tag = "em";
        return _this13;
    }

    return ItalicModifier;
}(InlineModifierMixin(Modifier));

var InlineCodeModifier = function (_RawContentModifierMi) {
    inherits(InlineCodeModifier, _RawContentModifierMi);

    function InlineCodeModifier(options) {
        classCallCheck(this, InlineCodeModifier);

        var _this14 = possibleConstructorReturn(this, (InlineCodeModifier.__proto__ || Object.getPrototypeOf(InlineCodeModifier)).call(this, options));

        _this14.pattern = "`";
        _this14.endPattern = "`";
        _this14.tag = "code";
        return _this14;
    }

    createClass(InlineCodeModifier, [{
        key: "processChildren",
        value: function processChildren(children, originalString) {
            if (children.length === 0) {
                return [];
            }

            return [originalString.substring(children[0].start, children[children.length - 1].end)];
        }
    }]);
    return InlineCodeModifier;
}(RawContentModifierMixin(InlineModifierMixin(Modifier)));

var InlineVarModifier = function (_RawContentModifierMi2) {
    inherits(InlineVarModifier, _RawContentModifierMi2);

    function InlineVarModifier(options) {
        classCallCheck(this, InlineVarModifier);

        var _this15 = possibleConstructorReturn(this, (InlineVarModifier.__proto__ || Object.getPrototypeOf(InlineVarModifier)).call(this, options));

        _this15.pattern = "$";
        _this15.endPattern = "$";
        _this15.tag = "var";
        return _this15;
    }

    return InlineVarModifier;
}(RawContentModifierMixin(InlineModifierMixin(Modifier)));

var InlineLatexModifier = function (_RawContentModifierMi3) {
    inherits(InlineLatexModifier, _RawContentModifierMi3);

    function InlineLatexModifier(options) {
        classCallCheck(this, InlineLatexModifier);

        var _this16 = possibleConstructorReturn(this, (InlineLatexModifier.__proto__ || Object.getPrototypeOf(InlineLatexModifier)).call(this, options));

        _this16.pattern = "$$";
        _this16.endPattern = "$$";
        _this16.tag = "Latex";
        return _this16;
    }

    return InlineLatexModifier;
}(RawContentModifierMixin(InlineModifierMixin(Modifier)));

var LinkModifier = function (_Modifier3) {
    inherits(LinkModifier, _Modifier3);

    function LinkModifier() {
        classCallCheck(this, LinkModifier);
        return possibleConstructorReturn(this, (LinkModifier.__proto__ || Object.getPrototypeOf(LinkModifier)).apply(this, arguments));
    }

    createClass(LinkModifier, [{
        key: "modify",
        value: function modify(currentArray, originalString) {
            var _this18 = this;

            var newArray = [];
            var arrayLocation = 0;
            var currentElement = currentArray[arrayLocation];
            var lineStart = 0;

            var checkAndAddUrl = function checkAndAddUrl(start, end) {
                var substr = originalString.substring(start, end);
                if (_this18.constructor.isCorrectUrl(substr)) {
                    if (currentElement.start < start) {
                        newArray.push({
                            isString: true,
                            start: currentElement.start,
                            end: start
                        });
                    }

                    newArray.push({
                        isJSX: true,
                        content: {
                            tag: "a",
                            href: substr,
                            children: [_this18.constructor.trimProtocol(substr)],
                            target: "_blank"
                        },
                        start: start,
                        end: end
                    });

                    currentElement = {
                        isString: true,
                        start: end,
                        end: currentElement.end
                    };
                }
            };

            for (var i = 0; i < originalString.length; i += 1) {
                if (i >= currentElement.end) {
                    newArray.push(currentElement);
                    arrayLocation += 1;
                    currentElement = currentArray[arrayLocation];
                }

                if (currentElement.isJSX) {
                    continue;
                }

                if (/\s/.test(originalString[i])) {
                    checkAndAddUrl(lineStart, i);
                    lineStart = i + 1;
                }
            }
            if (lineStart < originalString.length) {
                checkAndAddUrl(lineStart, originalString.length);
            }
            if (currentElement.start < originalString.length) {
                newArray.push(currentElement);
            }
            return newArray;
        }
    }], [{
        key: "isCorrectUrl",
        value: function isCorrectUrl(str) {
            if (str.startsWith("http://") || str.startsWith("https://")) {
                return true;
            }
        }
    }, {
        key: "trimProtocol",
        value: function trimProtocol(str) {
            if (str[4] === 's') {
                return str.substring(8, str.length);
            }
            return str.substring(7, str.length);
        }
    }]);
    return LinkModifier;
}(Modifier);

var MarkupModifier = Modifier;

var MarkupParser = function () {
    function MarkupParser(options) {
        classCallCheck(this, MarkupParser);

        options = options || {};

        this.modifiers = options.modifiers || this.constructor.modifiers;
        this.uiElements = options.uiElements || new Map();
    }

    createClass(MarkupParser, [{
        key: "parse",
        value: function parse(content) {
            if (!content) return [];

            var result = [];

            var arr = this.parseUIElements(content);

            for (var i = this.modifiers.length - 1; i >= 0; i -= 1) {
                var modifier = this.modifiers[i];

                arr = modifier.modify(arr, content);
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var el = _step.value;

                    if (el.isDummy) {
                        // just skip it
                    } else if (el.isString) {
                        result.push(content.substring(el.start, el.end));
                    } else {
                        result.push(el.content);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return result;
        }
    }, {
        key: "parseUIElements",
        value: function parseUIElements(content) {
            var stream = new StringStream(content);

            var result = [];
            var textStart = 0;

            while (!stream.done()) {
                var char = stream.char();

                if (char === "<" && /[a-zA-Z]/.test(stream.at(0))) {
                    stream.pointer -= 1; //step back to beginning of ui element
                    var elementStart = stream.pointer;
                    var uiElement = void 0;
                    try {
                        uiElement = this.parseUIElement(stream);
                    } catch (e) {
                        // failed to parse jsx element
                        continue;
                    }

                    if (this.uiElements.has(uiElement.tag)) {
                        result.push({
                            isString: true,
                            start: textStart,
                            end: elementStart
                        });

                        result.push({
                            content: uiElement,
                            isJSX: true,
                            start: elementStart,
                            end: stream.pointer
                        });
                        textStart = stream.pointer;
                    }
                }
            }

            if (textStart < content.length) {
                result.push({
                    isString: true,
                    start: textStart,
                    end: content.length
                });
            }

            return result;
        }
    }, {
        key: "parseUIElement",
        value: function parseUIElement(stream) {
            var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\/?>/;

            // content should be of type <ClassName option1="string" option2={{jsonObject: true}} />
            // TODO: support nested elements like <ClassName><NestedClass /></ClassName>

            stream.whitespace();
            if (stream.done()) {
                return null;
            }

            if (stream.at(0) !== "<") {
                throw Error("Invalid UIElement declaration.");
            }

            var result = {};

            stream.char(); // skip the '<'

            result.tag = stream.word();
            stream.whitespace();

            Object.assign(result, this.parseOptions(stream, delimiter));
            stream.line(delimiter);

            return result;
        }
    }, {
        key: "parseOptions",
        value: function parseOptions(stream, optionsEnd) {
            return this.constructor.parseOptions(stream, optionsEnd);
        }

        // optionsEnd cannot include whitespace or start with '='

    }, {
        key: "parseTextLine",
        value: function parseTextLine(stream) {

            var capturedContent = [];

            var textStart = stream.pointer;
            var contentStart = stream.pointer;

            while (!stream.done()) {
                if (stream.startsWith(/\s+\r*\n/)) {
                    // end of line, stop here
                    break;
                }

                if (stream.at(0) === "<") {
                    capturedContent.push({
                        content: stream.string.substring(contentStart, stream.pointer),
                        start: contentStart,
                        end: stream.pointer
                    });
                    var uiElementStart = stream.pointer;
                    var uiElement = this.parseUIElement(stream, /\/*>/);
                    capturedContent.push({
                        content: uiElement,
                        start: uiElementStart,
                        end: stream.pointer
                    });
                    contentStart = stream.pointer;
                    continue;
                }

                var char = stream.char();

                if (char === "\\") {
                    // escape next character
                    char += stream.char();
                }
            }

            var remainingContent = stream.string.substring(textStart, stream.pointer);
            if (remainingContent.length > 0) {
                capturedContent.push(remainingContent);
            }
            stream.line(); // delete line endings

            return capturedContent;
        }
    }], [{
        key: "parseOptions",
        value: function parseOptions(stream, optionsEnd) {
            var options = {};

            stream.whitespace();

            while (!stream.done()) {
                // argument name is anything that comes before whitespace or '='
                stream.whitespace();

                var validOptionName = /[\w$]/;
                var optionName = void 0;
                if (validOptionName.test(stream.at(0))) {
                    optionName = stream.word(validOptionName);
                }

                stream.whitespace();

                if (optionsEnd && stream.search(optionsEnd) === 0) {
                    options[optionName] = true;
                    break;
                }
                if (!optionName) {
                    throw Error("Invalid option name");
                }

                if (stream.peek() === "=") {
                    stream.char();
                    stream.whitespace();

                    if (stream.done()) {
                        throw Error("No argument given for option: " + optionName);
                    }

                    if (stream.peek() === '"') {
                        // We have a string here
                        var optionString = "";
                        var foundStringEnd = false;

                        stream.char();
                        while (!stream.done()) {
                            var char = stream.char();
                            if (char === '"') {
                                foundStringEnd = true;
                                break;
                            }
                            optionString += char;
                        }

                        if (!foundStringEnd) {
                            // You did not close that string
                            throw Error("Argument string not closed: " + optionString);
                        }
                        options[optionName] = optionString;
                    } else if (stream.peek() === '{') {
                        // Once you pop, the fun don't stop
                        var bracketCount = 0;

                        var validJSON = false;
                        var jsonString = "";
                        stream.char();

                        while (!stream.done()) {
                            var _char2 = stream.char();
                            if (_char2 === '{') {
                                bracketCount += 1;
                            } else if (_char2 === '}') {
                                if (bracketCount > 0) {
                                    bracketCount -= 1;
                                } else {
                                    // JSON ends here
                                    options[optionName] = jsonString.length > 0 ? this.parseJSON5(jsonString) : undefined;
                                    validJSON = true;
                                    break;
                                }
                            }
                            jsonString += _char2;
                        }
                        if (!validJSON) {
                            throw Error("Invalid JSON argument for option: " + optionName + ". Input: " + jsonString);
                        }
                    } else {
                        throw Error("Invalid argument for option: " + optionName + ". Need string or JSON.");
                    }
                } else {
                    options[optionName] = true;
                }
                stream.whitespace();
            }

            return options;
        }
    }]);
    return MarkupParser;
}();

MarkupParser.modifiers = [new BlockCodeModifier(), new HeaderModifier(), new HorizontalRuleModifier(), new UnorderedListModifier(), new OrderedListModifier(), new ParagraphModifier(), new InlineCodeModifier(), new InlineLatexModifier(), new InlineVarModifier(), new StrongModifier(), new ItalicModifier(), new LinkModifier()];

// json5.js
// This file is based directly off of Douglas Crockford's json_parse.js:
// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js
MarkupParser.parseJSON5 = function () {
    // This is a function that can parse a JSON5 text, producing a JavaScript
    // data structure. It is a simple, recursive descent parser. It does not use
    // eval or regular expressions, so it can be used as a model for implementing
    // a JSON5 parser in other languages.

    // We are defining the function inside of another function to avoid creating
    // global variables.

    var at = void 0,
        // The index of the current character
    lineNumber = void 0,
        // The current line number
    columnNumber = void 0,
        // The current column number
    ch = void 0; // The current character
    var escapee = {
        "'": "'",
        '"': '"',
        '\\': '\\',
        '/': '/',
        '\n': '', // Replace escaped newlines in strings w/ empty string
        b: '\b',
        f: '\f',
        n: '\n',
        r: '\r',
        t: '\t'
    };
    var text = void 0;

    var renderChar = function renderChar(chr) {
        return chr === '' ? 'EOF' : "'" + chr + "'";
    };

    var error = function error(m) {
        // Call error when something is wrong.

        var error = new SyntaxError();
        // beginning of message suffix to agree with that provided by Gecko - see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
        error.message = m + " at line " + lineNumber + " column " + columnNumber + " of the JSON5 data. Still to read: " + JSON.stringify(text.substring(at - 1, at + 19));
        error.at = at;
        // These two property names have been chosen to agree with the ones in Gecko, the only popular
        // environment which seems to supply this info on JSON.parse
        error.lineNumber = lineNumber;
        error.columnNumber = columnNumber;
        throw error;
    };

    var next = function next(c) {
        // If a c parameter is provided, verify that it matches the current character.

        if (c && c !== ch) {
            error("Expected " + renderChar(c) + " instead of " + renderChar(ch));
        }

        // Get the next character. When there are no more characters,
        // return the empty string.

        ch = text.charAt(at);
        at++;
        columnNumber++;
        if (ch === '\n' || ch === '\r' && peek() !== '\n') {
            lineNumber++;
            columnNumber = 0;
        }
        return ch;
    };

    var peek = function peek() {
        // Get the next character without consuming it or
        // assigning it to the ch varaible.

        return text.charAt(at);
    };

    var identifier = function identifier() {
        // Parse an identifier. Normally, reserved words are disallowed here, but we
        // only use this for unquoted object keys, where reserved words are allowed,
        // so we don't check for those here. References:
        // - http://es5.github.com/#x7.6
        // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
        // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
        // TODO Identifiers can have Unicode "letters" in them; add support for those.
        var key = ch;

        // Identifiers must start with a letter, _ or $.
        if (ch !== '_' && ch !== '$' && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {
            error("Bad identifier as unquoted key");
        }

        // Subsequent characters can contain digits.
        while (next() && (ch === '_' || ch === '$' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9')) {
            key += ch;
        }

        return key;
    };

    var number = function number() {
        // Parse a number value.
        var number,
            sign = '',
            string = '',
            base = 10;

        if (ch === '-' || ch === '+') {
            sign = ch;
            next(ch);
        }

        // support for Infinity (could tweak to allow other words):
        if (ch === 'I') {
            number = word();
            if (typeof number !== 'number' || isNaN(number)) {
                error('Unexpected word for number');
            }
            return sign === '-' ? -number : number;
        }

        // support for NaN
        if (ch === 'N') {
            number = word();
            if (!isNaN(number)) {
                error('expected word to be NaN');
            }
            // ignore sign as -NaN also is NaN
            return number;
        }

        if (ch === '0') {
            string += ch;
            next();
            if (ch === 'x' || ch === 'X') {
                string += ch;
                next();
                base = 16;
            } else if (ch >= '0' && ch <= '9') {
                error('Octal literal');
            }
        }

        switch (base) {
            case 10:
                while (ch >= '0' && ch <= '9') {
                    string += ch;
                    next();
                }
                if (ch === '.') {
                    string += '.';
                    while (next() && ch >= '0' && ch <= '9') {
                        string += ch;
                    }
                }
                if (ch === 'e' || ch === 'E') {
                    string += ch;
                    next();
                    if (ch === '-' || ch === '+') {
                        string += ch;
                        next();
                    }
                    while (ch >= '0' && ch <= '9') {
                        string += ch;
                        next();
                    }
                }
                break;
            case 16:
                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
                    string += ch;
                    next();
                }
                break;
        }

        if (sign === '-') {
            number = -string;
        } else {
            number = +string;
        }

        if (!isFinite(number)) {
            error("Bad number");
        } else {
            return number;
        }
    };

    var string = function string() {
        // Parse a string value.
        var hex = void 0,
            i = void 0,
            string = '',
            uffff = void 0;
        var delim = void 0; // double quote or single quote

        // When parsing for string values, we must look for ' or " and \ characters.

        if (ch === '"' || ch === "'") {
            delim = ch;
            while (next()) {
                if (ch === delim) {
                    next();
                    return string;
                } else if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (ch === '\r') {
                        if (peek() === '\n') {
                            next();
                        }
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else if (ch === '\n') {
                    // unescaped newlines are invalid; see:
                    // https://github.com/aseemk/json5/issues/24
                    // TODO this feels special-cased; are there other
                    // invalid unescaped chars?
                    break;
                } else {
                    string += ch;
                }
            }
        }
        error("Bad string");
    };

    var inlineComment = function inlineComment() {
        // Skip an inline comment, assuming this is one. The current character should
        // be the second / character in the // pair that begins this inline comment.
        // To finish the inline comment, we look for a newline or the end of the text.

        if (ch !== '/') {
            error("Not an inline comment");
        }

        do {
            next();
            if (ch === '\n' || ch === '\r') {
                next();
                return;
            }
        } while (ch);
    };

    var blockComment = function blockComment() {
        // Skip a block comment, assuming this is one. The current character should be
        // the * character in the /* pair that begins this block comment.
        // To finish the block comment, we look for an ending */ pair of characters,
        // but we also watch for the end of text before the comment is terminated.

        if (ch !== '*') {
            error("Not a block comment");
        }

        do {
            next();
            while (ch === '*') {
                next('*');
                if (ch === '/') {
                    next('/');
                    return;
                }
            }
        } while (ch);

        error("Unterminated block comment");
    };

    var comment = function comment() {
        // Skip a comment, whether inline or block-level, assuming this is one.
        // Comments always begin with a / character.

        if (ch !== '/') {
            error("Not a comment");
        }

        next('/');

        if (ch === '/') {
            inlineComment();
        } else if (ch === '*') {
            blockComment();
        } else {
            error("Unrecognized comment");
        }
    };

    var white = function white() {
        // Skip whitespace and comments.
        // Note that we're detecting comments by only a single / character.
        // This works since regular expressions are not valid JSON(5), but this will
        // break if there are other valid values that begin with a / character!

        while (ch) {
            if (ch === '/') {
                comment();
            } else if (/\s/.test(ch)) {
                next();
            } else {
                return;
            }
        }
    };

    var word = function word() {
        // true, false, or null.

        switch (ch) {
            case 't':
                next('t');
                next('r');
                next('u');
                next('e');
                return true;
            case 'f':
                next('f');
                next('a');
                next('l');
                next('s');
                next('e');
                return false;
            case 'n':
                next('n');
                next('u');
                next('l');
                next('l');
                return null;
            case 'I':
                next('I');
                next('n');
                next('f');
                next('i');
                next('n');
                next('i');
                next('t');
                next('y');
                return Infinity;
            case 'N':
                next('N');
                next('a');
                next('N');
                return NaN;
        }
        error("Unexpected " + renderChar(ch));
    };

    var value = void 0;

    var array = function array() {
        // Parse an array value.
        var array = [];

        if (ch === '[') {
            next('[');
            white();
            while (ch) {
                if (ch === ']') {
                    next(']');
                    return array; // Potentially empty array
                }
                // ES5 allows omitting elements in arrays, e.g. [,] and
                // [,null]. We don't allow this in JSON5.
                if (ch === ',') {
                    error("Missing array element");
                } else {
                    array.push(value());
                }
                white();
                // If there's no comma after this value, this needs to
                // be the end of the array.
                if (ch !== ',') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error("Bad array");
    };

    var object = function object() {
        // Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            while (ch) {
                if (ch === '}') {
                    next('}');
                    return object; // Potentially empty object
                }

                // Keys can be unquoted. If they are, they need to be
                // valid JS identifiers.
                if (ch === '"' || ch === "'") {
                    key = string();
                } else {
                    key = identifier();
                }

                white();
                next(':');
                object[key] = value();
                white();
                // If there's no comma after this pair, this needs to be
                // the end of the object.
                if (ch !== ',') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error("Bad object");
    };

    value = function value() {
        // Parse a JSON value. It could be an object, an array, a string, a number,
        // or a word.

        white();
        switch (ch) {
            case '{':
                return object();
            case '[':
                return array();
            case '"':
            case "'":
                return string();
            case '-':
            case '+':
            case '.':
                return number();
            default:
                return ch >= '0' && ch <= '9' ? number() : word();
        }
    };

    // Return the json_parse function. It will have access to all of the above
    // functions and variables.

    return function (source, reviver) {
        var result;

        text = String(source);
        at = 0;
        lineNumber = 1;
        columnNumber = 1;
        ch = ' ';
        result = value();
        white();
        if (ch) {
            error("Syntax error");
        }

        // If there is a reviver function, we recursively walk the new structure,
        // passing each name/value pair to the reviver function for possible
        // transformation, starting with a temporary root object that holds the result
        // in an empty key. If there is not a reviver function, we simply return the
        // result.

        return typeof reviver === 'function' ? function walk(holder, key) {
            var k,
                v,
                value = holder[key];
            if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = walk(value, k);
                        if (v !== undefined) {
                            value[k] = v;
                        } else {
                            delete value[k];
                        }
                    }
                }
            }
            return reviver.call(holder, key, value);
        }({ '': result }, '') : result;
    };
}();

// TODO: these should be in a unit test file, not here
function TestStringStream() {
    var tests = [];

    tests.push(function () {
        var ss = new StringStream("Ala bala    portocala");

        var temp = void 0;

        temp = ss.char();
        if (temp !== "A") {
            throw Error("char seems to fail. Expected: 'A' , got '" + temp + "'");
        }

        temp = ss.word();
        if (temp !== "la") {
            throw Error("word seems to fail. Expected: 'la' , got '" + temp + "'");
        }

        temp = ss.word();
        if (temp !== "bala") {
            throw Error("word seems to fail. Expected: 'bala' , got '" + temp + "'");
        }

        temp = ss.word();
        if (temp !== "portocala") {
            throw Error("word seems to fail. Expected: 'portocala' , got '" + temp + "'");
        }
    });

    tests.push(function () {
        var ss = new StringStream("Ala bala    portocala");

        var temp = void 0;

        temp = ss.word();
        if (temp !== "Ala") {
            throw Error("word seems to fail. Expected: 'Ala' , got '" + temp + "'");
        }

        temp = ss.char();
        if (temp !== " ") {
            throw Error("word seems to fail. Expected: ' ' , got '" + temp + "'");
        }

        temp = ss.line();
        if (temp !== "bala    portocala") {
            throw Error("line seems to fail. Expected: 'bala    portocala' , got '" + temp + "'");
        }
    });

    tests.push(function () {
        var ss = new StringStream("Buna bate toba\n Bunica bate tare\nBunica bate tobaaa \nCu maciuca-n casa mare!");

        var temp = void 0;

        temp = ss.line();
        if (temp !== "Buna bate toba") {
            throw Error("line seems to fail. Expected: 'Buna bate toba' , got '" + temp + "'");
        }

        temp = ss.word();
        if (temp !== "Bunica") {
            throw Error("word seems to fail. Expected: 'Bunica' , got '" + temp + "'");
        }

        temp = ss.line("\n");
        if (temp !== " bate tare") {
            throw Error("line seems to fail. Expected: ' bate tare' , got '" + temp + "'");
        }

        temp = ss.line("\n", 11);
        if (temp !== "Bunica bate") {
            throw Error("line seems to fail. Expected: 'Bunica bate' , got '" + temp + "'");
        }

        temp = ss.word();
        if (temp !== "tobaaa") {
            throw Error("line seems to fail. Expected: 'tobaaa' , got '" + temp + "'");
        }

        ss.char();
        temp = ss.line();
        if (temp !== "") {
            throw Error("line seems to fail. Expected: '' , got '" + temp + "'");
        }

        temp = ss.line('\n', 100);
        if (temp !== "Cu maciuca-n casa mare!") {
            throw Error("line seems to fail. Expected: 'Cu maciuca-n casa mare!' , got '" + temp + "'");
        }
    });

    var numFailed = 0;
    for (var i = 0; i < tests.length; i += 1) {
        try {
            tests[i]();
            console.log("Test ", i, " ran successfully.");
        } catch (e) {
            numFailed += 1;
            console.log("Failed StringStream test ", i, "! Reason: ", e);
        }
    }

    console.log("Finished running all tests. Failed: ", numFailed);
}

var defaultToPixelsAttributes = new Set(["border-bottom-width", "border-left-width", "border-right-width", "border-top-width", "border-width", "bottom", "font-size", "font-stretch", "height", "layer-grid-char", "layer-grid-char-spacing", "layer-grid-line", "left", "letter-spacing", "line-height", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "marker-offset", "max-height", "max-width", "min-height", "min-width", "outline-width", "padding", "padding-bottom", "padding-left", "padding-right", "padding-top", "right", "size", "top", "width", "word-spacing"]);

function CreateNodeAttributesMap(oldAttributesMap, allowedAttributesArray) {
    var allowedAttributesMap = new Map(oldAttributesMap);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = (allowedAttributesArray || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var attribute = _step.value;

            if (!attribute) continue;
            if (!Array.isArray(attribute)) {
                attribute = [attribute];
            }
            allowedAttributesMap.set(attribute[0], attribute[1] || {});
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    allowedAttributesMap.reverseNameMap = new Map();

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = allowedAttributesMap[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _step2$value = slicedToArray(_step2.value, 2),
                key = _step2$value[0],
                value = _step2$value[1];

            value = value || {};

            value.domName = value.domName || key;

            allowedAttributesMap.reverseNameMap.set(value.domName, key);

            allowedAttributesMap.set(key, value);
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return allowedAttributesMap;
}

// A class that can be used to work with a className field as with a Set, while having a toString() usable in the DOM
// It's used when a UI object has a className attribute, that a string, but we still want it to be modified if we call addClass and removeClass
// In that case, the string gets converted to a ClassNameSet
var ClassNameSet = function (_Set) {
    inherits(ClassNameSet, _Set);

    function ClassNameSet() {
        classCallCheck(this, ClassNameSet);
        return possibleConstructorReturn(this, (ClassNameSet.__proto__ || Object.getPrototypeOf(ClassNameSet)).apply(this, arguments));
    }

    createClass(ClassNameSet, [{
        key: "toString",
        value: function toString() {
            return Array.from(this).join(" ");
        }
    }], [{
        key: "create",

        // Can't use classic super in constructor since Set is build-in type and will throw an error
        // TODO: see if could still be made to have this as constructor
        value: function create(className) {
            var value = new Set(String(className || "").split(" "));
            return setObjectPrototype(value, this);
        }
    }]);
    return ClassNameSet;
}(Set);

var NodeAttributes = function () {
    function NodeAttributes(obj) {
        classCallCheck(this, NodeAttributes);

        Object.assign(this, obj);
        // className and style should be deep copied to be modifiable, the others shallow copied
        if (this.className instanceof ClassNameSet) {
            this.className = ClassNameSet.create(String(this.className));
        }
        if (this.style) {
            this.style = Object.assign({}, this.style);
        }
    }

    // TODO: should this use the domName or the reverseName? Still needs work


    createClass(NodeAttributes, [{
        key: "setAttribute",
        value: function setAttribute(key, value, node) {
            var attributesMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.constructor.defaultAttributesMap;

            // TODO: might want to find a better way than whitelistAttributes field to do this
            if (!attributesMap.has(key)) {
                this.whitelistedAttributes = this.whitelistedAttributes || {};
                this.whitelistedAttributes[key] = true;
            }
            this[key] = value;
            if (node) {
                this.applyAttribute(key, node, attributesMap);
            }
        }
    }, {
        key: "applyStyleToNode",
        value: function applyStyleToNode(key, value, node) {
            if (typeof value === "function") {
                value = value();
            }
            if ((value instanceof Number || typeof value === "number") && value != 0 && defaultToPixelsAttributes.has(dashCase(key))) {
                value = value + "px";
            }
            if (node && node.style[key] !== value) {
                node.style[key] = value;
            }
        }
    }, {
        key: "setStyle",
        value: function setStyle(key, value, node) {
            if (!(typeof key === "string" || key instanceof String)) {
                // If the key is not a string, it should be a plain object
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = Object.keys(key)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var styleKey = _step3.value;

                        this.setStyle(styleKey, key[styleKey], node);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                return;
            }
            if (value === undefined) {
                this.removeStyle(key, node);
                return;
            }
            this.style = this.style || {};
            this.style[key] = value;
            this.applyStyleToNode(key, value, node);
        }
    }, {
        key: "removeStyle",
        value: function removeStyle(key, node) {
            if (this.style) {
                delete this.style[key];
            }
            if (node && node.style[key]) {
                delete node.style[key];
            }
        }
    }, {
        key: "getClassNameSet",
        value: function getClassNameSet() {
            if (!(this.className instanceof ClassNameSet)) {
                this.className = ClassNameSet.create(this.className || "");
            }
            return this.className;
        }
    }, {
        key: "addClass",
        value: function addClass(classes, node) {
            classes = this.constructor.getClassArray(classes);

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = classes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var cls = _step4.value;

                    this.getClassNameSet().add(cls);
                    if (node) {
                        node.classList.add(cls);
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }, {
        key: "removeClass",
        value: function removeClass(classes, node) {
            classes = this.constructor.getClassArray(classes);

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = classes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var cls = _step5.value;

                    this.getClassNameSet().delete(cls);
                    if (node) {
                        node.classList.remove(cls);
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        }
    }, {
        key: "hasClass",
        value: function hasClass(className) {
            return this.getClassNameSet().has(className);
        }
    }, {
        key: "applyAttribute",
        value: function applyAttribute(key, node, attributesMap) {
            var attributeOptions = attributesMap.get(key);
            if (!attributeOptions) {
                if (this.whitelistedAttributes && key in this.whitelistedAttributes) {
                    attributeOptions = {
                        domName: key
                    };
                } else {
                    return;
                }
            }
            var value = this[key];
            if (typeof value === "function") {
                value = value();
            }
            if (attributeOptions.noValue) {
                if (value) {
                    value = "";
                } else {
                    value = undefined;
                }
            }
            if (typeof value !== "undefined") {
                node.setAttribute(attributeOptions.domName, value);
            } else {
                node.removeAttribute(attributeOptions.domName);
            }
        }
    }, {
        key: "applyClassName",
        value: function applyClassName(node) {
            if (this.className) {
                var className = String(this.className);
                if (node.className != className) {
                    node.className = className;
                }
            } else {
                if (node.className) {
                    node.removeAttribute("class");
                }
            }
        }
    }, {
        key: "apply",
        value: function apply(node, attributesMap) {
            var addedAttributes = {};
            var whitelistedAttributes = this.whitelistedAttributes || {};

            // First update existing node attributes and delete old ones
            // TODO: optimize to not run this if the node was freshly created
            var nodeAttributes = node.attributes;
            for (var i = nodeAttributes.length - 1; i >= 0; i--) {
                var attr = nodeAttributes[i];
                var attributeName = attr.name;
                if (attributeName === "style" || attributeName === "class") {
                    // TODO: maybe should do work here?
                    continue;
                }

                var key = attributesMap.reverseNameMap.get(attributeName);

                if (this.hasOwnProperty(key)) {
                    var value = this[key];
                    var attributeOptions = attributesMap.get(key);
                    if (attributeOptions && attributeOptions.noValue) {
                        if (value) {
                            value = "";
                        } else {
                            value = undefined;
                        }
                    }
                    if (value != null) {
                        node.setAttribute(attributeName, value);
                        addedAttributes[key] = true;
                    } else {
                        node.removeAttribute(attributeName);
                    }
                } else {
                    node.removeAttribute(attributeName);
                }
            }
            // Add new attributes
            for (var _key in this) {
                if (addedAttributes[_key]) {
                    continue;
                }
                this.applyAttribute(_key, node, attributesMap);
                // TODO: also whitelist data- and aria- keys here
            }

            this.applyClassName(node);

            node.removeAttribute("style");
            if (this.style) {
                for (var _key2 in this.style) {
                    this.applyStyleToNode(_key2, this.style[_key2], node);
                }
            }
        }
    }], [{
        key: "getClassArray",
        value: function getClassArray(classes) {
            if (!classes) {
                return [];
            }
            if (Array.isArray(classes)) {
                return classes.map(function (x) {
                    return String(x).trim();
                });
            } else {
                return String(classes).trim().split(" ");
            }
        }
    }]);
    return NodeAttributes;
}();

// Default node attributes, should be as few of these as possible
NodeAttributes.defaultAttributesMap = CreateNodeAttributesMap([["id"], ["action"], ["colspan"], ["default"], ["disabled", { noValue: true }], ["fixed"], ["forAttr", { domName: "for" }], // TODO: have a consistent nomenclature for there!
["hidden"], ["href"], ["rel"], ["minHeight"], ["minWidth"], ["role"], ["target"], ["HTMLtitle", { domName: "title" }], ["type"], ["placeholder"], ["src"], ["height"], ["width"]]
//["value"], // Value is intentionally disabled
);

var UI = {
    renderingStack: [] //keeps track of objects that are redrawing, to know where to assign refs automatically
};

var BaseUIElement = function (_Dispatchable) {
    inherits(BaseUIElement, _Dispatchable);

    function BaseUIElement() {
        classCallCheck(this, BaseUIElement);
        return possibleConstructorReturn(this, (BaseUIElement.__proto__ || Object.getPrototypeOf(BaseUIElement)).apply(this, arguments));
    }

    createClass(BaseUIElement, [{
        key: "canOverwrite",
        value: function canOverwrite(existingChild) {
            return this.constructor === existingChild.constructor && this.getNodeType() === existingChild.getNodeType();
        }
    }, {
        key: "applyRef",
        value: function applyRef() {
            if (this.options && this.options.ref) {
                var obj = this.options.ref.parent;
                var name = this.options.ref.name;
                obj[name] = this;
            }
        }
    }, {
        key: "removeRef",
        value: function removeRef() {
            if (this.options && this.options.ref) {
                var obj = this.options.ref.parent;
                var name = this.options.ref.name;
                if (obj[name] === this) {
                    obj[name] = undefined;
                }
            }
        }

        // Lifecycle methods, called when the element was first inserted in the DOM, and before it's removed

    }, {
        key: "onMount",
        value: function onMount() {}
    }, {
        key: "onUnmount",
        value: function onUnmount() {}
    }, {
        key: "destroyNode",
        value: function destroyNode() {
            this.onUnmount();
            this.cleanup();
            this.removeRef();
            this.node && this.node.remove();
            delete this.node; // Clear for gc
        }
    }]);
    return BaseUIElement;
}(Dispatchable);

UI.TextElement = function (_BaseUIElement) {
    inherits(UITextElement, _BaseUIElement);

    function UITextElement() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        classCallCheck(this, UITextElement);

        var _this2 = possibleConstructorReturn(this, (UITextElement.__proto__ || Object.getPrototypeOf(UITextElement)).call(this));

        if (value && value.hasOwnProperty("value")) {
            _this2.value = value.value;
            _this2.options = value;
        } else {
            _this2.value = value != null ? value : "";
        }
        return _this2;
    }

    createClass(UITextElement, [{
        key: "mount",
        value: function mount(parent, nextSibling) {
            this.parent = parent;
            if (!this.node) {
                this.createNode();
                this.applyRef();
            } else {
                this.redraw();
            }
            parent.node.insertBefore(this.node, nextSibling);
            this.onMount();
        }
    }, {
        key: "getNodeType",
        value: function getNodeType() {
            return Node.TEXT_NODE;
        }
    }, {
        key: "copyState",
        value: function copyState(element) {
            this.value = element.value;
            this.options = element.options;
        }
    }, {
        key: "createNode",
        value: function createNode() {
            this.node = document.createTextNode(this.getValue());
            if (document.STEM_DEBUG) {
                this.node.stemElement = this;
            }
            return this.node;
        }
    }, {
        key: "setValue",
        value: function setValue(value) {
            this.value = value != null ? value : "";
            if (this.node) {
                this.redraw();
            }
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return String(this.value);
        }
    }, {
        key: "redraw",
        value: function redraw() {
            if (this.node) {
                var newValue = this.getValue();
                // TODO: check if this is best for performance
                if (this.node.nodeValue !== newValue) {
                    this.node.nodeValue = newValue;
                }
            }
            this.applyRef();
        }
    }]);
    return UITextElement;
}(BaseUIElement);

// TODO: rename to Element

var UIElement = function (_BaseUIElement2) {
    inherits(UIElement, _BaseUIElement2);

    function UIElement() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, UIElement);

        var _this3 = possibleConstructorReturn(this, (UIElement.__proto__ || Object.getPrototypeOf(UIElement)).call(this));

        _this3.children = [];
        _this3.options = options; // TODO: this is a hack, to not break all the code that references this.options in setOptions
        _this3.setOptions(options);
        return _this3;
    }

    createClass(UIElement, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions(options) {}
    }, {
        key: "getPreservedOptions",
        value: function getPreservedOptions() {}
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            var defaultOptions = this.getDefaultOptions(options);
            if (defaultOptions) {
                options = Object.assign(defaultOptions, options);
            }
            this.options = options;
        }
    }, {
        key: "updateOptions",
        value: function updateOptions(options) {
            this.setOptions(Object.assign(this.options, options));
            this.redraw();
        }
    }, {
        key: "setChildren",
        value: function setChildren() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            this.updateOptions({ children: unwrapArray(args) });
        }

        // Used when we want to reuse the current element, with the options from the passed in argument
        // Is only called when element.canOverwrite(this) is true

    }, {
        key: "copyState",
        value: function copyState(element) {
            var options = element.options;
            var preservedOptions = this.getPreservedOptions();
            if (preservedOptions) {
                options = Object.assign({}, options, preservedOptions);
            }
            this.setOptions(options);
            this.addListenersFromOptions();
        }
    }, {
        key: "getNodeType",
        value: function getNodeType() {
            return this.options.nodeType || "div";
        }
    }, {
        key: "getGivenChildren",


        // TODO: should be renamed to renderContent
        value: function getGivenChildren() {
            return this.options.children || [];
        }
    }, {
        key: "render",
        value: function render() {
            return this.options.children;
        }
    }, {
        key: "createNode",
        value: function createNode() {
            this.node = document.createElement(this.getNodeType());
            if (document.STEM_DEBUG) {
                this.node.stemElement = this;
            }
            return this.node;
        }

        // Abstract, gets called when removing DOM node associated with the

    }, {
        key: "cleanup",
        value: function cleanup() {
            this.runCleanupJobs();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;

                    child.destroyNode();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.clearNode();
            get(UIElement.prototype.__proto__ || Object.getPrototypeOf(UIElement.prototype), "cleanup", this).call(this);
        }
    }, {
        key: "overwriteChild",
        value: function overwriteChild(existingChild, newChild) {
            existingChild.copyState(newChild);
            return existingChild;
        }
    }, {
        key: "getElementKeyMap",
        value: function getElementKeyMap(elements) {
            if (!elements || !elements.length) {
                return;
            }
            var childrenKeyMap = new Map();

            for (var i = 0; i < elements.length; i += 1) {
                var childKey = elements[i].options && elements[i].options.key || "autokey" + i;

                childrenKeyMap.set(childKey, elements[i]);
            }

            return childrenKeyMap;
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            return this.render();
        }
    }, {
        key: "getChildrenForRedraw",
        value: function getChildrenForRedraw() {
            UI.renderingStack.push(this);
            var children = unwrapArray(this.getChildrenToRender());
            UI.renderingStack.pop();
            return children;
        }
    }, {
        key: "redraw",
        value: function redraw() {
            if (!this.node) {
                console.error("Element not yet mounted. Redraw aborted!", this);
                return false;
            }

            var newChildren = this.getChildrenForRedraw();

            if (newChildren === this.children) {
                for (var i = 0; i < newChildren.length; i += 1) {
                    newChildren[i].redraw();
                }
                this.applyNodeAttributes();
                this.applyRef();
                return true;
            }

            var domNode = this.node;
            var childrenKeyMap = this.getElementKeyMap(this.children);

            for (var _i = 0; _i < newChildren.length; _i++) {
                var newChild = newChildren[_i];
                var prevChildNode = _i > 0 ? newChildren[_i - 1].node : null;
                var currentChildNode = prevChildNode ? prevChildNode.nextSibling : domNode.firstChild;

                // Not a UIElement, to be converted to a TextElement
                if (!newChild.getNodeType) {
                    newChild = newChildren[_i] = new UI.TextElement(newChild);
                }

                var newChildKey = newChild.options && newChild.options.key || "autokey" + _i;
                var existingChild = childrenKeyMap && childrenKeyMap.get(newChildKey);

                if (existingChild && newChildren[_i].canOverwrite(existingChild)) {
                    // We're replacing an existing child element, it might be the very same object
                    if (existingChild !== newChildren[_i]) {
                        newChildren[_i] = this.overwriteChild(existingChild, newChildren[_i]);
                    }
                    newChildren[_i].redraw();
                    if (newChildren[_i].node !== currentChildNode) {
                        domNode.insertBefore(newChildren[_i].node, currentChildNode);
                    }
                } else {
                    // Getting here means we are not replacing anything, should just render
                    newChild.mount(this, currentChildNode);
                }
            }

            if (this.children.length) {
                // Remove children that don't need to be here
                var newChildrenSet = new Set(newChildren);

                for (var _i2 = 0; _i2 < this.children.length; _i2 += 1) {
                    if (!newChildrenSet.has(this.children[_i2])) {
                        this.children[_i2].destroyNode();
                    }
                }
            }

            this.children = newChildren;

            this.applyNodeAttributes();

            this.applyRef();

            return true;
        }
    }, {
        key: "getOptionsAsNodeAttributes",
        value: function getOptionsAsNodeAttributes() {
            return setObjectPrototype(this.options, NodeAttributes);
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var returnCopy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (returnCopy) {
                return new NodeAttributes(this.options);
            } else {
                return this.getOptionsAsNodeAttributes();
            }
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {}
    }, {
        key: "applyNodeAttributes",
        value: function applyNodeAttributes() {
            var attr = void 0;
            if (this.extraNodeAttributes != NOOP_FUNCTION) {
                // Create a copy of options, that is modifiable
                attr = this.getNodeAttributes(true);
                this.extraNodeAttributes(attr);
            } else {
                attr = this.getNodeAttributes(false);
            }
            attr.apply(this.node, this.constructor.domAttributesMap);
        }
    }, {
        key: "setAttribute",
        value: function setAttribute(key, value) {
            this.getOptionsAsNodeAttributes().setAttribute(key, value, this.node, this.constructor.domAttributesMap);
        }
    }, {
        key: "setStyle",
        value: function setStyle(key, value) {
            this.getOptionsAsNodeAttributes().setStyle(key, value, this.node);
        }
    }, {
        key: "removeStyle",
        value: function removeStyle(key) {
            this.getOptionsAsNodeAttributes().removeStyle(key, this.node);
        }
    }, {
        key: "addClass",
        value: function addClass(className) {
            this.getOptionsAsNodeAttributes().addClass(className, this.node);
        }
    }, {
        key: "removeClass",
        value: function removeClass(className) {
            this.getOptionsAsNodeAttributes().removeClass(className, this.node);
        }
    }, {
        key: "hasClass",
        value: function hasClass(className) {
            return this.getOptionsAsNodeAttributes().hasClass(className);
        }
    }, {
        key: "toggleClass",
        value: function toggleClass(className) {
            if (!this.hasClass(className)) {
                this.addClass(className);
            } else {
                this.removeClass(className);
            }
        }
    }, {
        key: "addListenersFromOptions",
        value: function addListenersFromOptions() {
            var _this4 = this;

            var _loop = function _loop(key) {
                if (typeof key === "string" && key.startsWith("on") && key.length > 2) {
                    var eventType = key.substring(2);

                    var addListenerMethodName = "add" + eventType + "Listener";
                    var handlerMethodName = "on" + eventType + "Handler";

                    // The handlerMethod might have been previously added
                    // by a previous call to this function or manually by the user
                    if (typeof _this4[addListenerMethodName] === "function" && !_this4.hasOwnProperty(handlerMethodName)) {
                        _this4[handlerMethodName] = function (event) {
                            UI.event = event;
                            if (_this4.options[key]) {
                                // TODO: arguments should be (event, this)!
                                _this4.options[key](_this4, event);
                            }
                        };

                        // Actually add the listener
                        _this4[addListenerMethodName](_this4[handlerMethodName]);
                    }
                }
            };

            for (var key in this.options) {
                _loop(key);
            }
        }
    }, {
        key: "refLink",
        value: function refLink(name) {
            return { parent: this, name: name };
        }
    }, {
        key: "refLinkArray",
        value: function refLinkArray(arrayName, index) {
            if (!this.hasOwnProperty(arrayName)) {
                this[arrayName] = [];
            }
            return { parent: this[arrayName], name: index };
        }
    }, {
        key: "bindToNode",
        value: function bindToNode(node, doRedraw) {
            this.node = node;
            if (doRedraw) {
                this.clearNode();
                this.redraw();
            }
            return this;
        }
    }, {
        key: "mount",
        value: function mount(parent, nextSiblingNode) {
            if (!parent.node) {
                parent = new UI.Element().bindToNode(parent);
            }
            this.parent = parent;
            if (this.node) {
                parent.insertChildNodeBefore(this, nextSiblingNode);
                this.dispatch("changeParent", this.parent);
                return;
            }

            this.createNode();
            this.redraw();

            parent.insertChildNodeBefore(this, nextSiblingNode);

            this.addListenersFromOptions();

            this.onMount();
        }

        // You need to overwrite the next child manipulation rutines if this.options.children !== this.children

    }, {
        key: "appendChild",
        value: function appendChild(child) {
            // TODO: the next check should be done with a decorator
            if (this.children !== this.options.children) {
                throw "Can't properly handle appendChild, you need to implement it for " + this.constructor;
            }
            this.options.children.push(child);
            child.mount(this, null);
            return child;
        }
    }, {
        key: "insertChild",
        value: function insertChild(child, position) {
            if (this.children !== this.options.children) {
                throw "Can't properly handle insertChild, you need to implement it for " + this.constructor;
            }
            position = position || 0;

            this.options.children.splice(position, 0, child);

            var nextChildNode = position + 1 < this.options.children.length ? this.children[position + 1].node : null;

            child.mount(this, nextChildNode);

            return child;
        }
    }, {
        key: "eraseChild",
        value: function eraseChild(child) {
            var destroy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var index = this.options.children.indexOf(child);

            if (index < 0) {
                // child not found
                return null;
            }
            return this.eraseChildAtIndex(index, destroy);
        }
    }, {
        key: "eraseChildAtIndex",
        value: function eraseChildAtIndex(index) {
            var destroy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (index < 0 || index >= this.options.children.length) {
                console.error("Erasing child at invalid index ", index, this.options.children.length);
                return;
            }
            if (this.children !== this.options.children) {
                throw "Can't properly handle eraseChild, you need to implement it for " + this.constructor;
            }
            var erasedChild = this.options.children.splice(index, 1)[0];
            if (destroy) {
                erasedChild.destroyNode();
            } else {
                this.node.removeChild(erasedChild.node);
            }
            return erasedChild;
        }
    }, {
        key: "eraseAllChildren",
        value: function eraseAllChildren() {
            while (this.children.length > 0) {
                this.eraseChildAtIndex(this.children.length - 1);
            }
        }
    }, {
        key: "show",
        value: function show() {
            this.removeClass("hidden");
        }
    }, {
        key: "hide",
        value: function hide() {
            this.addClass("hidden");
        }
    }, {
        key: "insertChildNodeBefore",
        value: function insertChildNodeBefore(childElement, nextSiblingNode) {
            this.node.insertBefore(childElement.node, nextSiblingNode);
        }

        // TODO: should be renamed emptyNode()

    }, {
        key: "clearNode",
        value: function clearNode() {
            while (this.node && this.node.lastChild) {
                this.node.removeChild(this.node.lastChild);
            }
        }
    }, {
        key: "isInDocument",
        value: function isInDocument() {
            return document.body.contains(this.node);
        }

        // TODO: this method also doesn't belong here

    }, {
        key: "getWidthOrHeight",
        value: function getWidthOrHeight(parameter) {
            var node = this.node;
            if (!node) {
                return 0;
            }
            var value = parseFloat(parameter === "width" ? node.offsetWidth : node.offsetHeight);
            return value || 0;
        }
    }, {
        key: "getHeight",
        value: function getHeight() {
            return this.getWidthOrHeight("height");
        }
    }, {
        key: "getWidth",
        value: function getWidth() {
            return this.getWidthOrHeight("width");
        }
    }, {
        key: "setHeight",
        value: function setHeight(value) {
            this.setStyle("height", suffixNumber(value, "px"));
            this.dispatch("resize");
        }
    }, {
        key: "setWidth",
        value: function setWidth(value) {
            this.setStyle("width", suffixNumber(value, "px"));
            this.dispatch("resize");
        }
    }, {
        key: "addNodeListener",
        value: function addNodeListener(name, callback) {
            for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                args[_key2 - 2] = arguments[_key2];
            }

            var _node,
                _this5 = this;

            (_node = this.node).addEventListener.apply(_node, [name, callback].concat(args));
            var handler = {
                remove: function remove() {
                    _this5.removeNodeListener.apply(_this5, [name, callback].concat(args));
                }
            };
            this.addCleanupJob(handler);
            return handler;
        }
    }, {
        key: "removeNodeListener",
        value: function removeNodeListener(name, callback) {
            this.node.removeEventListener(name, callback);
        }

        // TODO: methods can be automatically generated by addNodeListener(UI.Element, "dblclick", "DoubleClick") for instance

    }, {
        key: "addClickListener",
        value: function addClickListener(callback) {
            return this.addNodeListener("click", callback);
        }
    }, {
        key: "removeClickListener",
        value: function removeClickListener(callback) {
            this.removeNodeListener("click", callback);
        }
    }, {
        key: "addDoubleClickListener",
        value: function addDoubleClickListener(callback) {
            return this.addNodeListener("dblclick", callback);
        }
    }, {
        key: "removeDoubleClickListener",
        value: function removeDoubleClickListener(callback) {
            this.removeNodeListener("dblclick", callback);
        }
    }, {
        key: "addChangeListener",
        value: function addChangeListener(callback) {
            return this.addNodeListener("change", callback);
        }
    }, {
        key: "styleSheet",
        get: function get$$1() {
            return this.getStyleSheet();
        },
        set: function set$$1(value) {
            this.options.styleSheet = value;
            this.redraw();
        }
    }], [{
        key: "create",
        value: function create(parentNode, options) {
            var uiElement = new this(options);
            uiElement.mount(parentNode, null);
            return uiElement;
        }
    }]);
    return UIElement;
}(BaseUIElement);

UI.createElement = function (tag, options) {
    if (!tag) {
        console.error("Create element needs a valid object tag, did you mistype a class name?");
        return;
    }

    options = options || {};

    for (var _len3 = arguments.length, children = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        children[_key3 - 2] = arguments[_key3];
    }

    options.children = unwrapArray(children);

    if (options.ref) {
        if (typeof options.ref === "string") {
            if (UI.renderingStack.length > 0) {
                options.ref = {
                    parent: UI.renderingStack[UI.renderingStack.length - 1],
                    name: options.ref
                };
            } else {
                throw Error("Failed to automatically link ref, there needs to be an element in the rendering stack");
            }
        }

        if (options.key) {
            console.error("Warning! UI Element cannot have both a key and a ref fieldname. Key will be overriden.\n" + "Are you using the options from another object? Shame!", options);
        }

        options.key = "_ref" + options.ref.name;
    }

    if (options.hasOwnProperty("class")) {
        console.error("Invalid UI Element attribute: class. Did you mean className?");
    }

    if (typeof tag === "string") {
        options.nodeType = tag;
        tag = UIElement;
    }

    return new tag(options);
};

UIElement.domAttributesMap = NodeAttributes.defaultAttributesMap;

// Explicitly know that extraNodeAttributes doesn't do anything, but have it to be callable when doing inheritance
UIElement.prototype.extraNodeAttributes = NOOP_FUNCTION;

UI.Element = UIElement;

UI.str = function (value) {
    return new UI.TextElement(value);
};

// Keep a map for every base class, and for each base class keep a map for each nodeType, to cache classes
var primitiveMap = new WeakMap();

UI.Primitive = function (BaseClass, nodeType) {
    if (!nodeType) {
        nodeType = BaseClass;
        BaseClass = UI.Element;
    }
    var baseClassPrimitiveMap = primitiveMap.get(BaseClass);
    if (!baseClassPrimitiveMap) {
        baseClassPrimitiveMap = new Map();
        primitiveMap.set(BaseClass, baseClassPrimitiveMap);
    }
    var resultClass = baseClassPrimitiveMap.get(nodeType);
    if (resultClass) {
        return resultClass;
    }
    resultClass = function (_BaseClass) {
        inherits(Primitive, _BaseClass);

        function Primitive() {
            classCallCheck(this, Primitive);
            return possibleConstructorReturn(this, (Primitive.__proto__ || Object.getPrototypeOf(Primitive)).apply(this, arguments));
        }

        createClass(Primitive, [{
            key: "getNodeType",
            value: function getNodeType() {
                return nodeType;
            }
        }]);
        return Primitive;
    }(BaseClass);
    baseClassPrimitiveMap.set(nodeType, resultClass);
    return resultClass;
};

var Orientation = {
    HORIZONTAL: 1,
    VERTICAL: 2
};

var Direction = {
    UP: "up",
    LEFT: "left",
    DOWN: "down",
    RIGHT: "right"
};

var Level = {
    NONE: null,
    DEFAULT: "default",
    INFO: "info",
    PRIMARY: "primary",
    SECONDARY: "secondary",
    SUCCESS: "success",
    WARNING: "warning",
    DANGER: "danger",
    ERROR: "danger"
};

var Size = {
    NONE: null,
    EXTRA_SMALL: "xs",
    SMALL: "sm",
    MEDIUM: "default",
    DEFAULT: "default",
    LARGE: "lg",
    EXTRA_LARGE: "xl"
};

var VoteStatus = {
    NONE: null,
    LIKE: 1,
    DISLIKE: 0
};

var ActionStatus = {
    DEFAULT: 1,
    RUNNING: 2,
    SUCCESS: 3,
    FAILED: 4
};

function getOffset(node) {
    if (node instanceof UI.Element) {
        node = node.node;
    }
    if (!node) {
        return { left: 0, top: 0 };
    }
    var nodePosition = node.style && node.style.position;
    var left = 0;
    var top = 0;
    while (node) {
        var nodeStyle = node.style || {};
        if (nodePosition === "absolute" && nodeStyle.position === "relative") {
            return { left: left, top: top };
        }
        left += node.offsetLeft;
        top += node.offsetTop;
        node = node.offsetParent;
    }
    return { left: left, top: top };
}

function getComputedStyle(node, attribute) {
    if (node instanceof UI.Element) {
        node = node.node;
    }
    var computedStyle = window.getComputedStyle(node, null);
    return attribute ? computedStyle.getPropertyValue(attribute) : computedStyle;
}

function changeParent(element, newParent) {
    var currentParent = element.parent;
    currentParent.eraseChild(element, false);
    newParent.appendChild(element);
}

// TODO: should this be actually better done throught the dynamic CSS API, without doing through the DOM?
// So far it's actually better like this, since browsers like Chrome allow users to edit classes

var StyleInstance = function (_UI$TextElement) {
    inherits(StyleInstance, _UI$TextElement);

    function StyleInstance(options) {
        classCallCheck(this, StyleInstance);

        var _this = possibleConstructorReturn(this, (StyleInstance.__proto__ || Object.getPrototypeOf(StyleInstance)).call(this, options));

        _this.setOptions(options);
        return _this;
    }

    createClass(StyleInstance, [{
        key: "setOptions",
        value: function setOptions(options) {
            this.options = options;
            this.options.attributes = this.options.attributes || {};
            this.attributes = new Map();
            for (var key in this.options.attributes) {
                this.attributes.set(key, this.options.attributes[key]);
            }
        }
    }, {
        key: "getValue",
        value: function getValue() {
            var str = this.options.selector + "{";
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _step$value = slicedToArray(_step.value, 2),
                        key = _step$value[0],
                        value = _step$value[1];

                    if (typeof value === "function") {
                        value = value();
                    }
                    // Ignore keys with null or undefined value
                    if (value == null) {
                        continue;
                    }

                    key = dashCase(key);

                    // If it's a size property, and the value is a number, assume it's in pixels
                    if ((value instanceof Number || typeof value === "number") && value != 0 && defaultToPixelsAttributes.has(key)) {
                        value = value + "px";
                    }

                    // TODO: if key starts with vendor-, replace it with the browser specific one (and the plain one)
                    str += key + ":" + value + ";";
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return str + "}";
        }
    }, {
        key: "copyState",
        value: function copyState(element) {
            this.setOptions(element.options);
        }
    }, {
        key: "setAttribute",
        value: function setAttribute(name, value) {
            this.attributes.set(name, value);
            this.redraw();
        }
    }, {
        key: "deleteAttribute",
        value: function deleteAttribute(name) {
            this.attributes.delete(name);
            this.redraw();
        }
    }]);
    return StyleInstance;
}(UI.TextElement);

var StyleElement = function (_UI$Primitive) {
    inherits(StyleElement, _UI$Primitive);

    function StyleElement() {
        classCallCheck(this, StyleElement);
        return possibleConstructorReturn(this, (StyleElement.__proto__ || Object.getPrototypeOf(StyleElement)).apply(this, arguments));
    }

    createClass(StyleElement, [{
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            // TODO: allow custom style attributes (media, scoped, etc)
            var attr = new NodeAttributes({});
            if (this.options.name) {
                attr.setAttribute("name", this.options.name);
            }
            return attr;
        }
    }]);
    return StyleElement;
}(UI.Primitive("style"));

var ALLOWED_SELECTOR_STARTS = new Set([":", ">", " ", "+", "~", "[", "."]);

// TODO: figure out how to work with animation frames, this only creates a wrapper class

var DynamicStyleElement = function (_StyleElement) {
    inherits(DynamicStyleElement, _StyleElement);

    function DynamicStyleElement() {
        classCallCheck(this, DynamicStyleElement);
        return possibleConstructorReturn(this, (DynamicStyleElement.__proto__ || Object.getPrototypeOf(DynamicStyleElement)).apply(this, arguments));
    }

    createClass(DynamicStyleElement, [{
        key: "toString",
        value: function toString() {
            return this.getClassName();
        }

        // Overwrite valueOf, so when using the + operator should seamlessly concatenate to create a valid className

    }, {
        key: "valueOf",
        value: function valueOf() {
            return " " + this.getClassName();
        }

        // TODO: use a cached decorator here

    }, {
        key: "getClassName",
        value: function getClassName() {
            if (this.className) {
                return this.className;
            }
            this.constructor.instanceCounter = (this.constructor.instanceCounter || 0) + 1;
            this.className = (this.options.name || "autocls") + "-" + this.constructor.instanceCounter;
            return this.className;
        }
    }, {
        key: "getSelector",
        value: function getSelector() {
            return this.options.selectorName || "." + this.getClassName();
        }

        // A cyclic dependency in the style object will cause an infinite loop here

    }, {
        key: "getStyleInstances",
        value: function getStyleInstances(selector, style) {
            var result = [];
            var ownStyle = {},
                haveOwnStyle = false;
            for (var key in style) {
                var value = style[key];
                if (value == null) {
                    continue;
                }
                var isProperValue = typeof value === "string" || value instanceof String || typeof value === "number" || value instanceof Number || typeof value === "function";
                if (isProperValue) {
                    ownStyle[key] = value;
                    haveOwnStyle = true;
                } else {
                    // Check that this actually is a valid subselector
                    var firstChar = String(key).charAt(0);
                    if (!ALLOWED_SELECTOR_STARTS.has(firstChar)) {
                        console.error("First character of your selector is invalid.");
                        continue;
                    }
                    // TODO: maybe optimize for waste here?
                    var subStyle = this.getStyleInstances(selector + key, value);
                    result.push.apply(result, toConsumableArray(subStyle));
                }
            }

            if (haveOwnStyle) {
                result.unshift(new StyleInstance({ selector: selector, key: selector, attributes: ownStyle }));
            }
            return result;
        }
    }, {
        key: "render",
        value: function render() {
            var style = this.options.style || {};
            if (typeof style === "function") {
                style = style();
            }
            if (style.selectorName) {
                this.options.selectorName = style.selectorName;
                delete style.selectorName;
            }
            return this.getStyleInstances(this.getSelector(), style);
        }
    }, {
        key: "setStyle",
        value: function setStyle(key, value) {
            this.options.style[key] = value;
            this.children[0].setAttribute(key, value);
        }
    }, {
        key: "setSubStyle",
        value: function setSubStyle(selector, key, value) {
            throw Error("Implement me!");
        }
    }, {
        key: "getStyleObject",
        value: function getStyleObject() {
            return this.options.style;
        }
    }]);
    return DynamicStyleElement;
}(StyleElement);

var KeyframeElement = function (_StyleElement2) {
    inherits(KeyframeElement, _StyleElement2);

    function KeyframeElement() {
        classCallCheck(this, KeyframeElement);
        return possibleConstructorReturn(this, (KeyframeElement.__proto__ || Object.getPrototypeOf(KeyframeElement)).apply(this, arguments));
    }

    createClass(KeyframeElement, [{
        key: "toString",
        value: function toString() {
            return this.getKeyframeName();
        }
    }, {
        key: "getKeyframeName",
        value: function getKeyframeName() {
            if (this.keyframeName) {
                return this.keyframeName;
            }
            this.constructor.instanceCounter = (this.constructor.instanceCounter || 0) + 1;
            this.keyframeName = (this.options.name || "autokeyframe") + "-" + this.constructor.instanceCounter;
            return this.keyframeName;
        }
    }, {
        key: "getValue",
        value: function getValue(style) {
            var str = "{";
            for (var key in style) {
                var value = style[key];
                if (typeof value === "function") {
                    value = value();
                }
                if (value == null) {
                    continue;
                }
                str += dashCase(key) + ":" + value + ";";
            }
            return str + "}";
        }
    }, {
        key: "getKeyframeInstance",
        value: function getKeyframeInstance(keyframe) {
            var result = "{";
            for (var key in keyframe) {
                var value = keyframe[key];
                result += key + " " + this.getValue(value);
            }
            return result + "}";
        }
    }, {
        key: "render",
        value: function render() {
            return "@keyframes " + this.getKeyframeName() + this.getKeyframeInstance(this.options.keyframe || {});
        }
    }]);
    return KeyframeElement;
}(StyleElement);

function evaluateStyleRuleObject(target, initializer, value, options) {
    var result = initializer ? initializer.call(target) : value;
    if (typeof result === "function") {
        result = result();
    }
    if (Array.isArray(result)) {
        result = Object.assign.apply(Object, [{}].concat(toConsumableArray(result)));
    }
    return result;
}

function getStyleRuleKey(key) {
    return "__style__" + key;
}

function getKeyframesRuleKey(key) {
    return "__keyframes__" + key;
}

// TODO: this function can be made a lot more generic, to wrap plain object initializer with inheritance support
function styleRuleWithOptions() {
    var options = Object.assign.apply(Object, [{}].concat(Array.prototype.slice.call(arguments))); //Simpler notation?
    // TODO: Remove this if you don't think it's appropiate, I thought a warning would do no harm
    if (!options.targetMethodName) {
        console.error("WARNING: targetMethodName not specified in the options (default is \"css\")");
    }
    var targetMethodName = options.targetMethodName || "css";

    function styleRuleDecorator(target, key, descriptor) {
        var initializer = descriptor.initializer,
            value = descriptor.value;


        descriptor.objInitializer = function () {
            var style = evaluateStyleRuleObject(this, initializer, value, options);

            // TODO: a bit of a hack, clean this up
            style["prefferedClassName"] = key;

            if (options.selector) {
                style["selectorName"] = options.selector;
            }

            if (options.inherit) {
                // Get the value we set in the prototype of the parent class
                var parentDesc = Object.getPrototypeOf(target)[getStyleRuleKey(key)];
                if (!parentDesc) {
                    console.error("You're trying to inherit a rule that isn't implemented in the parent: " + key);
                }
                var parentStyle = evaluateStyleRuleObject(this, parentDesc.objInitializer, parentDesc.value, options);
                style = deepCopy({}, parentStyle, style);
                return style;
            }

            return style;
        };

        // Change the prototype of this object to be able to access the old descriptor/value
        target[options.getKey(key)] = Object.assign({}, descriptor);

        descriptor.initializer = function () {
            var style = descriptor.objInitializer.call(this);
            return this[targetMethodName](style);
        };

        delete descriptor.value;

        return lazyInit(target, key, descriptor);
    }

    return styleRuleDecorator;
}

// TODO: Second argument is mostly useless (implied from targetMethodName)
var styleRule = styleRuleWithOptions({
    targetMethodName: "css",
    getKey: getStyleRuleKey,
    inherit: false
});

var styleRuleInherit = styleRuleWithOptions({
    targetMethodName: "css",
    getKey: getStyleRuleKey,
    inherit: true
});

function styleRuleCustom(options) {
    return styleRuleWithOptions(Object.assign({
        targetMethodName: "css",
        getKey: getStyleRuleKey,
        inherit: false
    }, options));
}

var keyframesRule = styleRuleWithOptions({
    targetMethodName: "keyframes",
    getKey: getKeyframesRuleKey,
    inherit: false
});

// TODO: This is currently not working (I think)
var keyframesRuleInherit = styleRuleWithOptions({
    targetMethodName: "keyframes",
    getKey: getKeyframesRuleKey,
    inherit: true
});

// Class meant to group multiple classes inside a single <style> element, for convenience
// TODO: pattern should be more robust, to be able to only update classes

var StyleSheet = function (_Dispatchable) {
    inherits(StyleSheet, _Dispatchable);

    function StyleSheet() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, StyleSheet);

        var _this = possibleConstructorReturn(this, (StyleSheet.__proto__ || Object.getPrototypeOf(StyleSheet)).call(this));

        _this.options = Object.assign({
            parent: document.head,
            name: options.name || _this.constructor.getElementName() // call only if needed
        }, options);
        _this.elements = new Set();
        if (!_this.options.delayedMount) {
            _this.ensureMounted();
        }
        _this.getTheme().addStyleSheet(_this);
        return _this;
    }

    createClass(StyleSheet, [{
        key: "ensureMounted",
        value: function ensureMounted() {
            if (this.styleElement) {
                return;
            }
            var styleElementOptions = {
                children: [],
                name: this.options.name
            };
            this.styleElement = StyleElement.create(this.options.parent, styleElementOptions);
        }
    }, {
        key: "getTheme",
        value: function getTheme() {
            return this.options.theme || this.constructor.theme;
        }
    }, {
        key: "setTheme",
        value: function setTheme(theme) {
            this.options.theme = theme;
        }
    }, {
        key: "getThemeProperty",
        value: function getThemeProperty(key, defaultValue) {
            var theme = this.getTheme();
            return theme && theme.getProperty(key, defaultValue) || defaultValue;
        }
    }, {
        key: "ensureFirstUpdate",
        value: function ensureFirstUpdate() {
            if (this._firstUpdate) {
                return;
            }

            this._firstUpdate = true;
            this.ensureMounted();
            // Call all listeners before update for the very first time, to update any possible variables
            this.dispatch("beforeUpdate", this);
        }
    }, {
        key: "css",
        value: function css(style) {
            this.ensureFirstUpdate();
            if (arguments.length > 1) {
                style = Object.assign.apply(Object, [{}].concat(Array.prototype.slice.call(arguments)));
            }
            var elementOptions = { style: style };

            // Get the preferred name, maybe cleanup later
            var nameKey = "prefferedClassName";
            if (style[nameKey]) {
                elementOptions.name = style[nameKey];
                delete style[nameKey];
            }

            var element = new DynamicStyleElement(elementOptions);
            this.elements.add(element);
            var styleInstances = element.render();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = styleInstances[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var styleInstance = _step.value;

                    this.styleElement.appendChild(styleInstance);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return element;
        }
    }, {
        key: "keyframes",
        value: function keyframes(_keyframes) {
            this.ensureFirstUpdate();
            // This is not really necessarily as I don't believe it will ever be used
            if (arguments.length > 1) {
                _keyframes = Object.assign.apply(Object, [{}].concat(Array.prototype.slice.call(arguments)));
            }
            var element = new KeyframeElement({ keyframe: _keyframes });
            this.elements.add(element);
            this.styleElement.appendChild(element);
            return element;
        }
    }, {
        key: "addBeforeUpdateListener",
        value: function addBeforeUpdateListener(callback) {
            return this.addListener("beforeUpdate", callback);
        }
    }, {
        key: "update",
        value: function update() {
            if (!this._firstUpdate) {
                return;
            }
            this.dispatch("beforeUpdate", this);

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.keys(this)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var key = _step2.value;

                    if (this[key] instanceof DynamicStyleElement) {
                        var desc = this["__style__" + key];
                        var func = desc && desc.objInitializer;
                        if (func) {
                            this[key].options.style = func.call(this);
                        }
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var children = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.elements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var value = _step3.value;

                    if (value instanceof StyleElement) {
                        var styleElements = value.render();
                        children.push.apply(children, toConsumableArray(styleElements));
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.styleElement.options.children = children;
            this.styleElement.redraw();
        }
    }, {
        key: "themeProperties",
        get: function get$$1() {
            var theme = this.getTheme();
            return theme && theme.getProperties() || {};
        }
    }], [{
        key: "getInstance",
        value: function getInstance() {
            if (!this.hasOwnProperty("singletonInstance")) {
                this.singletonInstance = new this();
            }
            return this.singletonInstance;
        }

        // Generate an instance, and also make sure to instantiate all style elements

    }, {
        key: "initialize",
        value: function initialize() {
            var styleSheet = this.getInstance();

            for (var key in this.prototype) {
                // Just hit the getter to instantiate the style
                if (!styleSheet[key]) {
                    console.log("This is here to prevent a bundling optimization bug");
                }
            }
        }
    }, {
        key: "getElementName",
        value: function getElementName() {
            this.elementNameCounter = (this.elementNameCounter || 0) + 1;
            var name = this.name;
            if (this.elementNameCounter > 1) {
                name += "-" + this.elementNameCounter;
            }
            return name;
        }
    }]);
    return StyleSheet;
}(Dispatchable);

// Helper class, meant to only keep one class active for an element from a set of classes
// TODO: move to another file


var ExclusiveClassSet = function () {
    function ExclusiveClassSet(classList, element) {
        classCallCheck(this, ExclusiveClassSet);

        // TODO: check that classList is an array (or at least iterable)
        this.classList = classList;
        this.element = element;
    }

    createClass(ExclusiveClassSet, [{
        key: "set",
        value: function set$$1(element, classInstance) {
            if (!classInstance) {
                classInstance = element;
                element = this.element;
            }
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.classList[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var cls = _step4.value;

                    if (cls === classInstance) {
                        element.addClass(cls);
                    } else {
                        element.removeClass(cls);
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }], [{
        key: "fromObject",
        value: function fromObject(obj, element) {
            var classList = [];
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    classList.push(obj[key]);
                }
            }
            return Object.assign(new ExclusiveClassSet(classList, element), obj);
        }
    }]);
    return ExclusiveClassSet;
}();

function wrapCSS(context, style) {
    return defineProperty({}, context, style);
}

function hover(style) {
    return wrapCSS(":hover", style);
}

function active(style) {
    return wrapCSS(":active", style);
}

function focus(style) {
    return wrapCSS(":focus", style);
}

var styleMap = new WeakMap();

var Draggable = function Draggable(BaseClass) {
    return function (_BaseClass) {
        inherits(Draggable, _BaseClass);

        function Draggable() {
            var _ref;

            var _temp, _this, _ret;

            classCallCheck(this, Draggable);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Draggable.__proto__ || Object.getPrototypeOf(Draggable)).call.apply(_ref, [this].concat(args))), _this), _this._clickCallbacks = new Map(), _this._clickDragListeners = new Map(), _temp), possibleConstructorReturn(_this, _ret);
        }

        createClass(Draggable, [{
            key: "addClickListener",
            value: function addClickListener(callback) {
                var _this2 = this;

                if (this._clickCallbacks.has(callback)) {
                    return;
                }
                var callbackWrapper = function callbackWrapper() {
                    if (_this2._okForClick) {
                        callback();
                    }
                };
                this._clickCallbacks.set(callback, callbackWrapper);
                get(Draggable.prototype.__proto__ || Object.getPrototypeOf(Draggable.prototype), "addClickListener", this).call(this, callbackWrapper);

                if (this._clickDragListeners.has(callback)) {
                    return;
                }
                var clickDragListener = {
                    onStart: function onStart() {
                        _this2.dragForClickStarted();
                    },
                    onDrag: function onDrag() {
                        _this2.dragForClick();
                    }
                };
                this._clickDragListeners.set(callback, clickDragListener);
                this.addDragListener(clickDragListener);
            }
        }, {
            key: "dragForClickStarted",
            value: function dragForClickStarted() {
                this._okForClick = true;
            }
        }, {
            key: "dragForClick",
            value: function dragForClick() {
                this._okForClick = false;
            }
        }, {
            key: "removeClickListener",
            value: function removeClickListener(callback) {
                var callbackWrapper = this._clickCallbacks.get(callback);
                if (callbackWrapper) {
                    this._clickCallbacks.delete(callback);
                    get(Draggable.prototype.__proto__ || Object.getPrototypeOf(Draggable.prototype), "removeClickListener", this).call(this, callbackWrapper);
                }
                if (!this._clickDragListeners) {
                    return;
                }
                var clickDragListener = this._clickDragListeners.get(callback);
                if (clickDragListener) {
                    this._clickDragListeners.delete(callback);
                    this.removeDragListener(clickDragListener);
                }
            }
        }, {
            key: "createDragListenerWrapper",
            value: function createDragListenerWrapper(listeners) {
                var listenerWrapper = Object.assign({}, listeners);

                listenerWrapper.onWrapperDrag = function (event) {
                    var eventX = Device.getEventX(event),
                        eventY = Device.getEventY(event);

                    var deltaX = eventX - listenerWrapper._lastX;
                    listenerWrapper._lastX = eventX;

                    var deltaY = eventY - listenerWrapper._lastY;
                    listenerWrapper._lastY = eventY;

                    listeners.onDrag(deltaX, deltaY);
                };

                listenerWrapper.onWrapperStart = function (event) {
                    listenerWrapper._lastX = Device.getEventX(event);
                    listenerWrapper._lastY = Device.getEventY(event);

                    if (listeners.onStart) {
                        listeners.onStart(event);
                    }

                    // TODO: Replace with our body
                    document.body.addEventListener("mousemove", listenerWrapper.onWrapperDrag);
                };

                listenerWrapper.onWrapperEnd = function (event) {
                    if (listeners.onEnd) {
                        listeners.onEnd(event);
                    }
                    // TODO: Replace with our body
                    document.body.removeEventListener("mousemove", listenerWrapper.onWrapperDrag);
                };
                return listenerWrapper;
            }
        }, {
            key: "createTouchDragListenerWrapper",
            value: function createTouchDragListenerWrapper(listeners) {
                var listenerWrapper = Object.assign({}, listeners);

                listenerWrapper.onWrapperDrag = function (event) {
                    var eventX = Device.getEventX(event),
                        eventY = Device.getEventY(event);

                    var deltaX = eventX - listenerWrapper._lastX;
                    listenerWrapper._lastX = eventX;

                    var deltaY = eventY - listenerWrapper._lastY;
                    listenerWrapper._lastY = eventY;

                    listeners.onDrag(deltaX, deltaY);
                };

                listenerWrapper.onWrapperStart = function (event) {
                    listenerWrapper._lastX = Device.getEventX(event);
                    listenerWrapper._lastY = Device.getEventY(event);
                    listenerWrapper.touchEventIdentifier = Device.getEventTouchIdentifier(event);

                    if (listeners.onStart) {
                        listeners.onStart(event);
                    }
                    event.preventDefault();

                    // TODO: Replace with our body
                    document.body.addEventListener("touchmove", listenerWrapper.onWrapperDrag);
                };

                listenerWrapper.onWrapperEnd = function (event) {
                    if (event.touches.length && Device.getEventTouchIdentifier(event) === listenerWrapper.touchEventIdentifier) {
                        return;
                    }
                    if (listeners.onEnd) {
                        listeners.onEnd(event);
                    }
                    // TODO: Replace with our body
                    document.body.removeEventListener("touchmove", listenerWrapper.onWrapperDrag);
                };
                return listenerWrapper;
            }
        }, {
            key: "addDragListener",
            value: function addDragListener(listeners) {
                var listenerWrapper = this.createDragListenerWrapper(listeners);
                var touchListenerWrapper = this.createTouchDragListenerWrapper(listeners);
                this.addNodeListener("touchstart", touchListenerWrapper.onWrapperStart);
                this.addNodeListener("mousedown", listenerWrapper.onWrapperStart);
                // TODO: Replace with our body
                document.body.addEventListener("touchend", touchListenerWrapper.onWrapperEnd);
                document.body.addEventListener("mouseup", listenerWrapper.onWrapperEnd);

                if (!this.hasOwnProperty("_dragListeners")) {
                    this._dragListeners = [];
                }
                this._dragListeners.push(touchListenerWrapper);
                this._dragListeners.push(listenerWrapper);
            }
        }, {
            key: "removeDragListener",
            value: function removeDragListener(listeners) {
                if (this._dragListeners) {
                    for (var i = this._dragListeners.length - 1; i >= 0; i -= 1) {
                        if (this._dragListeners[i].onStart === listeners.onStart && this._dragListeners[i].onDrag === listeners.onDrag && this._dragListeners[i].onEnd === listeners.onEnd) {

                            this.removeNodeListener("touchstart", this._dragListeners[i].onWrapperStart);
                            document.body.removeEventListener("touchmove", this._dragListeners[i].onWrapperDrag);
                            document.body.removeEventListener("touchmove", this._dragListeners[i].onWrapperEnd);
                            this.removeNodeListener("mousedown", this._dragListeners[i].onWrapperStart);
                            document.body.removeEventListener("mousemove", this._dragListeners[i].onWrapperDrag);
                            document.body.removeEventListener("mousemove", this._dragListeners[i].onWrapperEnd);

                            this._dragListeners.splice(i, 1);
                        }
                    }
                }
            }
        }]);
        return Draggable;
    }(BaseClass);
};

var _class$5, _temp$5;

var COLORS_BY_NAME = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    gold: "#ffd700",
    goldenrod: "#daa520",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavender: "#e6e6fa",
    lavenderblush: "#fff0f5",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
};

/*
 * This class contains methods for operating with colors. Its objects are kept in hsva format with normalized
 * attributes (each attribute has value between 0 and 1 inclusive), and can be converted from/to rgba.
 */
var Color = function () {
    function Color(color) {
        classCallCheck(this, Color);

        if (color) {
            this.setColor(color);
        }
    }

    createClass(Color, [{
        key: "setColor",
        value: function setColor(color) {
            this.color = this.constructor.parseColor(color);
        }
    }, {
        key: "getColor",
        value: function getColor() {
            var rgba = this.getRgba();
            return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + rgba[3] + ")";
        }

        /*
         * @param color A color string of the types: native name, hex3, hex6, rgb, rgba, hsl, hsla
         *              or a Color object, or a hsla color array
         */

    }], [{
        key: "parseColor",
        value: function parseColor(color) {
            if (color instanceof Color) {
                return color.color;
            } else if (color instanceof Array) {
                // Add the alpha parameter at the end
                if (color.length === 3) {
                    color.push(1);
                }
                return color;
            }

            color = color.trim().toLowerCase();

            // Check if color is given by name
            if (COLORS_BY_NAME.hasOwnProperty(color)) {
                color = COLORS_BY_NAME[color];
            }

            var values = [];

            // Check for hex3 (e.g. "#f00")
            var hex3 = color.match(/^#([0-9a-f]{3})$/i);
            if (hex3) {
                values = [parseInt(hex3[1].charAt(0), 16) * 0x11, parseInt(hex3[1].charAt(1), 16) * 0x11, parseInt(hex3[1].charAt(2), 16) * 0x11, 1];
            }

            // Check for hex6 (e.g. "#ff0000")
            var hex6 = color.match(/^#([0-9a-f]{6})$/i);
            if (hex6) {
                values = [parseInt(hex6[1].substr(0, 2), 16), parseInt(hex6[1].substr(2, 2), 16), parseInt(hex6[1].substr(4, 2), 16), 1];
            }

            // Check for rgba (e.g. "rgba(255, 0, 0, 0.5)")
            var rgba = color.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+.*\d*)\s*\)$/i);
            if (rgba) {
                values = [parseInt(rgba[1]), parseInt(rgba[2]), parseInt(rgba[3]), parseFloat(rgba[4])];
            }

            // Check for rgb (e.g. "rgb(255, 0, 0)")
            var rgb = color.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);
            if (rgb) {
                values = [parseInt(rgb[1]), parseInt(rgb[2]), parseInt(rgb[3]), 1];
            }
            return values;
        }

        // TODO: this should be implemented as a factory that generates an interpolator object, that just takes in a t

    }, {
        key: "interpolate",
        value: function interpolate(firstColor, secondColor) {
            var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;

            var firstColorArray = Color.parseColor(firstColor);
            var secondColorArray = Color.parseColor(secondColor);

            return Color.convertToRgba([parseInt(firstColorArray[0] * (1 - t) + secondColorArray[0] * t), parseInt(firstColorArray[1] * (1 - t) + secondColorArray[1] * t), parseInt(firstColorArray[2] * (1 - t) + secondColorArray[2] * t), parseInt(firstColorArray[3] * (1 - t) + secondColorArray[3] * t)]);
        }
    }, {
        key: "addOpacity",
        value: function addOpacity(color, opacity) {
            var colorArray = Color.parseColor(color);
            return Color.convertToRgba([parseInt(colorArray[0]), parseInt(colorArray[1]), parseInt(colorArray[2]), opacity]);
        }
    }, {
        key: "convertToRgba",
        value: function convertToRgba(rgba) {
            return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + rgba[3] + ")";
        }
    }, {
        key: "isLight",
        value: function isLight(color) {
            var values = Color.parseColor(color);
            return values[0] * 0.3 + values[1] * 0.59 + values[2] * 0.11 > 188;
        }
    }]);
    return Color;
}();

function lighten(color, amount) {
    if (amount >= 0) {
        return Color.interpolate(color, "#fff", amount);
    } else {
        return darken(color, -amount);
    }
}

function darken(color, amount) {
    if (amount >= 0) {
        var rgba = Color.parseColor(Color.interpolate(color, "#000", amount));
        for (var i = 0; i < 3; i += 1) {
            var root = Math.pow(255 - rgba[i], 0.7);
            rgba[i] = parseInt(rgba[i] - root * amount);
            if (rgba[i] < 0) {
                rgba[i] = 0;
            }
        }
        return Color.convertToRgba(rgba);
    } else {
        return lighten(color, -amount);
    }
}

function enhance(color, amount) {
    if (Color.isLight(color)) {
        return darken(color, amount);
    } else {
        return lighten(color, amount);
    }
}

function buildColors(color) {
    var dark = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var colors = [];
    var darkenPercents = void 0;
    if (!dark) {
        darkenPercents = [0.1, 0, -0.2, -0.3, -0.35, -0.2, -1];
    } else if (Color.isLight(color)) {
        darkenPercents = [0.05, 0, 0.05, 0.1, 0.15, 0.3, 0.8];
    } else {
        darkenPercents = [-0.3, 0, 0.1, 0.2, 0.23, 0.1, -1];
    }
    for (var i = 0; i < darkenPercents.length; i += 1) {
        colors.push(darken(color, darkenPercents[i]));
    }
    return colors;
}

var ColorGenerator = (_temp$5 = _class$5 = function () {
    function ColorGenerator() {
        classCallCheck(this, ColorGenerator);
    }

    createClass(ColorGenerator, null, [{
        key: "getPersistentColor",
        value: function getPersistentColor(uniqueId) {
            if (uniqueId < this.FIRST_COLORS.length) {
                return this.FIRST_COLORS[uniqueId];
            }
            if (!this.cache.has(uniqueId)) {
                this.cache.set(uniqueId, this.getRandomColor());
            }
            return this.cache.get(uniqueId);
        }
    }, {
        key: "getRandomColor",
        value: function getRandomColor() {
            var allowed = "3456789ABC";
            var color = "#";
            for (var i = 0; i < 6; i += 1) {
                color += allowed.charAt(parseInt(Math.random() * allowed.length));
            }
            return color;
        }
    }]);
    return ColorGenerator;
}(), _class$5.FIRST_COLORS = ["#337ab7", "#5cb85c", "#f0ad4e", "#5bc0de", "#d9534f"], _class$5.cache = new Map(), _temp$5);

function getInstance(styleSheet) {
    if (typeof styleSheet === "function") {
        if (typeof styleSheet.getInstance === "function") {
            styleSheet = styleSheet.getInstance();
        } else {
            styleSheet = styleSheet();
        }
    }
    return styleSheet;
}

function getInstanceForObject(obj) {
    if (!obj) {
        return null;
    }
    var styleSheet = obj.theme && obj.theme.get(obj) || obj.styleSheet;
    return getInstance(styleSheet);
}

var Theme = function (_Dispatchable) {
    inherits(Theme, _Dispatchable);

    function Theme() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        classCallCheck(this, Theme);

        var _this = possibleConstructorReturn(this, (Theme.__proto__ || Object.getPrototypeOf(Theme)).call(this));

        _this.styleSheetSymbol = Symbol("Theme" + name);
        _this.classSet = new Set();
        _this.styleSheetSet = new Set();
        _this.properties = {};
        _this.updateThrottler = new CallThrottler({ throttle: 50 });
        _this.updateThrottled = _this.updateThrottler.wrap(function () {
            return _this.updateStyleSheets();
        });
        window.addEventListener("resize", _this.updateThrottled);
        return _this;
    }

    createClass(Theme, [{
        key: "register",
        value: function register(cls, styleSheet) {
            cls.theme = this;
            if (!cls.styleSheet) {
                cls.styleSheet = styleSheet;
            }
            this.set(cls, styleSheet);
        }
    }, {
        key: "set",
        value: function set$$1(cls, styleSheet) {
            cls[this.styleSheetSymbol] = styleSheet;
            this.classSet.add(cls);
        }
    }, {
        key: "get",
        value: function get$$1(cls) {
            if (!(typeof cls === "function")) {
                cls = cls.constructor;
            }
            return cls[this.styleSheetSymbol];
        }
    }, {
        key: "getProperties",
        value: function getProperties() {
            return this.properties;
        }
    }, {
        key: "getProperty",
        value: function getProperty(key, defaultValue) {
            var value = this.properties[key] || defaultValue;
            return typeof value === "function" ? value() : value;
        }
    }, {
        key: "setProperties",
        value: function setProperties(properties) {
            var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            Object.assign(this.properties, properties);
            if (update) {
                this.updateThrottled();
            }
        }
    }, {
        key: "setProperty",
        value: function setProperty(key, value) {
            this.properties[key] = value;
        }
    }, {
        key: "getAllStyleSheets",
        value: function getAllStyleSheets() {
            var styleSheetSet = new Set(this.styleSheetSet);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.classSet.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var cls = _step.value;

                    styleSheetSet.add(this.get(cls));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return Array.from(styleSheetSet).map(function (styleSheet) {
                if (styleSheet.getInstance) {
                    return styleSheet.getInstance();
                }
                return styleSheet;
            });
        }
    }, {
        key: "addStyleSheet",
        value: function addStyleSheet(styleSheet) {
            this.styleSheetSet.add(styleSheet);
        }
    }, {
        key: "removeStyleSheet",
        value: function removeStyleSheet(styleSheet) {
            this.styleSheetSet.delete(styleSheet);
        }
    }, {
        key: "updateStyleSheets",
        value: function updateStyleSheets() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getAllStyleSheets()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var styleSheet = _step2.value;

                    if (styleSheet.update) {
                        styleSheet.update();
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }], [{
        key: "register",
        value: function register(cls, styleSheet) {
            var _Global;

            return (_Global = this.Global).register.apply(_Global, arguments);
        }
    }, {
        key: "get",
        value: function get$$1(cls) {
            var _Global2;

            return (_Global2 = this.Global).get.apply(_Global2, arguments);
        }
    }, {
        key: "addStyleSheet",
        value: function addStyleSheet(styleSheet) {
            this.Global.addStyleSheet(styleSheet);
        }
    }, {
        key: "setProperties",
        value: function setProperties(properties) {
            var _Global3;

            (_Global3 = this.Global).setProperties.apply(_Global3, arguments);
        }
    }, {
        key: "getProperties",
        value: function getProperties() {
            return this.Global.getProperties();
        }
    }]);
    return Theme;
}(Dispatchable);

Theme.Global = new Theme("Global");

UI.Element.prototype.getStyleSheet = function styleSheetGetter() {
    return getInstanceForObject(this.options) || getInstanceForObject(this.constructor);
};

function registerStyle(styleClass) {
    var theme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Theme.Global;

    return function (target) {
        theme.register(target, styleClass);
    };
}

StyleSheet.theme = Theme.Global;

var _class3, _descriptor8, _descriptor9, _class5, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _class7, _descriptor15, _descriptor16, _descriptor17;

function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

// TODO: export these properly, don't use a namespace here
var GlobalStyle = {};

function getTextColor(backgroundColor) {
    return enhance(backgroundColor, 1);
}

Theme.setProperties({
    COLOR_BACKGROUND: "#fff",
    COLOR_BACKGROUND_ALTERNATIVE: "#eee",
    COLOR_BACKGROUND_BODY: "#f8f8f8",
    COLOR_FOREGROUND_BODY: "#f2f2f2",
    COLOR_BACKGROUND_BADGE: "#777",
    COLOR_PRIMARY: "#337ab7",
    COLOR_SECONDARY: "#358ba4",
    COLOR_SUCCESS: "#5cb85c",
    COLOR_INFO: "#5bc0de",
    COLOR_WARNING: "#f0ad4e",
    COLOR_DANGER: "#d9534f",

    COLOR_LINK: "#337ab7",

    FONT_SIZE_EXTRA_SMALL: "10px",
    FONT_SIZE_SMALL: "12px",
    FONT_SIZE_DEFAULT: "14px",
    FONT_SIZE_LARGE: "17px",
    FONT_SIZE_EXTRA_LARGE: "21px",

    BASE_BORDER_RADIUS: 0,
    BASE_BOX_SHADOW: "0px 0px 10px rgb(160, 162, 168)",
    BASE_BORDER_WIDTH: 0,
    BASE_BORDER_STYLE: "solid",
    BASE_BORDER_COLOR: "#ddd",

    BUTTON_BORDER_RADIUS: "0.2rem",

    CARD_PANEL_HEADER_HEIGHT: 30,
    CARD_PANEL_HEADER_HEIGHT_LARGE: 40,
    CARD_PANEL_HEADING_PADDING: 10,
    CARD_PANEL_HEADING_PADDING_LARGE: 20,
    CARD_PANEL_TEXT_TRANSFORM: "inherit",

    DARK_BOX_SHADOW: "0px 0px 10px rgba(0, 0, 0, .6)",

    ROW_LIST_ROW_HEIGHT: 30,
    ROW_LIST_ROW_HEIGHT_LARGE: 40,
    ROW_LIST_ROW_PADDING: 10,
    ROW_LIST_ROW_PADDING_LARGE: 20,
    ROW_LIST_ROW_BORDER_WIDTH: 1,

    FONT_FAMILY_SANS_SERIF: "Lato, 'Segoe UI', 'Lucida Sans Unicode', 'Helvetica Neue', Helvetica, Arial, sans-serif",
    FONT_FAMILY_SERIF: "serif",
    FONT_FAMILY_MONOSPACE: "'Source Code Pro', Menlo, Monaco, Consolas, 'Courier New', monospace",
    FONT_FAMILY_DEFAULT: function FONT_FAMILY_DEFAULT() {
        return Theme.getProperties().FONT_FAMILY_SANS_SERIF;
    },

    NAV_MANAGER_NAVBAR_HEIGHT: 50,
    NAV_MANAGER_BOX_SHADOW_NAVBAR: "0px 0px 10px rgb(0, 0, 0)",
    NAV_MANAGER_BOX_SHADOW_SIDE_PANEL: "0px 0px 10px #202e3e",

    MAIN_CONTAINER_EXTRA_PADDING_TOP_DESKTOP: 0,
    MAIN_CONTAINER_EXTRA_PADDING_TOP_MOBILE: 0,
    MAIN_CONTAINER_EXTRA_PADDING_BOTTOM_DESKTOP: 0,
    MAIN_CONTAINER_EXTRA_PADDING_BOTTOM_MOBILE: 0,

    FLAT_TAB_AREA_COLOR_BACKGROUND: "#f3f3f3",
    FLAT_TAB_AREA_LINE_HEIGHT: 30,
    FLAT_TAB_AREA_PADDING_SIDES: 10
});

var BasicLevelSizeStyleSheet = function (_StyleSheet) {
    inherits(BasicLevelSizeStyleSheet, _StyleSheet);

    function BasicLevelSizeStyleSheet() {
        classCallCheck(this, BasicLevelSizeStyleSheet);
        return possibleConstructorReturn(this, (BasicLevelSizeStyleSheet.__proto__ || Object.getPrototypeOf(BasicLevelSizeStyleSheet)).apply(this, arguments));
    }

    createClass(BasicLevelSizeStyleSheet, [{
        key: "Level",
        value: function Level$$1(level) {
            if (this[level]) {
                return this[level];
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.keys(Level)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var type = _step.value;

                    if (level == Level[type]) {
                        return this[type];
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return "";
        }
    }, {
        key: "Size",
        value: function Size$$1(size) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.keys(Size)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var type = _step2.value;

                    if (size == Size[type]) {
                        return this[type];
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return "";
        }
    }]);
    return BasicLevelSizeStyleSheet;
}(StyleSheet);

var BasicLevelStyleSheet = function BasicLevelStyleSheet(colorToStyleFunction) {
    var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

    return _class = function (_BasicLevelSizeStyleS) {
        inherits(BasicLevelStyleClass, _BasicLevelSizeStyleS);

        function BasicLevelStyleClass() {
            var _ref;

            var _temp, _this2, _ret;

            classCallCheck(this, BasicLevelStyleClass);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this2 = possibleConstructorReturn(this, (_ref = BasicLevelStyleClass.__proto__ || Object.getPrototypeOf(BasicLevelStyleClass)).call.apply(_ref, [this].concat(args))), _this2), _initDefineProp(_this2, "BASE", _descriptor, _this2), _initDefineProp(_this2, "PRIMARY", _descriptor2, _this2), _initDefineProp(_this2, "SECONDARY", _descriptor3, _this2), _initDefineProp(_this2, "SUCCESS", _descriptor4, _this2), _initDefineProp(_this2, "INFO", _descriptor5, _this2), _initDefineProp(_this2, "WARNING", _descriptor6, _this2), _initDefineProp(_this2, "DANGER", _descriptor7, _this2), _temp), possibleConstructorReturn(_this2, _ret);
        }

        createClass(BasicLevelStyleClass, [{
            key: "colorStyleRule",
            value: function colorStyleRule(color, textColor) {
                return colorToStyleFunction(color, textColor || getTextColor(color));
            }
        }]);
        return BasicLevelStyleClass;
    }(BasicLevelSizeStyleSheet), _descriptor = _applyDecoratedDescriptor(_class.prototype, "BASE", [styleRule], {
        enumerable: true,
        initializer: function initializer() {
            return this.colorStyleRule(this.themeProperties.COLOR_BACKGROUND);
        }
    }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "PRIMARY", [styleRule], {
        enumerable: true,
        initializer: function initializer() {
            return this.colorStyleRule(this.themeProperties.COLOR_PRIMARY);
        }
    }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "SECONDARY", [styleRule], {
        enumerable: true,
        initializer: function initializer() {
            return this.colorStyleRule(this.themeProperties.COLOR_SECONDARY);
        }
    }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "SUCCESS", [styleRule], {
        enumerable: true,
        initializer: function initializer() {
            return this.colorStyleRule(this.themeProperties.COLOR_SUCCESS);
        }
    }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "INFO", [styleRule], {
        enumerable: true,
        initializer: function initializer() {
            return this.colorStyleRule(this.themeProperties.COLOR_INFO);
        }
    }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "WARNING", [styleRule], {
        enumerable: true,
        initializer: function initializer() {
            return this.colorStyleRule(this.themeProperties.COLOR_WARNING);
        }
    }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "DANGER", [styleRule], {
        enumerable: true,
        initializer: function initializer() {
            return this.colorStyleRule(this.themeProperties.COLOR_DANGER);
        }
    }), _class;
};

var FlexContainerStyle = (_class3 = function (_StyleSheet2) {
    inherits(FlexContainerStyle, _StyleSheet2);

    function FlexContainerStyle() {
        var _ref2;

        var _temp2, _this3, _ret2;

        classCallCheck(this, FlexContainerStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this3 = possibleConstructorReturn(this, (_ref2 = FlexContainerStyle.__proto__ || Object.getPrototypeOf(FlexContainerStyle)).call.apply(_ref2, [this].concat(args))), _this3), _initDefineProp(_this3, "HORIZONTAL", _descriptor8, _this3), _initDefineProp(_this3, "VERTICAL", _descriptor9, _this3), _temp2), possibleConstructorReturn(_this3, _ret2);
    }

    createClass(FlexContainerStyle, [{
        key: "Orientation",
        value: function Orientation$$1(orientation) {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.keys(Orientation)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var type = _step3.value;

                    if (orientation == Orientation[type]) {
                        return this[type];
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }]);
    return FlexContainerStyle;
}(StyleSheet), _descriptor8 = _applyDecoratedDescriptor(_class3.prototype, "HORIZONTAL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            ">*": {
                marginLeft: "20px",
                flex: "1"
            },
            ">:first-child": {
                marginLeft: "0px"
            }
        };
    }
}), _descriptor9 = _applyDecoratedDescriptor(_class3.prototype, "VERTICAL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            flexDirection: "column",
            ">*": {
                marginTop: "20px",
                flex: "1"
            },
            ">:first-child": {
                marginTop: "0px"
            }
        };
    }
}), _class3);
var ContainerStyle = (_class5 = function (_StyleSheet3) {
    inherits(ContainerStyle, _StyleSheet3);

    function ContainerStyle() {
        var _ref3;

        var _temp3, _this4, _ret3;

        classCallCheck(this, ContainerStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this4 = possibleConstructorReturn(this, (_ref3 = ContainerStyle.__proto__ || Object.getPrototypeOf(ContainerStyle)).call.apply(_ref3, [this].concat(args))), _this4), _initDefineProp(_this4, "EXTRA_SMALL", _descriptor10, _this4), _initDefineProp(_this4, "SMALL", _descriptor11, _this4), _initDefineProp(_this4, "MEDIUM", _descriptor12, _this4), _initDefineProp(_this4, "LARGE", _descriptor13, _this4), _initDefineProp(_this4, "EXTRA_LARGE", _descriptor14, _this4), _temp3), possibleConstructorReturn(_this4, _ret3);
    }

    createClass(ContainerStyle, [{
        key: "getSizeStyle",
        value: function getSizeStyle(mobilePixels, desktopPercent) {
            return {
                margin: Device.isMobileDevice() ? "0 " + mobilePixels + "px" : "0% " + desktopPercent + "%"
            };
        }
    }, {
        key: "Size",
        value: function Size$$1(size) {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = Object.keys(Size)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var type = _step4.value;

                    if (size == Size[type]) {
                        return this[type];
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }]);
    return ContainerStyle;
}(StyleSheet), _descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "EXTRA_SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return this.getSizeStyle(6, 15);
    }
}), _descriptor11 = _applyDecoratedDescriptor(_class5.prototype, "SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return this.getSizeStyle(4, 10);
    }
}), _descriptor12 = _applyDecoratedDescriptor(_class5.prototype, "MEDIUM", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return this.getSizeStyle(4, 6);
    }
}), _descriptor13 = _applyDecoratedDescriptor(_class5.prototype, "LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return this.getSizeStyle(2, 3);
    }
}), _descriptor14 = _applyDecoratedDescriptor(_class5.prototype, "EXTRA_LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return this.getSizeStyle(2, 1);
    }
}), _class5);
var Utils = (_class7 = function (_StyleSheet4) {
    inherits(Utils, _StyleSheet4);

    function Utils() {
        var _ref4;

        var _temp4, _this5, _ret4;

        classCallCheck(this, Utils);

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        return _ret4 = (_temp4 = (_this5 = possibleConstructorReturn(this, (_ref4 = Utils.__proto__ || Object.getPrototypeOf(Utils)).call.apply(_ref4, [this].concat(args))), _this5), _this5.extraTop = function () {
            return _this5.themeProperties[Device.isMobileDevice() ? "MAIN_CONTAINER_EXTRA_PADDING_TOP_MOBILE" : "MAIN_CONTAINER_EXTRA_PADDING_TOP_DESKTOP"];
        }, _initDefineProp(_this5, "fullHeight", _descriptor15, _this5), _initDefineProp(_this5, "hidden", _descriptor16, _this5), _initDefineProp(_this5, "fullContainer", _descriptor17, _this5), _temp4), possibleConstructorReturn(_this5, _ret4);
    }

    // Use this class for content that has no space between it and the navbar.


    return Utils;
}(StyleSheet), _descriptor15 = _applyDecoratedDescriptor(_class7.prototype, "fullHeight", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "100%"
        };
    }
}), _descriptor16 = _applyDecoratedDescriptor(_class7.prototype, "hidden", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "hidden"
        };
    }
}), _descriptor17 = _applyDecoratedDescriptor(_class7.prototype, "fullContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this6 = this;

        return {
            width: "100%",
            height: function height() {
                return "calc(100% + " + _this6.extraTop() + "px)";
            },
            marginTop: function marginTop() {
                return -_this6.extraTop();
            }
        };
    }
}), _class7);


GlobalStyle.FlexContainer = FlexContainerStyle.getInstance();
GlobalStyle.Container = ContainerStyle.getInstance();
GlobalStyle.Utils = Utils.getInstance();

var _class$6, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _dec, _class3$1, _class4, _descriptor7, _descriptor8$1, _descriptor9$1, _descriptor10$1, _descriptor11$1, _descriptor12$1, _dec2, _class6, _class7$1, _descriptor13$1, _descriptor14$1, _descriptor15$1, _descriptor16$1, _descriptor17$1, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _dec3, _class9;

function _initDefineProp$1(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var SimpleStyledElement = function (_UI$Element) {
    inherits(SimpleStyledElement, _UI$Element);

    function SimpleStyledElement() {
        classCallCheck(this, SimpleStyledElement);
        return possibleConstructorReturn(this, (SimpleStyledElement.__proto__ || Object.getPrototypeOf(SimpleStyledElement)).apply(this, arguments));
    }

    createClass(SimpleStyledElement, [{
        key: "getLevel",
        value: function getLevel() {
            return this.options.level || this.parent && this.parent.getLevel && this.parent.getLevel();
        }
    }, {
        key: "setLevel",
        value: function setLevel(level) {
            this.updateOptions({ level: level });
        }
    }, {
        key: "getSize",
        value: function getSize() {
            return this.options.size || this.parent && this.parent.getSize && this.parent.getSize();
        }
    }, {
        key: "setSize",
        value: function setSize(size) {
            this.updateOptions({ size: size });
        }
    }]);
    return SimpleStyledElement;
}(UI.Element);

var IconableInterface = function (_SimpleStyledElement) {
    inherits(IconableInterface, _SimpleStyledElement);

    function IconableInterface() {
        classCallCheck(this, IconableInterface);
        return possibleConstructorReturn(this, (IconableInterface.__proto__ || Object.getPrototypeOf(IconableInterface)).apply(this, arguments));
    }

    createClass(IconableInterface, [{
        key: "render",
        value: function render() {
            return [this.beforeChildren(), this.getLabel(), get(IconableInterface.prototype.__proto__ || Object.getPrototypeOf(IconableInterface.prototype), "render", this).call(this)];
        }
    }, {
        key: "getLabel",
        value: function getLabel() {
            return this.options.label != null ? this.options.label : "";
        }
    }, {
        key: "setLabel",
        value: function setLabel(label) {
            this.updateOptions({ label: label });
        }

        //TODO: this should live in a base iconable class, of which you'd only use this.beforeChildren

    }, {
        key: "getFaIcon",
        value: function getFaIcon() {
            return this.options.faIcon;
        }
    }, {
        key: "setFaIcon",
        value: function setFaIcon(value) {
            this.options.faIcon = value;
            this.redraw();
        }
    }, {
        key: "beforeChildren",
        value: function beforeChildren() {
            if (!this.getFaIcon()) {
                return null;
            }
            var iconOptions = {
                className: "fa fa-" + this.getFaIcon()
            };
            if (this.getLabel()) {
                iconOptions.style = {
                    marginRight: "5px"
                };
            }

            return UI.createElement("span", iconOptions);
        }
    }]);
    return IconableInterface;
}(SimpleStyledElement);

var labelColorToStyle = function labelColorToStyle(color) {
    var colors = buildColors(color);
    var darker = {
        backgroundColor: colors[2],
        color: colors[6],
        textDecoration: "none"
    };
    var regular = {
        backgroundColor: colors[1],
        borderColor: colors[5],
        color: colors[6]
    };
    return Object.assign({}, regular, {
        ":hover": darker,
        ":hover:disabled": regular,
        ":focus": darker,
        ":active": darker
    });
};

var LabelStyle = (_class$6 = function (_BasicLevelStyleSheet) {
    inherits(LabelStyle, _BasicLevelStyleSheet);

    function LabelStyle() {
        var _ref;

        var _temp, _this3, _ret;

        classCallCheck(this, LabelStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this3 = possibleConstructorReturn(this, (_ref = LabelStyle.__proto__ || Object.getPrototypeOf(LabelStyle)).call.apply(_ref, [this].concat(args))), _this3), _initDefineProp$1(_this3, "DEFAULT", _descriptor, _this3), _initDefineProp$1(_this3, "EXTRA_SMALL", _descriptor2, _this3), _initDefineProp$1(_this3, "SMALL", _descriptor3, _this3), _initDefineProp$1(_this3, "MEDIUM", _descriptor4, _this3), _initDefineProp$1(_this3, "LARGE", _descriptor5, _this3), _initDefineProp$1(_this3, "EXTRA_LARGE", _descriptor6, _this3), _temp), possibleConstructorReturn(_this3, _ret);
    }

    return LabelStyle;
}(BasicLevelStyleSheet(labelColorToStyle)), _descriptor = _applyDecoratedDescriptor$1(_class$6.prototype, "DEFAULT", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [{
            fontWeight: "bold",
            border: "0.1em solid transparent",
            padding: "0.07em 0.4em",
            borderRadius: "0.3em",
            textAlign: "center",
            whiteSpace: "nowrap",
            verticalAlign: "bottom",
            lineHeight: 4 / 3 + "",
            display: "inline-block",
            touchAction: "manipulation",
            ":disabled": {
                opacity: "0.7",
                cursor: "not-allowed"
            }
        }, {
            "font-size": "12px"
        }, this.colorStyleRule(this.themeProperties.COLOR_BACKGROUND_BADGE)];
    }
}), _descriptor2 = _applyDecoratedDescriptor$1(_class$6.prototype, "EXTRA_SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "10px",
            padding: "0.05em 0.2em",
            borderWidth: "0.05em"
        };
    }
}), _descriptor3 = _applyDecoratedDescriptor$1(_class$6.prototype, "SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "10px"
        };
    }
}), _descriptor4 = _applyDecoratedDescriptor$1(_class$6.prototype, "MEDIUM", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {};
    }
}), _descriptor5 = _applyDecoratedDescriptor$1(_class$6.prototype, "LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "14px"
        };
    }
}), _descriptor6 = _applyDecoratedDescriptor$1(_class$6.prototype, "EXTRA_LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "17px",
            padding: "0.05em 0.2em"
        };
    }
}), _class$6);

var Label = (_dec = registerStyle(LabelStyle), _dec(_class3$1 = function (_UI$Primitive) {
    inherits(Label, _UI$Primitive);

    function Label() {
        classCallCheck(this, Label);
        return possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).apply(this, arguments));
    }

    createClass(Label, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.DEFAULT);

            if (this.getSize()) {
                attr.addClass(this.styleSheet.Size(this.getSize()));
            }

            if (this.getLevel()) {
                attr.addClass(this.styleSheet.Level(this.getLevel()));
            }
        }
    }]);
    return Label;
}(UI.Primitive(IconableInterface, "span"))) || _class3$1);


var badgeColorToStyle = function badgeColorToStyle(color) {
    var colors = buildColors(color);
    return {
        backgroundColor: colors[1],
        borderColor: colors[5],
        color: colors[6]
    };
};

var BadgeStyle = (_class4 = function (_BasicLevelStyleSheet2) {
    inherits(BadgeStyle, _BasicLevelStyleSheet2);

    function BadgeStyle() {
        var _ref2;

        var _temp2, _this5, _ret2;

        classCallCheck(this, BadgeStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this5 = possibleConstructorReturn(this, (_ref2 = BadgeStyle.__proto__ || Object.getPrototypeOf(BadgeStyle)).call.apply(_ref2, [this].concat(args))), _this5), _initDefineProp$1(_this5, "DEFAULT", _descriptor7, _this5), _initDefineProp$1(_this5, "EXTRA_SMALL", _descriptor8$1, _this5), _initDefineProp$1(_this5, "SMALL", _descriptor9$1, _this5), _initDefineProp$1(_this5, "MEDIUM", _descriptor10$1, _this5), _initDefineProp$1(_this5, "LARGE", _descriptor11$1, _this5), _initDefineProp$1(_this5, "EXTRA_LARGE", _descriptor12$1, _this5), _temp2), possibleConstructorReturn(_this5, _ret2);
    }

    return BadgeStyle;
}(BasicLevelStyleSheet(badgeColorToStyle)), _descriptor7 = _applyDecoratedDescriptor$1(_class4.prototype, "DEFAULT", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [{
            display: "inline-block",
            padding: "0.25em 0.55em",
            fontWeight: "700",
            lineHeight: "1",
            color: "#fff",
            textAlign: "center",
            whiteSpace: "nowrap",
            verticalAlign: "middle",
            backgroundColor: "#777",
            borderRadius: "0.8em"
        }, {
            "font-size": "12px"
        }, this.colorStyleRule(this.themeProperties.COLOR_BACKGROUND_BADGE)];
    }
}), _descriptor8$1 = _applyDecoratedDescriptor$1(_class4.prototype, "EXTRA_SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "10px",
            padding: "0.1em 0.2em"
        };
    }
}), _descriptor9$1 = _applyDecoratedDescriptor$1(_class4.prototype, "SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "10px"
        };
    }
}), _descriptor10$1 = _applyDecoratedDescriptor$1(_class4.prototype, "MEDIUM", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {};
    }
}), _descriptor11$1 = _applyDecoratedDescriptor$1(_class4.prototype, "LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "14px"
        };
    }
}), _descriptor12$1 = _applyDecoratedDescriptor$1(_class4.prototype, "EXTRA_LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "17px",
            padding: "0.1em 0.2em"
        };
    }
}), _class4);

var Badge = (_dec2 = registerStyle(BadgeStyle), _dec2(_class6 = function (_UI$Primitive2) {
    inherits(Badge, _UI$Primitive2);

    function Badge() {
        classCallCheck(this, Badge);
        return possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).apply(this, arguments));
    }

    createClass(Badge, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.DEFAULT);

            if (this.getSize()) {
                attr.addClass(this.styleSheet.Size(this.getSize()));
            }

            if (this.getLevel()) {
                attr.addClass(this.styleSheet.Level(this.getLevel()));
            }
        }
    }]);
    return Badge;
}(UI.Primitive(IconableInterface, "span"))) || _class6);


var progressBarColorToStyle = function progressBarColorToStyle(color) {
    var colors = buildColors(color);
    return {
        backgroundColor: colors[1]
    };
};

var ProgressBarStyle = (_class7$1 = function (_BasicLevelStyleSheet3) {
    inherits(ProgressBarStyle, _BasicLevelStyleSheet3);

    function ProgressBarStyle() {
        var _ref3;

        var _temp3, _this7, _ret3;

        classCallCheck(this, ProgressBarStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this7 = possibleConstructorReturn(this, (_ref3 = ProgressBarStyle.__proto__ || Object.getPrototypeOf(ProgressBarStyle)).call.apply(_ref3, [this].concat(args))), _this7), _initDefineProp$1(_this7, "container", _descriptor13$1, _this7), _initDefineProp$1(_this7, "DEFAULT", _descriptor14$1, _this7), _initDefineProp$1(_this7, "striped", _descriptor15$1, _this7), _initDefineProp$1(_this7, "active", _descriptor16$1, _this7), _initDefineProp$1(_this7, "EXTRA_SMALL", _descriptor17$1, _this7), _initDefineProp$1(_this7, "SMALL", _descriptor18, _this7), _initDefineProp$1(_this7, "MEDIUM", _descriptor19, _this7), _initDefineProp$1(_this7, "LARGE", _descriptor20, _this7), _initDefineProp$1(_this7, "EXTRA_LARGE", _descriptor21, _this7), _temp3), possibleConstructorReturn(_this7, _ret3);
    }

    return ProgressBarStyle;
}(BasicLevelStyleSheet(progressBarColorToStyle)), _descriptor13$1 = _applyDecoratedDescriptor$1(_class7$1.prototype, "container", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "20px",
            marginBottom: "20px",
            overflow: "hidden",
            backgroundColor: "#f5f5f5",
            borderRadius: "4px",
            boxShadow: "inset 0 1px 2px rgba(0, 0, 0, .1)"
        };
    }
}), _descriptor14$1 = _applyDecoratedDescriptor$1(_class7$1.prototype, "DEFAULT", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [{
            float: "left",
            width: "0",
            height: "100%",
            lineHeight: "20px",
            color: "#fff",
            textAlign: "center",
            backgroundColor: "#337ab7",
            boxShadow: "inset 0 -1px 0 rgba(0, 0, 0, .15)",
            transition: "width .6s ease",
            fontColor: "#ffffff"
        }, {
            fontSize: "12px"
        }, this.colorStyleRule(this.themeProperties.COLOR_PRIMARY)];
    }
}), _descriptor15$1 = _applyDecoratedDescriptor$1(_class7$1.prototype, "striped", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundImage: "linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent)",
            backgroundSize: "40px 40px"
        };
    }
}), _descriptor16$1 = _applyDecoratedDescriptor$1(_class7$1.prototype, "active", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            animation: "progress-bar-stripes 2s linear infinite"
        };
    }
}), _descriptor17$1 = _applyDecoratedDescriptor$1(_class7$1.prototype, "EXTRA_SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "8px"
        };
    }
}), _descriptor18 = _applyDecoratedDescriptor$1(_class7$1.prototype, "SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "10px"
        };
    }
}), _descriptor19 = _applyDecoratedDescriptor$1(_class7$1.prototype, "MEDIUM", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {};
    }
}), _descriptor20 = _applyDecoratedDescriptor$1(_class7$1.prototype, "LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "14px"
        };
    }
}), _descriptor21 = _applyDecoratedDescriptor$1(_class7$1.prototype, "EXTRA_LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "17px",
            padding: "0.1em 0.2em"
        };
    }
}), _class7$1);
var ProgressBar = (_dec3 = registerStyle(ProgressBarStyle), _dec3(_class9 = function (_SimpleStyledElement2) {
    inherits(ProgressBar, _SimpleStyledElement2);

    function ProgressBar() {
        classCallCheck(this, ProgressBar);
        return possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).apply(this, arguments));
    }

    createClass(ProgressBar, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.container);
        }
    }, {
        key: "render",
        value: function render() {
            var valueInPercent = (this.options.value || 0) * 100;
            var orientation = Orientation.HORIZONTAL;
            if (this.options.hasOwnProperty("orientation")) {
                orientation = this.options.orientation;
            }
            var barStyle = void 0;
            if (orientation === Orientation.HORIZONTAL) {
                barStyle = {
                    width: valueInPercent + "%",
                    height: this.options.height + "px"
                };
            } else {
                barStyle = {
                    height: valueInPercent + "%",
                    width: "5px"
                };
            }
            var barOptions = {
                className: this.styleSheet.DEFAULT,
                style: barStyle
            };

            if (this.options.disableTransition) {
                Object.assign(barOptions.style, {
                    transition: "none"
                });
            }

            if (this.options.level) {
                barOptions.className += " " + this.styleSheet.Level(this.getLevel());
            }
            if (this.options.striped) {
                barOptions.className += " " + this.styleSheet.striped;
            }
            if (this.options.active) {
                barOptions.className += " " + this.styleSheet.active;
            }
            if (this.options.color) {
                barOptions.style.backgroundColor = this.options.color;
            }

            return UI.createElement(
                "div",
                barOptions,
                UI.createElement(
                    "span",
                    null,
                    this.options.label
                )
            );
        }
    }, {
        key: "set",
        value: function set$$1(value) {
            if (value < 0) value = 0;else if (value > 1) value = 1;
            this.options.value = value;
            this.redraw();
        }
    }]);
    return ProgressBar;
}(SimpleStyledElement)) || _class9);

// TODO: this file existed to hold generic classes in a period of fast prototyping, has a lot of old code

// A very simple class, all this does is implement the `getTitle()` method

var Panel = function (_UI$Element) {
    inherits(Panel, _UI$Element);

    function Panel() {
        classCallCheck(this, Panel);
        return possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).apply(this, arguments));
    }

    createClass(Panel, [{
        key: "getTitle",
        value: function getTitle() {
            return this.options.title;
        }
    }]);
    return Panel;
}(UI.Element);

var SlideBar = function (_Draggable) {
    inherits(SlideBar, _Draggable);

    function SlideBar() {
        classCallCheck(this, SlideBar);
        return possibleConstructorReturn(this, (SlideBar.__proto__ || Object.getPrototypeOf(SlideBar)).apply(this, arguments));
    }

    createClass(SlideBar, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                value: 0
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("display", "inline-block");
            attr.setStyle("position", "relative");
            attr.setStyle("cursor", "pointer");
        }
    }, {
        key: "getSliderValue",
        value: function getSliderValue() {
            return this.options.value * this.options.size - this.options.barSize / 2;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(ProgressBar, { ref: "progressBar", active: "true", value: this.options.value, disableTransition: true,
                orientation: this.getOrientation(),
                style: Object.assign({
                    position: "relative"
                }, this.getProgressBarStyle())
            }), UI.createElement("div", { ref: "slider", style: Object.assign({
                    backgroundColor: "black",
                    position: "absolute"
                }, this.getSliderStyle()) })];
        }
    }, {
        key: "setValue",
        value: function setValue(value) {
            value = Math.max(value, 0);
            value = Math.min(value, 1);

            this.options.value = value;
            this.progressBar.set(this.options.value);
            this.slider.setStyle(this.getOrientationAttribute(), this.getSliderValue() + "px");

            this.dispatch("change", this.options.value);
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.options.value;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.addDragListener(this.getDragConfig());
        }
    }]);
    return SlideBar;
}(Draggable(UI.Element));

var HorizontalSlideBar = function (_SlideBar) {
    inherits(HorizontalSlideBar, _SlideBar);

    function HorizontalSlideBar() {
        classCallCheck(this, HorizontalSlideBar);
        return possibleConstructorReturn(this, (HorizontalSlideBar.__proto__ || Object.getPrototypeOf(HorizontalSlideBar)).apply(this, arguments));
    }

    createClass(HorizontalSlideBar, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.size = options.size || options.width || 100;
            options.barSize = options.barSize || options.barWidth || 5;
            get(HorizontalSlideBar.prototype.__proto__ || Object.getPrototypeOf(HorizontalSlideBar.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getProgressBarStyle",
        value: function getProgressBarStyle() {
            return {
                height: "5px",
                width: this.options.size + "px",
                top: "15px"
            };
        }
    }, {
        key: "getSliderStyle",
        value: function getSliderStyle() {
            return {
                width: this.options.barSize + "px",
                height: "20px",
                left: this.getSliderValue() + "px",
                top: "7.5px"
            };
        }
    }, {
        key: "getOrientationAttribute",
        value: function getOrientationAttribute() {
            return "left";
        }
    }, {
        key: "getOrientation",
        value: function getOrientation() {
            return Orientation.HORIZONTAL;
        }
    }, {
        key: "getDragConfig",
        value: function getDragConfig() {
            var _this4 = this;

            return {
                onStart: function onStart(event) {
                    _this4.setValue((Device.getEventX(event) - getOffset(_this4.progressBar)[_this4.getOrientationAttribute()]) / _this4.options.size);
                },
                onDrag: function onDrag(deltaX, deltaY) {
                    _this4.setValue(_this4.options.value + deltaX / _this4.options.size);
                }
            };
        }
    }]);
    return HorizontalSlideBar;
}(SlideBar);

var VerticalSlideBar = function (_SlideBar2) {
    inherits(VerticalSlideBar, _SlideBar2);

    function VerticalSlideBar() {
        classCallCheck(this, VerticalSlideBar);
        return possibleConstructorReturn(this, (VerticalSlideBar.__proto__ || Object.getPrototypeOf(VerticalSlideBar)).apply(this, arguments));
    }

    createClass(VerticalSlideBar, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.size = options.size || options.height || 100;
            options.barSize = options.barSize || options.barHeight || 5;
            get(VerticalSlideBar.prototype.__proto__ || Object.getPrototypeOf(VerticalSlideBar.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getProgressBarStyle",
        value: function getProgressBarStyle() {
            return {
                height: this.options.size + "px",
                width: "5px",
                left: "15px"
            };
        }
    }, {
        key: "getSliderStyle",
        value: function getSliderStyle() {
            return {
                height: this.options.barSize + "px",
                width: "20px",
                top: this.getSliderValue() + "px",
                left: "7.5px"
            };
        }
    }, {
        key: "getOrientationAttribute",
        value: function getOrientationAttribute() {
            return "top";
        }
    }, {
        key: "getOrientation",
        value: function getOrientation() {
            return Orientation.VERTICAL;
        }
    }, {
        key: "getDragConfig",
        value: function getDragConfig() {
            var _this6 = this;

            return {
                onStart: function onStart(event) {
                    _this6.setValue((Device.getEventY(event) - getOffset(_this6.progressBar)[_this6.getOrientationAttribute()]) / _this6.options.size);
                },
                onDrag: function onDrag(deltaX, deltaY) {
                    _this6.setValue(_this6.options.value + deltaY / _this6.options.size);
                }
            };
        }
    }]);
    return VerticalSlideBar;
}(SlideBar);

var Link = function (_UI$Primitive) {
    inherits(Link, _UI$Primitive);

    function Link() {
        classCallCheck(this, Link);
        return possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
    }

    createClass(Link, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            // TODO: do we want this as a default?
            attr.setStyle("cursor", "pointer");
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                newTab: false
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), "setOptions", this).call(this, options);

            if (this.options.newTab) {
                this.options.target = "_blank";
            }

            return options;
        }
    }, {
        key: "render",
        value: function render() {
            if (this.options.value) {
                return [this.options.value];
            }
            return get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), "render", this).call(this);
        }
    }]);
    return Link;
}(UI.Primitive("a"));

var Image$1 = function (_UI$Primitive2) {
    inherits(Image, _UI$Primitive2);

    function Image() {
        classCallCheck(this, Image);
        return possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
    }

    return Image;
}(UI.Primitive("img"));

// Beware coder: If you ever use this class, you should have a well documented reason


var RawHTML = function (_UI$Element2) {
    inherits(RawHTML, _UI$Element2);

    function RawHTML() {
        classCallCheck(this, RawHTML);
        return possibleConstructorReturn(this, (RawHTML.__proto__ || Object.getPrototypeOf(RawHTML)).apply(this, arguments));
    }

    createClass(RawHTML, [{
        key: "getInnerHTML",
        value: function getInnerHTML() {
            return this.options.innerHTML || this.options.__innerHTML;
        }
    }, {
        key: "redraw",
        value: function redraw() {
            this.node.innerHTML = this.getInnerHTML();
            this.applyNodeAttributes();
            this.applyRef();
        }
    }]);
    return RawHTML;
}(UI.Element);

var ViewportMeta = function (_UI$Primitive3) {
    inherits(ViewportMeta, _UI$Primitive3);

    function ViewportMeta() {
        classCallCheck(this, ViewportMeta);
        return possibleConstructorReturn(this, (ViewportMeta.__proto__ || Object.getPrototypeOf(ViewportMeta)).apply(this, arguments));
    }

    createClass(ViewportMeta, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                scale: this.getDesiredScale(),
                initialScale: 1,
                maximumScale: 1
            };
        }
    }, {
        key: "getDesiredScale",
        value: function getDesiredScale() {
            var MIN_WIDTH = this.options.minDeviceWidth;
            return MIN_WIDTH ? Math.min(window.screen.availWidth, MIN_WIDTH) / MIN_WIDTH : 1;
        }
    }, {
        key: "getContent",
        value: function getContent() {
            var rez = "width=device-width";
            rez += ",initial-scale=" + this.options.scale;
            rez += ",maximum-scale=" + this.options.scale;
            rez += ",user-scalable=no";
            return rez;
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setAttribute("name", "viewport");
            attr.setAttribute("content", this.getContent());
        }
    }, {
        key: "maybeUpdate",
        value: function maybeUpdate() {
            var desiredScale = this.getDesiredScale();
            if (desiredScale != this.options.scale) {
                this.updateOptions({ scale: desiredScale });
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            window.addEventListener("resize", function () {
                return _this11.maybeUpdate();
            });
        }
    }]);
    return ViewportMeta;
}(UI.Primitive("meta"));

var TemporaryMessageArea = function (_UI$Primitive4) {
    inherits(TemporaryMessageArea, _UI$Primitive4);

    function TemporaryMessageArea() {
        classCallCheck(this, TemporaryMessageArea);
        return possibleConstructorReturn(this, (TemporaryMessageArea.__proto__ || Object.getPrototypeOf(TemporaryMessageArea)).apply(this, arguments));
    }

    createClass(TemporaryMessageArea, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                margin: 10
            };
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(UI.TextElement, { ref: "textElement", value: this.options.value || "" })];
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(TemporaryMessageArea.prototype.__proto__ || Object.getPrototypeOf(TemporaryMessageArea.prototype), "getNodeAttributes", this).call(this);
            // TODO: nope, not like this
            attr.setStyle("marginLeft", this.options.margin + "px");
            attr.setStyle("marginRight", this.options.margin + "px");
            return attr;
        }
    }, {
        key: "setValue",
        value: function setValue(value) {
            this.options.value = value;
            this.textElement.setValue(value);
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.setStyle("color", color);
        }
    }, {
        key: "showMessage",
        value: function showMessage(message) {
            var _this13 = this;

            var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "black";
            var displayDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;

            this.setColor(color);
            this.clear();
            this.setValue(message);
            if (displayDuration) {
                this.clearValueTimeout = setTimeout(function () {
                    return _this13.clear();
                }, displayDuration);
            }
        }
    }, {
        key: "clear",
        value: function clear() {
            this.setValue("");
            if (this.clearValueTimeout) {
                clearTimeout(this.clearValueTimeout);
                this.clearValueTimeout = null;
            }
        }
    }]);
    return TemporaryMessageArea;
}(UI.Primitive("span"));

// Just putting in a lot of methods, to try to think of an interface


var ScrollableMixin = function (_UI$Element3) {
    inherits(ScrollableMixin, _UI$Element3);

    function ScrollableMixin() {
        classCallCheck(this, ScrollableMixin);
        return possibleConstructorReturn(this, (ScrollableMixin.__proto__ || Object.getPrototypeOf(ScrollableMixin)).apply(this, arguments));
    }

    createClass(ScrollableMixin, [{
        key: "getDesiredExcessHeightTop",
        value: function getDesiredExcessHeightTop() {
            return 600;
        }
    }, {
        key: "getDesiredExcessHeightBottom",
        value: function getDesiredExcessHeightBottom() {
            return 600;
        }
    }, {
        key: "getHeightScrollPercent",
        value: function getHeightScrollPercent() {
            var scrollHeight = this.node.scrollHeight;
            var height = this.node.clientHeight;
            if (scrollHeight === height) {
                return 0;
            }
            return this.node.scrollTop / (scrollHeight - height);
        }
    }, {
        key: "getExcessTop",
        value: function getExcessTop() {
            return this.node.scrollTop;
        }
    }, {
        key: "getExcessBottom",
        value: function getExcessBottom() {
            var scrollHeight = this.node.scrollHeight;
            var height = this.node.clientHeight;
            return scrollHeight - height - this.node.scrollTop;
        }
    }, {
        key: "haveExcessTop",
        value: function haveExcessTop() {
            return this.getExcessTop() > this.getDesiredExcessHeightTop();
        }
    }, {
        key: "haveExcessBottom",
        value: function haveExcessBottom() {
            return this.getExcessBottom() > this.getDesiredExcessHeightBottom();
        }
    }, {
        key: "popChildTop",
        value: function popChildTop() {
            this.eraseChildAtIndex(0);
        }
    }, {
        key: "popChildBottom",
        value: function popChildBottom() {
            this.eraseChildAtIndex(this.children.length - 1);
        }
    }, {
        key: "removeExcessTop",
        value: function removeExcessTop() {
            while (this.haveExcessTop()) {
                this.popChildTop();
            }
        }
    }, {
        key: "removeExcessBottom",
        value: function removeExcessBottom() {
            while (this.haveExcessBottom()) {
                this.popChildBottom();
            }
        }
    }, {
        key: "pushChildTop",
        value: function pushChildTop(element) {
            var removeExcessBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (removeExcessBottom) {
                this.removeExcessBottom();
            }
            this.insertChild(element, 0);
        }
    }, {
        key: "pushChildBottom",
        value: function pushChildBottom(element) {
            var removeExcessTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (removeExcessTop) {
                this.removeExcessTop();
            }
            this.appendChild(element);
            this.appendChild(element);
        }
    }, {
        key: "saveScrollPosition",
        value: function saveScrollPosition() {
            // If at top or bottom, save that
            // If anywhere in the middle, save the offset of the first child with a positive offset, and keep that constant
            this.options.scrollTop = this.node.scrollTop;
            var maxScrollTop = this.node.scrollHeight - this.node.clientHeight;
            this.options.scrollInfo = {
                scrollAtTop: this.options.scrollTop === 0,
                scrollAtBottom: this.options.scrollTop === maxScrollTop
                // visibleChildrenOffsets: {}
            };
        }
    }, {
        key: "applyScrollPosition",
        value: function applyScrollPosition() {
            this.node.scrollTop = this.options.scrollTop || this.node.scrollTop;
        }
    }, {
        key: "scrollToHeight",
        value: function scrollToHeight(height) {
            this.node.scrollTop = height;
        }
    }, {
        key: "scrollToTop",
        value: function scrollToTop() {
            this.scrollToHeight(0);
        }
    }, {
        key: "scrollToBottom",
        value: function scrollToBottom() {
            this.scrollToHeight(this.node.scrollHeight);
        }
    }]);
    return ScrollableMixin;
}(UI.Element);

//TODO: this class would need some binary searches

var InfiniteScrollable = function (_ScrollableMixin) {
    inherits(InfiniteScrollable, _ScrollableMixin);

    function InfiniteScrollable() {
        classCallCheck(this, InfiniteScrollable);
        return possibleConstructorReturn(this, (InfiniteScrollable.__proto__ || Object.getPrototypeOf(InfiniteScrollable)).apply(this, arguments));
    }

    createClass(InfiniteScrollable, [{
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign({
                entries: [],
                entryComparator: function entryComparator(a, b) {
                    return a.id - b.id;
                },
                firstRenderedEntry: 0,
                lastRenderedEntry: -1
            }, options);
            get(InfiniteScrollable.prototype.__proto__ || Object.getPrototypeOf(InfiniteScrollable.prototype), "setOptions", this).call(this, options);
            // TODO: TEMP for testing
            this.options.children = [];
            if (this.options.staticTop) {
                this.options.children.push(this.options.staticTop);
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var entry = _step.value;

                    this.options.children.push(this.renderEntry(entry));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "getFirstVisibleIndex",
        value: function getFirstVisibleIndex() {}
    }, {
        key: "getLastVisibleIndex",
        value: function getLastVisibleIndex() {}
    }, {
        key: "renderEntry",
        value: function renderEntry(entry) {
            if (this.options.entryRenderer) {
                return this.options.entryRenderer(entry);
            } else {
                console.error("You need to pass option entryRenderer or overwrite the renderEntry method");
            }
        }
    }, {
        key: "pushEntry",
        value: function pushEntry(entry) {
            this.insertEntry(entry, this.options.entries.length);
        }
    }, {
        key: "insertEntry",
        value: function insertEntry(entry, index) {
            var entries = this.options.entries;
            if (index == null) {
                index = 0;
                while (index < entries.length && this.options.entryComparator(entries[index], entry) <= 0) {
                    index++;
                }
            }
            entries.splice(index, 0, entry);

            // Adjust to the children
            if (this.options.staticTop) {
                index += 1;
            }

            // TODO: only if in the rendered range, insert in options.children;
            var uiElement = this.renderEntry(entry);
            this.insertChild(uiElement, index);
        }
    }]);
    return InfiniteScrollable;
}(ScrollableMixin);

var TimePassedSpan = function (_UI$Primitive5) {
    inherits(TimePassedSpan, _UI$Primitive5);

    function TimePassedSpan() {
        classCallCheck(this, TimePassedSpan);
        return possibleConstructorReturn(this, (TimePassedSpan.__proto__ || Object.getPrototypeOf(TimePassedSpan)).apply(this, arguments));
    }

    createClass(TimePassedSpan, [{
        key: "render",
        value: function render() {
            return this.getTimeDeltaDisplay(this.options.timeStamp);
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    color: "#aaa"
                }
            };
        }
    }, {
        key: "getTimeDeltaDisplay",
        value: function getTimeDeltaDisplay(timeStamp) {
            var timeNow = Date.now();
            var timeDelta = parseInt((timeNow - timeStamp * 1000) / 1000);
            var timeUnitsInSeconds = [31556926, 2629743, 604800, 86400, 3600, 60];
            var timeUnits = ["year", "month", "week", "day", "hour", "minute"];
            if (timeDelta < 0) {
                timeDelta = 0;
            }
            for (var i = 0; i < timeUnits.length; i += 1) {
                var value = parseInt(timeDelta / timeUnitsInSeconds[i]);
                if (timeUnitsInSeconds[i] <= timeDelta) {
                    return value + " " + timeUnits[i] + (value > 1 ? "s" : "") + " ago";
                }
            }
            return "Few seconds ago";
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this17 = this;

            this._updateListener = this.constructor.addIntervalListener(function () {
                _this17.redraw();
            });
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            this._updateListener && this._updateListener.remove();
        }
    }], [{
        key: "addIntervalListener",
        value: function addIntervalListener(callback) {
            var _this18 = this;

            if (!this.updateFunction) {
                this.TIME_DISPATCHER = new Dispatchable();
                this.updateFunction = setInterval(function () {
                    _this18.TIME_DISPATCHER.dispatch("updateTimeValue");
                }, 5000);
            }
            return this.TIME_DISPATCHER.addListener("updateTimeValue", callback);
        }
    }]);
    return TimePassedSpan;
}(UI.Primitive("span"));

var _class$7, _descriptor$1, _descriptor2$1, _descriptor3$1;

function _initDefineProp$2(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var InputStyle = (_class$7 = function (_StyleSheet) {
    inherits(InputStyle, _StyleSheet);

    function InputStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, InputStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = InputStyle.__proto__ || Object.getPrototypeOf(InputStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$2(_this, "inputElement", _descriptor$1, _this), _initDefineProp$2(_this, "checkboxInput", _descriptor2$1, _this), _initDefineProp$2(_this, "select", _descriptor3$1, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return InputStyle;
}(StyleSheet), _descriptor$1 = _applyDecoratedDescriptor$2(_class$7.prototype, "inputElement", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            transition: "border-color ease-in-out .15s, box-shadow ease-in-out .15s",
            padding: "0.4em 0.54em",
            border: "1px solid #ccc",
            borderRadius: "4px",
            fontSize: "90%",
            ":focus": {
                outline: "0",
                borderColor: "#66afe9",
                boxShadow: "inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102,175,233,.6)"
            }
        };
    }
}), _descriptor2$1 = _applyDecoratedDescriptor$2(_class$7.prototype, "checkboxInput", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "0.2em",
            display: "inline-block",
            width: "initial !important",
            marginRight: "0.5em",
            marginBottom: "-.1em",
            height: "1em"
        };
    }
}), _descriptor3$1 = _applyDecoratedDescriptor$2(_class$7.prototype, "select", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "2.12em"
        };
    }
}), _class$7);

var _dec$1, _class$8;

var InputableElement = (_dec$1 = registerStyle(InputStyle), _dec$1(_class$8 = function (_UI$Element) {
    inherits(InputableElement, _UI$Element);

    function InputableElement() {
        classCallCheck(this, InputableElement);
        return possibleConstructorReturn(this, (InputableElement.__proto__ || Object.getPrototypeOf(InputableElement)).apply(this, arguments));
    }

    createClass(InputableElement, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(InputableElement.prototype.__proto__ || Object.getPrototypeOf(InputableElement.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.inputElement);
        }
    }]);
    return InputableElement;
}(UI.Element)) || _class$8);

var Input = function (_UI$Primitive) {
    inherits(Input, _UI$Primitive);

    function Input() {
        classCallCheck(this, Input);
        return possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).apply(this, arguments));
    }

    createClass(Input, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            var type = this.getInputType();
            if (type) {
                attr.setAttribute("type", type);
            }
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(Input.prototype.__proto__ || Object.getPrototypeOf(Input.prototype), "redraw", this).call(this);
            if (this.options.hasOwnProperty("value")) {
                this.setValue(this.options.value);
            }
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.node.value;
        }
    }, {
        key: "setValue",
        value: function setValue(newValue) {
            this.node.value = newValue;
        }
    }, {
        key: "getInputType",
        value: function getInputType() {
            // Must be overloaded
            return null;
        }
    }, {
        key: "onInput",
        value: function onInput(callback) {
            this.addNodeListener("input change", callback);
        }
    }, {
        key: "onKeyUp",
        value: function onKeyUp(callback) {
            this.addNodeListener("keyup", callback);
        }
    }]);
    return Input;
}(UI.Primitive(InputableElement, "input"));

Input.domAttributesMap = CreateNodeAttributesMap(UI.Element.domAttributesMap, [["autocomplete"], ["autofocus", { noValue: true }], ["formaction"], ["maxLength", { domName: "maxlength" }], ["minLength", { domName: "minlength" }], ["name"], ["placeholder"], ["readonly"], ["required"], ["value"]]);

var SubmitInput = function (_Input) {
    inherits(SubmitInput, _Input);

    function SubmitInput() {
        classCallCheck(this, SubmitInput);
        return possibleConstructorReturn(this, (SubmitInput.__proto__ || Object.getPrototypeOf(SubmitInput)).apply(this, arguments));
    }

    createClass(SubmitInput, [{
        key: "getInputType",
        value: function getInputType() {
            return "submit";
        }
    }]);
    return SubmitInput;
}(Input);

SubmitInput.domAttributesMap = CreateNodeAttributesMap(UI.Element.domAttributesMap, [["formenctype"], ["formmethod"], ["formnovalidate"], ["formtarget"]]);

var TextInput = function (_Input2) {
    inherits(TextInput, _Input2);

    function TextInput() {
        classCallCheck(this, TextInput);
        return possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).apply(this, arguments));
    }

    createClass(TextInput, [{
        key: "getInputType",
        value: function getInputType() {
            return "text";
        }
    }]);
    return TextInput;
}(Input);

var NumberInput = function (_Input3) {
    inherits(NumberInput, _Input3);

    function NumberInput() {
        classCallCheck(this, NumberInput);
        return possibleConstructorReturn(this, (NumberInput.__proto__ || Object.getPrototypeOf(NumberInput)).apply(this, arguments));
    }

    createClass(NumberInput, [{
        key: "getInputType",
        value: function getInputType() {
            return "number";
        }
    }, {
        key: "getValue",
        value: function getValue() {
            var val = get(NumberInput.prototype.__proto__ || Object.getPrototypeOf(NumberInput.prototype), "getValue", this).call(this);
            return parseInt(val) || parseFloat(val);
        }
    }]);
    return NumberInput;
}(Input);

NumberInput.domAttributesMap = CreateNodeAttributesMap(UI.Element.domAttributesMap, [["min"], ["max"], ["step"]]);

var EmailInput = function (_Input4) {
    inherits(EmailInput, _Input4);

    function EmailInput() {
        classCallCheck(this, EmailInput);
        return possibleConstructorReturn(this, (EmailInput.__proto__ || Object.getPrototypeOf(EmailInput)).apply(this, arguments));
    }

    createClass(EmailInput, [{
        key: "getInputType",
        value: function getInputType() {
            return "email";
        }
    }]);
    return EmailInput;
}(Input);

var PasswordInput = function (_Input5) {
    inherits(PasswordInput, _Input5);

    function PasswordInput() {
        classCallCheck(this, PasswordInput);
        return possibleConstructorReturn(this, (PasswordInput.__proto__ || Object.getPrototypeOf(PasswordInput)).apply(this, arguments));
    }

    createClass(PasswordInput, [{
        key: "getInputType",
        value: function getInputType() {
            return "password";
        }
    }]);
    return PasswordInput;
}(Input);

var FileInput = function (_Input6) {
    inherits(FileInput, _Input6);

    function FileInput() {
        classCallCheck(this, FileInput);
        return possibleConstructorReturn(this, (FileInput.__proto__ || Object.getPrototypeOf(FileInput)).apply(this, arguments));
    }

    createClass(FileInput, [{
        key: "getInputType",
        value: function getInputType() {
            return "file";
        }
    }, {
        key: "getFiles",
        value: function getFiles() {
            return this.node.files;
        }
    }, {
        key: "getFile",
        value: function getFile() {
            // TODO: this is valid only if multipleFiles is false
            return this.getFiles()[0];
        }
    }, {
        key: "getAsFormData",
        value: function getAsFormData() {
            var formData = new FormData();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getFiles()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var file = _step.value;

                    formData.append(file.name, file);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return formData;
        }
    }]);
    return FileInput;
}(Input);

FileInput.domAttributesMap = CreateNodeAttributesMap(UI.Element.domAttributesMap, [["multipleFiles", { domName: "multiple", noValue: true }], ["fileTypes", { domName: "accept" }]]);

var CheckboxInput = function (_Input7) {
    inherits(CheckboxInput, _Input7);

    function CheckboxInput() {
        classCallCheck(this, CheckboxInput);
        return possibleConstructorReturn(this, (CheckboxInput.__proto__ || Object.getPrototypeOf(CheckboxInput)).apply(this, arguments));
    }

    createClass(CheckboxInput, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(CheckboxInput.prototype.__proto__ || Object.getPrototypeOf(CheckboxInput.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.checkboxInput);
        }
    }, {
        key: "getInputType",
        value: function getInputType() {
            return "checkbox";
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.node.checked;
        }
    }, {
        key: "setValue",
        value: function setValue(newValue) {
            this.node.checked = newValue;
        }
    }]);
    return CheckboxInput;
}(Input);

CheckboxInput.domAttributesMap = CreateNodeAttributesMap(UI.Element.domAttributesMap, [["checked", { noValue: true }]]);

var RadioInput = function (_CheckboxInput) {
    inherits(RadioInput, _CheckboxInput);

    function RadioInput() {
        classCallCheck(this, RadioInput);
        return possibleConstructorReturn(this, (RadioInput.__proto__ || Object.getPrototypeOf(RadioInput)).apply(this, arguments));
    }

    createClass(RadioInput, [{
        key: "getInputType",
        value: function getInputType() {
            return "radio";
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.node.checked;
        }
    }, {
        key: "setValue",
        value: function setValue(newValue) {
            this.node.checked = newValue;
        }
    }]);
    return RadioInput;
}(CheckboxInput);

RadioInput.domAttributesMap = CreateNodeAttributesMap(CheckboxInput.domAttributesMap, [["name"]]);

var TextArea = function (_UI$Primitive2) {
    inherits(TextArea, _UI$Primitive2);

    function TextArea() {
        classCallCheck(this, TextArea);
        return possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).apply(this, arguments));
    }

    createClass(TextArea, [{
        key: "applyNodeAttributes",
        value: function applyNodeAttributes() {
            get(TextArea.prototype.__proto__ || Object.getPrototypeOf(TextArea.prototype), "applyNodeAttributes", this).call(this);
            this.node.readOnly = this.options.readOnly || false;
        }
    }, {
        key: "setReadOnly",
        value: function setReadOnly(value) {
            this.options.readOnly = value;
            this.node.readOnly = value;
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.node.value;
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(TextArea.prototype.__proto__ || Object.getPrototypeOf(TextArea.prototype), "redraw", this).call(this);
            if (this.options.hasOwnProperty("value")) {
                this.node.value = this.options.value + "";
            }
        }
    }, {
        key: "setValue",
        value: function setValue(value) {
            this.options.value = value;
            this.node.value = value;
        }
    }, {
        key: "onInput",
        value: function onInput(callback) {
            this.addNodeListener("input change", callback);
        }
    }, {
        key: "onKeyUp",
        value: function onKeyUp(callback) {
            this.addNodeListener("keyup", callback);
        }
    }]);
    return TextArea;
}(UI.Primitive(InputableElement, "textarea"));

var Select = function (_UI$Primitive3) {
    inherits(Select, _UI$Primitive3);

    function Select() {
        classCallCheck(this, Select);
        return possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).apply(this, arguments));
    }

    createClass(Select, [{
        key: "render",
        value: function render() {
            this.givenOptions = this.options.options || [];
            var selectOptions = [];

            for (var i = 0; i < this.givenOptions.length; i += 1) {
                var options = {
                    key: i
                };
                if (this.givenOptions[i] == this.options.selected) {
                    options.selected = true;
                }
                selectOptions.push(UI.createElement(
                    "option",
                    options,
                    this.givenOptions[i].toString()
                ));
            }

            return selectOptions;
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(Select.prototype.__proto__ || Object.getPrototypeOf(Select.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.select);
        }
    }, {
        key: "get",
        value: function get$$1() {
            var selectedIndex = this.getIndex();
            return this.givenOptions[selectedIndex];
        }
    }, {
        key: "set",
        value: function set$$1(value) {
            for (var i = 0; i < this.givenOptions.length; i++) {
                if (this.givenOptions[i] === value) {
                    this.setIndex(i);
                    return;
                }
            }
            console.error("Can't set the select option ", value, "\nAvailable options: ", this.givenOptions);
        }
    }, {
        key: "getIndex",
        value: function getIndex() {
            return this.node.selectedIndex;
        }
    }, {
        key: "setIndex",
        value: function setIndex(index) {
            this.node.selectedIndex = index;
            this.options.selected = this.givenOptions[index];
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(Select.prototype.__proto__ || Object.getPrototypeOf(Select.prototype), "redraw", this).call(this);
            if (this.options.selected) {
                this.set(this.options.selected);
            }
        }
    }]);
    return Select;
}(UI.Primitive(InputableElement, "select"));

var _class$9, _descriptor$2, _descriptor2$2, _descriptor3$2, _descriptor4$1, _descriptor5$1, _descriptor6$1;

function _initDefineProp$3(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$3(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var FormStyle = (_class$9 = function (_StyleSheet) {
    inherits(FormStyle, _StyleSheet);

    function FormStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, FormStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FormStyle.__proto__ || Object.getPrototypeOf(FormStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$3(_this, "form", _descriptor$2, _this), _initDefineProp$3(_this, "formGroup", _descriptor2$2, _this), _initDefineProp$3(_this, "formField", _descriptor3$2, _this), _initDefineProp$3(_this, "sameLine", _descriptor4$1, _this), _this.separatedLineInputStyle = {
            marginRight: "0.5em",
            width: "100%",
            height: "2.4em"
        }, _initDefineProp$3(_this, "separatedLine", _descriptor5$1, _this), _initDefineProp$3(_this, "hasError", _descriptor6$1, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return FormStyle;
}(StyleSheet), _descriptor$2 = _applyDecoratedDescriptor$3(_class$9.prototype, "form", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: "0 auto"
        };
    }
}), _descriptor2$2 = _applyDecoratedDescriptor$3(_class$9.prototype, "formGroup", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginBottom: "10px"
        };
    }
}), _descriptor3$2 = _applyDecoratedDescriptor$3(_class$9.prototype, "formField", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">label": {
                width: "100%"
            },
            display: "block",
            padding: "6px 0px",
            lineHeight: "1.42857143",
            color: "#555",
            maxWidth: "600px",
            margin: "0 auto",
            "[disabled]": {
                opacity: "1",
                cursor: "not-allowed"
            },
            "[readonly]": {
                opacity: "1"
            }
        };
    }
}), _descriptor4$1 = _applyDecoratedDescriptor$3(_class$9.prototype, "sameLine", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">label>*:nth-child(1)": {
                display: "inline-block",
                textAlign: "right",
                paddingRight: "1em",
                width: "30%",
                verticalAlign: "middle"
            },
            ">label>*:nth-child(2)": {
                display: "inline-block",
                width: "70%",
                verticalAlign: "middle"
            }
        };
    }
}), _descriptor5$1 = _applyDecoratedDescriptor$3(_class$9.prototype, "separatedLine", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "6px 10px",
            ">label>*:nth-child(1)": {
                verticalAlign: "sub"
            },
            ">label>input": this.separatedLineInputStyle,
            ">label>select": this.separatedLineInputStyle,
            ">label>textarea": this.separatedLineInputStyle,
            ">label>input[type='checkbox']": {
                marginLeft: "10px",
                verticalAlign: "middle"
            }
        };
    }
}), _descriptor6$1 = _applyDecoratedDescriptor$3(_class$9.prototype, "hasError", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "#a94442"
        };
    }
}), _class$9);

var _dec$2, _class$10, _dec2$1, _class2$1;

var Form = (_dec$2 = registerStyle(FormStyle), _dec$2(_class$10 = function (_UI$Primitive) {
    inherits(Form, _UI$Primitive);

    function Form() {
        classCallCheck(this, Form);
        return possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
    }

    createClass(Form, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.form);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            // Form elements by default refresh the page when a button inside them is clicked, so we prevent that.
            this.addNodeListener("submit", function (event) {
                return event.preventDefault();
            });
        }
    }]);
    return Form;
}(UI.Primitive("form"))) || _class$10);
var FormGroup = (_dec2$1 = registerStyle(FormStyle), _dec2$1(_class2$1 = function (_UI$Element) {
    inherits(FormGroup, _UI$Element);

    function FormGroup() {
        classCallCheck(this, FormGroup);
        return possibleConstructorReturn(this, (FormGroup.__proto__ || Object.getPrototypeOf(FormGroup)).apply(this, arguments));
    }

    createClass(FormGroup, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.formGroup);
        }
    }, {
        key: "setError",
        value: function setError(errorMessage) {
            this.errorField.node.textContent = errorMessage;
            this.addClass(this.styleSheet.hasError);
        }
    }, {
        key: "removeError",
        value: function removeError() {
            this.errorField.node.textContent = "";
            this.removeClass(this.styleSheet.hasError);
        }
    }, {
        key: "getErrorField",
        value: function getErrorField() {
            return UI.createElement("span", { ref: "errorField", style: { float: "right" } });
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            return [this.render(), this.getErrorField()];
        }
    }]);
    return FormGroup;
}(UI.Element)) || _class2$1);

var FormField = function (_FormGroup) {
    inherits(FormField, _FormGroup);

    function FormField() {
        classCallCheck(this, FormField);
        return possibleConstructorReturn(this, (FormField.__proto__ || Object.getPrototypeOf(FormField)).apply(this, arguments));
    }

    createClass(FormField, [{
        key: "inline",
        value: function inline() {
            return !(this.options.inline === false || this.parent && this.parent.options && this.parent.options.inline === false);
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.formField);
            if (this.inline()) {
                attr.addClass(this.styleSheet.sameLine);
            } else {
                attr.addClass(this.styleSheet.separatedLine);
            }
        }
    }, {
        key: "getLabel",
        value: function getLabel() {
            if (this.options.label) {
                return UI.createElement(
                    "strong",
                    null,
                    this.options.label
                );
            }
            return null;
        }
    }, {
        key: "render",
        value: function render() {
            if (this.options.contentFirst) {
                return [UI.createElement(
                    "label",
                    null,
                    [get(FormField.prototype.__proto__ || Object.getPrototypeOf(FormField.prototype), "render", this).call(this), this.getLabel()]
                )];
            } else {
                return [UI.createElement(
                    "label",
                    null,
                    [this.getLabel(), get(FormField.prototype.__proto__ || Object.getPrototypeOf(FormField.prototype), "render", this).call(this)]
                )];
            }
        }
    }]);
    return FormField;
}(FormGroup);

// Setting these attributes as styles in mozilla has no effect.
// To maintain compatibility between moz and webkit, whenever
// one of these attributes is set as a style, it is also set as a
// node attribute.
var MozStyleElements = new Set(["width", "height", "rx", "ry", "cx", "cy", "x", "y"]);

var SVGNodeAttributes = function (_NodeAttributes) {
    inherits(SVGNodeAttributes, _NodeAttributes);

    function SVGNodeAttributes() {
        classCallCheck(this, SVGNodeAttributes);
        return possibleConstructorReturn(this, (SVGNodeAttributes.__proto__ || Object.getPrototypeOf(SVGNodeAttributes)).apply(this, arguments));
    }

    createClass(SVGNodeAttributes, [{
        key: "fixMozAttributes",
        value: function fixMozAttributes(node) {
            if (this.hasOwnProperty("style")) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = MozStyleElements.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var attributeName = _step.value;

                        if (this.style.hasOwnProperty(attributeName) && !this.hasOwnProperty(attributeName)) {
                            this.setAttribute(attributeName, this.style[attributeName], node);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }
    }, {
        key: "setStyle",
        value: function setStyle(attributeName, value, node) {
            get(SVGNodeAttributes.prototype.__proto__ || Object.getPrototypeOf(SVGNodeAttributes.prototype), "setStyle", this).call(this, attributeName, value, node);
            if (MozStyleElements.has(attributeName)) {
                this.setAttribute(attributeName, value, node);
            }
        }
    }, {
        key: "applyClassName",
        value: function applyClassName(node) {
            // SVG elements have a different API for setting the className than regular DOM nodes
            if (this.className) {
                node.setAttribute("class", String(this.className));
            } else {
                node.removeAttribute("class");
            }
        }
    }, {
        key: "apply",
        value: function apply(node, attributesMap) {
            this.transform = this.transform || this.translate;
            get(SVGNodeAttributes.prototype.__proto__ || Object.getPrototypeOf(SVGNodeAttributes.prototype), "apply", this).call(this, node, attributesMap);
            this.fixMozAttributes(node);
        }
    }]);
    return SVGNodeAttributes;
}(NodeAttributes);

var SVG = {};

SVG.Element = function (_UI$Element) {
    inherits(SVGElement, _UI$Element);

    function SVGElement() {
        classCallCheck(this, SVGElement);
        return possibleConstructorReturn(this, (SVGElement.__proto__ || Object.getPrototypeOf(SVGElement)).apply(this, arguments));
    }

    createClass(SVGElement, [{
        key: "createNode",
        value: function createNode() {
            this.node = document.createElementNS("http://www.w3.org/2000/svg", this.getNodeType());
            if (document.STEM_DEBUG) {
                this.node.stemElement = this;
            }
            return this.node;
        }
    }, {
        key: "getScreenCoordinatedForPoint",
        value: function getScreenCoordinatedForPoint(point) {
            var node = this.node;
            // TODO: this is a good argument to always keep a reference to the Stem element in the nodes
            var svgNode = node.ownerSVGElement || node;

            if (svgNode.createSVGPoint) {
                // Using native SVG transformations
                // See https://msdn.microsoft.com/en-us/library/hh535760(v=vs.85).aspx
                var svgPoint = svgNode.createSVGPoint();
                svgPoint.x = point.x;
                svgPoint.y = point.y;
                return svgPoint.matrixTransform(node.getScreenCTM().inverse());
            }

            var rect = this.getBoundingClientRect();
            return {
                x: point.x - rect.left - node.clientLeft,
                y: point.y - rect.top - node.clientTop
            };
        }
    }, {
        key: "getMouseCoordinatesForEvent",
        value: function getMouseCoordinatesForEvent() {
            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;

            return this.getScreenCoordinatedForPoint({ x: Device.getEventX(event), y: Device.getEventY(event) });
        }
    }, {
        key: "saveState",
        value: function saveState() {
            var state = {};
            state.options = Object.assign({}, this.options);
            return state;
        }
    }, {
        key: "setState",
        value: function setState(state) {
            this.setOptions(state.options);
        }
    }, {
        key: "getOptionsAsNodeAttributes",
        value: function getOptionsAsNodeAttributes() {
            var attr = this.options;
            attr.__proto__ = SVGNodeAttributes.prototype;
            return attr;
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var returnCopy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (returnCopy) {
                return new SVGNodeAttributes(this.options);
            } else {
                return this.getOptionsAsNodeAttributes();
            }
        }
    }, {
        key: "translate",
        value: function translate() {
            var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            this.options.translate = "translate(" + x + "," + y + ")";
        }
    }, {
        key: "getHashCode",
        value: function getHashCode() {
            return uniqueId(this);
        }

        //TODO(@all) : getBoundingClientRect is unreliable, reimplement it.

    }, {
        key: "getBoundingClientRect",
        value: function getBoundingClientRect() {
            var element = this.node;
            var x = 0;
            var y = 0;
            while (element && element !== document.body) {
                x -= element.scrollLeft;
                y -= element.scrollTop;
                element = element.offsetParent || element.parentNode;
            }
            if (element) {
                x -= element.scrollLeft;
                y -= element.scrollTop;
            }
            var pos = this.node.getBoundingClientRect();
            return {
                top: pos.top - y,
                left: pos.left - x,
                width: pos.width,
                bottom: pos.bottom - y,
                height: pos.height,
                right: pos.right - x
            };
        }
    }, {
        key: "getBBox",
        value: function getBBox() {
            return this.node.getBBox();
        }
    }, {
        key: "getHeight",
        value: function getHeight() {
            return this.getBoundingClientRect().height;
        }
    }, {
        key: "getWidth",
        value: function getWidth() {
            return this.getBoundingClientRect().width;
        }
    }, {
        key: "toFront",
        value: function toFront() {
            var parentNode = this.node && this.node.parentElement;
            if (parentNode) {
                parentNode.removeChild(this.node);
                parentNode.appendChild(this.node);
            }
        }
    }, {
        key: "toBack",
        value: function toBack() {}
    }, {
        key: "setOpacity",
        value: function setOpacity(newOpacity) {
            this.options.opacity = newOpacity;
            if (this.node) {
                this.node.setAttribute("opacity", newOpacity);
            }
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.options.color = color;
            if (this.node) {
                this.node.setAttribute("stroke", color);
                this.node.setAttribute("fill", color);
            }
        }
    }, {
        key: "remove",
        value: function remove() {}
    }, {
        key: "getSvg",
        value: function getSvg() {
            return this.parent.getSvg();
        }
    }]);
    return SVGElement;
}(UI.Element);

SVG.Element.domAttributesMap = CreateNodeAttributesMap(UI.Element.domAttributesMap, [["fill"], ["height"], ["opacity"], ["stroke"], ["strokeWidth", { domName: "stroke-width" }], ["clipPath", { domName: "clip-path" }], ["transform"], ["width"], ["cx"], ["cy"], ["rx"], ["ry"], ["x"], ["y"], ["x1"], ["y1"], ["x2"], ["y2"], ["offset"], ["stopColor", { domName: "stop-color" }], ["strokeDasharray", { domName: "stroke-dasharray" }], ["strokeLinecap", { domName: "stroke-linecap" }], ["viewBox", { domName: "viewBox" }]]);

SVG.Text = function (_SVG$Element) {
    inherits(SVGText, _SVG$Element);

    function SVGText() {
        classCallCheck(this, SVGText);
        return possibleConstructorReturn(this, (SVGText.__proto__ || Object.getPrototypeOf(SVGText)).apply(this, arguments));
    }

    createClass(SVGText, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "text";
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                text: "",
                fontSize: "15px",
                color: "black",
                dy: "0.35em",
                textAnchor: "middle",
                selectable: false
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            // TODO: For some reason, still selectable in mozilla...
            if (!this.options.selectable) {
                attr.setStyle("-webkit-user-select", "none");
                attr.setStyle("-khtml-user-select", "none");
                attr.setStyle("-moz-user-select", "none");
                attr.setStyle("-ms-user-select", "none");
                attr.setStyle("user-select", "none");
            }
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(UI.TextElement, { ref: "textElement", value: this.options.text + "" })];
        }
    }, {
        key: "getX",
        value: function getX() {
            return this.options.x;
        }
    }, {
        key: "setX",
        value: function setX(x) {
            this.options.x = x;
            this.node.setAttribute("x", this.options.x);
        }
    }, {
        key: "getY",
        value: function getY() {
            return this.options.y;
        }
    }, {
        key: "setY",
        value: function setY(y) {
            this.options.y = y;
            this.node.setAttribute("y", this.options.y);
        }
    }, {
        key: "setText",
        value: function setText(text) {
            this.options.text = text;
            this.textElement.setValue(text + "");
        }
    }, {
        key: "getText",
        value: function getText() {
            return this.options.text;
        }
    }, {
        key: "setPosition",
        value: function setPosition(x, y) {
            this.setX(x);
            this.setY(y);
        }
    }, {
        key: "getColor",
        value: function getColor() {
            return this.options.color;
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            var fillOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            this.options.color = color;
            if (this.node) {
                this.node.setAttribute("fill", color);
                if (!fillOnly) {
                    this.node.setAttribute("stroke", color);
                }
            }
        }
    }]);
    return SVGText;
}(SVG.Element);

SVG.Text.domAttributesMap = CreateNodeAttributesMap(SVG.Element.domAttributesMap, [["dx"], ["dy"], ["fontFamily", { domName: "font-family" }], ["fontSize", { domName: "font-size" }], ["textAnchor", { domName: "text-anchor" }]]);

SVG.SVGRoot = function (_SVG$Element) {
    inherits(SVGRoot, _SVG$Element);

    function SVGRoot() {
        classCallCheck(this, SVGRoot);
        return possibleConstructorReturn(this, (SVGRoot.__proto__ || Object.getPrototypeOf(SVGRoot)).apply(this, arguments));
    }

    createClass(SVGRoot, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "svg";
        }
    }, {
        key: "getSvg",
        value: function getSvg() {
            return this;
        }
    }]);
    return SVGRoot;
}(SVG.Element);

SVG.RawSVG = function (_SVG$SVGRoot) {
    inherits(RawSVG, _SVG$SVGRoot);

    function RawSVG() {
        classCallCheck(this, RawSVG);
        return possibleConstructorReturn(this, (RawSVG.__proto__ || Object.getPrototypeOf(RawSVG)).apply(this, arguments));
    }

    createClass(RawSVG, [{
        key: "redraw",
        value: function redraw() {
            get(RawSVG.prototype.__proto__ || Object.getPrototypeOf(RawSVG.prototype), "redraw", this).call(this);
            this.node.innerHTML = this.options.innerHTML;
        }
    }]);
    return RawSVG;
}(SVG.SVGRoot);

SVG.Group = function (_SVG$Element2) {
    inherits(SVGGroup, _SVG$Element2);

    function SVGGroup() {
        classCallCheck(this, SVGGroup);
        return possibleConstructorReturn(this, (SVGGroup.__proto__ || Object.getPrototypeOf(SVGGroup)).apply(this, arguments));
    }

    createClass(SVGGroup, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "g";
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            for (var i = 0; i < this.children.length; i += 1) {
                this.children[i].setColor(color);
            }
        }
    }]);
    return SVGGroup;
}(SVG.Element);

SVG.Defs = function (_SVG$Element3) {
    inherits(SVGDefs, _SVG$Element3);

    function SVGDefs() {
        classCallCheck(this, SVGDefs);
        return possibleConstructorReturn(this, (SVGDefs.__proto__ || Object.getPrototypeOf(SVGDefs)).apply(this, arguments));
    }

    createClass(SVGDefs, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "defs";
        }
    }]);
    return SVGDefs;
}(SVG.Element);

SVG.ClipPath = function (_SVG$Element4) {
    inherits(ClipPath, _SVG$Element4);

    function ClipPath() {
        classCallCheck(this, ClipPath);
        return possibleConstructorReturn(this, (ClipPath.__proto__ || Object.getPrototypeOf(ClipPath)).apply(this, arguments));
    }

    createClass(ClipPath, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "clipPath";
        }
    }]);
    return ClipPath;
}(SVG.Element);

SVG.Path = function (_SVG$Element5) {
    inherits(SVGPath, _SVG$Element5);

    function SVGPath() {
        classCallCheck(this, SVGPath);
        return possibleConstructorReturn(this, (SVGPath.__proto__ || Object.getPrototypeOf(SVGPath)).apply(this, arguments));
    }

    createClass(SVGPath, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "path";
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                d: ""
            };
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(SVGPath.prototype.__proto__ || Object.getPrototypeOf(SVGPath.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("d", this.getPath());
            return attr;
        }
    }, {
        key: "getPath",
        value: function getPath() {
            return this.options.d;
        }
    }, {
        key: "setPath",
        value: function setPath(newPath) {
            this.options.d = newPath;
            this.node.setAttribute("d", this.options.d);
        }
    }, {
        key: "getLength",
        value: function getLength() {
            return this.node.getTotalLength();
        }
    }, {
        key: "getPointAtLength",
        value: function getPointAtLength(len) {
            return this.node.getPointAtLength(len);
        }
    }, {
        key: "getPointAtLengthWithAngle",
        value: function getPointAtLengthWithAngle(len) {
            var totalLength = this.getLength();
            var epsilon = void 0;
            if (totalLength <= 1) {
                epsilon = totalLength / 1000;
            } else {
                epsilon = Math.min(totalLength / 1000, Math.log(totalLength), 1);
            }
            var p1 = this.getPointAtLength(len);
            var p2 = this.getPointAtLength(Math.min(len + epsilon, totalLength));
            var p3 = this.getPointAtLength(Math.max(len - epsilon, 0));
            return {
                x: p1.x,
                y: p1.y,
                alpha: 180 * Math.atan2(p3.y - p2.y, p3.x - p2.x) / Math.PI
            };
        }
    }]);
    return SVGPath;
}(SVG.Element);

SVG.Circle = function (_SVG$Element6) {
    inherits(SVGCircle, _SVG$Element6);

    function SVGCircle() {
        classCallCheck(this, SVGCircle);
        return possibleConstructorReturn(this, (SVGCircle.__proto__ || Object.getPrototypeOf(SVGCircle)).apply(this, arguments));
    }

    createClass(SVGCircle, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "circle";
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                radius: 0,
                center: { x: 0, y: 0 }
            };
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(SVGCircle.prototype.__proto__ || Object.getPrototypeOf(SVGCircle.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("r", this.options.radius);
            attr.setAttribute("cx", this.options.center.x);
            attr.setAttribute("cy", this.options.center.y);
            return attr;
        }
    }, {
        key: "getRadius",
        value: function getRadius() {
            return this.options.radius;
        }
    }, {
        key: "setRadius",
        value: function setRadius(radius) {
            this.options.radius = radius;

            this.setAttribute("r", radius);
        }
    }, {
        key: "setCenter",
        value: function setCenter(x, y) {
            this.options.center.x = x;
            this.options.center.y = y;

            this.setAttribute("cx", x);
            this.setAttribute("cy", y);
        }
    }, {
        key: "getCenter",
        value: function getCenter() {
            return this.options.center;
        }
    }, {
        key: "toPath",
        value: function toPath() {
            var r = this.options.radius;
            var cx = this.options.center.x;
            var cy = this.options.center.y;
            var pathString = "M" + (cx - r) + " " + cy + // Starting point is W
            "a" + r + " " + r + " 0 0 1 " + r + " " + -r + // Move to N
            "a" + r + " " + r + " 0 0 1 " + r + " " + r + // Move to E
            "a" + r + " " + r + " 0 0 1 " + -r + " " + r + // Move to S
            "a" + r + " " + r + " 0 0 1 " + -r + " " + -r; // Finally, move back to W
            return new SVG.Path({ d: pathString });
        }
    }]);
    return SVGCircle;
}(SVG.Element);

SVG.Stop = function (_SVG$Element7) {
    inherits(SVGStop, _SVG$Element7);

    function SVGStop() {
        classCallCheck(this, SVGStop);
        return possibleConstructorReturn(this, (SVGStop.__proto__ || Object.getPrototypeOf(SVGStop)).apply(this, arguments));
    }

    createClass(SVGStop, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "stop";
        }
    }]);
    return SVGStop;
}(SVG.Element);

SVG.RadialGradient = function (_SVG$Element8) {
    inherits(SVGRadialGradient, _SVG$Element8);

    function SVGRadialGradient() {
        classCallCheck(this, SVGRadialGradient);
        return possibleConstructorReturn(this, (SVGRadialGradient.__proto__ || Object.getPrototypeOf(SVGRadialGradient)).apply(this, arguments));
    }

    createClass(SVGRadialGradient, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "radialGradient";
        }
    }]);
    return SVGRadialGradient;
}(SVG.Element);

//TODO Complete this class
SVG.Ellipse = function (_SVG$Element9) {
    inherits(SVGEllipse, _SVG$Element9);

    function SVGEllipse() {
        classCallCheck(this, SVGEllipse);
        return possibleConstructorReturn(this, (SVGEllipse.__proto__ || Object.getPrototypeOf(SVGEllipse)).apply(this, arguments));
    }

    createClass(SVGEllipse, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "ellipse";
        }
    }]);
    return SVGEllipse;
}(SVG.Element);

SVG.CircleArc = function (_SVG$Path) {
    inherits(SVGCircleArc, _SVG$Path);

    function SVGCircleArc() {
        classCallCheck(this, SVGCircleArc);
        return possibleConstructorReturn(this, (SVGCircleArc.__proto__ || Object.getPrototypeOf(SVGCircleArc)).apply(this, arguments));
    }

    createClass(SVGCircleArc, [{
        key: "getPath",
        value: function getPath() {
            var startAngle = this.options.startAngle;
            var endAngle = this.options.endAngle;
            var radius = this.options.radius;
            var center = this.options.center;

            var angleDiff = endAngle - startAngle + (endAngle < startAngle ? 2 * Math.PI : 0);
            var startPoint = polarToCartesian(startAngle, radius, center);
            var endPoint = polarToCartesian(endAngle, radius, center);
            var sweepFlag;
            var largeArcFlag;

            // Set largeArcFlag and sweepFlag
            if (angleDiff <= Math.PI) {
                largeArcFlag = 0;
                if (crossProduct(startPoint, endPoint, center) <= 0) {
                    sweepFlag = 0;
                } else {
                    sweepFlag = 1;
                }
            } else {
                largeArcFlag = 1;
                if (crossProduct(startPoint, endPoint, center) <= 0) {
                    sweepFlag = 1;
                } else {
                    sweepFlag = 0;
                }
            }

            return "M " + startPoint.x + " " + startPoint.y + " A " + radius + " " + radius + " 0 " + largeArcFlag + " " + sweepFlag + " " + endPoint.x + " " + endPoint.y;
        }
    }]);
    return SVGCircleArc;
}(SVG.Path);

SVG.Rect = function (_SVG$Element10) {
    inherits(SVGRect, _SVG$Element10);

    function SVGRect() {
        classCallCheck(this, SVGRect);
        return possibleConstructorReturn(this, (SVGRect.__proto__ || Object.getPrototypeOf(SVGRect)).apply(this, arguments));
    }

    createClass(SVGRect, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "rect";
        }
    }, {
        key: "getX",
        value: function getX() {
            return this.options.x;
        }
    }, {
        key: "setX",
        value: function setX(x) {
            this.options.x = x;
            this.node.setAttribute("x", this.options.x);
        }
    }, {
        key: "getY",
        value: function getY() {
            return this.options.y;
        }
    }, {
        key: "setY",
        value: function setY(y) {
            this.options.y = y;
            this.node.setAttribute("y", this.options.y);
        }
    }, {
        key: "getWidth",
        value: function getWidth() {
            return this.options.width;
        }
    }, {
        key: "setWidth",
        value: function setWidth(width) {
            this.options.width = width;
            this.node.setAttribute("width", this.options.width);
        }
    }, {
        key: "getHeight",
        value: function getHeight() {
            return this.options.height;
        }
    }, {
        key: "setHeight",
        value: function setHeight(height) {
            this.options.height = height;
            this.node.setAttribute("height", this.options.height);
        }
    }]);
    return SVGRect;
}(SVG.Element);

SVG.Line = function (_SVG$Element11) {
    inherits(SVGLine, _SVG$Element11);

    function SVGLine() {
        classCallCheck(this, SVGLine);
        return possibleConstructorReturn(this, (SVGLine.__proto__ || Object.getPrototypeOf(SVGLine)).apply(this, arguments));
    }

    createClass(SVGLine, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "line";
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                fill: "black",
                stroke: "black"
            };
        }

        //TODO(@all): Make the getters for x1, y1, x2, y2

    }, {
        key: "setLine",
        value: function setLine(x1, y1, x2, y2) {
            this.options.x1 = x1;
            this.options.y1 = y1;
            this.options.x2 = x2;
            this.options.y2 = y2;

            this.setAttribute("x1", x1);
            this.setAttribute("y1", y1);
            this.setAttribute("x2", x2);
            this.setAttribute("y2", y2);
        }
    }]);
    return SVGLine;
}(SVG.Element);

SVG.Polygon = function (_SVG$Path2) {
    inherits(Polygon, _SVG$Path2);

    function Polygon() {
        classCallCheck(this, Polygon);
        return possibleConstructorReturn(this, (Polygon.__proto__ || Object.getPrototypeOf(Polygon)).apply(this, arguments));
    }

    createClass(Polygon, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                points: []
            };
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(Polygon.prototype.__proto__ || Object.getPrototypeOf(Polygon.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("d", this.getPolygonPath());
            return attr;
        }
    }, {
        key: "getPolygonPath",
        value: function getPolygonPath() {
            var pathString = "";
            for (var i = 0; i < this.options.points.length; ++i) {
                if (i == 0) {
                    pathString += "M ";
                } else {
                    pathString += "L ";
                }
                pathString += this.options.points[i].x + " " + this.options.points[i].y + " ";
            }
            pathString += "Z";
            return pathString;
        }
    }, {
        key: "setPoints",
        value: function setPoints(points) {
            this.options.points = points;
            this.setPath(this.getPolygonPath());
        }
    }]);
    return Polygon;
}(SVG.Path);

var Transition = function () {
    function Transition(options) {
        classCallCheck(this, Transition);

        this.func = options.func;
        this.context = options.context;
        this.duration = options.duration || 0;
        this.startTime = options.startTime || 0;
        this.dependsOn = options.dependsOn || [];
        this.speedFactor = 1;
    }

    createClass(Transition, [{
        key: "toString",
        value: function toString() {
            return "{\n" + "   context: " + this.context + "\n" + "   duration: " + this.duration + "\n" + "   startTime: " + this.startTime + "\n" + "   dependsOn: " + this.dependsOn + "\n" + "   func: " + this.func.toString() + "\n" + "}\n";
        }
    }, {
        key: "hasDependencyOn",
        value: function hasDependencyOn(t) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.dependsOn[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var transition = _step.value;

                    if (transition === t) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return false;
        }
    }, {
        key: "canAdvance",
        value: function canAdvance() {
            for (var i = 0; i < this.dependsOn.length; i += 1) {
                if (!this.dependsOn[i].isStopped()) {
                    return false;
                }
            }
            return true;
        }
    }, {
        key: "getFraction",
        value: function getFraction() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            return Math.min((now - this.startTime) / this.getLength(), 1);
        }
    }, {
        key: "start",
        value: function start() {
            var _this = this;

            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            if (this.stopped) {
                delete this.stopped;
            }
            this.setStartTime(now);

            var functionWrapper = function functionWrapper() {
                if (_this.stopped) {
                    return;
                }
                if (!_this.pauseTime) {
                    _this.nextStep();
                }
                requestAnimationFrame(functionWrapper);
            };
            requestAnimationFrame(functionWrapper);
            return this;
        }
    }, {
        key: "getLength",
        value: function getLength() {
            return this.getEndTime() - this.startTime;
        }
    }, {
        key: "setStartTime",
        value: function setStartTime(time) {
            this.startTime = time;
            return this;
        }
    }, {
        key: "setSpeedFactor",
        value: function setSpeedFactor(speedFactor) {
            var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();

            var ratio = speedFactor / this.speedFactor;
            this.startTime = (this.startTime - now) / ratio + now;
            if (this.pauseTime) {
                this.pauseTime = (this.pauseTime - now) / ratio + now;
            }
            this.speedFactor = speedFactor;
            return this;
        }
    }, {
        key: "pause",
        value: function pause() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            if (!this.pauseTime) {
                this.pauseTime = now;
            }
            return this;
        }
    }, {
        key: "resume",
        value: function resume() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            if (this.pauseTime) {
                this.startTime += now - this.pauseTime;
                this.pauseTime = 0;
            }
            return this;
        }
    }, {
        key: "forceStart",
        value: function forceStart() {
            this.restart();
            this.func(0.0, this.context);
            return this;
        }
    }, {
        key: "forceFinish",
        value: function forceFinish() {
            this.func(1.0, this.context);
            this.stop();
            return this;
        }
    }, {
        key: "stop",
        value: function stop() {
            this.stopped = true;
        }
    }, {
        key: "restart",
        value: function restart() {
            delete this.stopped;
            return this;
        }
    }, {
        key: "isStopped",
        value: function isStopped() {
            return this.stopped === true;
        }
    }, {
        key: "nextStep",
        value: function nextStep() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            // Return if transition is stopped
            if (this.isStopped()) {
                return this;
            }
            this.lastT = this.getFraction(now);
            // Return if transitions not started yet
            if (this.lastT < 0) {
                return this;
            }
            // Call the animation function
            this.func(this.lastT, this.context);
            // Stop the animation if it's the last step
            if (this.lastT === 1) {
                this.stop();
            }
            return this;
        }
    }, {
        key: "getEndTime",
        value: function getEndTime() {
            return this.startTime + this.duration / this.speedFactor;
        }
    }]);
    return Transition;
}();

var Modifier$1 = function (_Transition) {
    inherits(Modifier, _Transition);

    function Modifier(options) {
        classCallCheck(this, Modifier);

        var _this2 = possibleConstructorReturn(this, (Modifier.__proto__ || Object.getPrototypeOf(Modifier)).call(this, options));

        _this2.reverseFunc = options.reverseFunc;
        _this2.context = options.context;
        return _this2;
    }

    // WTF, so basically JSON.stringify??


    createClass(Modifier, [{
        key: "toString",
        value: function toString() {
            return "{\n" + "   context: " + this.context + "\n" + "   duration: " + this.duration + "\n" + "   startTime: " + this.startTime + "\n" + "   dependsOn: " + this.dependsOn + "\n" + "   func: " + this.func.toString() + "\n" + "   reverseFunc: " + this.reverseFunc.toString() + "\n" + "}\n";
        }
    }, {
        key: "forceStart",
        value: function forceStart() {
            this.restart();
            this.reverseFunc(this.context);
            return this;
        }
    }, {
        key: "forceFinish",
        value: function forceFinish() {
            this.func(this.context);
            this.stop();
            return this;
        }
    }, {
        key: "nextStep",
        value: function nextStep() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            if (this.isStopped()) {
                return this;
            }
            if (now >= this.startTime) {
                this.func(this.context);
                this.stop();
            }
            return this;
        }
    }, {
        key: "getEndTime",
        value: function getEndTime() {
            return this.startTime;
        }
    }]);
    return Modifier;
}(Transition);

var TransitionList = function () {
    function TransitionList() {
        var startTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        classCallCheck(this, TransitionList);

        this.startTime = startTime;
        this.speedFactor = 1;
        this.transitions = [];
        this.dependsOn = [];
    }

    createClass(TransitionList, [{
        key: "toString",
        value: function toString() {
            return "{\n" + "   context: " + this.context + "\n" + "   duration: " + this.duration + "\n" + "   startTime: " + this.startTime + "\n" + "   dependsOn: " + this.dependsOn + "\n" + "   transitions: [" + (this.transitions.length ? this.transitions[0].toString() : "") + " ...]\n" + "}\n";
        }
    }, {
        key: "add",
        value: function add(transition) {
            var forceFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            for (var i = 0; i < transition.dependsOn.length; i += 1) {
                if (transition.dependsOn[i].getEndTime() > transition.startTime) {
                    console.error(transition.toString() + "\ndepends on\n" + transition.dependsOn[i].toString() + "\n" + "which ends after its start!");
                }
            }
            if (forceFinish) {
                transition.forceFinish();
            }
            this.transitions.push(transition);
            return this;
        }
    }, {
        key: "push",
        value: function push(transition) {
            var forceFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            transition.setStartTime(this.getLength());
            for (var i = 0; i < transition.dependsOn.length; i += 1) {
                if (transition.dependsOn[i].getEndTime() > transition.startTime) {
                    console.error(transition.toString() + "\ndepends on\n" + transition.dependsOn[i].toString() + "\n" + "which ends after its start!");
                }
            }
            if (forceFinish) {
                transition.forceFinish();
            }
            this.transitions.push(transition);
            return this;
        }
    }, {
        key: "getFraction",
        value: function getFraction() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            return Math.min((now - this.startTime) / this.getLength(), 1);
        }
    }, {
        key: "setStartTime",
        value: function setStartTime(startTime) {
            var timeDelta = startTime - this.startTime;
            this.startTime = startTime;
            for (var i = 0; i < this.transitions.length; i += 1) {
                var transition = this.transitions[i];
                transition.setStartTime(transition.startTime + timeDelta);
            }
        }
    }, {
        key: "start",
        value: function start() {
            var _this3 = this;

            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            if (this.stopped) {
                delete this.stopped;
            }
            this.setStartTime(now);
            var functionWrapper = function functionWrapper() {
                if (_this3.stopped) {
                    return;
                }
                if (!_this3.pauseTime) {
                    _this3.nextStep();
                }
                requestAnimationFrame(functionWrapper);
            };
            requestAnimationFrame(functionWrapper);
            return this;
        }
    }, {
        key: "stop",
        value: function stop() {
            this.stopped = true;
            for (var i = 0; i < this.transitions.length; i += 1) {
                var transition = this.transitions[i];
                transition.stop();
            }
        }
    }, {
        key: "isStopped",
        value: function isStopped() {
            return this.stopped === true;
        }
    }, {
        key: "pause",
        value: function pause() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            if (!this.pauseTime) {
                this.pauseTime = now;
                for (var i = 0; i < this.transitions.length; i += 1) {
                    this.transitions[i].pause(now);
                }
            }
            return this;
        }
    }, {
        key: "resume",
        value: function resume() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            if (this.pauseTime) {
                this.startTime += now - this.pauseTime;
                for (var i = 0; i < this.transitions.length; i += 1) {
                    this.transitions[i].resume(now);
                }
                this.pauseTime = 0;
            }
            return this;
        }
    }, {
        key: "nextStep",
        value: function nextStep() {
            // Return if transition list is stopped
            if (this.isStopped()) {
                return;
            }

            if (this.onNewFrame) {
                this.onNewFrame(this.getFraction());
            }

            var finished = true;
            var stk = [];
            for (var i = 0; i < this.transitions.length; i += 1) {
                var transition = this.transitions[i];
                if (!transition.isStopped()) {
                    if (transition.canAdvance()) {
                        transition.nextStep();
                        while (stk.length !== 0 && this.transitions[stk[stk.length - 1]].canAdvance()) {
                            this.transitions[stk[stk.length - 1]].nextStep();
                            stk.pop();
                        }
                    } else {
                        stk.push(i);
                    }
                    finished = false;
                }
            }
            if (finished) {
                this.stop();
            }
            return this;
        }
    }, {
        key: "setSpeedFactor",
        value: function setSpeedFactor(speedFactor) {
            var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();

            var ratio = speedFactor / this.speedFactor;
            this.startTime = (this.startTime - now) / ratio + now;
            if (this.pauseTime) {
                this.pauseTime = (this.pauseTime - now) / ratio + now;
            }
            this.speedFactor = speedFactor;
            for (var i = 0; i < this.transitions.length; i += 1) {
                this.transitions[i].setSpeedFactor(speedFactor, now);
            }
            return this;
        }
    }, {
        key: "restart",
        value: function restart() {
            delete this.stopped;
            for (var i = 0; i < this.transitions.length; i += 1) {
                var transition = this.transitions[i];
                transition.restart();
            }
            this.sortByEndTime();
            return this;
        }
    }, {
        key: "getLength",
        value: function getLength() {
            return this.getEndTime() - this.startTime;
        }
    }, {
        key: "getEndTime",
        value: function getEndTime() {
            var endTime = 0;
            for (var i = 0; i < this.transitions.length; i += 1) {
                var transitionEndTime = this.transitions[i].getEndTime();
                if (transitionEndTime > endTime) {
                    endTime = transitionEndTime;
                }
            }
            return endTime;
        }
    }, {
        key: "hasDependencyOn",
        value: function hasDependencyOn(t) {
            for (var transition in this.dependsOn) {
                if (transition === t) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: "canAdvance",
        value: function canAdvance() {
            for (var i = 0; i < this.dependsOn.length; i += 1) {
                if (!this.dependsOn[i].isStopped()) {
                    return false;
                }
            }
            return true;
        }
    }, {
        key: "sortByStartTime",
        value: function sortByStartTime() {
            // TODO: this comparator should be global
            this.transitions.sort(function (a, b) {
                if (!equal(a.startTime, b.startTime, 0.001)) {
                    return b.startTime - a.startTime;
                }
                //not a hack, works in all conflict cases
                if (!equal(a.getEndTime(), b.getEndTime(), 0.001)) {
                    return b.getEndTime() - a.getEndTime();
                }
                if (a.hasDependencyOn(b)) {
                    return 1;
                }
                if (b.hasDependencyOn(a)) {
                    return -1;
                }
                return 0;
            });
        }
    }, {
        key: "sortByEndTime",
        value: function sortByEndTime() {
            this.transitions.sort(function (a, b) {
                if (!equal(a.getEndTime(), b.getEndTime(), 0.001)) {
                    return a.getEndTime() - b.getEndTime();
                }
                //not a hack, works in all conflict cases
                if (!equal(a.startTime, b.startTime, 0.001)) {
                    return a.startTime - b.startTime;
                }
                if (a.hasDependencyOn(b)) {
                    return -1;
                }
                if (b.hasDependencyOn(a)) {
                    return 1;
                }
                return 0;
            });
        }
    }, {
        key: "forceStart",
        value: function forceStart() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

            this.sortByStartTime();
            for (var i = 0; i < this.transitions.length; i += 1) {
                var transition = this.transitions[i];
                if (transition.startTime <= now) {
                    transition.forceStart(now);
                }
            }
            return this;
        }
    }, {
        key: "forceFinish",
        value: function forceFinish() {
            var now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();
            var startTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

            this.sortByEndTime();
            for (var i = 0; i < this.transitions.length; i += 1) {
                var transition = this.transitions[i];
                if (transition.getEndTime() >= startTime) {
                    if (transition instanceof TransitionList) {
                        transition.forceFinish(now, startTime);
                    } else {
                        if (typeof now === "undefined" || transition.getEndTime() < now) {
                            transition.forceFinish();
                        }
                    }
                }
            }
            return this;
        }
    }, {
        key: "startAtPercent",
        value: function startAtPercent(startPercent) {
            var _this4 = this;

            var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();

            cancelAnimationFrame(this.animationFrameId);
            this.restart();
            // TODO(@wefgef): Buggy
            var paused = this.pauseTime;
            if (paused) {
                this.resume();
            }
            this.forceStart(now);
            this.setStartTime(now - startPercent * this.getLength());
            this.forceFinish(now);
            // TODO(@wefgef): Huge hack to deal with force transition
            this.nextStep();
            this.nextStep();
            if (paused) {
                this.pause();
            }

            var functionWrapper = function functionWrapper() {
                if (_this4.isStopped()) {
                    return;
                }
                if (!_this4.pauseTime) {
                    _this4.nextStep();
                }
                _this4.animationFrameId = requestAnimationFrame(functionWrapper);
            };
            this.animationFrameId = requestAnimationFrame(functionWrapper);
        }
    }]);
    return TransitionList;
}();

SVG.AnimatedSVG = function (_SVG$SVGRoot) {
    inherits(AnimatedSVG, _SVG$SVGRoot);

    function AnimatedSVG() {
        classCallCheck(this, AnimatedSVG);
        return possibleConstructorReturn(this, (AnimatedSVG.__proto__ || Object.getPrototypeOf(AnimatedSVG)).apply(this, arguments));
    }

    createClass(AnimatedSVG, [{
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            if (this.options.transition) {
                this.options.transition.setStartTime(Date.now());
                var animationWrapper = function animationWrapper() {
                    if (_this2.options.transition.isStopped()) {
                        if (_this2.options.repeat) {
                            _this2.options.transition.setStartTime(Date.now());
                            _this2.options.transition.restart();
                            requestAnimationFrame(animationWrapper);
                        }
                        return;
                    }
                    if (!_this2.options.transition.pauseTime) {
                        _this2.options.transition.nextStep();
                    }
                    requestAnimationFrame(animationWrapper);
                };
                requestAnimationFrame(animationWrapper);
            }
        }
    }]);
    return AnimatedSVG;
}(SVG.SVGRoot);

SVG.Element.prototype.blinkTransition = function (options) {
    var _this3 = this;

    var config = {
        duration: 2000,
        times: 2,
        firstColor: "grey",
        secondColor: "black",
        executeLastStep: true,
        startTime: 0,
        dependsOn: []
    };
    Object.assign(config, options);
    return new Transition({
        func: function func(t, context) {
            if (t > 1 - context.interval && !context.executeLastStep) {
                _this3.setColor(context.firstColor);
            } else {
                _this3.setColor(Math.floor((1 - t) / context.interval) % 2 === 1 ? context.firstColor : context.secondColor);
            }
        },
        context: {
            firstColor: config.firstColor,
            secondColor: config.secondColor,
            interval: 1 / (2 * config.times),
            executeLastStep: config.executeLastStep
        },
        duration: config.duration,
        startTime: config.startTime,
        dependsOn: config.dependsOn
    });
};
SVG.Element.prototype.changeOpacityTransition = function (opacity, duration) {
    var _this4 = this;

    var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    if (!this.options.hasOwnProperty("opacity")) {
        this.options.opacity = 1;
    }
    return new Transition({
        func: function func(t, context) {
            _this4.setOpacity((1 - t) * context.opacity + t * opacity);
        },
        context: {
            opacity: this.options.opacity
        },
        duration: duration,
        startTime: startTime,
        dependsOn: dependsOn
    });
};
SVG.Element.prototype.changeColorTransition = function (color, duration) {
    var _this5 = this;

    var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    return new Transition({
        func: function func(t, context) {
            _this5.setColor(Color.interpolate(context.color, color, t));
        },
        context: {
            color: this.getColor()
        },
        duration: duration,
        startTime: startTime,
        dependsOn: dependsOn
    });
};

SVG.Text.prototype.moveTransition = function (coords, duration) {
    var _this6 = this;

    var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    return new Transition({
        func: function func(t, context) {
            _this6.setPosition((1 - t) * context.x + t * coords.x, (1 - t) * context.y + t * coords.y);
        },
        context: {
            x: this.options.x,
            y: this.options.y
        },
        duration: duration,
        startTime: startTime,
        dependsOn: dependsOn
    });
};
SVG.Text.prototype.changeFillTransition = function (color, duration) {
    var _this7 = this;

    var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    return new Transition({
        func: function func(t, context) {
            _this7.setColor(Color.interpolate(context.color, color, t), true);
        },
        context: {
            color: this.getColor()
        },
        duration: duration,
        startTime: startTime,
        dependsOn: dependsOn
    });
};

var Switcher = function (_UI$Element) {
    inherits(Switcher, _UI$Element);

    function Switcher(options) {
        classCallCheck(this, Switcher);

        var _this = possibleConstructorReturn(this, (Switcher.__proto__ || Object.getPrototypeOf(Switcher)).call(this, options));

        _this.childMap = new WeakMap();
        _this.numRedraws = 0;
        return _this;
    }

    createClass(Switcher, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                fullHeight: false,
                preserveScroll: true
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            if (this.options.fullHeight) {
                attr.addClass(GlobalStyle.Utils.fullHeight);
            }
        }
    }, {
        key: "copyState",
        value: function copyState(element) {
            var options = Object.assign({}, element.options, {
                children: this.overwriteElements(this.options.children || [], element.options.children || [])
            });

            this.setOptions(options);

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;

                    if (child.options.active) {
                        this.activeChild = child;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            return this.activeChild || this.options.children[0];
        }
    }, {
        key: "overwriteElements",
        value: function overwriteElements(existingElements, newElements) {
            var keyMap = this.getElementKeyMap(existingElements) || new Map();
            for (var i = 0; i < newElements.length; i += 1) {
                var newChild = newElements[i];
                var newChildKey = newChild.options && newChild.options.key || "autokey" + i;
                var existingChild = keyMap.get(newChildKey);
                if (existingChild === newChild) {
                    continue;
                }
                if (existingChild && newChild.canOverwrite(existingChild)) {
                    newElements[i] = newChild = this.overwriteChild(existingChild, newChild);
                }
            }
            return newElements;
        }
    }, {
        key: "redraw",
        value: function redraw() {
            this.numRedraws += 1;

            //basic things for our current node
            this.applyNodeAttributes();
            this.applyRef();

            // This render may be required to update this.options.children
            UI.renderingStack.push(this);
            this.render();
            UI.renderingStack.pop();

            if (this.options.children.length == 0) {
                return;
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.options.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var child = _step2.value;

                    if (this.options.lazyRender) {
                        this.getChildProperties(child).isUpToDate = false;
                        child.applyRef();
                    } else {
                        this.updateChild(child);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.updateActiveChild(this.activeChild || this.options.children[0]);
        }
    }, {
        key: "getChildProperties",
        value: function getChildProperties(child) {
            if (!this.childMap.has(child)) {
                this.childMap.set(child, {
                    isMounted: !!child.node,
                    redrawIndex: -1
                });
            }
            return this.childMap.get(child);
        }
    }, {
        key: "updateChild",
        value: function updateChild(child) {
            if (this.getChildProperties(child).redrawIndex < this.numRedraws) {
                if (!child.node) {
                    child.mount(this);
                } else {
                    child.redraw();
                }
                this.getChildProperties(child).redrawIndex = this.numRedraws;
            }
        }
    }, {
        key: "appendChild",
        value: function appendChild(child) {
            var doMount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            this.options.children.push(child);
            if (doMount) {
                child.mount(this);
            }
            if (this.options.children.length == 1) {
                this.setActive(child);
            }
            return child;
        }
    }, {
        key: "getActive",
        value: function getActive() {
            return this.activeChild;
        }
    }, {
        key: "insertChildNodeBefore",
        value: function insertChildNodeBefore(child, nextSibling) {
            var childProperties = this.getChildProperties(child);
            childProperties.isMounted = true;
            childProperties.redrawIndex = this.numRedraws;
        }
    }, {
        key: "updateActiveChild",
        value: function updateActiveChild(element) {
            while (this.node.firstChild) {
                //TODO: would be useful here to be able to access the matching UI Element
                this.node.removeChild(this.node.firstChild);
            }

            if (element == null) {
                this.activeChild = null;
                return;
            }

            this.updateChild(element);

            this.node.appendChild(element.node);
            this.children[0] = this.activeChild = element;
        }
    }, {
        key: "deactivateChild",
        value: function deactivateChild(child) {
            child.dispatch("hide");
            child.dispatch("setActive", false);
            if (this.options.preserveScroll) {
                this.getChildProperties(child).scrollTop = this.node.scrollTop;
            }
        }
    }, {
        key: "activateChild",
        value: function activateChild(child) {
            child.dispatch("setActive", true);
            child.dispatch("show");
            if (this.options.preserveScroll) {
                this.node.scrollTop = this.getChildProperties(child).scrollTop || 0;
            }
        }
    }, {
        key: "setActive",
        value: function setActive(element) {
            if (this.activeChild === element) {
                return;
            }
            if (this.activeChild) {
                this.deactivateChild(this.activeChild);
            }
            this.updateActiveChild(element);
            if (this.activeChild) {
                this.activateChild(this.activeChild);
            }
        }
    }, {
        key: "hasChild",
        value: function hasChild(element) {
            return this.childMap.has(element);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.addListener("shouldRedrawChild", function (event) {
                if (event.child.isInDocument()) {
                    event.child.redraw();
                } else {
                    _this2.getChildProperties(event.child).isUpToDate = false;
                }
            });
        }
    }]);
    return Switcher;
}(UI.Element);

var _class$11, _temp$6;

var PageTitleManager = (_temp$6 = _class$11 = function () {
    function PageTitleManager() {
        classCallCheck(this, PageTitleManager);
    }

    createClass(PageTitleManager, null, [{
        key: "getPrefix",
        value: function getPrefix() {
            return this.prefix ? "(" + this.prefix + ") " : "";
        }
    }, {
        key: "setPrefix",
        value: function setPrefix(prefix) {
            this.prefix = prefix;
            this.updatePageTitle();
        }
    }, {
        key: "setDefaultTitle",
        value: function setDefaultTitle(defaultTitle) {
            this.defaultTitle = defaultTitle;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return this.title || this.defaultTitle;
        }
    }, {
        key: "setTitle",
        value: function setTitle(title) {
            this.title = title;
            this.updatePageTitle();
        }
    }, {
        key: "getFullPageTitle",
        value: function getFullPageTitle() {
            return this.getPrefix() + this.getTitle();
        }
    }, {
        key: "updatePageTitle",
        value: function updatePageTitle() {
            document.title = this.getFullPageTitle();
        }
    }, {
        key: "setIcon",
        value: function setIcon() {
            throw Error("Not implemented yet!");
        }
    }]);
    return PageTitleManager;
}(), _class$11.title = null, _class$11.defaultTitle = "Website", _class$11.prefix = null, _temp$6);

var _class$12, _temp$7;

var Router = function (_Switcher) {
    inherits(Router, _Switcher);

    function Router() {
        classCallCheck(this, Router);
        return possibleConstructorReturn(this, (Router.__proto__ || Object.getPrototypeOf(Router)).apply(this, arguments));
    }

    createClass(Router, [{
        key: "getRoutes",


        // TODO: should be named getRootRoute() :)
        value: function getRoutes() {
            return this.options.routes;
        }
    }, {
        key: "getPageNotFound",
        value: function getPageNotFound() {
            var element = UI.createElement("h1", { children: ["Can't find url, make sure you typed it correctly"] });
            element.pageTitle = "Page not found";
            return element;
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            urlParts = unwrapArray(urlParts);

            var page = this.getRoutes().getPage(urlParts) || this.getPageNotFound();

            var activePage = this.getActive();

            if (activePage !== page) {
                activePage && activePage.dispatch("urlExit");
                this.setActive(page);
                page.dispatch("urlEnter");
            }

            if (this === this.constructor.Global) {
                PageTitleManager.setTitle(page.pageTitle);
            }

            this.dispatch("change", urlParts, page, activePage);
        }
    }, {
        key: "addChangeListener",
        value: function addChangeListener(callback) {
            return this.addListener("change", callback);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            if (!Router.Global) {
                this.constructor.setGlobalRouter(this);
            }
        }
    }], [{
        key: "parseURL",
        value: function parseURL() {
            var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : location.pathname;

            if (!Array.isArray(path)) {
                path = path.split("/");
            }
            return path.filter(function (str) {
                return str != "";
            });
        }
    }, {
        key: "joinURLParts",
        value: function joinURLParts(urlParts) {
            if (urlParts.length) {
                return "/" + urlParts.join("/") + "/";
            } else {
                return "/";
            }
        }
    }, {
        key: "changeURL",
        value: function changeURL(url) {
            var replaceHistory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (Array.isArray(url)) {
                url = this.joinURLParts(url);
            }

            if (url === window.location.pathname) {
                return;
            }
            var historyArgs = [{}, PageTitleManager.getTitle(), url];
            if (replaceHistory) {
                var _window$history;

                (_window$history = window.history).replaceState.apply(_window$history, historyArgs);
            } else {
                var _window$history2;

                (_window$history2 = window.history).pushState.apply(_window$history2, historyArgs);
            }

            this.updateURL();
        }
    }, {
        key: "updateURL",
        value: function updateURL() {
            this.Global.setURL(this.parseURL());
        }
    }, {
        key: "setGlobalRouter",
        value: function setGlobalRouter(router) {
            var _this2 = this;

            this.Global = router;
            window.onpopstate = function () {
                _this2.updateURL();
                Dispatcher.Global.dispatch("externalURLChange");
            };

            this.updateURL();
        }
    }]);
    return Router;
}(Switcher);

var Route = (_temp$7 = _class$12 = function () {
    function Route(expr, pageGenerator) {
        var subroutes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        classCallCheck(this, Route);
        this.cachedPages = new Map();

        this.expr = expr instanceof Array ? expr : [expr];
        this.pageGenerator = pageGenerator;
        this.subroutes = unwrapArray(subroutes);
        if (typeof options === "string") {
            options = { title: options };
        }
        this.options = options;
        this.cachedPages = new Map();
    }

    createClass(Route, [{
        key: "matches",
        value: function matches(urlParts) {
            if (urlParts.length < this.expr.length) {
                return null;
            }
            var args = [];
            for (var i = 0; i < this.expr.length; i += 1) {
                var isArg = this.expr[i] === this.constructor.ARG_KEY;
                if (urlParts[i] != this.expr[i] && !isArg) {
                    return null;
                }
                if (isArg) {
                    args.push(urlParts[i]);
                }
            }
            return {
                args: args,
                urlParts: urlParts.slice(this.expr.length)
            };
        }
    }, {
        key: "getPageTitle",
        value: function getPageTitle() {
            return this.options.title;
        }
    }, {
        key: "generatePage",
        value: function generatePage() {
            for (var _len = arguments.length, argsArray = Array(_len), _key = 0; _key < _len; _key++) {
                argsArray[_key] = arguments[_key];
            }

            if (!this.pageGenerator) {
                return null;
            }

            var serializedArgs = argsArray.toString();
            if (!this.cachedPages.has(serializedArgs)) {
                var pageGenerator = this.pageGenerator;
                var args = unwrapArray(argsArray);
                var generatorArgs = { args: args, argsArray: argsArray };
                var page = pageGenerator.prototype instanceof UI.Element ? new pageGenerator(generatorArgs) : pageGenerator(generatorArgs);
                if (!page.pageTitle) {
                    var myPageTitle = this.getPageTitle();
                    if (myPageTitle) {
                        page.pageTitle = this.getPageTitle();
                    }
                }
                this.cachedPages.set(serializedArgs, page);
            }
            return this.cachedPages.get(serializedArgs);
        }
    }, {
        key: "matchesOwnNode",
        value: function matchesOwnNode(urlParts) {
            return urlParts.length === 0;
        }
    }, {
        key: "getPage",
        value: function getPage(urlParts, router) {
            for (var _len2 = arguments.length, argsArray = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                argsArray[_key2 - 2] = arguments[_key2];
            }

            if (this.matchesOwnNode(urlParts)) {
                return this.generatePage.apply(this, argsArray);
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.subroutes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var subroute = _step.value;

                    var match = subroute.matches(urlParts);
                    if (match) {
                        if (match.args.length) {
                            argsArray.push(match.args);
                        }
                        var page = subroute.getPage.apply(subroute, [match.urlParts, router].concat(argsArray));
                        if (page && !page.pageTitle) {
                            page.pageTitle = this.getPageTitle();
                        }
                        return page;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);
    return Route;
}(), _class$12.ARG_KEY = "%s", _temp$7);

var TerminalRoute = function (_Route) {
    inherits(TerminalRoute, _Route);

    function TerminalRoute(expr, pageGenerator) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck(this, TerminalRoute);
        return possibleConstructorReturn(this, (TerminalRoute.__proto__ || Object.getPrototypeOf(TerminalRoute)).call(this, expr, pageGenerator, [], options));
    }

    createClass(TerminalRoute, [{
        key: "matchesOwnNode",
        value: function matchesOwnNode(urlParts) {
            return true;
        }
    }, {
        key: "getPage",
        value: function getPage(urlParts, router) {
            var page = get(TerminalRoute.prototype.__proto__ || Object.getPrototypeOf(TerminalRoute.prototype), "getPage", this).apply(this, arguments);
            setTimeout(function () {
                page.setURL(urlParts);
            });
            return page;
        }
    }]);
    return TerminalRoute;
}(Route);

// This is the object that will be used to translate text
var translationMap = null;

// Keep a set of all UI Element that need to be updated when the language changes
// Can't use a weak set here unfortunately because we need iteration
// That's why we must make sure to remove all nodes from the set when destroying them
UI.TranslationElements = new Set();

UI.TranslationTextElement = function (_UI$TextElement) {
    inherits(TranslationTextElement, _UI$TextElement);

    function TranslationTextElement(value) {
        classCallCheck(this, TranslationTextElement);

        if (arguments.length === 1) {
            var _this = possibleConstructorReturn(this, (TranslationTextElement.__proto__ || Object.getPrototypeOf(TranslationTextElement)).call(this, value));
        } else {
            var _this = possibleConstructorReturn(this, (TranslationTextElement.__proto__ || Object.getPrototypeOf(TranslationTextElement)).call(this, ""));

            _this.setValue.apply(_this, arguments);
        }
        return possibleConstructorReturn(_this);
    }

    createClass(TranslationTextElement, [{
        key: "setValue",
        value: function setValue(value) {
            if (arguments.length > 1) {
                this.value = Array.from(arguments);
            } else {
                this.value = value;
            }
            if (this.node) {
                this.redraw();
            }
        }
    }, {
        key: "evaluateSprintf",
        value: function evaluateSprintf(str) {
            throw Error("Not yet implemented");
        }
    }, {
        key: "evaluate",
        value: function evaluate(strings) {
            for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                values[_key - 1] = arguments[_key];
            }

            if (!Array.isArray(strings)) {
                return this.evaluateSprintf.apply(this, arguments);
                // This means strings is a string with the sprintf pattern
            } else {
                // Using template literals https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals
                if (arguments.length != strings.length) {
                    console.error("Invalid arguments to evaluate ", Array.from(arguments));
                }
                var result = strings[0];
                for (var i = 1; i < arguments.length; i++) {
                    result += arguments[i];
                    result += strings[i];
                }
                return result;
            }
        }
    }, {
        key: "getValue",
        value: function getValue() {
            var value = this.value;
            if (Array.isArray(this.value)) {
                var _translationMap2;

                value = translationMap && (_translationMap2 = translationMap).get.apply(_translationMap2, toConsumableArray(value)) || this.evaluate.apply(this, toConsumableArray(value));
            } else {
                // TODO: if translationMap.get() returns "", keep, skip only if returning null
                value = translationMap && translationMap.get(value) || value;
            }
            return value;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            UI.TranslationElements.add(this);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            UI.TranslationElements.delete(this);
        }
    }]);
    return TranslationTextElement;
}(UI.TextElement);

// This method is a shorthand notation to create a new translatable text element
// TODO: should also support being used as a string template
UI.T = function (str) {
    return new UI.TranslationTextElement(str);
};

// TODO @mciucu this should be wrapped in a way that previous requests that arrive later don't get processed
// TODO: should this be done with promises?
// Function to be called with a translation map
// The translationMap object needs to implement .get(value) to return the translation for value
function setTranslationMap(_translationMap) {
    if (translationMap === _translationMap) {
        return;
    }
    translationMap = _translationMap;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = UI.TranslationElements.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var textElement = _step.value;

            textElement.redraw();
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

var languageStore = null;

// This function should be called to set the language store to watch for changes
// The languageStore argumenent needs to implement .getLocale(), addListener("localChange", (language) =>{})
// The language objects need to implement .buildTranslation(callback), where callback should be called with a translationMap
function setLanguageStore(_languageStore) {
    languageStore = _languageStore;

    var currentLocale = languageStore.getLocale();
    // If there's a default language already set, build the translation table for it
    if (currentLocale) {
        currentLocale.buildTranslation(setTranslationMap);
    }

    // Add a listener for whenever the language changes
    languageStore.addListener("localeChange", function (language) {
        language.buildTranslation(setTranslationMap);
    });
}

function getTranslationMap() {
    return translationMap;
}

var _class$13, _descriptor$3, _descriptor2$3, _descriptor3$3, _descriptor4$2, _descriptor5$2, _descriptor6$2, _descriptor7$1;

function _initDefineProp$4(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$4(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var HorizontalOverflowStyle = (_class$13 = function (_StyleSheet) {
    inherits(HorizontalOverflowStyle, _StyleSheet);

    function HorizontalOverflowStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, HorizontalOverflowStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = HorizontalOverflowStyle.__proto__ || Object.getPrototypeOf(HorizontalOverflowStyle)).call.apply(_ref, [this].concat(args))), _this), _this.baseColor = function () {
            return _this.themeProperties.COLOR_PRIMARY;
        }, _this.arrowColor = function () {
            return enhance(_this.baseColor(), .8);
        }, _this.arrowBackground = function () {
            return _this.baseColor();
        }, _this.arrowHoverColor = function () {
            return enhance(_this.baseColor(), 1);
        }, _this.arrowHoverBackground = function () {
            return enhance(_this.baseColor(), -.3);
        }, _this.transitionTime = .15, _this.arrow = {
            zIndex: "1",
            alignItems: "center",
            padding: ".3em",
            fontSize: "150% !important",
            height: "100%",
            position: "absolute",
            cursor: "pointer",
            top: 0,
            color: function color() {
                return _this.arrowColor();
            },
            backgroundColor: function backgroundColor() {
                return _this.arrowBackground();
            },
            ":hover": {
                color: function color() {
                    return _this.arrowHoverColor();
                },
                backgroundColor: function backgroundColor() {
                    return _this.arrowHoverBackground();
                }
            }
        }, _initDefineProp$4(_this, "leftArrow", _descriptor$3, _this), _initDefineProp$4(_this, "rightArrow", _descriptor2$3, _this), _initDefineProp$4(_this, "horizontalOverflow", _descriptor3$3, _this), _initDefineProp$4(_this, "childrenContainer", _descriptor4$2, _this), _initDefineProp$4(_this, "swipeAnimation", _descriptor5$2, _this), _initDefineProp$4(_this, "hiddenArrow", _descriptor6$2, _this), _initDefineProp$4(_this, "pusherContainer", _descriptor7$1, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return HorizontalOverflowStyle;
}(StyleSheet), _descriptor$3 = _applyDecoratedDescriptor$4(_class$13.prototype, "leftArrow", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this2 = this;

        return Object.assign({}, this.arrow, {
            left: 0,
            borderRight: function borderRight() {
                return "2px solid " + _this2.arrowHoverBackground();
            }
        });
    }
}), _descriptor2$3 = _applyDecoratedDescriptor$4(_class$13.prototype, "rightArrow", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this3 = this;

        return Object.assign({}, this.arrow, {
            right: 0,
            borderLeft: function borderLeft() {
                return "2px solid " + _this3.arrowHoverBackground();
            }
        });
    }
}), _descriptor3$3 = _applyDecoratedDescriptor$4(_class$13.prototype, "horizontalOverflow", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "relative",
            width: "100%",
            ">:first-child": {
                display: "flex"
            },
            ">:last-child": {
                display: "flex"
            }
        };
    }
}), _descriptor4$2 = _applyDecoratedDescriptor$4(_class$13.prototype, "childrenContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            overflow: Device.isMobileDevice() ? "auto" : "hidden",
            display: "flex"
        };
    }
}), _descriptor5$2 = _applyDecoratedDescriptor$4(_class$13.prototype, "swipeAnimation", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            transition: "margin-left " + this.transitionTime + "s ease"
        };
    }
}), _descriptor6$2 = _applyDecoratedDescriptor$4(_class$13.prototype, "hiddenArrow", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "none !important"
        };
    }
}), _descriptor7$1 = _applyDecoratedDescriptor$4(_class$13.prototype, "pusherContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            overflow: Device.isMobileDevice() ? "auto" : "hidden",
            position: "relative",
            display: "flex",
            width: "100%"
        };
    }
}), _class$13);

var _class$14, _descriptor$4, _descriptor2$4, _descriptor3$4, _descriptor4$3, _descriptor5$3, _class3$2, _descriptor6$3, _descriptor7$2, _descriptor8$2, _class5$1, _descriptor9$2, _descriptor10$2, _descriptor11$2, _class7$2, _descriptor12$2, _descriptor13$2, _descriptor14$2, _descriptor15$2, _descriptor16$2, _descriptor17$2;

function _initDefineProp$5(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$5(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var BaseTabAreaStyle = (_class$14 = function (_StyleSheet) {
    inherits(BaseTabAreaStyle, _StyleSheet);

    function BaseTabAreaStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, BaseTabAreaStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BaseTabAreaStyle.__proto__ || Object.getPrototypeOf(BaseTabAreaStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$5(_this, "tab", _descriptor$4, _this), _initDefineProp$5(_this, "activeTab", _descriptor2$4, _this), _initDefineProp$5(_this, "nav", _descriptor3$4, _this), _initDefineProp$5(_this, "switcher", _descriptor4$3, _this), _initDefineProp$5(_this, "tabArea", _descriptor5$3, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return BaseTabAreaStyle;
}(StyleSheet), _descriptor$4 = _applyDecoratedDescriptor$5(_class$14.prototype, "tab", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            userSelect: "none",
            display: "inline-block",
            position: "relative"
        };
    }
}), _descriptor2$4 = _applyDecoratedDescriptor$5(_class$14.prototype, "activeTab", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {};
    }
}), _descriptor3$4 = _applyDecoratedDescriptor$5(_class$14.prototype, "nav", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            listStyle: "none"
        };
    }
}), _descriptor4$3 = _applyDecoratedDescriptor$5(_class$14.prototype, "switcher", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            flex: "1",
            overflow: "auto"
        };
    }
}), _descriptor5$3 = _applyDecoratedDescriptor$5(_class$14.prototype, "tabArea", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            flexDirection: "column"
        };
    }
}), _class$14);
var DefaultTabAreaStyle = (_class3$2 = function (_BaseTabAreaStyle) {
    inherits(DefaultTabAreaStyle, _BaseTabAreaStyle);

    function DefaultTabAreaStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, DefaultTabAreaStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = DefaultTabAreaStyle.__proto__ || Object.getPrototypeOf(DefaultTabAreaStyle)).call.apply(_ref2, [this].concat(args))), _this2), _initDefineProp$5(_this2, "tab", _descriptor6$3, _this2), _initDefineProp$5(_this2, "activeTab", _descriptor7$2, _this2), _initDefineProp$5(_this2, "nav", _descriptor8$2, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return DefaultTabAreaStyle;
}(BaseTabAreaStyle), _descriptor6$3 = _applyDecoratedDescriptor$5(_class3$2.prototype, "tab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginBottom: "-1px",
            textDecoration: "none !important",
            marginRight: "2px",
            lineHeight: "1.42857143",
            border: "1px solid transparent",
            borderRadius: "4px 4px 0 0",
            padding: "8px",
            paddingLeft: "10px",
            paddingRight: "10px",
            ":hover": {
                cursor: "pointer",
                backgroundColor: "#eee",
                color: "#555",
                border: "1px solid #ddd",
                borderBottomColor: "transparent"
            }
        };
    }
}), _descriptor7$2 = _applyDecoratedDescriptor$5(_class3$2.prototype, "activeTab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "#555 !important",
            cursor: "default !important",
            backgroundColor: "#fff !important",
            border: "1px solid #ddd !important",
            borderBottomColor: "transparent !important"
        };
    }
}), _descriptor8$2 = _applyDecoratedDescriptor$5(_class3$2.prototype, "nav", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            borderBottom: "1px solid #ddd",
            paddingLeft: "0",
            marginBottom: "0"
        };
    }
}), _class3$2);
var MinimalistTabAreaStyle = (_class5$1 = function (_BaseTabAreaStyle2) {
    inherits(MinimalistTabAreaStyle, _BaseTabAreaStyle2);

    function MinimalistTabAreaStyle() {
        var _ref3;

        var _temp3, _this3, _ret3;

        classCallCheck(this, MinimalistTabAreaStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this3 = possibleConstructorReturn(this, (_ref3 = MinimalistTabAreaStyle.__proto__ || Object.getPrototypeOf(MinimalistTabAreaStyle)).call.apply(_ref3, [this].concat(args))), _this3), _initDefineProp$5(_this3, "tab", _descriptor9$2, _this3), _initDefineProp$5(_this3, "activeTab", _descriptor10$2, _this3), _initDefineProp$5(_this3, "nav", _descriptor11$2, _this3), _temp3), possibleConstructorReturn(_this3, _ret3);
    }

    return MinimalistTabAreaStyle;
}(BaseTabAreaStyle), _descriptor9$2 = _applyDecoratedDescriptor$5(_class5$1.prototype, "tab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            textDecoration: "none !important",
            lineHeight: "1.42857143",
            paddingTop: "6px",
            paddingLeft: "8px",
            paddingRight: "8px",
            paddingBottom: "4px",
            color: "#666",
            borderBottom: "2px solid transparent",
            ":hover": {
                cursor: "pointer",
                color: "rgba(51,122,183,1)"
            }
        };
    }
}), _descriptor10$2 = _applyDecoratedDescriptor$5(_class5$1.prototype, "activeTab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontWeight: "bold",
            color: "rgba(51,122,183,1)",
            cursor: "default !important",
            borderBottom: "2px solid rgba(51,122,183,1) !important"
        };
    }
}), _descriptor11$2 = _applyDecoratedDescriptor$5(_class5$1.prototype, "nav", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "relative",
            borderBottom: "1px solid #aaa"
        };
    }
}), _class5$1);
var FlatTabAreaStyle = (_class7$2 = function (_BaseTabAreaStyle3) {
    inherits(FlatTabAreaStyle, _BaseTabAreaStyle3);

    function FlatTabAreaStyle() {
        var _ref4;

        var _temp4, _this4, _ret4;

        classCallCheck(this, FlatTabAreaStyle);

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        return _ret4 = (_temp4 = (_this4 = possibleConstructorReturn(this, (_ref4 = FlatTabAreaStyle.__proto__ || Object.getPrototypeOf(FlatTabAreaStyle)).call.apply(_ref4, [this].concat(args))), _this4), _this4.transitionTime = .3, _initDefineProp$5(_this4, "tab", _descriptor12$2, _this4), _initDefineProp$5(_this4, "activeTab", _descriptor13$2, _this4), _initDefineProp$5(_this4, "nav", _descriptor14$2, _this4), _initDefineProp$5(_this4, "activeBar", _descriptor15$2, _this4), _initDefineProp$5(_this4, "activeBarAnimated", _descriptor16$2, _this4), _initDefineProp$5(_this4, "activeOnRender", _descriptor17$2, _this4), _temp4), possibleConstructorReturn(_this4, _ret4);
    }

    return FlatTabAreaStyle;
}(BaseTabAreaStyle), _descriptor12$2 = _applyDecoratedDescriptor$5(_class7$2.prototype, "tab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        var _this5 = this;

        return {
            textDecoration: "none !important",
            padding: function padding() {
                return _this5.themeProperties.FLAT_TAB_AREA_PADDING_SIDES;
            },
            letterSpacing: "0.5px",
            color: function color() {
                return enhance(_this5.themeProperties.COLOR_FOREGROUND_BODY, 0.4) + "!important";
            },
            fontWeight: "bold",
            ":hover": {
                cursor: "pointer",
                color: function color() {
                    return enhance(_this5.themeProperties.COLOR_FOREGROUND_BODY, 0.6) + "!important";
                }
            }
        };
    }
}), _descriptor13$2 = _applyDecoratedDescriptor$5(_class7$2.prototype, "activeTab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        var _this6 = this;

        return {
            color: function color() {
                return enhance(_this6.themeProperties.COLOR_FOREGROUND_BODY, 0.8) + "!important";
            },
            cursor: "default !important"
        };
    }
}), _descriptor14$2 = _applyDecoratedDescriptor$5(_class7$2.prototype, "nav", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        var _this7 = this;

        return {
            whiteSpace: "nowrap",
            position: "relative",
            paddingTop: "4px",
            backgroundColor: function backgroundColor() {
                return _this7.themeProperties.COLOR_FOREGROUND_BODY;
            }
        };
    }
}), _descriptor15$2 = _applyDecoratedDescriptor$5(_class7$2.prototype, "activeBar", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this8 = this;

        return {
            height: 3,
            backgroundColor: function backgroundColor() {
                return _this8.themeProperties.COLOR_PRIMARY;
            },
            position: "absolute",
            left: 0,
            bottom: 0
        };
    }
}), _descriptor16$2 = _applyDecoratedDescriptor$5(_class7$2.prototype, "activeBarAnimated", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            transition: this.transitionTime + "s width, " + this.transitionTime + "s left"
        };
    }
}), _descriptor17$2 = _applyDecoratedDescriptor$5(_class7$2.prototype, "activeOnRender", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this9 = this;

        return {
            paddingBottom: function paddingBottom() {
                return _this9.themeProperties.FLAT_TAB_AREA_PADDING_SIDES - 3;
            },
            borderBottom: function borderBottom() {
                return "3px solid " + _this9.themeProperties.COLOR_PRIMARY;
            }
        };
    }
}), _class7$2);

var FlatTabAreaHorizontalOverflowStyle = function (_HorizontalOverflowSt) {
    inherits(FlatTabAreaHorizontalOverflowStyle, _HorizontalOverflowSt);

    function FlatTabAreaHorizontalOverflowStyle() {
        var _ref5;

        var _temp5, _this10, _ret5;

        classCallCheck(this, FlatTabAreaHorizontalOverflowStyle);

        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
        }

        return _ret5 = (_temp5 = (_this10 = possibleConstructorReturn(this, (_ref5 = FlatTabAreaHorizontalOverflowStyle.__proto__ || Object.getPrototypeOf(FlatTabAreaHorizontalOverflowStyle)).call.apply(_ref5, [this].concat(args))), _this10), _this10.baseColor = function () {
            return _this10.themeProperties.COLOR_FOREGROUND_BODY;
        }, _this10.arrowColor = function () {
            return enhance(_this10.baseColor(), .4);
        }, _this10.arrowBackground = function () {
            return _this10.baseColor();
        }, _this10.arrowHoverColor = function () {
            return enhance(_this10.baseColor(), .8);
        }, _this10.arrowHoverBackground = function () {
            return enhance(_this10.baseColor(), .1);
        }, _temp5), possibleConstructorReturn(_this10, _ret5);
    }

    return FlatTabAreaHorizontalOverflowStyle;
}(HorizontalOverflowStyle);

var _dec$3, _class$15;

var BasicTabTitle = function (_Link) {
    inherits(BasicTabTitle, _Link);

    function BasicTabTitle() {
        classCallCheck(this, BasicTabTitle);
        return possibleConstructorReturn(this, (BasicTabTitle.__proto__ || Object.getPrototypeOf(BasicTabTitle)).apply(this, arguments));
    }

    createClass(BasicTabTitle, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.tab);
            if (this.options.active) {
                attr.addClass(this.styleSheet.activeTab);
            }
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                newTab: false
            };
        }
    }, {
        key: "canOverwrite",
        value: function canOverwrite(existingElement) {
            // Disable reusing with different panels, since we want to attach listeners to the panel
            return get(BasicTabTitle.prototype.__proto__ || Object.getPrototypeOf(BasicTabTitle.prototype), "canOverwrite", this).call(this, existingElement) && this.options.panel === existingElement.options.panel;
        }
    }, {
        key: "setActive",
        value: function setActive(active) {
            var _this2 = this;

            this.options.active = active;
            this.redraw();
            if (active) {
                this.options.activeTabDispatcher.setActive(this.getPanel(), function () {
                    _this2.setActive(false);
                });
            }
        }
    }, {
        key: "getPanel",
        value: function getPanel() {
            return this.options.panel;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            if (this.options.title) {
                return this.options.title;
            }
            var panel = this.getPanel();
            if (typeof panel.getTitle === "function") {
                return panel.getTitle();
            }
            return panel.options.title;
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getTitle()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            get(BasicTabTitle.prototype.__proto__ || Object.getPrototypeOf(BasicTabTitle.prototype), "onMount", this).call(this);

            if (this.options.active) {
                this.setActive(true);
            }

            this.addClickListener(function () {
                _this3.setActive(true);
            });

            if (this.options.panel && this.options.panel.addListener) {
                this.attachListener(this.options.panel, "show", function () {
                    _this3.setActive(true);
                });
            }
        }
    }]);
    return BasicTabTitle;
}(Link);

var TabTitleArea = function (_UI$Element) {
    inherits(TabTitleArea, _UI$Element);

    function TabTitleArea() {
        classCallCheck(this, TabTitleArea);
        return possibleConstructorReturn(this, (TabTitleArea.__proto__ || Object.getPrototypeOf(TabTitleArea)).apply(this, arguments));
    }

    return TabTitleArea;
}(UI.Element);

var TabArea = (_dec$3 = registerStyle(DefaultTabAreaStyle), _dec$3(_class$15 = function (_UI$Element2) {
    inherits(TabArea, _UI$Element2);

    function TabArea() {
        var _ref;

        var _temp, _this5, _ret;

        classCallCheck(this, TabArea);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this5 = possibleConstructorReturn(this, (_ref = TabArea.__proto__ || Object.getPrototypeOf(TabArea)).call.apply(_ref, [this].concat(args))), _this5), _this5.activeTabDispatcher = new SingleActiveElementDispatcher(), _temp), possibleConstructorReturn(_this5, _ret);
    }

    createClass(TabArea, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                autoActive: true, // means the first Tab will be automatically selected
                // lazyRender: true, // TODO: should be true by default
                panelClass: null, // Custom css class can be added to panels
                titleAreaClass: null // Custom css class can be added to title area
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.tabArea);
        }
    }, {
        key: "createTabPanel",
        value: function createTabPanel(panel) {
            var tab = UI.createElement(BasicTabTitle, { panel: panel, activeTabDispatcher: this.activeTabDispatcher,
                active: panel.options.active, href: panel.options.tabHref,
                styleSheet: this.styleSheet });

            return [tab, panel];
        }
    }, {
        key: "appendChild",
        value: function appendChild(panel, doMount) {
            var _createTabPanel = this.createTabPanel(panel),
                _createTabPanel2 = slicedToArray(_createTabPanel, 2),
                tabTitle = _createTabPanel2[0],
                tabPanel = _createTabPanel2[1];

            this.options.children.push(panel);

            this.titleArea.appendChild(tabTitle);
            this.switcherArea.appendChild(tabPanel, doMount || !this.options.lazyRender);
        }
    }, {
        key: "getTitleArea",
        value: function getTitleArea(tabTitles) {
            var titleAreaClass = this.styleSheet.nav;
            if (this.options.titleAreaClass) {
                titleAreaClass += " " + this.options.titleAreaClass;
            }
            return UI.createElement(
                TabTitleArea,
                { ref: "titleArea", className: titleAreaClass },
                tabTitles
            );
        }
    }, {
        key: "getSwitcher",
        value: function getSwitcher(tabPanels) {
            var switcherClass = this.styleSheet.switcher;
            if (this.options.panelClass) {
                switcherClass += " " + this.options.panelClass;
            }
            return UI.createElement(
                Switcher,
                { className: switcherClass, ref: "switcherArea", lazyRender: this.options.lazyRender },
                tabPanels
            );
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            var tabTitles = [];
            var tabPanels = [];
            var activeTab = void 0;

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = unwrapArray(this.render())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var panel = _step.value;

                    var _createTabPanel3 = this.createTabPanel(panel),
                        _createTabPanel4 = slicedToArray(_createTabPanel3, 2),
                        _tabTitle2 = _createTabPanel4[0],
                        _tabPanel = _createTabPanel4[1];

                    if (this.activePanel === _tabPanel) {
                        activeTab = _tabTitle2;
                    }

                    tabTitles.push(_tabTitle2);
                    tabPanels.push(_tabPanel);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (!activeTab) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = tabTitles[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var tabTitle = _step2.value;

                        if (tabTitle.options.active) {
                            activeTab = tabTitle;
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            } else {
                for (var i = 0; i < tabPanels.length; i += 1) {
                    var _tabTitle = tabTitles[i];
                    var tabPanel = tabPanels[i];

                    if (_tabTitle.options.active) {
                        _tabTitle.options.active = false;
                    }
                    if (tabPanels.options.active) {
                        tabPanels.options.active = false;
                    }

                    if (activeTab === _tabTitle) {
                        tabPanel.options.active = true;
                        _tabTitle.options.active = true;
                    }
                }
            }

            if (this.options.autoActive && !activeTab && tabTitles.length > 0) {
                tabTitles[0].options.active = true;
            }

            return [this.getTitleArea(tabTitles), this.getSwitcher(tabPanels)];
        }
    }, {
        key: "setActive",
        value: function setActive(panel) {
            this.activeTabDispatcher.setActive(panel);
        }
    }, {
        key: "getActive",
        value: function getActive() {
            return this.activeTabDispatcher.getActive();
        }
    }, {
        key: "onSetActive",
        value: function onSetActive(panel) {
            this.switcherArea.setActive(panel);
            this.activePanel = panel;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.attachListener(this.activeTabDispatcher, function (panel) {
                _this6.onSetActive(panel);
            });

            this.addListener("resize", function () {
                _this6.switcherArea.dispatch("resize");
            });
        }
    }]);
    return TabArea;
}(UI.Element)) || _class$15);

// Contains classes to abstract some generic Font Awesome usecases.

var FAIcon = function (_UI$Primitive) {
    inherits(FAIcon, _UI$Primitive);

    function FAIcon() {
        classCallCheck(this, FAIcon);
        return possibleConstructorReturn(this, (FAIcon.__proto__ || Object.getPrototypeOf(FAIcon)).apply(this, arguments));
    }

    createClass(FAIcon, [{
        key: "getIcon",
        value: function getIcon() {
            return this.options.icon;
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass("fa");
            attr.addClass("fa-" + this.getIcon());
            if (this.options.size) {
                attr.addClass("fa-" + this.options.size);
            }
        }
    }, {
        key: "setIcon",
        value: function setIcon(icon) {
            this.options.icon = icon;
            this.redraw();
        }
    }]);
    return FAIcon;
}(UI.Primitive("i"));

var FACollapseIcon = function (_FAIcon) {
    inherits(FACollapseIcon, _FAIcon);

    function FACollapseIcon() {
        classCallCheck(this, FACollapseIcon);
        return possibleConstructorReturn(this, (FACollapseIcon.__proto__ || Object.getPrototypeOf(FACollapseIcon)).apply(this, arguments));
    }

    createClass(FACollapseIcon, [{
        key: "getIcon",
        value: function getIcon() {
            if (this.options.collapsed) {
                return "angle-right";
            } else {
                return "angle-down";
            }
        }
    }, {
        key: "setCollapsed",
        value: function setCollapsed(collapsed) {
            this.options.collapsed = collapsed;
            this.redraw();
        }
    }, {
        key: "toggleCollapsed",
        value: function toggleCollapsed() {
            this.setCollapsed(!this.options.collapsed);
        }
    }]);
    return FACollapseIcon;
}(FAIcon);

var FASortIcon = function (_FAIcon2) {
    inherits(FASortIcon, _FAIcon2);

    function FASortIcon() {
        classCallCheck(this, FASortIcon);
        return possibleConstructorReturn(this, (FASortIcon.__proto__ || Object.getPrototypeOf(FASortIcon)).apply(this, arguments));
    }

    createClass(FASortIcon, [{
        key: "getIcon",
        value: function getIcon() {
            if (this.options.direction === Direction.UP) {
                return "sort-asc";
            } else if (this.options.direction === Direction.DOWN) {
                return "sort-desc";
            } else {
                return "sort";
            }
        }
    }, {
        key: "setDirection",
        value: function setDirection(direction) {
            this.options.direction = direction;
            this.redraw();
        }
    }]);
    return FASortIcon;
}(FAIcon);

var _dec$4, _class$16;

var HorizontalOverflow = (_dec$4 = registerStyle(HorizontalOverflowStyle), _dec$4(_class$16 = function (_UI$Element) {
    inherits(HorizontalOverflow, _UI$Element);

    function HorizontalOverflow() {
        classCallCheck(this, HorizontalOverflow);
        return possibleConstructorReturn(this, (HorizontalOverflow.__proto__ || Object.getPrototypeOf(HorizontalOverflow)).apply(this, arguments));
    }

    createClass(HorizontalOverflow, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                swipePercent: .5
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(HorizontalOverflow.prototype.__proto__ || Object.getPrototypeOf(HorizontalOverflow.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.horizontalOverflow);
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            return [UI.createElement(FAIcon, { ref: "leftArrow", icon: "chevron-left", className: this.styleSheet.leftArrow + " " + this.styleSheet.hiddenArrow }), UI.createElement(
                "div",
                { ref: "childrenContainer", className: this.styleSheet.childrenContainer },
                UI.createElement("div", { ref: "swipeHelperChild" }),
                UI.createElement(
                    "div",
                    { ref: "pusherContainer", className: this.styleSheet.pusherContainer },
                    this.render()
                )
            ), UI.createElement(FAIcon, { ref: "rightArrow", icon: "chevron-right", className: this.styleSheet.rightArrow + " " + this.styleSheet.hiddenArrow })];
        }
    }, {
        key: "appendChild",
        value: function appendChild() {
            var _pusherContainer;

            (_pusherContainer = this.pusherContainer).appendChild.apply(_pusherContainer, arguments);
        }
    }, {
        key: "eraseChild",
        value: function eraseChild() {
            var _pusherContainer2;

            (_pusherContainer2 = this.pusherContainer).eraseChild.apply(_pusherContainer2, arguments);
        }
    }, {
        key: "checkForOverflow",
        value: function checkForOverflow() {
            var children = this.pusherContainer.children;

            if (!children.length) {
                return;
            }

            var shouldOverflowRight = false;
            var shouldOverflowLeft = false;

            var elementRect = this.node.getBoundingClientRect();

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;

                    var childRect = child.node.getBoundingClientRect();
                    shouldOverflowRight |= elementRect.left + elementRect.width < childRect.left + childRect.width - 1;
                    shouldOverflowLeft |= elementRect.left > childRect.left;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var leftArrowHidden = !this.leftArrow.getWidth();
            if (shouldOverflowLeft && leftArrowHidden) {
                this.leftArrow.removeClass(this.styleSheet.hiddenArrow);
            } else if (!shouldOverflowLeft && !leftArrowHidden) {
                this.leftArrow.addClass(this.styleSheet.hiddenArrow);
            }

            var rightArrowHidden = !this.rightArrow.getWidth();
            if (shouldOverflowRight && rightArrowHidden) {
                this.rightArrow.removeClass(this.styleSheet.hiddenArrow);
            } else if (!shouldOverflowRight && !rightArrowHidden) {
                this.rightArrow.addClass(this.styleSheet.hiddenArrow);
            }
        }
    }, {
        key: "scrollContent",
        value: function scrollContent(amount) {
            var _this2 = this;

            var scrollLeft = void 0;
            var containerNode = this.pusherContainer.node;
            if (amount < 0) {
                scrollLeft = Math.max(0, containerNode.scrollLeft + amount * this.getWidth());
            } else {
                scrollLeft = Math.min(containerNode.scrollWidth - this.getWidth(), containerNode.scrollLeft + amount * this.getWidth());
            }

            if (amount < 0) {
                this.swipeHelperChild.setStyle("marginLeft", scrollLeft - containerNode.scrollLeft);
                containerNode.scrollLeft = scrollLeft;
            }

            this.pusherContainer.setWidth("fit-content");
            this.swipeHelperChild.addClass(this.styleSheet.swipeAnimation);

            if (amount < 0) {
                this.swipeHelperChild.setStyle("marginLeft", 0);
            } else {
                this.swipeHelperChild.setStyle("marginLeft", containerNode.scrollLeft - scrollLeft);
            }

            setTimeout(function () {
                _this2.pusherContainer.setWidth("100%");
                _this2.swipeHelperChild.removeClass(_this2.styleSheet.swipeAnimation);
                containerNode.scrollLeft = scrollLeft;
                _this2.swipeHelperChild.setStyle("marginLeft", 0);
                _this2.checkForOverflow();
            }, this.styleSheet.transitionTime * 1000);
        }
    }, {
        key: "scrollContentLeft",
        value: function scrollContentLeft() {
            this.scrollContent(-this.options.swipePercent);
        }
    }, {
        key: "scrollContentRight",
        value: function scrollContentRight() {
            this.scrollContent(this.options.swipePercent);
        }

        // This method should be overwritten, and it is called whenever the position of the elements is changed.

    }, {
        key: "handleEventAndHandlePositionChange",
        value: function handleEventAndHandlePositionChange(callback) {
            callback();
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.pusherContainer.addNodeListener("scroll", function () {
                return _this3.handleEventAndHandlePositionChange(function () {
                    return _this3.checkForOverflow();
                });
            });

            this.addListener("resize", function () {
                return _this3.handleEventAndHandlePositionChange(function () {
                    return _this3.checkForOverflow();
                });
            });

            this.rightArrow.addClickListener(function () {
                return _this3.handleEventAndHandlePositionChange(function () {
                    return _this3.scrollContentRight();
                });
            });
            this.leftArrow.addClickListener(function () {
                return _this3.handleEventAndHandlePositionChange(function () {
                    return _this3.scrollContentLeft();
                });
            });

            // TODO: Create a resizeable-aware UI Element to be extended by this class and manage these listeners.
            window.addEventListener("resize", function () {
                return _this3.handleEventAndHandlePositionChange(function () {
                    return _this3.checkForOverflow();
                });
            });

            setTimeout(function () {
                return _this3.checkForOverflow();
            });
        }
    }]);
    return HorizontalOverflow;
}(UI.Element)) || _class$16);

var _dec$5, _class$17, _dec2$2, _class2$2;

var FlatTabTitle = function (_BasicTabTitle) {
    inherits(FlatTabTitle, _BasicTabTitle);

    function FlatTabTitle() {
        classCallCheck(this, FlatTabTitle);
        return possibleConstructorReturn(this, (FlatTabTitle.__proto__ || Object.getPrototypeOf(FlatTabTitle)).apply(this, arguments));
    }

    createClass(FlatTabTitle, [{
        key: "setActive",
        value: function setActive(active) {
            var _this2 = this;

            get(FlatTabTitle.prototype.__proto__ || Object.getPrototypeOf(FlatTabTitle.prototype), "setActive", this).call(this, active);
            if (active) {
                this.options.activeTabTitleDispatcher.setActive(this, function () {
                    _this2.setActive(false);
                });
            }
        }
    }]);
    return FlatTabTitle;
}(BasicTabTitle);

// This class displays a bottom bar on the active tab, and when changing tabs it also moves the bottom bar.


var FlatTabTitleArea = (_dec$5 = registerStyle(FlatTabAreaStyle), _dec$5(_class$17 = function (_TabTitleArea) {
    inherits(FlatTabTitleArea, _TabTitleArea);

    function FlatTabTitleArea() {
        classCallCheck(this, FlatTabTitleArea);
        return possibleConstructorReturn(this, (FlatTabTitleArea.__proto__ || Object.getPrototypeOf(FlatTabTitleArea)).apply(this, arguments));
    }

    createClass(FlatTabTitleArea, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(FlatTabTitleArea.prototype.__proto__ || Object.getPrototypeOf(FlatTabTitleArea.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.nav);
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            return [UI.createElement(
                HorizontalOverflow,
                { ref: "horizontalOverflow", styleSheet: FlatTabAreaHorizontalOverflowStyle },
                this.render(),
                UI.createElement("div", { ref: "bar", className: this.styleSheet.activeBar })
            )];
        }
    }, {
        key: "setActiveBar",
        value: function setActiveBar(activeTab) {
            var barLeft = 0;
            var barWidth = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = unwrapArray(this.render())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var tab = _step.value;

                    var tabWidth = tab.getWidth();
                    if (tab === activeTab) {
                        barWidth = tabWidth;
                        break;
                    }
                    barLeft += tabWidth;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.bar.setStyle({
                left: barLeft,
                width: barWidth
            });
        }
    }, {
        key: "setActive",
        value: function setActive(activeTab) {
            var _this4 = this;

            if (this.activeTab) {
                // Remove the border from the active tab and "prepare" the bar on the current active tab.
                this.setActiveBar(this.activeTab);
                this.activeTab.removeClass(this.styleSheet.activeOnRender);
            }

            // Animate the bar.
            setTimeout(function () {
                _this4.bar.addClass(_this4.styleSheet.activeBarAnimated);
                _this4.setActiveBar(activeTab);
            });

            setTimeout(function () {
                // Sometimes, another tab has been clicked between the start and end of an animation, so remove the
                // active class on that tab, just in case.
                if (_this4.activeTab) {
                    _this4.activeTab.removeClass(_this4.styleSheet.activeOnRender);
                }
                // Add the active class on the current tab.
                activeTab.addClass(_this4.styleSheet.activeOnRender);
                // Restore the bar to its "unused" state.
                _this4.bar.removeClass(_this4.styleSheet.activeBarAnimated);
                _this4.bar.setWidth(0);
                // Update the active tab.
                _this4.activeTab = activeTab;
            }, this.styleSheet.transitionTime * 1000);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            get(FlatTabTitleArea.prototype.__proto__ || Object.getPrototypeOf(FlatTabTitleArea.prototype), "onMount", this).call(this);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.options.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var child = _step2.value;

                    if (child.options.active) {
                        this.setActive(child);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.attachListener(this.options.activeTabTitleDispatcher, function (tab) {
                return _this5.setActive(tab);
            });
            this.addListener("resize", function () {
                return _this5.horizontalOverflow.dispatch("resize");
            });
        }
    }]);
    return FlatTabTitleArea;
}(TabTitleArea)) || _class$17);

var FlatTabArea = (_dec2$2 = registerStyle(FlatTabAreaStyle), _dec2$2(_class2$2 = function (_TabArea) {
    inherits(FlatTabArea, _TabArea);

    function FlatTabArea() {
        var _ref;

        var _temp, _this6, _ret;

        classCallCheck(this, FlatTabArea);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this6 = possibleConstructorReturn(this, (_ref = FlatTabArea.__proto__ || Object.getPrototypeOf(FlatTabArea)).call.apply(_ref, [this].concat(args))), _this6), _this6.activeTabTitleDispatcher = new SingleActiveElementDispatcher(), _temp), possibleConstructorReturn(_this6, _ret);
    }

    createClass(FlatTabArea, [{
        key: "getTitleArea",
        value: function getTitleArea(tabTitles) {
            return UI.createElement(
                FlatTabTitleArea,
                { ref: "titleArea", activeTabTitleDispatcher: this.activeTabTitleDispatcher,
                    className: this.options.titleAreaClass || "" },
                tabTitles
            );
        }
    }, {
        key: "createTabPanel",
        value: function createTabPanel(panel) {
            var tab = UI.createElement(FlatTabTitle, { panel: panel, activeTabDispatcher: this.activeTabDispatcher,
                activeTabTitleDispatcher: this.activeTabTitleDispatcher,
                active: panel.options.active, href: panel.options.tabHref,
                styleSheet: this.styleSheet });

            return [tab, panel];
        }
    }]);
    return FlatTabArea;
}(TabArea)) || _class2$2);

var _class$18, _descriptor$5, _descriptor2$5, _descriptor3$5, _descriptor4$4, _descriptor5$4, _descriptor6$4, _class3$3, _descriptor7$3, _descriptor8$3, _class5$2, _descriptor9$3;

function _initDefineProp$6(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$6(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var buttonColorToStyle = function buttonColorToStyle(color) {
    var colors = buildColors(color);
    var darker1 = {
        backgroundColor: colors[2]
    };
    var darker2 = {
        backgroundColor: colors[3]
    };
    var darker3 = {
        backgroundColor: colors[4]
    };
    var regular = {
        backgroundColor: colors[1],
        borderColor: colors[5],
        color: colors[6]
    };
    var hoverDisabled = Object.assign({}, regular);
    return Object.assign({}, regular, {
        ":hover": darker1,
        ":hover:disabled": hoverDisabled,
        ":focus": darker1,
        ":active": darker2,
        ":hover:active": darker3,
        ":focus:active": darker3,
        ".active": darker3
    });
};

var ButtonStyle = (_class$18 = function (_BasicLevelStyleSheet) {
    inherits(ButtonStyle, _BasicLevelStyleSheet);

    function ButtonStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, ButtonStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ButtonStyle.__proto__ || Object.getPrototypeOf(ButtonStyle)).call.apply(_ref, [this].concat(args))), _this), _this.base = {
            outline: "0",
            border: "0.1em solid transparent",
            padding: "0.4em 0.8em",
            borderRadius: _this.themeProperties.BUTTON_BORDER_RADIUS || _this.themeProperties.BASE_BORDER_RADIUS,
            textAlign: "center",
            whiteSpace: "nowrap",
            verticalAlign: "middle",
            lineHeight: 4 / 3 + "",
            marginBottom: "0",
            display: "inline-block",
            touchAction: "manipulation",
            userSelect: "none",
            ":disabled": {
                opacity: "0.7",
                cursor: "not-allowed"
            }
        }, _initDefineProp$6(_this, "DEFAULT", _descriptor$5, _this), _initDefineProp$6(_this, "EXTRA_SMALL", _descriptor2$5, _this), _initDefineProp$6(_this, "SMALL", _descriptor3$5, _this), _initDefineProp$6(_this, "MEDIUM", _descriptor4$4, _this), _initDefineProp$6(_this, "LARGE", _descriptor5$4, _this), _initDefineProp$6(_this, "EXTRA_LARGE", _descriptor6$4, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    // DEFAULT uses MEDIUM as size and BASE as level


    createClass(ButtonStyle, [{
        key: "getLevel",
        value: function getLevel(level) {
            return get(ButtonStyle.prototype.__proto__ || Object.getPrototypeOf(ButtonStyle.prototype), "getLevel", this).call(this, level) || this.INFO;
        }
    }]);
    return ButtonStyle;
}(BasicLevelStyleSheet(buttonColorToStyle)), _descriptor$5 = _applyDecoratedDescriptor$6(_class$18.prototype, "DEFAULT", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.base, {
            fontSize: "14px"
        }, this.colorStyleRule(this.themeProperties.COLOR_BACKGROUND)];
    }
}), _descriptor2$5 = _applyDecoratedDescriptor$6(_class$18.prototype, "EXTRA_SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "12px",
            padding: "0.2em 0.4em",
            borderWidth: "0.05em"
        };
    }
}), _descriptor3$5 = _applyDecoratedDescriptor$6(_class$18.prototype, "SMALL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "12px"
        };
    }
}), _descriptor4$4 = _applyDecoratedDescriptor$6(_class$18.prototype, "MEDIUM", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {};
    }
}), _descriptor5$4 = _applyDecoratedDescriptor$6(_class$18.prototype, "LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "17px"
        };
    }
}), _descriptor6$4 = _applyDecoratedDescriptor$6(_class$18.prototype, "EXTRA_LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "21px",
            padding: "0.2em 0.4em"
        };
    }
}), _class$18);

var ButtonGroupStyle = (_class3$3 = function (_StyleSheet) {
    inherits(ButtonGroupStyle, _StyleSheet);

    function ButtonGroupStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, ButtonGroupStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = ButtonGroupStyle.__proto__ || Object.getPrototypeOf(ButtonGroupStyle)).call.apply(_ref2, [this].concat(args))), _this2), _initDefineProp$6(_this2, "HORIZONTAL", _descriptor7$3, _this2), _initDefineProp$6(_this2, "VERTICAL", _descriptor8$3, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    createClass(ButtonGroupStyle, [{
        key: "Orientation",
        value: function Orientation$$1(orientation) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.keys(Orientation)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var type = _step.value;

                    if (orientation == Orientation[type]) {
                        return this[type];
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);
    return ButtonGroupStyle;
}(StyleSheet), _descriptor7$3 = _applyDecoratedDescriptor$6(_class3$3.prototype, "HORIZONTAL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            pointerEvents: "none",
            ">*": {
                "margin-left": "5px",
                "display": "inline-block",
                pointerEvents: "initial"
            },
            ">:first-child": {
                "margin-left": "0px"
            }
        };
    }
}), _descriptor8$3 = _applyDecoratedDescriptor$6(_class3$3.prototype, "VERTICAL", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            pointerEvents: "none",
            ">*": {
                "margin-top": "5px",
                "display": "block",
                pointerEvents: "initial"
            },
            ">:first-child": {
                "margin-top": "0px"
            }
        };
    }
}), _class3$3);

var RadioButtonGroupStyle = (_class5$2 = function (_StyleSheet2) {
    inherits(RadioButtonGroupStyle, _StyleSheet2);

    function RadioButtonGroupStyle() {
        var _ref3;

        var _temp3, _this3, _ret3;

        classCallCheck(this, RadioButtonGroupStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this3 = possibleConstructorReturn(this, (_ref3 = RadioButtonGroupStyle.__proto__ || Object.getPrototypeOf(RadioButtonGroupStyle)).call.apply(_ref3, [this].concat(args))), _this3), _initDefineProp$6(_this3, "DEFAULT", _descriptor9$3, _this3), _temp3), possibleConstructorReturn(_this3, _ret3);
    }

    return RadioButtonGroupStyle;
}(StyleSheet), _descriptor9$3 = _applyDecoratedDescriptor$6(_class5$2.prototype, "DEFAULT", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            pointerEvents: "none",
            ">*": {
                pointerEvents: "initial",
                borderRadius: "0"
            },
            ">:last-child": {
                borderTopRightRadius: "0.3em",
                borderBottomRightRadius: "0.3em"
            },
            ">:first-child": {
                borderTopLeftRadius: "0.3em",
                borderBottomLeftRadius: "0.3em"
            }
        };
    }
}), _class5$2);

var _dec$6, _class$19;

var Button = (_dec$6 = registerStyle(ButtonStyle), _dec$6(_class$19 = function (_UI$Primitive) {
    inherits(Button, _UI$Primitive);

    function Button() {
        classCallCheck(this, Button);
        return possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    createClass(Button, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.DEFAULT);

            if (this.getSize()) {
                attr.addClass(this.styleSheet.Size(this.getSize()));
            }

            if (this.getLevel()) {
                attr.addClass(this.styleSheet.Level(this.getLevel()));
            }
        }
    }, {
        key: "disable",
        value: function disable() {
            this.options.disabled = true;
            this.node.disabled = true;
        }
    }, {
        key: "enable",
        value: function enable() {
            this.options.disabled = false;
            this.node.disabled = false;
        }
    }, {
        key: "setEnabled",
        value: function setEnabled(enabled) {
            this.options.disabled = !enabled;
            this.node.disabled = !enabled;
        }
    }]);
    return Button;
}(UI.Primitive(IconableInterface, "button"))) || _class$19);

var StateButton = function (_Button) {
    inherits(StateButton, _Button);

    function StateButton() {
        classCallCheck(this, StateButton);
        return possibleConstructorReturn(this, (StateButton.__proto__ || Object.getPrototypeOf(StateButton)).apply(this, arguments));
    }

    createClass(StateButton, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.state = this.options && this.options.state || options.state || ActionStatus.DEFAULT;

            get(StateButton.prototype.__proto__ || Object.getPrototypeOf(StateButton.prototype), "setOptions", this).call(this, options);

            this.options.statusOptions = this.options.statusOptions || [];
            for (var i = 0; i < 4; i += 1) {
                if (typeof this.options.statusOptions[i] === "string") {
                    var statusLabel = this.options.statusOptions[i];
                    this.options.statusOptions[i] = {
                        label: statusLabel,
                        faIcon: ""
                    };
                }
            }
        }
    }, {
        key: "setState",
        value: function setState(status) {
            this.options.state = status;
            if (status === ActionStatus.DEFAULT) {
                this.enable();
            } else if (status === ActionStatus.RUNNING) {
                this.disable();
            } else if (status === ActionStatus.SUCCESS) {} else if (status === ActionStatus.FAILED) {}

            this.redraw();
        }
    }, {
        key: "render",
        value: function render() {
            var stateOptions = this.options.statusOptions[this.options.state - 1];

            this.options.label = stateOptions.label;
            this.options.faIcon = stateOptions.faIcon;

            return get(StateButton.prototype.__proto__ || Object.getPrototypeOf(StateButton.prototype), "render", this).call(this);
        }
    }]);
    return StateButton;
}(Button);

var AjaxButton = function (_StateButton) {
    inherits(AjaxButton, _StateButton);

    function AjaxButton() {
        classCallCheck(this, AjaxButton);
        return possibleConstructorReturn(this, (AjaxButton.__proto__ || Object.getPrototypeOf(AjaxButton)).apply(this, arguments));
    }

    createClass(AjaxButton, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(AjaxButton.prototype.__proto__ || Object.getPrototypeOf(AjaxButton.prototype), "getDefaultOptions", this).call(this) || {}, {
                resetToDefaultTimeout: 1000
            });
        }
    }, {
        key: "getAjaxHandler",
        value: function getAjaxHandler() {
            return this.options.ajaxHandler || Ajax;
        }
    }, {
        key: "setAjaxHandler",
        value: function setAjaxHandler(ajaxHandler) {
            this.options.ajaxHandler = ajaxHandler;
        }
    }, {
        key: "clearResetTimeout",
        value: function clearResetTimeout() {
            if (this.stateResetTimeout) {
                clearTimeout(this.stateResetTimeout);
                delete this.stateResetTimeout;
            }
        }
    }, {
        key: "scheduleStateReset",
        value: function scheduleStateReset() {
            var _this4 = this;

            this.clearResetTimeout();
            this.stateResetTimeout = setTimeout(function () {
                _this4.setState(ActionStatus.DEFAULT);
                _this4.clearResetTimeout();
            }, this.resetToDefaultTimeout);
        }
    }, {
        key: "ajax",
        value: function ajax(methodName) {
            var _getAjaxHandler,
                _this5 = this;

            this.setState(ActionStatus.RUNNING);

            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            var ajaxPromise = (_getAjaxHandler = this.getAjaxHandler())[methodName].apply(_getAjaxHandler, args);
            ajaxPromise.getPromise().then(function (data) {
                _this5.setState(ActionStatus.SUCCESS);
                _this5.scheduleStateReset();
            }, function (error) {
                _this5.setState(ActionStatus.FAILED);
                _this5.scheduleStateReset();
            });
            return ajaxPromise;
        }
    }, {
        key: "ajaxCall",
        value: function ajaxCall(data) {
            return this.ajax("fetch", data);
        }
    }]);
    return AjaxButton;
}(StateButton);

var _arr = ["fetch", "request", "get", "post", "getJSON", "postJSON"];

var _loop = function _loop() {
    var methodName = _arr[_i];
    AjaxButton.prototype[methodName] = function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return this.ajax.apply(this, [methodName].concat(args));
    };
};

for (var _i = 0; _i < _arr.length; _i++) {
    _loop();
}

var _dec$7, _class$20, _dec2$3, _class2$3;

var ButtonGroup = (_dec$7 = registerStyle(ButtonGroupStyle), _dec$7(_class$20 = function (_SimpleStyledElement) {
    inherits(ButtonGroup, _SimpleStyledElement);

    function ButtonGroup() {
        classCallCheck(this, ButtonGroup);
        return possibleConstructorReturn(this, (ButtonGroup.__proto__ || Object.getPrototypeOf(ButtonGroup)).apply(this, arguments));
    }

    createClass(ButtonGroup, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                orientation: Orientation.HORIZONTAL
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.Orientation(this.options.orientation));
        }
    }]);
    return ButtonGroup;
}(SimpleStyledElement)) || _class$20);
var RadioButtonGroup = (_dec2$3 = registerStyle(RadioButtonGroupStyle), _dec2$3(_class2$3 = function (_SimpleStyledElement2) {
    inherits(RadioButtonGroup, _SimpleStyledElement2);

    function RadioButtonGroup() {
        classCallCheck(this, RadioButtonGroup);
        return possibleConstructorReturn(this, (RadioButtonGroup.__proto__ || Object.getPrototypeOf(RadioButtonGroup)).apply(this, arguments));
    }

    createClass(RadioButtonGroup, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(RadioButtonGroup.prototype.__proto__ || Object.getPrototypeOf(RadioButtonGroup.prototype), "setOptions", this).call(this, options);
            this.index = this.options.index || 0;
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.DEFAULT);
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            this.buttons = [];

            var _loop = function _loop(i) {
                _this3.buttons.push(UI.createElement(Button, { key: i, onClick: function onClick() {
                        _this3.setIndex(i);
                    }, size: _this3.getSize(),
                    label: _this3.options.givenOptions[i].toString(), level: _this3.getLevel(),
                    className: _this3.index === i ? "active" : "" }));
            };

            for (var i = 0; i < this.options.givenOptions.length; i += 1) {
                _loop(i);
            }
            return this.buttons;
        }
    }, {
        key: "getIndex",
        value: function getIndex() {
            return this.index;
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.options.givenOptions[this.index];
        }
    }, {
        key: "setIndex",
        value: function setIndex(index) {
            this.dispatch("setIndex", {
                index: index,
                oldIndex: this.index,
                value: this.options.givenOptions[index],
                oldValue: this.options.givenOptions[this.index]
            });
            this.buttons[this.index].removeClass("active");
            this.index = index;
            this.buttons[this.index].addClass("active");
        }
    }]);
    return RadioButtonGroup;
}(SimpleStyledElement)) || _class2$3);

var _class$21, _descriptor$6, _descriptor2$6, _descriptor3$6, _descriptor4$5, _descriptor5$5, _dec$8, _class3$4;

function _initDefineProp$7(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$7(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

function cardPanelColorToStyle(color) {
    var colors = buildColors(color);
    return {
        borderColor: colors[4]
    };
}

var CardPanelStyle = (_class$21 = function (_BasicLevelStyleSheet) {
    inherits(CardPanelStyle, _BasicLevelStyleSheet);

    function CardPanelStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, CardPanelStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = CardPanelStyle.__proto__ || Object.getPrototypeOf(CardPanelStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$7(_this, "DEFAULT", _descriptor$6, _this), _initDefineProp$7(_this, "LARGE", _descriptor2$6, _this), _initDefineProp$7(_this, "body", _descriptor3$6, _this), _initDefineProp$7(_this, "panel", _descriptor4$5, _this), _initDefineProp$7(_this, "centered", _descriptor5$5, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return CardPanelStyle;
}(BasicLevelStyleSheet(cardPanelColorToStyle)), _descriptor$6 = _applyDecoratedDescriptor$7(_class$21.prototype, "DEFAULT", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [{
            display: "flex",
            alignItems: "center",
            width: "100%",
            flexDirection: "row",
            padding: "5px",
            minHeight: this.themeProperties.CARD_PANEL_HEADER_HEIGHT,
            textTransform: this.themeProperties.CARD_PANEL_TEXT_TRANSFORM,
            paddingLeft: this.themeProperties.CARD_PANEL_HEADING_PADDING,
            paddingRight: this.themeProperties.CARD_PANEL_HEADING_PADDING
        }, cardPanelHeaderColorToStyle(this.themeProperties.COLOR_BACKGROUND)];
    }
}), _descriptor2$6 = _applyDecoratedDescriptor$7(_class$21.prototype, "LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minHeight: this.themeProperties.CARD_PANEL_HEADER_HEIGHT_LARGE,
            paddingLeft: this.themeProperties.CARD_PANEL_HEADING_PADDING_LARGE,
            paddingRight: this.themeProperties.CARD_PANEL_HEADING_PADDING_LARGE
        };
    }
}), _descriptor3$6 = _applyDecoratedDescriptor$7(_class$21.prototype, "body", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {};
    }
}), _descriptor4$5 = _applyDecoratedDescriptor$7(_class$21.prototype, "panel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [{
            borderWidth: this.themeProperties.BASE_BORDER_WIDTH,
            borderRadius: this.themeProperties.BASE_BORDER_RADIUS,
            boxShadow: this.themeProperties.BASE_BOX_SHADOW,
            borderStyle: this.themeProperties.BASE_BORDER_STYLE,
            backgroundColor: this.themeProperties.COLOR_BACKGROUND
        }, cardPanelColorToStyle(this.themeProperties.COLOR_BACKGROUND)];
    }
}), _descriptor5$5 = _applyDecoratedDescriptor$7(_class$21.prototype, "centered", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            textAlign: "center",
            justifyContent: "center"
        };
    }
}), _class$21);

function cardPanelHeaderColorToStyle(color) {
    var colors = buildColors(color);
    return {
        color: colors[6],
        backgroundColor: colors[1],
        borderBottomColor: colors[4]
    };
}

var CardPanelHeaderStyle = BasicLevelStyleSheet(cardPanelHeaderColorToStyle);

var CardPanel = (_dec$8 = registerStyle(CardPanelStyle), _dec$8(_class3$4 = function (_SimpleStyledElement) {
    inherits(CardPanel, _SimpleStyledElement);

    function CardPanel() {
        classCallCheck(this, CardPanel);
        return possibleConstructorReturn(this, (CardPanel.__proto__ || Object.getPrototypeOf(CardPanel)).apply(this, arguments));
    }

    createClass(CardPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.panel);
        }
    }, {
        key: "getLevel",
        value: function getLevel() {
            return get(CardPanel.prototype.__proto__ || Object.getPrototypeOf(CardPanel.prototype), "getLevel", this).call(this) || Level.PRIMARY;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return this.options.title;
        }
    }, {
        key: "getHeaderStyleSheet",
        value: function getHeaderStyleSheet() {
            return CardPanelHeaderStyle.getInstance();
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                headingCentered: true,
                bodyCentered: false
            };
        }
    }, {
        key: "getHeadingClasses",
        value: function getHeadingClasses() {
            var headingClasses = "";
            var headingLevel = this.getHeaderStyleSheet().Level(this.getLevel()),
                headingCentered = this.options.headingCentered;


            if (headingLevel) {
                headingClasses = headingClasses + headingLevel;
            }

            headingClasses = headingClasses + this.styleSheet.DEFAULT;
            if (this.getSize()) {
                headingClasses = headingClasses + this.styleSheet.Size(this.getSize());
            }

            if (headingCentered) {
                headingClasses = headingClasses + this.styleSheet.centered;
            }

            return headingClasses;
        }
    }, {
        key: "getBodyClasses",
        value: function getBodyClasses() {
            var bodyCentered = this.options.bodyCentered;


            var bodyClasses = this.styleSheet.body;
            if (bodyCentered) {
                bodyClasses = bodyClasses + this.styleSheet.centered;
            }

            return bodyClasses;
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            var headingClasses = this.getHeadingClasses();
            var bodyClasses = this.getBodyClasses();

            return [UI.createElement(
                "div",
                { ref: "panelTitle", className: headingClasses },
                this.getTitle()
            ), UI.createElement(
                "div",
                { ref: "panelBody", className: bodyClasses, style: this.options.bodyStyle },
                this.render()
            )];
        }
    }]);
    return CardPanel;
}(SimpleStyledElement)) || _class3$4);

var _class$22, _descriptor$7, _descriptor2$7, _descriptor3$7, _descriptor4$6, _descriptor5$6, _dec$9, _class3$5;

function _initDefineProp$8(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$8(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var RowListStyle = (_class$22 = function (_BasicLevelSizeStyleS) {
    inherits(RowListStyle, _BasicLevelSizeStyleS);

    function RowListStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, RowListStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = RowListStyle.__proto__ || Object.getPrototypeOf(RowListStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$8(_this, "rowList", _descriptor$7, _this), _initDefineProp$8(_this, "DEFAULT", _descriptor2$7, _this), _initDefineProp$8(_this, "LARGE", _descriptor3$7, _this), _initDefineProp$8(_this, "alternativeColorsOddRow", _descriptor4$6, _this), _initDefineProp$8(_this, "noAlternativeColors", _descriptor5$6, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return RowListStyle;
}(BasicLevelSizeStyleSheet), _descriptor$7 = _applyDecoratedDescriptor$8(_class$22.prototype, "rowList", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%"
        };
    }
}), _descriptor2$7 = _applyDecoratedDescriptor$8(_class$22.prototype, "DEFAULT", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            alignItems: "center",
            width: "100%",

            minHeight: this.themeProperties.ROW_LIST_ROW_HEIGHT,
            paddingLeft: this.themeProperties.ROW_LIST_ROW_PADDING,
            paddingRight: this.themeProperties.ROW_LIST_ROW_PADDING,

            backgroundColor: this.themeProperties.COLOR_BACKGROUND
        };
    }
}), _descriptor3$7 = _applyDecoratedDescriptor$8(_class$22.prototype, "LARGE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minHeight: this.themeProperties.ROW_LIST_ROW_HEIGHT_LARGE,
            paddingLeft: this.themeProperties.ROW_LIST_ROW_PADDING_LARGE,
            paddingRight: this.themeProperties.ROW_LIST_ROW_PADDING_LARGE
        };
    }
}), _descriptor4$6 = _applyDecoratedDescriptor$8(_class$22.prototype, "alternativeColorsOddRow", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: this.themeProperties.COLOR_BACKGROUND_ALTERNATIVE
        };
    }
}), _descriptor5$6 = _applyDecoratedDescriptor$8(_class$22.prototype, "noAlternativeColors", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            borderTopWidth: this.themeProperties.ROW_LIST_ROW_BORDER_WIDTH,
            borderTopStyle: this.themeProperties.BASE_BORDER_STYLE,
            borderTopColor: this.themeProperties.BASE_BORDER_COLOR
        };
    }
}), _class$22);

var RowList$$1 = (_dec$9 = registerStyle(RowListStyle), _dec$9(_class3$5 = function (_SimpleStyledElement) {
    inherits(RowList$$1, _SimpleStyledElement);

    function RowList$$1() {
        classCallCheck(this, RowList$$1);
        return possibleConstructorReturn(this, (RowList$$1.__proto__ || Object.getPrototypeOf(RowList$$1)).apply(this, arguments));
    }

    createClass(RowList$$1, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.rowList);
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions(options) {
            return {
                alternateColors: true
            };
        }
    }, {
        key: "getRowClasses",
        value: function getRowClasses(index) {
            var rowClasses = this.styleSheet.DEFAULT;
            if (this.getSize()) {
                rowClasses = rowClasses + this.styleSheet.Size(this.getSize());
            }

            var alternateColors = this.options.alternateColors;


            if (alternateColors && index % 2 === 1) {
                rowClasses = rowClasses + this.styleSheet.alternativeColorsOddRow;
            } else if (!alternateColors && index > 0) {
                rowClasses = rowClasses + this.styleSheet.noAlternativeColors;
            }

            return rowClasses;
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var _options = this.options,
                rows = _options.rows,
                rowParser = _options.rowParser;


            return rows.map(function (row, index) {
                return UI.createElement(
                    "div",
                    { className: _this3.getRowClasses(index) },
                    rowParser(row)
                );
            });
        }
    }]);
    return RowList$$1;
}(SimpleStyledElement)) || _class3$5);

var _class$23, _descriptor$8, _descriptor2$8, _class3$6, _descriptor3$8, _descriptor4$7, _descriptor5$7, _descriptor6$5;

function _initDefineProp$9(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$9(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var CollapsibleStyle = (_class$23 = function (_StyleSheet) {
    inherits(CollapsibleStyle, _StyleSheet);

    function CollapsibleStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, CollapsibleStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = CollapsibleStyle.__proto__ || Object.getPrototypeOf(CollapsibleStyle)).call.apply(_ref, [this].concat(args))), _this), _this.transitionDuration = 0.4, _initDefineProp$9(_this, "collapsing", _descriptor$8, _this), _initDefineProp$9(_this, "collapsed", _descriptor2$8, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return CollapsibleStyle;
}(StyleSheet), _descriptor$8 = _applyDecoratedDescriptor$9(_class$23.prototype, "collapsing", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "0",
            transitionTimingFunction: "ease",
            transitionDuration: this.transitionDuration + "s",
            transitionProperty: "margin-top",
            transitionDelay: "-0.15s"
        };
    }
}), _descriptor2$8 = _applyDecoratedDescriptor$9(_class$23.prototype, "collapsed", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "-100% !important",
            transitionDelay: "0s !important"
        };
    }
}), _class$23);
var CollapsiblePanelStyle = (_class3$6 = function (_CardPanelStyle) {
    inherits(CollapsiblePanelStyle, _CardPanelStyle);

    function CollapsiblePanelStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, CollapsiblePanelStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = CollapsiblePanelStyle.__proto__ || Object.getPrototypeOf(CollapsiblePanelStyle)).call.apply(_ref2, [this].concat(args))), _this2), _initDefineProp$9(_this2, "panel", _descriptor3$8, _this2), _initDefineProp$9(_this2, "heading", _descriptor4$7, _this2), _initDefineProp$9(_this2, "button", _descriptor5$7, _this2), _initDefineProp$9(_this2, "collapsedButton", _descriptor6$5, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return CollapsiblePanelStyle;
}(CardPanelStyle), _descriptor3$8 = _applyDecoratedDescriptor$9(_class3$6.prototype, "panel", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            boxShadow: null,
            borderWidth: "1px",
            borderColor: "#ccc !important",
            borderRadius: "3px"
        };
    }
}), _descriptor4$7 = _applyDecoratedDescriptor$9(_class3$6.prototype, "heading", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "10px 15px",
            borderBottom: "1px solid transparent",
            borderTopLeftRadius: "3px",
            borderTopRightRadius: "3px",
            backgroundColor: "#fefefe",
            ":hover": {
                backgroundColor: "#f3f3f3"
            }
        };
    }
}), _descriptor5$7 = _applyDecoratedDescriptor$9(_class3$6.prototype, "button", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "0",
            marginBottom: "0",
            fontSize: "16px",
            color: "inherit",
            cursor: "pointer",
            ":hover": {
                color: "inherit"
            },
            ":before": {
                transition: "transform .2s linear",
                fontFamily: "'FontAwesome'",
                content: "\"\\f107\"",
                color: "grey",
                display: "inline-block",
                lineHeight: "0.7em",
                width: "0.7em",
                fontSize: "150%",
                verticalAlign: "bottom",
                height: "0.7em",
                textAlign: "center",
                transform: "rotate(0deg)",
                marginRight: ".2em"
            }
        };
    }
}), _descriptor6$5 = _applyDecoratedDescriptor$9(_class3$6.prototype, "collapsedButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ":before": {
                transform: "rotate(-90deg) !important"
            }
        };
    }
}), _class3$6);

function CollapsibleMixin(BaseClass) {
    var _class, _temp;

    var CollapsibleClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CollapsibleStyle;
    var CollapsibleElement = (_temp = _class = function (_BaseClass) {
        inherits(CollapsibleElement, _BaseClass);

        function CollapsibleElement() {
            classCallCheck(this, CollapsibleElement);
            return possibleConstructorReturn(this, (CollapsibleElement.__proto__ || Object.getPrototypeOf(CollapsibleElement)).apply(this, arguments));
        }

        createClass(CollapsibleElement, [{
            key: "getDefaultOptions",
            value: function getDefaultOptions() {
                return {
                    collapsed: true
                };
            }
        }, {
            key: "getCollapsibleStyleSheet",
            value: function getCollapsibleStyleSheet() {
                return this.options.collapsibleStyleSheet || this.constructor.collapsibleStyleSheet;
            }
        }, {
            key: "expand",
            value: function expand(panel) {
                this.options.collapsed = false;
                this.dispatch("expand");
                var collapsibleStyle = this.getCollapsibleStyleSheet();
                panel.addClass(collapsibleStyle.collapsing);
                panel.removeClass("hidden");
                setTimeout(function () {
                    panel.removeClass(collapsibleStyle.collapsed);
                }, 100);
            }
        }, {
            key: "collapse",
            value: function collapse(panel) {
                var _this2 = this;

                this.options.collapsed = true;
                this.dispatch("collapse");
                var collapsibleStyle = this.getCollapsibleStyleSheet();
                panel.addClass(collapsibleStyle.collapsing);
                panel.addClass(collapsibleStyle.collapsed);
                var transitionEndFunction = function transitionEndFunction() {
                    if (_this2.options.collapsed) {
                        panel.addClass("hidden");
                    }
                };
                panel.addNodeListener("transitionend", transitionEndFunction);
            }
        }]);
        return CollapsibleElement;
    }(BaseClass), _class.collapsibleStyleSheet = new CollapsibleClass(), _temp);


    return CollapsibleElement;
}

var _dec$10, _class$24;

var CollapsiblePanel = (_dec$10 = registerStyle(CollapsiblePanelStyle), _dec$10(_class$24 = function (_CollapsibleMixin) {
    inherits(CollapsiblePanel, _CollapsibleMixin);

    function CollapsiblePanel() {
        classCallCheck(this, CollapsiblePanel);
        return possibleConstructorReturn(this, (CollapsiblePanel.__proto__ || Object.getPrototypeOf(CollapsiblePanel)).apply(this, arguments));
    }

    createClass(CollapsiblePanel, [{
        key: "toggle",
        value: function toggle() {
            if (this.options.collapsed) {
                this.expand();
            } else {
                this.collapse();
            }
        }
    }, {
        key: "expand",
        value: function expand() {
            get(CollapsiblePanel.prototype.__proto__ || Object.getPrototypeOf(CollapsiblePanel.prototype), "expand", this).call(this, this.contentArea);
            this.toggleButton.removeClass(this.styleSheet.collapsedButton);
        }
    }, {
        key: "collapse",
        value: function collapse() {
            get(CollapsiblePanel.prototype.__proto__ || Object.getPrototypeOf(CollapsiblePanel.prototype), "collapse", this).call(this, this.contentArea);
            this.toggleButton.addClass(this.styleSheet.collapsedButton);
        }
    }, {
        key: "setTitle",
        value: function setTitle(title) {
            this.options.title = title;
            this.toggleButton.setChildren(title);
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            var _this2 = this;

            var collapsedPanelClass = "";
            var collapsedHeadingClass = "";
            var hiddenClass = "";
            var contentStyle = {};

            if (this.options.collapsed) {
                collapsedHeadingClass = this.styleSheet.collapsedButton;
                collapsedPanelClass = this.styleSheet.collapsed;
                hiddenClass = "hidden";
            }
            if (!this.options.noPadding) {
                contentStyle = {
                    padding: "8px 8px"
                };
            }

            return [UI.createElement(
                "div",
                { className: this.styleSheet.heading },
                UI.createElement(
                    "div",
                    { ref: "toggleButton", className: this.styleSheet.button + " " + collapsedHeadingClass,
                        onClick: function onClick() {
                            return _this2.toggle();
                        } },
                    this.getTitle()
                )
            ), UI.createElement(
                "div",
                { style: { overflow: "hidden" } },
                UI.createElement(
                    "div",
                    { ref: "contentArea", className: collapsedPanelClass + " " + hiddenClass,
                        style: contentStyle },
                    this.render()
                )
            )];
        }
    }]);
    return CollapsiblePanel;
}(CollapsibleMixin(CardPanel))) || _class$24);

var DelayedCollapsiblePanel = function (_CollapsiblePanel) {
    inherits(DelayedCollapsiblePanel, _CollapsiblePanel);

    function DelayedCollapsiblePanel() {
        classCallCheck(this, DelayedCollapsiblePanel);
        return possibleConstructorReturn(this, (DelayedCollapsiblePanel.__proto__ || Object.getPrototypeOf(DelayedCollapsiblePanel)).apply(this, arguments));
    }

    createClass(DelayedCollapsiblePanel, [{
        key: "toggle",
        value: function toggle() {
            if (!this._haveExpanded) {
                this._haveExpanded = true;
                UI.renderingStack.push(this);
                this.contentArea.options.children = this.render();
                UI.renderingStack.pop();
                this.contentArea.redraw();
                this.delayedMount();
            }
            get(DelayedCollapsiblePanel.prototype.__proto__ || Object.getPrototypeOf(DelayedCollapsiblePanel.prototype), "toggle", this).call(this);
        }
    }, {
        key: "render",
        value: function render() {
            if (!this._haveExpanded) {
                return [];
            }
            return this.getDelayedChildren();
        }
    }]);
    return DelayedCollapsiblePanel;
}(CollapsiblePanel);

var _class$25, _descriptor$9, _descriptor2$9, _class3$7, _descriptor3$9, _descriptor4$8, _descriptor5$8, _descriptor6$6, _descriptor7$4;

function _initDefineProp$10(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$10(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var FloatingWindowStyle = (_class$25 = function (_StyleSheet) {
    inherits(FloatingWindowStyle, _StyleSheet);

    function FloatingWindowStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, FloatingWindowStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FloatingWindowStyle.__proto__ || Object.getPrototypeOf(FloatingWindowStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$10(_this, "hiddenAnimated", _descriptor$9, _this), _initDefineProp$10(_this, "visibleAnimated", _descriptor2$9, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return FloatingWindowStyle;
}(StyleSheet), _descriptor$9 = _applyDecoratedDescriptor$10(_class$25.prototype, "hiddenAnimated", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            visibility: "hidden",
            opacity: "0",
            transition: "opacity 0.1s linear"
        };
    }
}), _descriptor2$9 = _applyDecoratedDescriptor$10(_class$25.prototype, "visibleAnimated", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            visibility: "visible",
            opacity: "1",
            transition: "opacity 0.1s linear"
        };
    }
}), _class$25);
var ModalStyle = (_class3$7 = function (_FloatingWindowStyle) {
    inherits(ModalStyle, _FloatingWindowStyle);

    function ModalStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, ModalStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = ModalStyle.__proto__ || Object.getPrototypeOf(ModalStyle)).call.apply(_ref2, [this].concat(args))), _this2), _initDefineProp$10(_this2, "container", _descriptor3$9, _this2), _initDefineProp$10(_this2, "background", _descriptor4$8, _this2), _initDefineProp$10(_this2, "header", _descriptor5$8, _this2), _initDefineProp$10(_this2, "body", _descriptor6$6, _this2), _initDefineProp$10(_this2, "footer", _descriptor7$4, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return ModalStyle;
}(FloatingWindowStyle), _descriptor3$9 = _applyDecoratedDescriptor$10(_class3$7.prototype, "container", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "fixed",
            top: "0px",
            left: "0px",
            right: "0px",
            bottom: "0px",
            width: "100%",
            height: "100%",
            zIndex: "9999"
        };
    }
}), _descriptor4$8 = _applyDecoratedDescriptor$10(_class3$7.prototype, "background", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "fixed",
            width: "100%",
            height: "100%",
            background: "rgba(0,0,0,0.5)"
        };
    }
}), _descriptor5$8 = _applyDecoratedDescriptor$10(_class3$7.prototype, "header", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "15px",
            borderBottom: "1px solid #e5e5e5"
        };
    }
}), _descriptor6$6 = _applyDecoratedDescriptor$10(_class3$7.prototype, "body", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "relative",
            padding: "15px"
        };
    }
}), _descriptor7$4 = _applyDecoratedDescriptor$10(_class3$7.prototype, "footer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "15px",
            textAlign: "right",
            borderTop: "1px solid #e5e5e5"
        };
    }
}), _class3$7);

var _dec$11, _class$26;

var FloatingWindow = (_dec$11 = registerStyle(FloatingWindowStyle), _dec$11(_class$26 = function (_UI$Element) {
    inherits(FloatingWindow, _UI$Element);

    function FloatingWindow() {
        classCallCheck(this, FloatingWindow);
        return possibleConstructorReturn(this, (FloatingWindow.__proto__ || Object.getPrototypeOf(FloatingWindow)).apply(this, arguments));
    }

    createClass(FloatingWindow, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                transitionTime: 0,
                style: {
                    zIndex: 2016
                }
            };
        }
    }, {
        key: "fadeOut",
        value: function fadeOut() {
            this.removeClass(this.styleSheet.visibleAnimated);
            this.addClass(this.styleSheet.hiddenAnimated);
        }
    }, {
        key: "fadeIn",
        value: function fadeIn() {
            this.removeClass(this.styleSheet.hiddenAnimated);
            this.addClass(this.styleSheet.visibleAnimated);
        }
    }, {
        key: "show",
        value: function show() {
            var _this2 = this;

            // TODO: refactor this to use this.parent and UI.Element appendChild
            if (!this.isInDocument()) {
                this.parentNode.appendChild(this.node);
                this.redraw();
                setTimeout(function () {
                    _this2.fadeIn();
                }, 0);
            }
        }
    }, {
        key: "setParentNode",
        value: function setParentNode(parentNode) {
            this.options.parentNode = parentNode;
        }
    }, {
        key: "hide",
        value: function hide() {
            var _this3 = this;

            // TODO: refactor this to use this.parent and UI.Element removeChild
            if (this.isInDocument()) {
                this.fadeOut();
                setTimeout(function () {
                    if (_this3.isInDocument()) {
                        _this3.parentNode.removeChild(_this3.node);
                    }
                }, this.options.transitionTime);
            }
        }
    }, {
        key: "parentNode",
        get: function get$$1() {
            if (!this.options.parentNode) {
                if (this.parent) {
                    if (this.parent instanceof HTMLElement) {
                        this.options.parentNode = this.parent;
                    } else {
                        this.options.parentNode = this.parent.node;
                    }
                } else {
                    this.options.parentNode = document.body;
                }
            }
            return this.options.parentNode;
        }
    }]);
    return FloatingWindow;
}(UI.Element)) || _class$26);

var VolatileFloatingWindow = function (_FloatingWindow) {
    inherits(VolatileFloatingWindow, _FloatingWindow);

    function VolatileFloatingWindow() {
        classCallCheck(this, VolatileFloatingWindow);
        return possibleConstructorReturn(this, (VolatileFloatingWindow.__proto__ || Object.getPrototypeOf(VolatileFloatingWindow)).apply(this, arguments));
    }

    createClass(VolatileFloatingWindow, [{
        key: "bindWindowListeners",
        value: function bindWindowListeners() {
            var _this5 = this;

            this.hideListener = this.hideListener || function () {
                _this5.hide();
            };
            window.addEventListener("click", this.hideListener);
        }
    }, {
        key: "unbindWindowListeners",
        value: function unbindWindowListeners() {
            window.removeEventListener("click", this.hideListener);
        }
    }, {
        key: "toggle",
        value: function toggle() {
            if (!this.isInDocument()) {
                this.show();
            } else {
                this.hide();
            }
        }
    }, {
        key: "show",
        value: function show() {
            if (!this.isInDocument()) {
                this.bindWindowListeners();
                get(VolatileFloatingWindow.prototype.__proto__ || Object.getPrototypeOf(VolatileFloatingWindow.prototype), "show", this).call(this);
            }
        }
    }, {
        key: "hide",
        value: function hide() {
            if (this.isInDocument()) {
                this.unbindWindowListeners();
                get(VolatileFloatingWindow.prototype.__proto__ || Object.getPrototypeOf(VolatileFloatingWindow.prototype), "hide", this).call(this);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            if (!this.options.notVisible) {
                this.bindWindowListeners();
            } else {
                setTimeout(function () {
                    _this6.hide();
                });
            }

            this.addClickListener(function (event) {
                event.stopPropagation();
            });
        }
    }]);
    return VolatileFloatingWindow;
}(FloatingWindow);

var _dec$12, _class$27;

var Modal = (_dec$12 = registerStyle(ModalStyle), _dec$12(_class$27 = function (_UI$Element) {
    inherits(Modal, _UI$Element);

    function Modal() {
        classCallCheck(this, Modal);
        return possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));
    }

    createClass(Modal, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                closeButton: true,
                destroyOnHide: true,
                visible: false
            };
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            var _this2 = this;

            return [UI.createElement(
                Panel,
                { ref: "modalContainer", className: (this.options.visible ? "" : "hidden") + this.styleSheet.container },
                UI.createElement(Panel, { ref: "behindPanel", className: this.styleSheet.hiddenAnimated + this.styleSheet.background, onClick: function onClick() {
                        return _this2.hide();
                    } }),
                this.getModalWindow()
            )];
        }
    }, {
        key: "getModalWindow",
        value: function getModalWindow() {
            var _this3 = this;

            var closeButton = null;
            if (this.options.closeButton) {
                // TODO: this should be in a method
                closeButton = UI.createElement(
                    "div",
                    { style: { right: "10px", zIndex: "10", position: "absolute" } },
                    UI.createElement(Button, { className: "close", size: Size.EXTRA_LARGE, style: { border: "none" }, label: "\xD7", onClick: function onClick() {
                            return _this3.hide();
                        } })
                );
            }

            return UI.createElement(
                FloatingWindow,
                { ref: "modalWindow", style: this.getModalWindowStyle() },
                closeButton,
                this.render()
            );
        }
    }, {
        key: "getModalWindowStyle",
        value: function getModalWindowStyle() {
            if (this.options.fillScreen) {
                this.options.width = "85%";
            }
            // TODO(@Rocky): I don't like this very much, honestly...
            return {
                position: "relative",
                padding: "1%",
                boxShadow: "0 5px 15px rgba(0,0,0,0.5)",
                borderRadius: "10px",
                margin: "60px auto",
                display: this.options.display || "block",
                maxHeight: this.options.maxHeight || "85%",
                left: "0",
                right: "0",
                width: this.options.width || "50%",
                height: this.options.height || "auto",
                background: "white",
                overflow: this.options.overflow || "auto"
            };
        }
    }, {
        key: "isVisible",
        value: function isVisible() {
            return this.options.visible;
        }
    }, {
        key: "hide",
        value: function hide() {
            var _this4 = this;

            if (!this.isVisible()) {
                return;
            }

            this.options.visible = false;
            this.modalWindow.fadeOut();

            setTimeout(function () {
                _this4.behindPanel.removeClass(_this4.styleSheet.visibleAnimated);
                _this4.behindPanel.addClass(_this4.styleSheet.hiddenAnimated);

                setTimeout(function () {
                    _this4.modalContainer.addClass("hidden");
                    if (_this4.options.destroyOnHide) {
                        _this4.destroyNode();
                    }
                }, _this4.modalWindow.options.transitionTime || 0);

                _this4.detachListener(_this4.closeListenerHandler);
            }, this.modalWindow.options.transitionTime || 0);
            document.body.classList.remove("unscrollable");
        }
    }, {
        key: "show",
        value: function show() {
            var _this5 = this;

            this.options.visible = true;
            if (!this.node) {
                this.mount(document.body);
            }
            this.modalContainer.removeClass("hidden");
            setTimeout(function () {
                _this5.behindPanel.addClass(_this5.styleSheet.visibleAnimated);
                _this5.behindPanel.removeClass(_this5.styleSheet.hiddenAnimated);

                setTimeout(function () {
                    _this5.modalWindow.fadeIn();
                }, _this5.modalWindow.options.transitionTime);
            }, 0);
            this.closeListenerHandler = this.attachListener(Dispatcher.Global, "closeAllModals", function () {
                _this5.hide();
            });
            document.body.classList.add("unscrollable");
        }
    }], [{
        key: "show",
        value: function show() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var modal = new this(options);
            modal.show();
            return modal;
        }
    }]);
    return Modal;
}(UI.Element)) || _class$27);

var ActionModal = function (_Modal) {
    inherits(ActionModal, _Modal);

    function ActionModal() {
        classCallCheck(this, ActionModal);
        return possibleConstructorReturn(this, (ActionModal.__proto__ || Object.getPrototypeOf(ActionModal)).apply(this, arguments));
    }

    createClass(ActionModal, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(ActionModal.prototype.__proto__ || Object.getPrototypeOf(ActionModal.prototype), "getDefaultOptions", this).call(this), {
                closeButton: false
            });
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return this.options.actionName;
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return this.options.level || Level.DEFAULT;
        }
    }, {
        key: "getCloseName",
        value: function getCloseName() {
            return this.options.closeName || "Close";
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.header },
                this.getHeader()
            ), this.getBody() ? UI.createElement(
                "div",
                { className: this.styleSheet.body },
                this.getBody()
            ) : null, this.getFooter() ? UI.createElement(
                "div",
                { className: this.styleSheet.footer },
                this.getFooter()
            ) : null];
        }
    }, {
        key: "getHeader",
        value: function getHeader() {
            return UI.createElement(
                "h4",
                null,
                this.getTitle()
            );
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return this.options.title || this.getActionName();
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return null;
        }
    }, {
        key: "getActionButton",
        value: function getActionButton() {
            var _this7 = this;

            return UI.createElement(Button, { level: this.getActionLevel(), label: this.getActionName(), onClick: function onClick() {
                    return _this7.action();
                } });
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this8 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: this.getCloseName(), onClick: function onClick() {
                        return _this8.hide();
                    } }),
                this.getActionButton()
            )];
        }
    }, {
        key: "action",
        value: function action() {}
    }]);
    return ActionModal;
}(Modal);

var ActionModalButton = function ActionModalButton(ActionModal) {
    return function (_Button) {
        inherits(ActionModalButton, _Button);

        function ActionModalButton() {
            classCallCheck(this, ActionModalButton);
            return possibleConstructorReturn(this, (ActionModalButton.__proto__ || Object.getPrototypeOf(ActionModalButton)).apply(this, arguments));
        }

        createClass(ActionModalButton, [{
            key: "getModalOptions",
            value: function getModalOptions() {
                var modalOptions = {
                    actionName: this.options.label,
                    level: this.options.level
                };

                Object.assign(modalOptions, this.options.modalOptions);
                return modalOptions;
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this10 = this;

                this.addClickListener(function () {
                    ActionModal.show(_this10.getModalOptions());
                });
            }
        }]);
        return ActionModalButton;
    }(Button);
};

var ErrorModal = function (_ActionModal) {
    inherits(ErrorModal, _ActionModal);

    function ErrorModal() {
        classCallCheck(this, ErrorModal);
        return possibleConstructorReturn(this, (ErrorModal.__proto__ || Object.getPrototypeOf(ErrorModal)).apply(this, arguments));
    }

    createClass(ErrorModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "An Error occurred";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return this.options.error.message || this.options.error;
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this12 = this;

            return UI.createElement(Button, { level: Level.DANGER, label: "Dismiss", onClick: function onClick() {
                    return _this12.hide();
                } });
        }
    }]);
    return ErrorModal;
}(ActionModal);

var _class$28, _descriptor$10;

function _initDefineProp$11(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$11(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var GlobalContainerStyle = (_class$28 = function (_StyleSheet) {
    inherits(GlobalContainerStyle, _StyleSheet);

    function GlobalContainerStyle() {
        classCallCheck(this, GlobalContainerStyle);

        var _this = possibleConstructorReturn(this, (GlobalContainerStyle.__proto__ || Object.getPrototypeOf(GlobalContainerStyle)).call(this, { updateOnResize: Device.isMobileDevice() }));

        _initDefineProp$11(_this, "default", _descriptor$10, _this);

        return _this;
    }

    return GlobalContainerStyle;
}(StyleSheet), _descriptor$10 = _applyDecoratedDescriptor$11(_class$28.prototype, "default", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: function height() {
                return Device.isMobileDevice() ? window.innerHeight + "px" : "100vh";
            },
            paddingTop: this.themeProperties.NAV_MANAGER_NAVBAR_HEIGHT,
            background: this.themeProperties.COLOR_BACKGROUND_BODY,
            width: "100%",
            ">*": {
                height: "100%",
                width: "100%",
                paddingTop: Device.isMobileDevice() ? this.themeProperties.MAIN_CONTAINER_EXTRA_PADDING_TOP_MOBILE : this.themeProperties.MAIN_CONTAINER_EXTRA_PADDING_TOP_DESKTOP,
                paddingBottom: Device.isMobileDevice() ? this.themeProperties.MAIN_CONTAINER_EXTRA_PADDING_BOTTOM_MOBILE : this.themeProperties.MAIN_CONTAINER_EXTRA_PADDING_BOTTOM_DESKTOP,
                overflow: Device.isMobileDevice() ? "" : "auto"
            }
        };
    }
}), _class$28);

var _dec$13, _class$29;

var GlobalContainer = (_dec$13 = registerStyle(GlobalContainerStyle), _dec$13(_class$29 = function (_UI$Element) {
    inherits(GlobalContainer, _UI$Element);

    function GlobalContainer() {
        classCallCheck(this, GlobalContainer);
        return possibleConstructorReturn(this, (GlobalContainer.__proto__ || Object.getPrototypeOf(GlobalContainer)).apply(this, arguments));
    }

    createClass(GlobalContainer, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.default);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            if (!Device.isTouchDevice() || !Device.isMobileDevice()) {
                Object.assign(document.body.style, {
                    overflow: "hidden"
                });
            }
            GlobalContainer.Global = GlobalContainer.Global || this;
        }
    }]);
    return GlobalContainer;
}(UI.Element)) || _class$29);

var Divider = function (_UI$Element) {
    inherits(Divider, _UI$Element);

    function Divider() {
        classCallCheck(this, Divider);
        return possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).apply(this, arguments));
    }

    createClass(Divider, [{
        key: "dragMousedown",
        value: function dragMousedown(event) {}
    }, {
        key: "dragMousemove",
        value: function dragMousemove(event) {}
    }, {
        key: "dragMouseup",
        value: function dragMouseup(event) {}
    }, {
        key: "dividerMousedownFunction",
        value: function dividerMousedownFunction(event) {
            var _this2 = this;

            this.dragMousedown(event);
            this.parent.dispatch("dividerMousedown", { divider: this, domEvent: event });

            var dragMousemoveFunction = function dragMousemoveFunction(event) {
                _this2.dragMousemove(event);
                event.preventDefault(); // for touch devices
                _this2.parent.dispatch("dividerMousemove", event);
            };

            this.parent.addNodeListener("touchmove", dragMousemoveFunction);
            this.parent.addNodeListener("mousemove", dragMousemoveFunction);

            var dragMouseupFunction = function dragMouseupFunction(event) {
                _this2.dragMouseup(event);
                _this2.parent.dispatch("dividerMouseup", event);
                _this2.parent.removeNodeListener("touchmove", dragMousemoveFunction);
                window.removeEventListener("touchend", dragMouseupFunction);
                _this2.parent.removeNodeListener("mousemove", dragMousemoveFunction);
                window.removeEventListener("mouseup", dragMouseupFunction);
            };

            window.addEventListener("touchend", dragMouseupFunction);
            window.addEventListener("mouseup", dragMouseupFunction);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            // TODO: fix this hack when Device.isTouchDevice works
            this.addNodeListener("touchstart", function (event) {
                _this3.touchDeviceTriggered = true;_this3.dividerMousedownFunction(event);
            });
            this.addNodeListener("mousedown", function (event) {
                if (!_this3.touchDeviceTriggered) {
                    _this3.dividerMousedownFunction(event);
                }
            });
        }
    }]);
    return Divider;
}(UI.Element);

var _class$30, _descriptor$11, _class3$8, _descriptor2$10, _descriptor3$10, _descriptor4$9, _descriptor5$9, _class5$3, _descriptor6$7, _descriptor7$5, _descriptor8$4, _descriptor9$4, _class7$3, _descriptor10$3, _descriptor11$3, _descriptor12$3, _descriptor13$3, _descriptor14$3, _descriptor15$3, _descriptor16$3, _descriptor17$3, _descriptor18$1, _descriptor19$1, _descriptor20$1;

function _initDefineProp$12(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$12(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DividerStyle = (_class$30 = function (_StyleSheet) {
    inherits(DividerStyle, _StyleSheet);

    function DividerStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, DividerStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = DividerStyle.__proto__ || Object.getPrototypeOf(DividerStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$12(_this, "noTextSelection", _descriptor$11, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return DividerStyle;
}(StyleSheet), _descriptor$11 = _applyDecoratedDescriptor$12(_class$30.prototype, "noTextSelection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            "-webkit-user-select": "none",
            "-moz-user-select": "none",
            "-ms-user-select": "none",
            "-o-user-select": "none",
            userSelect: "none"
        };
    }
}), _class$30);
var AccordionStyle = (_class3$8 = function (_DividerStyle) {
    inherits(AccordionStyle, _DividerStyle);

    function AccordionStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, AccordionStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = AccordionStyle.__proto__ || Object.getPrototypeOf(AccordionStyle)).call.apply(_ref2, [this].concat(args))), _this2), _initDefineProp$12(_this2, "accordion", _descriptor2$10, _this2), _initDefineProp$12(_this2, "grab", _descriptor3$10, _this2), _initDefineProp$12(_this2, "grabbing", _descriptor4$9, _this2), _initDefineProp$12(_this2, "collapseIcon", _descriptor5$9, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return AccordionStyle;
}(DividerStyle), _descriptor2$10 = _applyDecoratedDescriptor$12(_class3$8.prototype, "accordion", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            flexDirection: "column",
            ">:nth-of-type(even)": {
                flexGrow: "1",
                flexShrink: "1",
                flexBasis: "auto",
                overflow: "auto",
                position: "relative"
            },
            ">:nth-of-type(odd)": {
                fontSize: "1em",
                textTransform: "uppercase",
                padding: "8px 8px"
            }
        };
    }
}), _descriptor3$10 = _applyDecoratedDescriptor$12(_class3$8.prototype, "grab", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _ref3;

        return _ref3 = {
            cursor: "grab"
        }, defineProperty(_ref3, "cursor", "-moz-grab"), defineProperty(_ref3, "cursor", "-webkit-grab"), _ref3;
    }
}), _descriptor4$9 = _applyDecoratedDescriptor$12(_class3$8.prototype, "grabbing", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _ref4;

        return _ref4 = {
            cursor: "grabbing"
        }, defineProperty(_ref4, "cursor", "-moz-grabbing"), defineProperty(_ref4, "cursor", "-webkit-grabbing"), _ref4;
    }
}), _descriptor5$9 = _applyDecoratedDescriptor$12(_class3$8.prototype, "collapseIcon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "0.7em",
            fontSize: "120% !important",
            fontWeight: "900 !important",
            textAlign: "center",
            marginRight: "0.2em"
        };
    }
}), _class3$8);
var SectionDividerStyle = (_class5$3 = function (_DividerStyle2) {
    inherits(SectionDividerStyle, _DividerStyle2);

    function SectionDividerStyle() {
        var _ref5;

        var _temp3, _this3, _ret3;

        classCallCheck(this, SectionDividerStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this3 = possibleConstructorReturn(this, (_ref5 = SectionDividerStyle.__proto__ || Object.getPrototypeOf(SectionDividerStyle)).call.apply(_ref5, [this].concat(args))), _this3), _this3.barThickness = 2, _this3.barPadding = 3, _this3.dividerColor = function () {
            return "#DDD";
        }, _initDefineProp$12(_this3, "horizontalDivider", _descriptor6$7, _this3), _initDefineProp$12(_this3, "verticalDivider", _descriptor7$5, _this3), _initDefineProp$12(_this3, "horizontalSection", _descriptor8$4, _this3), _initDefineProp$12(_this3, "verticalSection", _descriptor9$4, _this3), _temp3), possibleConstructorReturn(_this3, _ret3);
    }

    return SectionDividerStyle;
}(DividerStyle), _descriptor6$7 = _applyDecoratedDescriptor$12(_class5$3.prototype, "horizontalDivider", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this4 = this;

        return {
            zIndex: "10",
            position: "absolute",
            height: "100%",
            cursor: "col-resize",
            width: this.barThickness + 2 * this.barPadding + "px",
            background: function background() {
                return _this4.dividerColor();
            },
            backgroundClip: "padding-box",
            borderLeft: this.barPadding + "px solid transparent",
            borderRight: this.barPadding + "px solid transparent",
            marginLeft: -this.barThickness / 2 - this.barPadding + "px",
            marginRight: -this.barThickness / 2 + "px",
            display: "inline-block"
        };
    }
}), _descriptor7$5 = _applyDecoratedDescriptor$12(_class5$3.prototype, "verticalDivider", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this5 = this;

        return {
            zIndex: "10",
            position: "absolute",
            cursor: "row-resize",
            width: "100%",
            height: this.barThickness + 2 * this.barPadding + "px",
            background: function background() {
                return _this5.dividerColor();
            },
            backgroundClip: "padding-box",
            borderBottom: this.barPadding + "px solid transparent",
            borderTop: this.barPadding + "px solid transparent",
            marginBottom: -this.barThickness / 2 - this.barPadding + "px",
            marginTop: -this.barThickness / 2 - this.barPadding + "px"
        };
    }
}), _descriptor8$4 = _applyDecoratedDescriptor$12(_class5$3.prototype, "horizontalSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "relative",
            whiteSpace: "nowrap",
            ">*": {
                whiteSpace: "initial",
                verticalAlign: "top",
                paddingLeft: this.barThickness / 2 + this.barPadding + "px",
                paddingRight: this.barThickness / 2 + this.barPadding + "px"
            },
            ">:first-child": {
                paddingLeft: "0"
            },
            ">:last-child": {
                paddingRight: "0"
            },
            ">:nth-of-type(even)": {
                padding: "0"
            },
            ">:nth-of-type(odd)": {
                display: "inline-block"
            }
        };
    }
}), _descriptor9$4 = _applyDecoratedDescriptor$12(_class5$3.prototype, "verticalSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "relative",
            ">*": {
                paddingTop: this.barThickness / 2 + this.barPadding + "px",
                paddingBottom: this.barThickness / 2 + this.barPadding + "px"
            },
            ">:first-child": {
                paddingTop: "0"
            },
            ">:last-child": {
                paddingBottom: "0"
            },
            ">:nth-of-type(even)": {
                padding: "0"
            }
        };
    }
}), _class5$3);
var TitledDividerStyle = (_class7$3 = function (_SectionDividerStyle) {
    inherits(TitledDividerStyle, _SectionDividerStyle);

    function TitledDividerStyle() {
        var _ref6;

        var _temp4, _this6, _ret4;

        classCallCheck(this, TitledDividerStyle);

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        return _ret4 = (_temp4 = (_this6 = possibleConstructorReturn(this, (_ref6 = TitledDividerStyle.__proto__ || Object.getPrototypeOf(TitledDividerStyle)).call.apply(_ref6, [this].concat(args))), _this6), _this6.barThickness = 16, _this6.barPadding = 1, _this6.transitionTime = .3, _this6.dividerStyle = {
            backgroundColor: "white",
            borderColor: "#DDD !important"
        }, _initDefineProp$12(_this6, "horizontalDivider", _descriptor10$3, _this6), _initDefineProp$12(_this6, "horizontalDots", _descriptor11$3, _this6), _initDefineProp$12(_this6, "verticalDivider", _descriptor12$3, _this6), _initDefineProp$12(_this6, "verticalDots", _descriptor13$3, _this6), _initDefineProp$12(_this6, "arrowButton", _descriptor14$3, _this6), _initDefineProp$12(_this6, "buttonsDisabled", _descriptor15$3, _this6), _initDefineProp$12(_this6, "barCollapsePanel", _descriptor16$3, _this6), _initDefineProp$12(_this6, "hiddenContent", _descriptor17$3, _this6), _initDefineProp$12(_this6, "collapsedBarTitle", _descriptor18$1, _this6), _initDefineProp$12(_this6, "animatedSectionDivider", _descriptor19$1, _this6), _initDefineProp$12(_this6, "paddingRemoved", _descriptor20$1, _this6), _temp4), possibleConstructorReturn(_this6, _ret4);
    }

    return TitledDividerStyle;
}(SectionDividerStyle), _descriptor10$3 = _applyDecoratedDescriptor$12(_class7$3.prototype, "horizontalDivider", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return Object.assign(this.dividerStyle, {
            display: "inline-flex",
            alignItems: "center",
            flexDirection: "column",
            ">*": {
                flex: "1",
                display: "flex",
                color: "rgba(0,0,0, .4)"
            },
            ">:first-child": {
                alignItems: "flex-end"
            },
            ">:last-child": {
                alignItems: "flex-start"
            },
            ">:nth-child(2)": {
                flex: ".2",
                alignItems: "center"
            }
        });
    }
}), _descriptor11$3 = _applyDecoratedDescriptor$12(_class7$3.prototype, "horizontalDots", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            transform: "rotate(90deg) scaleX(5)"
        };
    }
}), _descriptor12$3 = _applyDecoratedDescriptor$12(_class7$3.prototype, "verticalDivider", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return Object.assign(this.dividerStyle, {
            display: "flex",
            alignItems: "center"
        });
    }
}), _descriptor13$3 = _applyDecoratedDescriptor$12(_class7$3.prototype, "verticalDots", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            flex: "1",
            fontSize: "70% !important",
            height: 0,
            textAlign: "center",
            transform: "scaleX(10) translateY(-.4em)"
        };
    }
}), _descriptor14$3 = _applyDecoratedDescriptor$12(_class7$3.prototype, "arrowButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "230% !important",
            padding: "1em .2em",
            color: "rgba(0,0,0, .4)",
            cursor: "pointer",
            ":hover": {
                color: "black"
            }
        };
    }
}), _descriptor15$3 = _applyDecoratedDescriptor$12(_class7$3.prototype, "buttonsDisabled", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">:first-child": {
                pointerEvents: "none"
            },
            ">:last-child": {
                pointerEvents: "none"
            }
        };
    }
}), _descriptor16$3 = _applyDecoratedDescriptor$12(_class7$3.prototype, "barCollapsePanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "relative",
            ">:first-child": {
                width: "100%",
                height: "100%"
            },
            ">:nth-child(2)": {
                display: "none",
                opacity: "0",
                transition: "opacity " + this.transitionTime + "s ease"
            }
        };
    }
}), _descriptor17$3 = _applyDecoratedDescriptor$12(_class7$3.prototype, "hiddenContent", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">:first-child": {
                display: "none"
            },
            ">:nth-child(2)": {
                opacity: "1"
            }
        };
    }
}), _descriptor18$1 = _applyDecoratedDescriptor$12(_class7$3.prototype, "collapsedBarTitle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            cursor: "pointer",
            borderLeft: "1px solid #ccc",
            borderRight: "1px solid #ccc",
            width: "100%",
            height: "100%",
            display: "flex",
            alignItems: "center",
            backgroundColor: "#fff",
            flexDirection: "column",
            zIndex: 5,
            position: "absolute",
            top: 0,
            left: 0,
            ":hover": {
                backgroundColor: "#f3f3f3"
            },
            ">:nth-child(2)": {
                flex: "1",
                transform: "rotate(90deg)"
            },
            ">:nth-child(2)>:first-child": {
                textTransform: "uppercase",
                fontWeight: "bold",
                fontSize: "130%",
                whiteSpace: "nowrap",
                marginTop: "-.4em",
                transform: "translateY(10%)"
            },
            ">*": {
                display: "flex",
                alignItems: "center"
            },
            ">:first-child": {
                flex: ".5",
                fontSize: "180%"
            },
            ">:last-child": {
                flex: ".5",
                fontSize: "180%"
            }
        };
    }
}), _descriptor19$1 = _applyDecoratedDescriptor$12(_class7$3.prototype, "animatedSectionDivider", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">*": {
                transition: this.transitionTime + "s height ease, " + this.transitionTime + "s width ease"
            }
        };
    }
}), _descriptor20$1 = _applyDecoratedDescriptor$12(_class7$3.prototype, "paddingRemoved", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">*": {
                padding: "0 !important",
                overflow: "hidden"
            },
            ">:nth-of-type(even)": {
                display: "none !important"
            }
        };
    }
}), _class7$3);

var _dec$14, _class$31, _dec2$4, _class2$4;

// options.orientation is the orientation of the divided elements

var DividerBar$$1 = (_dec$14 = registerStyle(SectionDividerStyle), _dec$14(_class$31 = function (_Divider) {
    inherits(DividerBar$$1, _Divider);

    function DividerBar$$1() {
        classCallCheck(this, DividerBar$$1);
        return possibleConstructorReturn(this, (DividerBar$$1.__proto__ || Object.getPrototypeOf(DividerBar$$1)).apply(this, arguments));
    }

    createClass(DividerBar$$1, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(DividerBar$$1.prototype.__proto__ || Object.getPrototypeOf(DividerBar$$1.prototype), "getDefaultOptions", this).call(this), {
                orientation: Orientation.HORIZONTAL
            });
        }
    }, {
        key: "dragMousedown",
        value: function dragMousedown(event) {
            document.body.classList.add(this.styleSheet.noTextSelection);
        }
    }, {
        key: "dragMouseup",
        value: function dragMouseup(event) {
            document.body.classList.remove(this.styleSheet.noTextSelection);
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(DividerBar$$1.prototype.__proto__ || Object.getPrototypeOf(DividerBar$$1.prototype), "extraNodeAttributes", this).call(this, attr);
            if (this.options.orientation === Orientation.VERTICAL) {
                attr.addClass(this.styleSheet.verticalDivider);
            } else {
                attr.addClass(this.styleSheet.horizontalDivider);
            }
        }
    }]);
    return DividerBar$$1;
}(Divider)) || _class$31);

/* SectionDivider class should take in:
    - Vertical or horizontal separation
    - All the children it's dividing
    - An option on how to redivide the sizes of the children
 */

var SectionDivider$$1 = (_dec2$4 = registerStyle(SectionDividerStyle), _dec2$4(_class2$4 = function (_UI$Element) {
    inherits(SectionDivider$$1, _UI$Element);
    createClass(SectionDivider$$1, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({
                autoCollapse: false
            }, get(SectionDivider$$1.prototype.__proto__ || Object.getPrototypeOf(SectionDivider$$1.prototype), "getDefaultOptions", this).call(this));
        }
    }]);

    function SectionDivider$$1(options) {
        classCallCheck(this, SectionDivider$$1);

        var _this2 = possibleConstructorReturn(this, (SectionDivider$$1.__proto__ || Object.getPrototypeOf(SectionDivider$$1)).call(this, options));

        _this2.uncollapsedSizes = new WeakMap();
        return _this2;
    }

    createClass(SectionDivider$$1, [{
        key: "getDividerBarClass",
        value: function getDividerBarClass() {
            return DividerBar$$1;
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            if (this.getOrientation() === Orientation.VERTICAL) {
                attr.addClass(this.styleSheet.verticalSection);
            } else {
                attr.addClass(this.styleSheet.horizontalSection);
            }
        }
    }, {
        key: "getOrientation",
        value: function getOrientation() {
            return this.options.orientation || Orientation.VERTICAL;
        }
    }, {
        key: "getDimension",
        value: function getDimension(element) {
            if (this.getOrientation() === Orientation.HORIZONTAL) {
                return element.getWidth();
            } else {
                return element.getHeight();
            }
        }
    }, {
        key: "setDimension",
        value: function setDimension(element, size) {
            if (this.getOrientation() === Orientation.HORIZONTAL) {
                element.setWidth(size);
            } else {
                element.setHeight(size);
            }
        }
    }, {
        key: "getMinDimension",
        value: function getMinDimension(element) {
            if (this.getOrientation() === Orientation.HORIZONTAL && element.options.hasOwnProperty("minWidth")) {
                return element.options.minWidth;
            } else if (this.getOrientation() === Orientation.VERTICAL && element.options.hasOwnProperty("minHeight")) {
                return element.options.minHeight;
            } else {
                return this.getDimension(this) / this.panels.length / 4;
            }
        }
    }, {
        key: "getHiddenDivider",
        value: function getHiddenDivider(index) {
            var divider = void 0;
            for (var i = index; i < this.panels.length - 1; i += 1) {
                if (this.dividers[i].hasClass("hidden")) {
                    divider = this.dividers[i];
                } else if (!this.dividers[i].hasClass("hidden")) {
                    break;
                }
                if (divider && !this.panels[i + 1].hasClass("hidden")) {
                    return divider;
                }
            }
            divider = null;
            for (var _i = index - 1; _i >= 0; _i -= 1) {
                if (this.dividers[_i].hasClass("hidden")) {
                    divider = this.dividers[_i];
                } else if (!this.dividers[_i].hasClass("hidden")) {
                    break;
                }
                if (divider && !this.panels[_i].hasClass("hidden")) {
                    return divider;
                }
            }
            return null;
        }
    }, {
        key: "getVisibleDivider",
        value: function getVisibleDivider(index) {
            for (var i = index; i < this.panels.length - 1; i += 1) {
                if (!this.dividers[i].hasClass("hidden")) {
                    return this.dividers[i];
                }
            }
            for (var _i2 = index - 1; _i2 >= 0; _i2 -= 1) {
                if (!this.dividers[_i2].hasClass("hidden")) {
                    return this.dividers[_i2];
                }
            }
            return null;
        }
    }, {
        key: "collapseChild",
        value: function collapseChild(index) {
            var parentSize = this.getDimension(this);
            var child = this.panels[index];
            var childSize = this.getDimension(child);
            this.uncollapsedSizes.set(child, childSize);

            var unCollapsedCount = -1;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.panels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var panel = _step.value;

                    if (this.getDimension(panel) && !panel.options.fixed) {
                        unCollapsedCount += 1;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var divider = this.getVisibleDivider(index);
            if (divider) {
                divider.hide();
            }

            this.setDimension(child, "0");
            child.hide();

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.panels[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _panel = _step2.value;

                    if (this.getDimension(_panel) !== 0 && !_panel.options.fixed) {
                        this.setDimension(_panel, (this.getDimension(_panel) + childSize / unCollapsedCount) * 100 / parentSize - 0.5 / this.children.length + "%");
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.recalculateDimensions();
        }
    }, {
        key: "expandChild",
        value: function expandChild(index) {
            var parentSize = this.getDimension(this);
            var child = this.panels[index];

            var unCollapsedCount = 1;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.panels[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var panel = _step3.value;

                    if (this.getDimension(panel) && !panel.options.fixed) {
                        unCollapsedCount += 1;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            var divider = this.getHiddenDivider(index);
            if (divider) {
                divider.show();
            }

            child.show();
            var childSize = this.uncollapsedSizes.get(child);

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.panels[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var _panel2 = _step4.value;

                    if (this.getDimension(_panel2) && !_panel2.options.fixed) {
                        this.setDimension(_panel2, (this.getDimension(_panel2) - childSize / (unCollapsedCount - 1)) * 100 / parentSize - this.panels.length / 2 + "%");
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.setDimension(child, childSize * 100 / parentSize + "%");
            this.recalculateDimensions();
        }
    }, {
        key: "isCollapsed",
        value: function isCollapsed(child) {
            return !this.getDimension(child);
        }
    }, {
        key: "toggleChild",
        value: function toggleChild(index) {
            if (this.isCollapsed(this.panels[index])) {
                this.expandChild(index);
            } else {
                this.collapseChild(index);
            }
        }
    }, {
        key: "recalculateDimensions",
        value: function recalculateDimensions() {
            if (!this.isInDocument()) {
                return;
            }
            var parentSize = this.getDimension(this);
            var fixedTotalSize = 0;
            var unfixedTotalSize = 0;
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.panels[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var panel = _step5.value;

                    if (panel.options.fixed) {
                        fixedTotalSize += this.getDimension(panel);
                    } else {
                        unfixedTotalSize += this.getDimension(panel);
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var ratio = (parentSize - fixedTotalSize) / parentSize;
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.panels[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var _panel3 = _step6.value;

                    if (!_panel3.options.fixed && !_panel3.hasClass("hidden")) {
                        this.setDimension(_panel3, this.getDimension(_panel3) * 100 * ratio / unfixedTotalSize + "%");
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }
        }
    }, {
        key: "getPreviousUnfixedChild",
        value: function getPreviousUnfixedChild(index) {
            for (var i = index; i >= 0; i -= 1) {
                var panel = this.panels[i];
                if (!panel.hasClass("hidden") && !panel.options.fixed) {
                    return panel;
                }
            }
            return null;
        }
    }, {
        key: "getNextUnfixedChild",
        value: function getNextUnfixedChild(index) {
            for (var i = index + 1; i < this.panels.length; i += 1) {
                var panel = this.panels[i];
                if (!panel.hasClass("hidden") && !panel.options.fixed) {
                    return panel;
                }
            }
            return null;
        }
    }, {
        key: "dividerMouseDownFunction",
        value: function dividerMouseDownFunction(dividerEvent) {
            var _this3 = this;

            var previousEvent = dividerEvent.domEvent;
            var index = this.dividers.indexOf(dividerEvent.divider);

            var previousPanel = this.getPreviousUnfixedChild(index);
            var nextPanel = this.getNextUnfixedChild(index);

            if (previousPanel && nextPanel) {
                var parentSize = this.getDimension(this);
                var panelsSize = parentSize;

                var _iteratorNormalCompletion7 = true;
                var _didIteratorError7 = false;
                var _iteratorError7 = undefined;

                try {
                    for (var _iterator7 = this.panels[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                        var panel = _step7.value;

                        if (panel.options.fixed) {
                            panelsSize -= this.getDimension(panel);
                        }
                    }
                } catch (err) {
                    _didIteratorError7 = true;
                    _iteratorError7 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion7 && _iterator7.return) {
                            _iterator7.return();
                        }
                    } finally {
                        if (_didIteratorError7) {
                            throw _iteratorError7;
                        }
                    }
                }

                var deltaFunction = this.getOrientation() === Orientation.HORIZONTAL ? function (event) {
                    return Device.getEventX(event);
                } : function (event) {
                    return Device.getEventY(event);
                };

                var mouseMoveListener = this.addListener("dividerMousemove", function (event) {
                    var delta = deltaFunction(event) - deltaFunction(previousEvent);

                    var nextSize = _this3.getDimension(nextPanel) - delta;
                    var previousSize = _this3.getDimension(previousPanel) + delta;

                    if (_this3.options.autoCollapse) {
                        if (delta > 0 && nextPanel.collapsed || delta < 0 && previousPanel.collapsed) {
                            return;
                        }

                        if (delta < 0 && nextPanel.collapsed && _this3.options.autoCollapse) {
                            _this3.expandChild(index + 1);
                            return;
                        }

                        if (delta > 0 && previousPanel.collapsed) {
                            _this3.expandChild(index);
                            return;
                        }

                        if (nextSize < _this3.getMinDimension(nextPanel)) {
                            _this3.collapseChild(index + 1);
                            return;
                        }

                        if (previousSize < _this3.getMinDimension(previousPanel)) {
                            _this3.collapseChild(index);
                            return;
                        }
                    } else {
                        if (nextSize < _this3.getMinDimension(nextPanel) || previousSize < _this3.getMinDimension(previousPanel)) {
                            return;
                        }
                    }

                    _this3.setDimension(nextPanel, nextSize * 100 / parentSize + "%");
                    _this3.setDimension(previousPanel, previousSize * 100 / parentSize + "%");

                    previousEvent = event;
                });

                var mouseUpListener = this.addListener("dividerMouseup", function () {
                    if (_this3.clearListeners) {
                        _this3.clearListeners();
                    }
                });

                this.clearListeners = function () {
                    mouseMoveListener.remove();
                    mouseUpListener.remove();
                    _this3.clearListeners = null;
                };
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.addListener("dividerMousedown", function (dividerEvent) {
                return _this4.dividerMouseDownFunction(dividerEvent);
            });
            setTimeout(function () {
                _this4.recalculateDimensions();
            });
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            var children = [];
            this.dividers = [];
            this.panels = [];
            var leftChildVisible = false;
            var DividerBarClass = this.getDividerBarClass();

            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = unwrapArray(this.render())[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var child = _step8.value;

                    if (this.panels.length) {
                        var hiddenClass = "hidden";
                        if (leftChildVisible && !child.hasClass("hidden")) {
                            hiddenClass = "";
                        }
                        var divider = UI.createElement(DividerBarClass, { className: hiddenClass, orientation: this.getOrientation() });
                        children.push(divider);
                        this.dividers.push(divider);
                    }
                    leftChildVisible |= !child.hasClass("hidden");
                    children.push(child);
                    this.panels.push(child);
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            return children;
        }
    }]);
    return SectionDivider$$1;
}(UI.Element)) || _class2$4);

var _dec$15, _class$32, _dec2$5, _class2$5, _dec3$1, _class3$9;

var TitledSectionDividerBar = (_dec$15 = registerStyle(TitledDividerStyle), _dec$15(_class$32 = function (_DividerBar) {
    inherits(TitledSectionDividerBar, _DividerBar);

    function TitledSectionDividerBar() {
        classCallCheck(this, TitledSectionDividerBar);
        return possibleConstructorReturn(this, (TitledSectionDividerBar.__proto__ || Object.getPrototypeOf(TitledSectionDividerBar)).apply(this, arguments));
    }

    createClass(TitledSectionDividerBar, [{
        key: "render",
        value: function render() {
            if (this.options.orientation === Orientation.VERTICAL) {
                return [UI.createElement(FAIcon, { icon: "ellipsis-h", className: this.styleSheet.verticalDots })];
            } else {
                return [UI.createElement(
                    "div",
                    null,
                    UI.createElement(FAIcon, { ref: "rightButton", icon: "caret-right", className: this.styleSheet.arrowButton })
                ), UI.createElement(
                    "div",
                    null,
                    UI.createElement(FAIcon, { icon: "bars", className: this.styleSheet.horizontalDots })
                ), UI.createElement(
                    "div",
                    null,
                    UI.createElement(FAIcon, { ref: "leftButton", icon: "caret-left", className: this.styleSheet.arrowButton })
                )];
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(TitledSectionDividerBar.prototype.__proto__ || Object.getPrototypeOf(TitledSectionDividerBar.prototype), "onMount", this).call(this);
            this.leftButton.addNodeListener("mousedown", function (event) {
                event.stopPropagation();
            });
            this.leftButton.addClickListener(function () {
                _this2.dispatch("collapsePrevious");
            });
            this.rightButton.addNodeListener("mousedown", function (event) {
                event.stopPropagation();
            });
            this.rightButton.addClickListener(function () {
                _this2.dispatch("collapseNext");
            });
        }
    }]);
    return TitledSectionDividerBar;
}(DividerBar$$1)) || _class$32);
var BarCollapsePanel = (_dec2$5 = registerStyle(TitledDividerStyle), _dec2$5(_class2$5 = function (_UI$Element) {
    inherits(BarCollapsePanel, _UI$Element);

    function BarCollapsePanel() {
        classCallCheck(this, BarCollapsePanel);
        return possibleConstructorReturn(this, (BarCollapsePanel.__proto__ || Object.getPrototypeOf(BarCollapsePanel)).apply(this, arguments));
    }

    createClass(BarCollapsePanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            var panelChild = this.getGivenChildren()[0];
            attr.addClass(this.styleSheet.barCollapsePanel);
            var panelSize = panelChild.options.size;
            if (this.collapsed) {
                attr.addClass(this.styleSheet.hiddenContent);
                panelSize = this.options.collapsedSize;
            }
            if (panelSize) {
                if (this.options.orientation === Orientation.VERTICAL) {
                    attr.setStyle("height", panelSize);
                } else {
                    attr.setStyle("width", panelSize);
                }
            }

            if (this.options.orientation === Orientation.VERTICAL) {
                attr.setStyle("width", "100%");
            } else {
                attr.setStyle("height", "100%");
            }
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            this.collapsed = this.getGivenChildren()[0].options.collapsed;
            var isFirst = this.parent.panels.indexOf(this) === 0;
            var isLast = this.parent.panels.indexOf(this) === this.parent.panels.length - 1;
            var firstCaret = isLast ? "left" : "right";
            var lastCaret = isFirst ? "right" : "left";
            return [this.render(), UI.createElement(
                "div",
                { ref: "collapsedBarTitle", style: { display: this.collapsed ? "flex" : " none" },
                    className: this.styleSheet.collapsedBarTitle },
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(FAIcon, { icon: "caret-" + firstCaret })
                ),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.title },
                    UI.createElement(
                        "div",
                        null,
                        this.options.title
                    )
                ),
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(FAIcon, { icon: "caret-" + lastCaret })
                )
            )];
        }
    }, {
        key: "toggle",
        value: function toggle() {
            var _this4 = this;

            if (this.collapsed) {
                this.collapsed = false;
                this.removeClass(this.styleSheet.hiddenContent);
                this.collapsedBarTitle.setStyle("display", "none");
            } else {
                this.collapsed = true;
                this.collapsedBarTitle.setStyle("display", "flex");
                setTimeout(function () {
                    _this4.addClass(_this4.styleSheet.hiddenContent);
                }, 100);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.collapsedBarTitle.addClickListener(function () {
                _this5.dispatch("expand");
            });
            this.addListener("resize", function () {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = unwrapArray(_this5.render())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var child = _step.value;

                        child.dispatch("resize");
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            });
        }
    }]);
    return BarCollapsePanel;
}(UI.Element)) || _class2$5);

var TitledSectionDivider = (_dec3$1 = registerStyle(TitledDividerStyle), _dec3$1(_class3$9 = function (_SectionDivider) {
    inherits(TitledSectionDivider, _SectionDivider);

    function TitledSectionDivider() {
        classCallCheck(this, TitledSectionDivider);
        return possibleConstructorReturn(this, (TitledSectionDivider.__proto__ || Object.getPrototypeOf(TitledSectionDivider)).apply(this, arguments));
    }

    createClass(TitledSectionDivider, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(TitledSectionDivider.prototype.__proto__ || Object.getPrototypeOf(TitledSectionDivider.prototype), "getDefaultOptions", this).call(this), {
                collapsedSize: 40,
                autoCollapse: true
            });
        }
    }, {
        key: "getDividerBarClass",
        value: function getDividerBarClass() {
            return TitledSectionDividerBar;
        }
    }, {
        key: "setDimension",
        value: function setDimension(element, size) {
            if (this.getOrientation() === Orientation.HORIZONTAL) {
                element.setWidth(size);
            } else {
                element.setHeight(size);
            }
        }
    }, {
        key: "collapseChild",
        value: function collapseChild(index) {
            var _this7 = this;

            if (this.clearListeners) {
                this.clearListeners();
            }

            this.addClass(this.styleSheet.paddingRemoved);
            this.addClass(this.styleSheet.animatedSectionDivider);

            var parentSize = this.getDimension(this);
            var child = this.panels[index];

            var childSize = this.getDimension(child);
            this.uncollapsedSizes.set(child, childSize);

            var unCollapsedCount = -1;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.panels[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var panel = _step2.value;

                    if (!panel.collapsed && !panel.options.fixed) {
                        unCollapsedCount += 1;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.setDimension(child, this.options.collapsedSize);
            child.toggle();

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.panels[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _panel = _step3.value;

                    if (!_panel.collapsed && !_panel.options.fixed) {
                        this.setDimension(_panel, (this.getDimension(_panel) + (childSize - this.options.collapsedSize) / unCollapsedCount) * 100 / parentSize + "%");
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            setTimeout(function () {
                _this7.removeClass(_this7.styleSheet.animatedSectionDivider);
                _this7.recalculateDimensions();
            }, this.styleSheet.transitionTime * 1000);
        }
    }, {
        key: "expandChild",
        value: function expandChild(index) {
            var _this8 = this;

            this.removeClass(this.styleSheet.paddingRemoved);
            this.addClass(this.styleSheet.animatedSectionDivider);

            var parentSize = this.getDimension(this);
            var child = this.panels[index];

            var unCollapsedCount = 1;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.panels[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var panel = _step4.value;

                    if (!panel.collapsed && !panel.options.fixed) {
                        unCollapsedCount += 1;
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            var childSize = this.uncollapsedSizes.get(child);
            child.toggle();

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.panels[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _panel2 = _step5.value;

                    if (this.getDimension(_panel2) && !_panel2.options.fixed) {
                        this.setDimension(_panel2, (this.getDimension(_panel2) - (childSize - this.options.collapsedSize) / (unCollapsedCount - 1)) * 100 / parentSize + "%");
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            this.setDimension(child, childSize * 100 / parentSize + "%");

            setTimeout(function () {
                _this8.removeClass(_this8.styleSheet.animatedSectionDivider);
                _this8.recalculateDimensions();
            }, this.styleSheet.transitionTime * 1000);
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            var children = [];
            this.dividers = [];
            this.panels = [];
            var DividerBarClass = this.getDividerBarClass();

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = unwrapArray(this.render())[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var child = _step6.value;

                    if (child.options.collapsed) {
                        this.addClass(this.styleSheet.paddingRemoved);
                    }
                    if (this.panels.length) {
                        var divider = UI.createElement(DividerBarClass, { orientation: this.getOrientation() });
                        children.push(divider);
                        this.dividers.push(divider);
                    }
                    var wrappedChild = UI.createElement(
                        BarCollapsePanel,
                        { orientation: this.options.orientation, collapsedSize: this.options.collapsedSize,
                            title: child.options.title || "..." },
                        child
                    );
                    children.push(wrappedChild);
                    this.panels.push(wrappedChild);
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            return children;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            get(TitledSectionDivider.prototype.__proto__ || Object.getPrototypeOf(TitledSectionDivider.prototype), "onMount", this).call(this);

            var _loop = function _loop(i) {
                var panel = _this9.panels[i];
                _this9.attachListener(panel, "expand", function () {
                    _this9.uncollapsedSizes.set(panel, _this9.getDimension(_this9) / _this9.panels.length);
                    _this9.expandChild(i);
                });
            };

            for (var i = 0; i < this.panels.length; i += 1) {
                _loop(i);
            }

            var _loop2 = function _loop2(i) {
                _this9.attachListener(_this9.dividers[i], "collapseNext", function () {
                    return _this9.collapseChild(i + 1);
                });
                _this9.attachListener(_this9.dividers[i], "collapsePrevious", function () {
                    return _this9.collapseChild(i);
                });
            };

            for (var i = 0; i < this.dividers.length; i += 1) {
                _loop2(i);
            }
        }
    }]);
    return TitledSectionDivider;
}(SectionDivider$$1)) || _class3$9);

var _dec$16, _class$33, _dec2$6, _class2$6;

var AccordionDivider = (_dec$16 = registerStyle(AccordionStyle), _dec$16(_class$33 = function (_Divider) {
    inherits(AccordionDivider, _Divider);

    function AccordionDivider() {
        classCallCheck(this, AccordionDivider);
        return possibleConstructorReturn(this, (AccordionDivider.__proto__ || Object.getPrototypeOf(AccordionDivider)).apply(this, arguments));
    }

    createClass(AccordionDivider, [{
        key: "dragMousedown",
        value: function dragMousedown(event) {
            document.body.classList.add(this.styleSheet.noTextSelection);
            this.addClass(this.styleSheet.grabbing);
        }
    }, {
        key: "dragMouseup",
        value: function dragMouseup(event) {
            document.body.classList.remove(this.styleSheet.noTextSelection);
            this.removeClass(this.styleSheet.grabbing);
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(AccordionDivider.prototype.__proto__ || Object.getPrototypeOf(AccordionDivider.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.grab);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(FACollapseIcon, { ref: "collapseIcon", collapsed: false, className: this.styleSheet.collapseIcon }), this.options.children];
        }
    }, {
        key: "setCollapsed",
        value: function setCollapsed(value) {
            this.collapseIcon.setCollapsed(value);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(AccordionDivider.prototype.__proto__ || Object.getPrototypeOf(AccordionDivider.prototype), "onMount", this).call(this);
            this.addListener("togglePanel", function () {
                _this2.collapseIcon.toggleCollapsed();
            });
        }
    }]);
    return AccordionDivider;
}(Divider)) || _class$33);
var Accordion$$1 = (_dec2$6 = registerStyle(AccordionStyle), _dec2$6(_class2$6 = function (_UI$Element) {
    inherits(Accordion$$1, _UI$Element);

    function Accordion$$1() {
        classCallCheck(this, Accordion$$1);
        return possibleConstructorReturn(this, (Accordion$$1.__proto__ || Object.getPrototypeOf(Accordion$$1)).apply(this, arguments));
    }

    createClass(Accordion$$1, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.accordion);
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            var children = [];
            this.dividers = [];
            this.panels = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = unwrapArray(this.render())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;

                    var title = child.getTitle ? child.getTitle() : child.options.title ? child.options.title : "";
                    var divider = UI.createElement(
                        AccordionDivider,
                        null,
                        title
                    );
                    this.dividers.push(divider);
                    this.panels.push(child);
                    children.push(divider);
                    children.push(child);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return children;
        }
    }, {
        key: "getNextVisibleChild",
        value: function getNextVisibleChild(index) {
            for (var i = index; i < this.panels.length; i += 1) {
                if (!this.panels[i].hasClass("hidden")) {
                    return this.panels[i];
                }
            }
            return null;
        }
    }, {
        key: "getPreviousVisibleChild",
        value: function getPreviousVisibleChild(index) {
            for (var i = index - 1; i >= 0; i -= 1) {
                if (!this.panels[i].hasClass("hidden")) {
                    return this.panels[i];
                }
            }
            return null;
        }
    }, {
        key: "dividerMousedownFunction",
        value: function dividerMousedownFunction(dividerEvent) {
            var _this4 = this;

            var dragTriggered = void 0,
                panelsHeight = void 0,
                totalFlex = void 0;

            var previousEvent = dividerEvent.domEvent;
            var index = this.dividers.indexOf(dividerEvent.divider);

            var previousPanel = this.getPreviousVisibleChild(index);
            var nextPanel = this.getNextVisibleChild(index);

            panelsHeight = this.getHeight();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.dividers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var divider = _step2.value;

                    panelsHeight -= divider.getHeight();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            totalFlex = 0;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.panels[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var panel = _step3.value;

                    if (!panel.hasClass("hidden")) {
                        totalFlex += parseFloat(getComputedStyle(panel.node, "flex"));
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            var mouseMoveListener = this.addListener("dividerMousemove", function (event) {
                dragTriggered = true;
                if (index != -1 && nextPanel && previousPanel) {
                    // Calculate the height to transfer from one panel to another
                    var delta = (Device.getEventY(event) - Device.getEventY(previousEvent)) * totalFlex / panelsHeight;

                    var nextSize = parseFloat(getComputedStyle(nextPanel.node, "flex"));
                    var previousSize = parseFloat(getComputedStyle(previousPanel.node, "flex"));

                    // Cap the delta value, to at most zero our panels
                    delta = Math.sign(delta) * Math.min(Math.abs(delta), delta > 0 ? nextSize : previousSize);

                    nextPanel.setStyle("flex", nextSize - delta);
                    previousPanel.setStyle("flex", previousSize + delta);

                    previousEvent = event;

                    _this4.dispatch("dragging");
                }
            });

            var mouseUpListener = this.addListener("dividerMouseup", function () {
                if (!dragTriggered) {
                    dividerEvent.divider.dispatch("togglePanel");
                    _this4.toggleChild(_this4.panels[index]);
                }
                mouseMoveListener.remove();
                mouseUpListener.remove();
                _this4.dispatch("childrenStatusChange");
            });
        }
    }, {
        key: "toggleChild",
        value: function toggleChild(child) {
            var totalFlex = 0;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.panels[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var _panel = _step4.value;

                    if (!_panel.hasClass("hidden")) {
                        totalFlex += parseFloat(getComputedStyle(_panel.node, "flex"));
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            var sign = child.hasClass("hidden") ? 1 : -1;
            totalFlex += sign * parseFloat(getComputedStyle(child, "flex"));
            child.toggleClass("hidden");
            if (totalFlex < 1) {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = this.panels[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var panel = _step5.value;

                        if (!panel.hasClass("hidden") && parseFloat(getComputedStyle(panel.node, "flex")) < 1) {
                            panel.setStyle("flex", 1);
                        }
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }
            }
        }
    }, {
        key: "getChildrenStatus",
        value: function getChildrenStatus() {
            var childrenStatus = [];
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.panels[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var panel = _step6.value;

                    childrenStatus.push({
                        flex: getComputedStyle(panel.node, "flex"),
                        collapsed: panel.hasClass("hidden")
                    });
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            return childrenStatus;
        }
    }, {
        key: "getDefaultChildrenStatus",
        value: function getDefaultChildrenStatus() {
            var childrenStatus = [];
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.panels[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var panel = _step7.value;

                    childrenStatus.push({
                        flex: 1,
                        collapsed: false
                    });
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            return childrenStatus;
        }
    }, {
        key: "setChildrenStatus",
        value: function setChildrenStatus(childrenStatus) {
            for (var i = 0; i < childrenStatus.length; i += 1) {
                this.panels[i].setStyle("flex", childrenStatus[i].flex);
                var collapsed = childrenStatus[i].collapsed;
                if (collapsed) {
                    this.panels[i].addClass("hidden");
                } else {
                    this.panels[i].removeClass("hidden");
                }
                this.dividers[i].setCollapsed(collapsed);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.addListener("dividerMousedown", function (dividerEvent) {
                return _this5.dividerMousedownFunction(dividerEvent);
            });
        }
    }]);
    return Accordion$$1;
}(UI.Element)) || _class2$6);

var _class$34, _descriptor$12, _descriptor2$11, _descriptor3$11, _descriptor4$10, _dec$17, _class3$10;

function _initDefineProp$13(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$13(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var CarouselStyle$$1 = (_class$34 = function (_StyleSheet) {
    inherits(CarouselStyle$$1, _StyleSheet);

    function CarouselStyle$$1() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, CarouselStyle$$1);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = CarouselStyle$$1.__proto__ || Object.getPrototypeOf(CarouselStyle$$1)).call.apply(_ref, [this].concat(args))), _this), _this.navigatorHeight = "35px", _this.hoverColor = "#364251", _this.transitionTime = "0.3", _this.textColor = "inherit", _this.navigatorTransitionTime = "0s", _initDefineProp$13(_this, "carousel", _descriptor$12, _this), _initDefineProp$13(_this, "container", _descriptor2$11, _this), _initDefineProp$13(_this, "navigator", _descriptor3$11, _this), _initDefineProp$13(_this, "navigatorIcon", _descriptor4$10, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return CarouselStyle$$1;
}(StyleSheet), _descriptor$12 = _applyDecoratedDescriptor$13(_class$34.prototype, "carousel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            overflow: "hidden"
        };
    }
}), _descriptor2$11 = _applyDecoratedDescriptor$13(_class$34.prototype, "container", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            whiteSpace: "nowrap",
            height: "100%",
            ">*": {
                width: "100%",
                height: "100%",
                display: "inline-block",
                verticalAlign: "top"
            },
            ">:first-child": {
                width: "0",
                transition: "margin-left ease " + this.transitionTime + "s"
            }
        };
    }
}), _descriptor3$11 = _applyDecoratedDescriptor$13(_class$34.prototype, "navigator", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            height: this.navigatorHeight,
            display: "flex"
        };
    }
}), _descriptor4$10 = _applyDecoratedDescriptor$13(_class$34.prototype, "navigatorIcon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: this.textColor,
            fontSize: "180% !important",
            textAlign: "center",
            cursor: "pointer",
            flex: "1",
            fontWeight: "900 !important",
            lineHeight: this.navigatorHeight + " !important",
            transition: "background-color " + this.navigatorTransitionTime,
            ":hover": {
                backgroundColor: this.hoverColor
            }
        };
    }
}), _class$34);

var CarouselNavigator = function (_UI$Element) {
    inherits(CarouselNavigator, _UI$Element);

    function CarouselNavigator() {
        classCallCheck(this, CarouselNavigator);
        return possibleConstructorReturn(this, (CarouselNavigator.__proto__ || Object.getPrototypeOf(CarouselNavigator)).apply(this, arguments));
    }

    createClass(CarouselNavigator, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.navigator);
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            return [UI.createElement(FAIcon, { icon: "angle-left", className: this.styleSheet.navigatorIcon, onClick: function onClick() {
                    _this3.parent.dispatch("previousPage");
                } }), UI.createElement(FAIcon, { icon: "angle-right", className: this.styleSheet.navigatorIcon, onClick: function onClick() {
                    _this3.parent.dispatch("nextPage");
                } })];
        }
    }, {
        key: "styleSheet",
        get: function get$$1() {
            return this.options.styleSheet || this.parent.styleSheet;
        }
    }]);
    return CarouselNavigator;
}(UI.Element);

var Carousel$$1 = (_dec$17 = registerStyle(CarouselStyle$$1), _dec$17(_class3$10 = function (_UI$Element2) {
    inherits(Carousel$$1, _UI$Element2);

    function Carousel$$1() {
        classCallCheck(this, Carousel$$1);
        return possibleConstructorReturn(this, (Carousel$$1.__proto__ || Object.getPrototypeOf(Carousel$$1)).apply(this, arguments));
    }

    createClass(Carousel$$1, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.carousel);
        }
    }, {
        key: "appendChild",
        value: function appendChild(child, doMount) {
            this.options.children.push(child);
            if (doMount) {
                this.setActive(child);
            }
            child.mount(this, null);
            this.redraw();
        }
    }, {
        key: "eraseChild",
        value: function eraseChild(child) {
            if (this.options.children.indexOf(child) === this.options.children.length - 1) {
                this.setActiveIndex(Math.max(this.options.children.length - 2, 0));
            }
            this.options.children.splice(this.options.children.indexOf(child), 1);
            this.redraw();
        }
    }, {
        key: "render",
        value: function render() {
            if (this.activeIndex == null) {
                this.activeIndex = 0;
                for (var i = 0; i < this.options.children.length; i += 1) {
                    if (this.options.children[i].options.active) {
                        this.activeIndex = i;
                        break;
                    }
                }
            }

            return [UI.createElement(CarouselNavigator, { className: this.options.children.length > 1 ? "" : "hidden" }), UI.createElement(
                "div",
                { className: this.styleSheet.container },
                UI.createElement("div", { ref: "pusher", style: { marginLeft: -this.activeIndex * 100 + "%" } }),
                this.options.children
            )];
        }
    }, {
        key: "setActive",
        value: function setActive(panel) {
            this.setActiveIndex(this.options.children.indexOf(panel));
        }
    }, {
        key: "setActiveIndex",
        value: function setActiveIndex(index) {
            this.activeIndex = index;
            this.pusher.setStyle("margin-left", -index * this.getWidth() + "px");
        }
    }, {
        key: "getActive",
        value: function getActive() {
            return this.options.children[this.activeIndex];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.addListener("nextPage", function () {
                return _this5.setActiveIndex((_this5.activeIndex + 1) % _this5.options.children.length);
            });
            this.addListener("previousPage", function () {
                return _this5.setActiveIndex((_this5.activeIndex + _this5.options.children.length - 1) % _this5.options.children.length);
            });
        }
    }, {
        key: "getOrientation",
        value: function getOrientation() {
            return this.options.orientation || Orientation.VERTICAL;
        }
    }]);
    return Carousel$$1;
}(UI.Element)) || _class3$10);

var _class$35, _descriptor$13, _descriptor2$12, _descriptor3$12, _descriptor4$11, _descriptor5$10, _descriptor6$8, _descriptor7$6;

function _initDefineProp$14(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$14(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var RangePanelStyle = (_class$35 = function (_StyleSheet) {
    inherits(RangePanelStyle, _StyleSheet);

    function RangePanelStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, RangePanelStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = RangePanelStyle.__proto__ || Object.getPrototypeOf(RangePanelStyle)).call.apply(_ref, [this].concat(args))), _this), _this.rowHeight = 52, _initDefineProp$14(_this, "default", _descriptor$13, _this), _initDefineProp$14(_this, "tableContainer", _descriptor2$12, _this), _initDefineProp$14(_this, "scrollablePanel", _descriptor3$12, _this), _initDefineProp$14(_this, "fakePanel", _descriptor4$11, _this), _initDefineProp$14(_this, "footer", _descriptor5$10, _this), _initDefineProp$14(_this, "jumpToButton", _descriptor6$8, _this), _initDefineProp$14(_this, "table", _descriptor7$6, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return RangePanelStyle;
}(StyleSheet), _descriptor$13 = _applyDecoratedDescriptor$14(_class$35.prototype, "default", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "100%",
            width: "100%",
            display: "flex",
            flexDirection: "column",
            position: "relative",
            overflow: "auto",
            overflowY: "hidden"
        };
    }
}), _descriptor2$12 = _applyDecoratedDescriptor$14(_class$35.prototype, "tableContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            flex: "1",
            height: "100%",
            width: "100%",
            position: "relative"
        };
    }
}), _descriptor3$12 = _applyDecoratedDescriptor$14(_class$35.prototype, "scrollablePanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            overflow: "auto",
            height: "calc(100% - 30px)",
            width: "100%"
        };
    }
}), _descriptor4$11 = _applyDecoratedDescriptor$14(_class$35.prototype, "fakePanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%"
        };
    }
}), _descriptor5$10 = _applyDecoratedDescriptor$14(_class$35.prototype, "footer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontWeight: "bold",
            textAlign: "center",
            position: "absolute",
            bottom: "0px",
            width: "100%",
            whiteSpace: "nowrap",
            paddingBottom: "15px",
            paddingTop: "3px"
        };
    }
}), _descriptor6$8 = _applyDecoratedDescriptor$14(_class$35.prototype, "jumpToButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "5px",
            padding: "2.3px 10px",
            verticalAlign: "bottom"
        };
    }
}), _descriptor7$6 = _applyDecoratedDescriptor$14(_class$35.prototype, "table", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "calc(100% - 15px)",
            marginBottom: "0px",
            top: "0px",
            position: "absolute",
            pointerEvents: "none",
            ">tbody>tr>td": {
                height: this.rowHeight + "px !important",
                whiteSpace: "nowrap !important"
            }
        };
    }
}), _class$35);

function RangePanelInterface$$1(PanelClass) {
    var RangePanel = function (_PanelClass) {
        inherits(RangePanel, _PanelClass);

        function RangePanel() {
            classCallCheck(this, RangePanel);
            return possibleConstructorReturn(this, (RangePanel.__proto__ || Object.getPrototypeOf(RangePanel)).apply(this, arguments));
        }

        return RangePanel;
    }(PanelClass);

    return RangePanel;
}

var EntriesManager$$1 = function (_Dispatchable) {
    inherits(EntriesManager$$1, _Dispatchable);

    function EntriesManager$$1(entries) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, EntriesManager$$1);

        var _this2 = possibleConstructorReturn(this, (EntriesManager$$1.__proto__ || Object.getPrototypeOf(EntriesManager$$1)).call(this));

        _this2.rawEntries = entries;
        _this2.options = options;
        _this2.cacheEntries();
        return _this2;
    }

    createClass(EntriesManager$$1, [{
        key: "getRawEntries",
        value: function getRawEntries() {
            return this.rawEntries;
        }
    }, {
        key: "cacheEntries",
        value: function cacheEntries() {
            this.cachedEntries = this.sortEntries(this.filterEntries(this.getRawEntries()));
            this.dispatch("update");
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.cachedEntries;
        }
    }, {
        key: "getEntriesCount",
        value: function getEntriesCount() {
            return this.cachedEntries.length;
        }
    }, {
        key: "getEntriesRange",
        value: function getEntriesRange(low, high) {
            return this.cachedEntries.slice(low, high);
        }
    }, {
        key: "updateEntries",
        value: function updateEntries(entries) {
            this.rawEntries = entries;
            this.cacheEntries();
        }
    }, {
        key: "sortEntries",
        value: function sortEntries(entries) {
            return this.getComparator() ? entries.sort(this.getComparator()) : entries;
        }
    }, {
        key: "filterEntries",
        value: function filterEntries(entries) {
            var filter = this.getFilter();
            return filter ? entries.filter(filter) : entries;
        }
    }, {
        key: "getComparator",
        value: function getComparator() {
            return this.options.comparator;
        }
    }, {
        key: "setComparator",
        value: function setComparator(comparator) {
            this.options.comparator = comparator;
            this.cacheEntries();
        }
    }, {
        key: "getFilter",
        value: function getFilter() {
            return this.options.filter;
        }
    }, {
        key: "setFilter",
        value: function setFilter(filter) {
            this.options.filter = filter;
            this.cacheEntries();
        }
    }]);
    return EntriesManager$$1;
}(Dispatchable);

// A wrapper for tables which optimizes rendering when many entries / updates are involved. It currently has hardcoded
// row height for functionality reasons.


function RangeTableInterface$$1(TableClass) {
    var RangeTable = function (_UI$Primitive) {
        inherits(RangeTable, _UI$Primitive);

        function RangeTable(options) {
            classCallCheck(this, RangeTable);

            var _this3 = possibleConstructorReturn(this, (RangeTable.__proto__ || Object.getPrototypeOf(RangeTable)).call(this, options));

            _this3.lowIndex = 0;
            _this3.highIndex = 0;
            return _this3;
        }

        createClass(RangeTable, [{
            key: "getRangePanelStyleSheet",
            value: function getRangePanelStyleSheet() {
                return RangePanelStyle.getInstance();
            }
        }, {
            key: "getRowHeight",
            value: function getRowHeight() {
                return this.options.rowHeight || this.getRangePanelStyleSheet().rowHeight;
            }
        }, {
            key: "getEntriesManager",
            value: function getEntriesManager() {
                if (!this.entriesManager) {
                    this.entriesManager = new EntriesManager$$1(get(RangeTable.prototype.__proto__ || Object.getPrototypeOf(RangeTable.prototype), "getEntries", this).call(this));
                }
                return this.entriesManager;
            }
        }, {
            key: "extraNodeAttributes",
            value: function extraNodeAttributes(attr) {
                attr.addClass(this.getRangePanelStyleSheet().default);
            }
        }, {
            key: "render",
            value: function render() {
                var rangePanelStyleSheet = this.getRangePanelStyleSheet();
                var fakePanelHeight = this.getRowHeight() * this.getEntriesManager().getEntriesCount() + 1 + "px";
                var headHeight = this.containerHead ? this.containerHead.getHeight() : 0;
                this.computeIndices();

                // Margin is added at redraw for the case when the scoreboard has horizontal scrolling during a redraw.
                var margin = this.node && this.node.scrollLeft || 0;

                return [UI.createElement(
                    "div",
                    { ref: "tableContainer", className: rangePanelStyleSheet.tableContainer,
                        style: { paddingTop: headHeight + "px", marginLeft: margin + "px" } },
                    UI.createElement(
                        "div",
                        { ref: "scrollablePanel", className: rangePanelStyleSheet.scrollablePanel },
                        UI.createElement("div", { ref: "fakePanel", className: rangePanelStyleSheet.fakePanel, style: { height: fakePanelHeight } }),
                        UI.createElement(
                            "table",
                            { ref: "container", className: this.styleSheet.table + " " + rangePanelStyleSheet.table,
                                style: { marginLeft: -margin + "px" } },
                            UI.createElement(
                                "thead",
                                { ref: "containerHead" },
                                this.renderContainerHead()
                            ),
                            UI.createElement(
                                "tbody",
                                { ref: "containerBody" },
                                this.renderContainerBody()
                            )
                        )
                    )
                ), UI.createElement(
                    "div",
                    { ref: "footer", className: rangePanelStyleSheet.footer, style: { marginLeft: margin + "px" } },
                    UI.createElement(
                        "span",
                        { ref: "tableFooterText" },
                        this.getFooterContent()
                    ),
                    UI.createElement(NumberInput, { ref: "jumpToInput", placeholder: "jump to...", style: { textAlign: "center" } }),
                    UI.createElement(
                        Button,
                        { ref: "jumpToButton", size: Size.SMALL, className: rangePanelStyleSheet.jumpToButton },
                        "Go"
                    )
                )];
            }
        }, {
            key: "applyScrollState",
            value: function applyScrollState() {
                this.scrollablePanel.node.scrollTop = this.scrollState;
            }
        }, {
            key: "saveScrollState",
            value: function saveScrollState() {
                if (this.scrollablePanel && this.scrollablePanel.node) {
                    this.scrollState = this.scrollablePanel.node.scrollTop;
                }
            }
        }, {
            key: "renderContainerHead",
            value: function renderContainerHead() {
                return this.renderTableHead();
            }
        }, {
            key: "renderContainerBody",
            value: function renderContainerBody() {
                // TODO: this method should not be here, and tables should have a method "getEntriesToRender" which will be overwritten in this class.
                this.rows = [];

                var entries = this.getEntriesManager().getEntriesRange(this.lowIndex, this.highIndex);

                for (var i = 0; i < entries.length; i += 1) {
                    var entry = entries[i];
                    var RowClass = this.getRowClass(entry);
                    this.rows.push(UI.createElement(RowClass, _extends({ key: this.getEntryKey(entry, i + this.lowIndex), index: i + this.lowIndex
                    }, this.getRowOptions(entry), { parent: this })));
                }
                return this.rows;
            }
        }, {
            key: "getFooterContent",
            value: function getFooterContent() {
                if (this.lowIndex + 1 > this.highIndex) {
                    return "No results. Jump to ";
                }
                return this.lowIndex + 1 + " \u279E " + this.highIndex + " of " + this.getEntriesManager().getEntriesCount() + ". ";
            }
        }, {
            key: "jumpToIndex",
            value: function jumpToIndex(index) {
                // Set the scroll so that the requested position is in the center.
                var lowIndex = parseInt(index - (this.highIndex - this.lowIndex) / 2 + 1);
                var scrollRatio = lowIndex / (this.getEntriesManager().getEntriesCount() + 0.5);
                this.scrollablePanel.node.scrollTop = scrollRatio * this.scrollablePanel.node.scrollHeight;
            }
        }, {
            key: "computeIndices",
            value: function computeIndices() {
                if (!this.tableContainer || !this.containerHead || !this.footer) {
                    return;
                }
                var scrollRatio = this.scrollablePanel.node.scrollTop / this.scrollablePanel.node.scrollHeight;
                var entriesCount = this.getEntriesManager().getEntriesCount();
                // Computing of entries range is made using the physical scroll on the fake panel.
                this.lowIndex = parseInt(scrollRatio * (entriesCount + 0.5));
                if (isNaN(this.lowIndex)) {
                    this.lowIndex = 0;
                }
                this.highIndex = Math.min(this.lowIndex + parseInt((this.getHeight() - this.containerHead.getHeight() - this.footer.getHeight()) / this.getRowHeight()), entriesCount);
            }
        }, {
            key: "setScroll",
            value: function setScroll() {
                // This is the main logic for rendering the right entries. Right now, it best works with a fixed row height,
                // for other cases no good results are guaranteed. For now, that row height is hardcoded in the class'
                // stylesheet.

                if (this.inSetScroll) {
                    return;
                }
                if (!document.body.contains(this.node)) {
                    this.tableFooterText.setChildren(this.getFooterContent());
                    this.containerBody.setChildren(this.renderContainerBody());
                    return;
                }
                this.inSetScroll = true;
                this.computeIndices();
                // Ugly hack for chrome stabilization.
                // This padding top makes the scrollbar appear only on the tbody side
                this.tableContainer.setStyle("paddingTop", this.containerHead.getHeight() + "px");
                this.fakePanel.setHeight(this.getRowHeight() * this.getEntriesManager().getEntriesCount() + "px");
                // The scrollable panel must have the exact height of the tbody so that there is consistency between entries
                // rendering and scroll position.
                this.scrollablePanel.setHeight(this.getRowHeight() * (this.highIndex - this.lowIndex) + "px");
                // Update the entries and the footer info.
                this.tableFooterText.setChildren(this.getFooterContent());
                this.containerBody.setChildren(this.renderContainerBody());
                // This is for setting the scrollbar outside of the table area, otherwise the scrollbar wouldn't be clickable
                // because of the logic in "addCompatibilityListeners".
                this.container.setWidth(this.fakePanel.getWidth() + "px");
                this.inSetScroll = false;
            }
        }, {
            key: "addCompatibilityListeners",
            value: function addCompatibilityListeners() {
                var _this4 = this;

                // The physical table has z-index -1 so it does not respond to mouse events, as it is "behind" fake panel.
                // The following listeners repair that.
                this.addNodeListener("mousedown", function () {
                    _this4.container.setStyle("pointerEvents", "all");
                });
                this.container.addNodeListener("mouseup", function (event) {
                    var mouseDownEvent = new MouseEvent("click", event);
                    var domElement = document.elementFromPoint(parseFloat(event.clientX), parseFloat(event.clientY));
                    setTimeout(function () {
                        _this4.container.setStyle("pointerEvents", "none");
                        domElement.dispatchEvent(mouseDownEvent);
                    }, 100);
                });

                // Adding listeners that force resizing
                this.addListener("setActive", function () {
                    _this4.setScroll();
                });
                this.addListener("resize", function () {
                    _this4.setScroll();
                });
                window.addEventListener("resize", function () {
                    _this4.setScroll();
                });
            }
        }, {
            key: "addTableAPIListeners",
            value: function addTableAPIListeners() {
                var _this5 = this;

                // This event isn't used anywhere but this is how range updates should be made.
                this.addListener("entriesChange", function (event) {
                    if (!(event.leftIndex >= _this5.highIndex || event.rightIndex < _this5.lowIndex)) {
                        _this5.setScroll();
                    }
                });
                this.addListener("showCurrentUser", function () {
                    var index = _this5.getEntriesManager().getEntries().map(function (entry) {
                        return entry.userId;
                    }).indexOf(USER.id) + 1;
                    _this5.jumpToIndex(index);
                });
                // Delay is added for smoother experience of scrolling.
                this.attachListener(this.getEntriesManager(), "update", function () {
                    _this5.setScroll();
                });
            }
        }, {
            key: "addSelfListeners",
            value: function addSelfListeners() {
                var _this6 = this;

                this.scrollablePanel.addNodeListener("scroll", function () {
                    _this6.setScroll();
                });
                this.addNodeListener("scroll", function () {
                    _this6.tableContainer.setStyle("marginLeft", _this6.node.scrollLeft);
                    _this6.footer.setStyle("marginLeft", _this6.node.scrollLeft);
                    _this6.container.setStyle("marginLeft", -_this6.node.scrollLeft);
                });
                window.addEventListener("resize", function () {
                    _this6.tableContainer.setStyle("marginLeft", 0);
                    _this6.footer.setStyle("marginLeft", 0);
                    _this6.container.setStyle("marginLeft", 0);
                });
                this.jumpToInput.addNodeListener("keyup", function (event) {
                    if (event.code === "Enter") {
                        _this6.jumpToIndex(parseInt(_this6.jumpToInput.getValue()));
                    }
                });
                this.jumpToButton.addClickListener(function () {
                    _this6.jumpToIndex(parseInt(_this6.jumpToInput.getValue()));
                });
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this7 = this;

                get(RangeTable.prototype.__proto__ || Object.getPrototypeOf(RangeTable.prototype), "onMount", this).call(this);

                this.addCompatibilityListeners();

                this.addTableAPIListeners();

                this.addSelfListeners();

                setTimeout(function () {
                    _this7.redraw();
                });
            }
        }]);
        return RangeTable;
    }(UI.Primitive(TableClass, "div"));

    return RangeTable;
}

var _class$36, _descriptor$14, _descriptor2$13, _class3$11, _descriptor3$13, _descriptor4$12;

function _initDefineProp$15(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$15(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var TableStyle = (_class$36 = function (_StyleSheet) {
    inherits(TableStyle, _StyleSheet);

    function TableStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, TableStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TableStyle.__proto__ || Object.getPrototypeOf(TableStyle)).call.apply(_ref, [this].concat(args))), _this), _this.cellStyle = {
            padding: "8px",
            lineHeight: "1.42857143",
            verticalAlign: "top",
            borderTop: "1px solid #ddd"
        }, _this.theadCellStyle = {
            borderBottom: "2px solid #ddd",
            borderTop: "0"
        }, _initDefineProp$15(_this, "table", _descriptor$14, _this), _initDefineProp$15(_this, "tableStripped", _descriptor2$13, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return TableStyle;
}(StyleSheet), _descriptor$14 = _applyDecoratedDescriptor$15(_class$36.prototype, "table", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            maxWidth: "100%",
            marginBottom: "20px",
            borderSpacing: "0",
            borderCollapse: "collapse",
            ">*>*>td": this.cellStyle,
            ">*>*>th": this.cellStyle,
            ">*>thead>*>*": this.theadCellStyle
        };
    }
}), _descriptor2$13 = _applyDecoratedDescriptor$15(_class$36.prototype, "tableStripped", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">tbody>tr:nth-of-type(odd)": {
                backgroundColor: "#f5f5f5"
            }
        };
    }
}), _class$36);
var SortableTableStyle = (_class3$11 = function (_TableStyle) {
    inherits(SortableTableStyle, _TableStyle);

    function SortableTableStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, SortableTableStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = SortableTableStyle.__proto__ || Object.getPrototypeOf(SortableTableStyle)).call.apply(_ref2, [this].concat(args))), _this2), _initDefineProp$15(_this2, "sortIcon", _descriptor3$13, _this2), _initDefineProp$15(_this2, "table", _descriptor4$12, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return SortableTableStyle;
}(TableStyle), _descriptor3$13 = _applyDecoratedDescriptor$15(_class3$11.prototype, "sortIcon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "absolute",
            right: "0px",
            bottom: "0px",
            visibility: "hidden",
            float: "right"
        };
    }
}), _descriptor4$12 = _applyDecoratedDescriptor$15(_class3$11.prototype, "table", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        var _ref3;

        return _ref3 = {}, defineProperty(_ref3, " th:hover ." + this.sortIcon.getClassName(), {
            visibility: "inherit"
        }), defineProperty(_ref3, " th:hover", {
            cursor: "pointer"
        }), _ref3;
    }
}), _class3$11);

var _dec$18, _class$37;

// TODO: the whole table architecture probably needs a rethinking

var TableRow = function (_UI$Primitive) {
    inherits(TableRow, _UI$Primitive);

    function TableRow() {
        classCallCheck(this, TableRow);
        return possibleConstructorReturn(this, (TableRow.__proto__ || Object.getPrototypeOf(TableRow)).apply(this, arguments));
    }

    createClass(TableRow, [{
        key: "render",
        value: function render() {
            var rowCells = [];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var column = _step.value;

                    rowCells.push(this.renderEntryCell(column));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return rowCells;
        }
    }, {
        key: "renderEntryCell",
        value: function renderEntryCell(column) {
            return UI.createElement(
                "td",
                { style: column.cellStyle, key: column.id },
                column.value(this.options.entry, this.options.index)
            );
        }
    }]);
    return TableRow;
}(UI.Primitive("tr"));

var Table = (_dec$18 = registerStyle(TableStyle), _dec$18(_class$37 = function (_UI$Primitive2) {
    inherits(Table, _UI$Primitive2);

    function Table() {
        classCallCheck(this, Table);
        return possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).apply(this, arguments));
    }

    createClass(Table, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(Table.prototype.__proto__ || Object.getPrototypeOf(Table.prototype), "setOptions", this).call(this, options);

            this.setColumns(options.columns || []);
            this.entries = options.entries || [];
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.table);
        }
    }, {
        key: "getRowClass",
        value: function getRowClass() {
            return TableRow;
        }
    }, {
        key: "getRowOptions",
        value: function getRowOptions(entry) {
            return {
                entry: entry,
                columns: this.columns
            };
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "thead",
                null,
                this.renderTableHead()
            ), UI.createElement(
                "tbody",
                null,
                this.renderTableBody()
            )];
        }
    }, {
        key: "renderTableHead",
        value: function renderTableHead() {
            return UI.createElement(
                "tr",
                null,
                this.columns.map(this.renderHeaderCell, this)
            );
        }
    }, {
        key: "getEntryKey",
        value: function getEntryKey(entry, index) {
            return entry.id != null ? entry.id : index;
        }
    }, {
        key: "renderTableBody",
        value: function renderTableBody() {
            this.rows = [];

            var entries = this.getEntries();
            for (var i = 0; i < entries.length; i += 1) {
                var entry = entries[i];
                var RowClass = this.getRowClass(entry);
                this.rows.push(UI.createElement(RowClass, _extends({ key: this.getEntryKey(entry, i), index: i }, this.getRowOptions(entry), { parent: this })));
            }
            return this.rows;
        }

        // Renders the whole header cell based on a column

    }, {
        key: "renderHeaderCell",
        value: function renderHeaderCell(column) {
            return UI.createElement(
                "th",
                { style: column.headerStyle, ref: "columnHeader" + column.id },
                this.renderColumnHeader(column)
            );
        }

        // Only renders the content of the header cell

    }, {
        key: "renderColumnHeader",
        value: function renderColumnHeader(column) {
            if (typeof column.headerName === "function") {
                return column.headerName();
            }
            return column.headerName;
        }

        // Original entries should not be modified. Overwrite this function to appy any modification in a new array.

    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.entries || [];
        }
    }, {
        key: "columnDefaults",
        value: function columnDefaults(column, index) {
            column.id = index;
        }
    }, {
        key: "setColumns",
        value: function setColumns(columns) {
            this.columns = columns;
            for (var i = 0; i < this.columns.length; i += 1) {
                this.columnDefaults(this.columns[i], i);
            }
        }
    }]);
    return Table;
}(UI.Primitive("table"))) || _class$37);

var _class$38, _descriptor$15, _descriptor2$14, _descriptor3$14;

function _initDefineProp$16(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$16(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var TableRowInCollapsibleTable = function (_TableRow) {
    inherits(TableRowInCollapsibleTable, _TableRow);

    function TableRowInCollapsibleTable() {
        classCallCheck(this, TableRowInCollapsibleTable);
        return possibleConstructorReturn(this, (TableRowInCollapsibleTable.__proto__ || Object.getPrototypeOf(TableRowInCollapsibleTable)).apply(this, arguments));
    }

    createClass(TableRowInCollapsibleTable, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "tbody";
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(
                "tr",
                null,
                get(TableRowInCollapsibleTable.prototype.__proto__ || Object.getPrototypeOf(TableRowInCollapsibleTable.prototype), "render", this).call(this)
            );
        }
    }]);
    return TableRowInCollapsibleTable;
}(TableRow);

var CollapsibleTableStyle = (_class$38 = function (_StyleSheet) {
    inherits(CollapsibleTableStyle, _StyleSheet);

    function CollapsibleTableStyle() {
        var _ref;

        var _temp, _this2, _ret;

        classCallCheck(this, CollapsibleTableStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this2 = possibleConstructorReturn(this, (_ref = CollapsibleTableStyle.__proto__ || Object.getPrototypeOf(CollapsibleTableStyle)).call.apply(_ref, [this].concat(args))), _this2), _initDefineProp$16(_this2, "button", _descriptor$15, _this2), _initDefineProp$16(_this2, "collapsedButton", _descriptor2$14, _this2), _initDefineProp$16(_this2, "heading", _descriptor3$14, _this2), _temp), possibleConstructorReturn(_this2, _ret);
    }

    return CollapsibleTableStyle;
}(StyleSheet), _descriptor$15 = _applyDecoratedDescriptor$16(_class$38.prototype, "button", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "0",
            marginBottom: "0",
            fontSize: "16px",
            color: "inherit",
            cursor: "pointer",
            ":hover": {
                color: "inherit"
            },
            ":after": {
                fontFamily: "'FontAwesome'",
                content: "\"\\f107\"",
                color: "grey",
                float: "left",
                fontWeight: "bold",
                width: "0.7em",
                fontSize: "130%",
                verticalAlign: "top",
                height: "0.7em",
                marginTop: "-0.2em",
                textAlign: "center"
            }
        };
    }
}), _descriptor2$14 = _applyDecoratedDescriptor$16(_class$38.prototype, "collapsedButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ":after": {
                content: "\"\\f105\" !important"
            }
        };
    }
}), _descriptor3$14 = _applyDecoratedDescriptor$16(_class$38.prototype, "heading", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "10px 15px",
            backgroundColor: "initial !important"
        };
    }
}), _class$38);


var collapsibleTableStyle = new CollapsibleTableStyle();

// TODO: refactor this to support redraw and render override

var CollapsibleTableRow = function (_CollapsibleMixin) {
    inherits(CollapsibleTableRow, _CollapsibleMixin);

    function CollapsibleTableRow() {
        classCallCheck(this, CollapsibleTableRow);
        return possibleConstructorReturn(this, (CollapsibleTableRow.__proto__ || Object.getPrototypeOf(CollapsibleTableRow)).apply(this, arguments));
    }

    createClass(CollapsibleTableRow, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "tbody";
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                collapsed: true
            };
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.toggleButton.addClickListener(function () {
                return _this4.toggle();
            });
        }
    }, {
        key: "toggle",
        value: function toggle() {
            if (!this.options.collapsed) {
                this.collapse();
            } else {
                this.expand();
            }
        }
    }, {
        key: "expand",
        value: function expand() {
            get(CollapsibleTableRow.prototype.__proto__ || Object.getPrototypeOf(CollapsibleTableRow.prototype), "expand", this).call(this, this.contentArea);
            this.toggleButton.removeClass(collapsibleTableStyle.collapsedButton);
        }
    }, {
        key: "collapse",
        value: function collapse() {
            var _this5 = this;

            get(CollapsibleTableRow.prototype.__proto__ || Object.getPrototypeOf(CollapsibleTableRow.prototype), "collapse", this).call(this, this.contentArea);
            setTimeout(function () {
                _this5.toggleButton.addClass(collapsibleTableStyle.collapsedButton);
            }, this.getCollapsibleStyleSheet().transitionDuration * 500);
        }

        // TODO: Very bad redraw practice here

    }, {
        key: "redraw",
        value: function redraw() {
            if (!get(CollapsibleTableRow.prototype.__proto__ || Object.getPrototypeOf(CollapsibleTableRow.prototype), "redraw", this).call(this)) {
                return false;
            }

            if (this.options.collapsed) {
                this.toggleButton.addClass(collapsibleTableStyle.collapsedButton);
                this.contentArea.addClass(this.getCollapsibleStyleSheet().collapsed);
                this.contentArea.addClass("hidden");
            } else {
                this.toggleButton.removeClass(collapsibleTableStyle.collapsedButton);
                this.contentArea.removeClass(this.getCollapsibleStyleSheet().collapsed);
                this.contentArea.removeClass("hidden");
            }
            return true;
        }
    }, {
        key: "getInitialCollapsedContent",
        value: function getInitialCollapsedContent() {
            return this.renderCollapsible(this.options.entry);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "tr",
                { className: collapsibleTableStyle.heading },
                get(CollapsibleTableRow.prototype.__proto__ || Object.getPrototypeOf(CollapsibleTableRow.prototype), "render", this).call(this)
            ), UI.createElement(
                "tr",
                null,
                UI.createElement(
                    "td",
                    { style: { overflow: "hidden", padding: "0px" },
                        colspan: this.options.columns.length },
                    UI.createElement(
                        "div",
                        { ref: "contentArea",
                            className: this.getCollapsibleStyleSheet().collapsed + " hidden" },
                        this.getInitialCollapsedContent()
                    )
                )
            )];
        }
    }]);
    return CollapsibleTableRow;
}(CollapsibleMixin(TableRow));

var DelayedCollapsibleTableRow = function (_CollapsibleTableRow) {
    inherits(DelayedCollapsibleTableRow, _CollapsibleTableRow);

    function DelayedCollapsibleTableRow() {
        classCallCheck(this, DelayedCollapsibleTableRow);
        return possibleConstructorReturn(this, (DelayedCollapsibleTableRow.__proto__ || Object.getPrototypeOf(DelayedCollapsibleTableRow)).apply(this, arguments));
    }

    createClass(DelayedCollapsibleTableRow, [{
        key: "toggle",
        value: function toggle() {
            if (!this._haveExpanded) {
                this._haveExpanded = true;
                this.redrawCollapsible();
            }
            get(DelayedCollapsibleTableRow.prototype.__proto__ || Object.getPrototypeOf(DelayedCollapsibleTableRow.prototype), "toggle", this).call(this);
        }
    }, {
        key: "redrawCollapsible",
        value: function redrawCollapsible() {
            UI.renderingStack.push(this);
            this.contentArea.options.children = this.renderCollapsible(this.options.entry);
            UI.renderingStack.pop();
            this.contentArea.redraw();
        }
    }, {
        key: "getInitialCollapsedContent",
        value: function getInitialCollapsedContent() {
            return [];
        }
    }]);
    return DelayedCollapsibleTableRow;
}(CollapsibleTableRow);

function CollapsibleTableInterface(BaseTableClass) {
    return function (_BaseTableClass) {
        inherits(CollapsibleTable, _BaseTableClass);

        function CollapsibleTable() {
            classCallCheck(this, CollapsibleTable);
            return possibleConstructorReturn(this, (CollapsibleTable.__proto__ || Object.getPrototypeOf(CollapsibleTable)).apply(this, arguments));
        }

        createClass(CollapsibleTable, [{
            key: "setOptions",
            value: function setOptions(options) {
                get(CollapsibleTable.prototype.__proto__ || Object.getPrototypeOf(CollapsibleTable.prototype), "setOptions", this).call(this, options);

                if (options.renderCollapsible) {
                    this.renderCollapsible = options.renderCollapsible;
                }
            }
        }, {
            key: "render",
            value: function render() {
                return [UI.createElement(
                    "thead",
                    null,
                    this.renderTableHead()
                ), this.renderTableBody()];
            }
        }, {
            key: "getRowClass",
            value: function getRowClass() {
                return CollapsibleTableRow;
            }
        }, {
            key: "setColumns",
            value: function setColumns(columns) {
                var _this8 = this;

                var toggleColumn = {
                    value: function value(entry) {
                        var rowClass = _this8.getRowClass(entry);
                        // TODO: Fix it lad!
                        if (rowClass === CollapsibleTableRow || rowClass.prototype instanceof CollapsibleTableRow) {
                            return UI.createElement("a", { ref: "toggleButton",
                                className: collapsibleTableStyle.button + " " + collapsibleTableStyle.collapsedButton });
                        }
                        return UI.createElement("a", { ref: "toggleButton" });
                    },
                    cellStyle: {
                        width: "1%",
                        "whiteSpace": "nowrap"
                    }
                };

                get(CollapsibleTable.prototype.__proto__ || Object.getPrototypeOf(CollapsibleTable.prototype), "setColumns", this).call(this, [toggleColumn].concat(columns));
            }
        }]);
        return CollapsibleTable;
    }(BaseTableClass);
}

var CollapsibleTable = CollapsibleTableInterface(Table);

function SortableTableInterface(BaseTableClass) {
    var _dec, _class;

    var SortIconClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FASortIcon;
    var SortableTable = (_dec = registerStyle(SortableTableStyle), _dec(_class = function (_BaseTableClass) {
        inherits(SortableTable, _BaseTableClass);

        function SortableTable() {
            classCallCheck(this, SortableTable);
            return possibleConstructorReturn(this, (SortableTable.__proto__ || Object.getPrototypeOf(SortableTable)).apply(this, arguments));
        }

        createClass(SortableTable, [{
            key: "extraNodeAttributes",
            value: function extraNodeAttributes(attr) {
                get(SortableTable.prototype.__proto__ || Object.getPrototypeOf(SortableTable.prototype), "extraNodeAttributes", this).call(this, attr);
                attr.addClass(this.styleSheet.table);
            }
        }, {
            key: "setOptions",
            value: function setOptions(options) {
                get(SortableTable.prototype.__proto__ || Object.getPrototypeOf(SortableTable.prototype), "setOptions", this).call(this, options);

                this.columnSortingOrder = options.columnSortingOrder || [];
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this2 = this;

                get(SortableTable.prototype.__proto__ || Object.getPrototypeOf(SortableTable.prototype), "onMount", this).call(this);

                // TODO: fix multiple clicks registered here
                // Sort table by clicked column
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    var _loop = function _loop() {
                        var column = _step.value;

                        _this2["columnHeader" + column.id].addClickListener(function () {
                            _this2.sortByColumn(column);
                            _this2.dispatch("reorder");
                        });
                    };

                    for (var _iterator = this.columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        _loop();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }, {
            key: "renderColumnHeader",
            value: function renderColumnHeader(column) {
                var sortIcon = UI.createElement(SortIconClass, { className: this.styleSheet.sortIcon });
                if (this.sortBy === column) {
                    if (this.sortDescending) {
                        sortIcon = UI.createElement(SortIconClass, { className: this.styleSheet.sortIcon, style: { visibility: "inherit" }, direction: Direction.DOWN });
                    } else {
                        sortIcon = UI.createElement(SortIconClass, { className: this.styleSheet.sortIcon, style: { visibility: "inherit" }, direction: Direction.UP });
                    }
                }

                return UI.createElement(
                    "div",
                    { style: { position: "relative" } },
                    get(SortableTable.prototype.__proto__ || Object.getPrototypeOf(SortableTable.prototype), "renderColumnHeader", this).call(this, column),
                    " ",
                    sortIcon
                );
            }
        }, {
            key: "sortByColumn",
            value: function sortByColumn(column) {
                if (column === this.sortBy) {
                    this.sortDescending = this.sortDescending != true;
                } else {
                    this.sortDescending = true;
                }

                this.sortBy = column;

                this.redraw();
            }
        }, {
            key: "getComparator",
            value: function getComparator() {
                var _this3 = this;

                if (!this.sortBy && this.columnSortingOrder.length === 0) {
                    return null;
                }

                var colCmp = function colCmp(a, b, col) {
                    if (!col) return 0;

                    var keyA = col.rawValue ? col.rawValue(a) : col.value(a);
                    var keyB = col.rawValue ? col.rawValue(b) : col.value(b);
                    return col.cmp(keyA, keyB);
                };

                return function (a, b) {
                    var cmpRes = void 0;

                    if (_this3.sortBy) {
                        cmpRes = colCmp(a, b, _this3.sortBy);
                        if (cmpRes !== 0) {
                            return _this3.sortDescending ? -cmpRes : cmpRes;
                        }
                    }

                    for (var i = 0; i < _this3.columnSortingOrder.length; i += 1) {
                        cmpRes = colCmp(a, b, _this3.columnSortingOrder[i]);
                        if (_this3.columnSortingOrder[i].sortDescending) {
                            cmpRes = -cmpRes;
                        }

                        if (cmpRes !== 0) {
                            return cmpRes;
                        }
                    }
                    return 0;
                };
            }
        }, {
            key: "sortEntries",
            value: function sortEntries(entries) {
                var sortedEntries = entries.slice();

                if (this.getComparator()) {
                    sortedEntries.sort(this.getComparator());
                }

                return sortedEntries;
            }
        }, {
            key: "getEntries",
            value: function getEntries() {
                return this.sortEntries(get(SortableTable.prototype.__proto__ || Object.getPrototypeOf(SortableTable.prototype), "getEntries", this).call(this));
            }
        }, {
            key: "columnDefaults",
            value: function columnDefaults(column, index) {
                get(SortableTable.prototype.__proto__ || Object.getPrototypeOf(SortableTable.prototype), "columnDefaults", this).call(this, column, index);

                if (!column.hasOwnProperty("cmp")) {
                    column.cmp = defaultComparator;
                }
            }
        }]);
        return SortableTable;
    }(BaseTableClass)) || _class);

    return SortableTable;
}

var SortableTable = SortableTableInterface(Table);

var _class$39, _temp$8;

var TimeUnit = (_temp$8 = _class$39 = function () {
    function TimeUnit(name, baseUnit, multiplier) {
        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        classCallCheck(this, TimeUnit);

        this.name = name;
        this.pluralName = name + "s";
        this.baseUnit = baseUnit;
        this.multiplier = multiplier;
        this.milliseconds = (baseUnit && baseUnit.getMilliseconds() || 1) * multiplier;
        this.variableMultiplier = options.variableMultiplier || false;
        this.variableDuration = this.variableMultiplier || baseUnit && baseUnit.isVariable();
    }

    createClass(TimeUnit, [{
        key: "valueOf",
        value: function valueOf() {
            return this.milliseconds;
        }
    }, {
        key: "getName",
        value: function getName() {
            return this.name;
        }
    }, {
        key: "getPluralName",
        value: function getPluralName() {
            return this.pluralName;
        }
    }, {
        key: "getMilliseconds",
        value: function getMilliseconds() {
            return this.milliseconds;
        }
    }, {
        key: "isVariable",
        value: function isVariable() {
            return this.variableDuration;
        }
    }, {
        key: "hasVariableMultiplier",
        value: function hasVariableMultiplier() {
            return this.variableMultiplier;
        }
    }, {
        key: "getDateValue",
        value: function getDateValue(date) {}
    }, {
        key: "setDateValue",
        value: function setDateValue(date, value) {}
    }], [{
        key: "toTimeUnit",
        value: function toTimeUnit(timeUnit) {
            if (timeUnit instanceof TimeUnit) {
                return timeUnit;
            }
            return this.CANONICAL[timeUnit];
        }
    }]);
    return TimeUnit;
}(), _class$39.CANONICAL = {}, _class$39.ALL = [], _class$39.FIXED_DURATION = [], _class$39.VARIABLE_DURATION = [], _temp$8);

TimeUnit.MILLISECOND = new TimeUnit("millisecond", null, 1);
TimeUnit.SECOND = new TimeUnit("second", TimeUnit.MILLISECOND, 1000);
TimeUnit.MINUTE = new TimeUnit("minute", TimeUnit.SECOND, 60);
TimeUnit.HOUR = new TimeUnit("hour", TimeUnit.MINUTE, 60);
TimeUnit.DAY = new TimeUnit("day", TimeUnit.HOUR, 24, { variableMultiplier: true });
TimeUnit.WEEK = new TimeUnit("week", TimeUnit.DAY, 7);
TimeUnit.MONTH = new TimeUnit("month", TimeUnit.DAY, 30, { variableMultiplier: true });
TimeUnit.QUARTER = new TimeUnit("quarter", TimeUnit.MONTH, 3);
TimeUnit.TRIMESTER = new TimeUnit("trimester", TimeUnit.MONTH, 4);
TimeUnit.SEMESTER = new TimeUnit("semester", TimeUnit.MONTH, 6);
TimeUnit.YEAR = new TimeUnit("year", TimeUnit.DAY, 365, { variableMultiplier: true });

TimeUnit.DAY.dateMethodSuffix = "Date";
TimeUnit.MONTH.dateMethodSuffix = "Month";
TimeUnit.YEAR.dateMethodSuffix = "FullYear";

var Duration = function () {
    function Duration(duration) {
        classCallCheck(this, Duration);

        if (duration instanceof self.Date) {
            throw new Error("Can't automatically transform Date to Duration, use date.getTime() if you really want to");
        }
        if (isNumber(duration)) {
            this.milliseconds = duration;
            return;
        }
        if (duration instanceof Duration) {
            Object.assign(this, duration);
            return;
        }
        if (isPlainObject(duration)) {
            this.milliseconds = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.keys(duration)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    var timeUnit = TimeUnit.CANONICAL[key];
                    if (!timeUnit) {
                        throw Error("Unknown time unit:", key);
                    }
                    // TODO: throw an error if can't parse these values
                    if (timeUnit.isVariable()) {
                        this[key] = parseInt(duration[key]);
                        this.relativeDuration = true;
                    } else {
                        this.milliseconds += parseFloat(duration[key]) * timeUnit.milliseconds;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return;
        }
        if (arguments.length > 0) {
            throw Error.apply(undefined, ["Invalid Duration arguments: "].concat(Array.prototype.slice.call(arguments)));
        }
        this.milliseconds = 0;
    }

    createClass(Duration, [{
        key: "increment",
        value: function increment(duration) {
            duration = this.constructor.toDuration(duration);
            for (var key in duration) {
                if (!(key in TimeUnit.CANONICAL)) {
                    continue;
                }
                if (this.hasOwnProperty(key)) {
                    this[key] += duration[key];
                } else {
                    this[key] = duration[key];
                }
            }
            return this;
        }
    }, {
        key: "add",
        value: function add(duration) {
            return this.clone().increm(duration);
        }
    }, {
        key: "subtract",
        value: function subtract(duration) {
            duration = this.constructor.toDuration(duration).negate();
            return this.add(duration);
        }

        // Returns true if was defined terms of absolute primitives (anything less than a day)

    }, {
        key: "isAbsolute",
        value: function isAbsolute() {
            return !this.isVariable();
        }
    }, {
        key: "isVariable",
        value: function isVariable() {
            return this.relativeDuration;
        }
    }, {
        key: "negate",
        value: function negate() {
            var duration = new Duration(this);
            for (var key in duration) {
                if (key in TimeUnit.CANONICAL) {
                    duration[key] = -duration[key];
                }
            }
            return duration;
        }

        // Returns a new Duration with a positive length

    }, {
        key: "abs",
        value: function abs() {
            return new Duration(Math.abs(+this));
        }
    }, {
        key: "clone",
        value: function clone() {
            return new Duration(this);
        }

        // The primitive value

    }, {
        key: "valueOf",
        value: function valueOf() {
            return this.milliseconds;
        }
    }, {
        key: "toNanoseconds",
        value: function toNanoseconds() {
            return Math.floor(+this * 1e6);
        }

        // TODO: for all these units, should have a way to get the float and int value

    }, {
        key: "toMilliseconds",
        value: function toMilliseconds() {
            return Math.floor(+this);
        }
    }, {
        key: "getMilliseconds",
        value: function getMilliseconds() {
            return this.toMilliseconds() % 1000;
        }
    }, {
        key: "toSeconds",
        value: function toSeconds() {
            return Math.floor(+this / 1000);
        }
    }, {
        key: "getSeconds",
        value: function getSeconds() {
            return this.toSeconds() % 60;
        }
    }, {
        key: "toMinutes",
        value: function toMinutes() {
            return Math.floor(+this / (1000 * 60));
        }
    }, {
        key: "getMinutes",
        value: function getMinutes() {
            return this.toMinutes() % 60;
        }
    }, {
        key: "toHours",
        value: function toHours() {
            return Math.floor(+this / (1000 * 60 * 60));
        }
    }, {
        key: "getHours",
        value: function getHours() {
            return this.toHours() % 24;
        }
    }, {
        key: "toDays",
        value: function toDays() {
            return Math.floor(+this / (1000 * 60 * 60 * 24));
        }
    }, {
        key: "toMonths",
        value: function toMonths() {
            return Math.floor(+this / (1000 * 60 * 60 * 24 * 30));
        }
    }, {
        key: "toYears",
        value: function toYears() {
            return Math.floor(+this / (1000 * 60 * 60 * 24 * 365));
        }
    }, {
        key: "toString",
        value: function toString(locale) {
            // Humanize the duration (should work with localization)
        }
    }], [{
        key: "toDuration",
        value: function toDuration(duration) {
            if (duration instanceof Duration) {
                return duration;
            }
            return new this(duration);
        }
    }]);
    return Duration;
}();

function addCanonicalTimeUnit(key, timeUnit) {
    TimeUnit.ALL.push(timeUnit);
    if (timeUnit.isVariable()) {
        TimeUnit.VARIABLE_DURATION.push(timeUnit);
    } else {
        TimeUnit.FIXED_DURATION.push(timeUnit);
    }

    TimeUnit.CANONICAL[timeUnit.name] = timeUnit;
    if (timeUnit.pluralName) {
        TimeUnit.CANONICAL[timeUnit.pluralName] = timeUnit;
    }

    var timeUnitsName = timeUnit.pluralName;

    // TODO: not sure about this anymore
    Duration[key] = new Duration(defineProperty({}, timeUnitsName, 1));
}

function addCanonicalTimeUnits() {
    for (var key in TimeUnit) {
        var timeUnit = TimeUnit[key];
        if (timeUnit instanceof TimeUnit) {
            addCanonicalTimeUnit(key, timeUnit);
        }
    }
}

addCanonicalTimeUnits();

var _class$40;

// MAX_UNIX_TIME is either ~Feb 2106 in unix seconds or ~Feb 1970 in unix milliseconds
// Any value less than this is interpreted as a unix time in seconds
// If you want to go around this behavious, you can use the static method .fromUnixMilliseconds()
// To disable, set this value to 0
var MAX_AUTO_UNIX_TIME = Math.pow(2, 32);

var BaseDate = self.Date;

var StemDate = extendsNative(_class$40 = function (_BaseDate) {
    inherits(StemDate, _BaseDate);

    function StemDate() {
        classCallCheck(this, StemDate);
        return possibleConstructorReturn(this, (StemDate.__proto__ || Object.getPrototypeOf(StemDate)).apply(this, arguments));
    }

    createClass(StemDate, [{
        key: "toDate",
        value: function toDate() {
            return this;
        }
    }, {
        key: "set",
        value: function set$$1(date) {
            date = this.constructor.toDate(date);
            this.setTime(date.setTime());
        }
    }, {
        key: "clone",
        value: function clone() {
            return new this.constructor(this.getTime());
        }
    }, {
        key: "toUnix",
        value: function toUnix() {
            return this.getTime() / 1000;
        }
    }, {
        key: "unix",
        value: function unix() {
            return Math.floor(this.toUnix());
        }
    }, {
        key: "isBefore",
        value: function isBefore(date) {
            return this.getTime() < StemDate.toDate(date).getTime();
        }
    }, {
        key: "equals",
        value: function equals(date) {
            return this.getTime() === StemDate.toDate(date).getTime();
        }
    }, {
        key: "get",
        value: function get$$1(timeUnit) {
            timeUnit = TimeUnit.toTimeUnit(timeUnit);
            return timeUnit.getDateValue(this);
        }
    }, {
        key: "isSame",
        value: function isSame(date, timeUnit) {
            if (!timeUnit) {
                return this.equals(date);
            }

            timeUnit = TimeUnit.toTimeUnit(timeUnit);
            date = this.constructor.toDate(date);
            var diff = this.diff(date);
            if (diff >= 2 * timeUnit) {
                // If the distance between the two dates is more than 2 standard lengths of the time unit
                // This would be wrong if you would have time unit that can sometimes last more than twice their canonical duration
                // Works correctly for all implemented time units
                return false;
            }
            return this.get(timeUnit) == date.get(timeUnit);
        }
    }, {
        key: "isAfter",
        value: function isAfter(date) {
            return this.getTime() > StemDate.toDate(date).getTime();
        }
    }, {
        key: "isSameOrBefore",
        value: function isSameOrBefore(date) {
            return this.isBefore(date) || this.equals(date);
        }
    }, {
        key: "isSameOrAfter",
        value: function isSameOrAfter(date) {
            return this.isAfter(date) || this.equals(date);
        }
    }, {
        key: "isBetween",
        value: function isBetween(a, b) {
            return this.isSameOrAfter(a) && this.isSameOrBefore(b);
        }
    }, {
        key: "getWeekDay",
        value: function getWeekDay() {
            return this.getDay();
        }
    }, {
        key: "addUnit",
        value: function addUnit(timeUnit) {
            var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            timeUnit = TimeUnit.toTimeUnit(timeUnit);
            count = parseInt(count);

            if (!timeUnit.isVariable()) {
                this.setTime(this.getTime() + timeUnit.getMilliseconds() * count);
                return this;
            }

            while (!timeUnit.dateMethodSuffix) {
                count *= timeUnit.multiplier;
                timeUnit = timeUnit.baseUnit;
            }

            var dateMethodSuffix = timeUnit.dateMethodSuffix;
            var currentValue = this["get" + dateMethodSuffix]();
            this["set" + dateMethodSuffix](currentValue + count);

            return this;
        }
    }, {
        key: "capUp",


        // Assign the given date if current value if greater than it
        value: function capUp(date) {
            date = this.constructor.toDate(date);
            if (this.isAfter(date)) {
                this.set(date);
            }
        }

        // Assign the given date if current value if less than it

    }, {
        key: "capDown",
        value: function capDown(date) {
            date = this.constructor.toDate(date);
            if (this.isBefore(date)) {
                this.set(date);
            }
        }
    }, {
        key: "roundDown",
        value: function roundDown(timeUnit) {
            timeUnit = TimeUnit.toTimeUnit(timeUnit);
            // TODO: this is wrong for semester, etc, should be different then
            while (timeUnit = timeUnit.baseUnit) {
                this["set" + timeUnit.dateMethodSuffix](0);
            }
            return this;
        }
    }, {
        key: "roundUp",
        value: function roundUp(timeUnit) {
            var roundDown = this.clone().roundDown(timeUnit);
            if (this.equals(roundDown)) {
                this.set(roundDown);
                return this;
            }
            this.addUnit(timeUnit);
            return this.roundDown(timeUnit);
        }
    }, {
        key: "round",
        value: function round(timeUnit) {
            var roundUp = this.clone().roundUp(timeUnit);
            var roundDown = this.clone().roundDown(timeUnit);
            // At a tie, preffer to round up, that's where time's going
            if (this.diff(roundUp) <= this.diff(roundDown)) {
                this.setTime(roundUp.getTime());
            } else {
                this.setTime(roundDown.getTime());
            }
            return this;
        }
    }, {
        key: "add",
        value: function add(duration) {
            duration = Duration.toDuration(duration);
            if (duration.isAbsolute()) {
                this.setTime(this.getTime() + duration.toMilliseconds());
                return this;
            }
            for (var key in duration) {
                var timeUnit = TimeUnit.CANONICAL[key];
                if (timeUnit) {
                    this.addUnit(timeUnit, duration[key]);
                }
            }
            return this;
        }
    }, {
        key: "subtract",
        value: function subtract(duration) {
            duration = Duration.toDuration(duration).negate();
            return this.add(duration);
        }
    }, {
        key: "diffDuration",
        value: function diffDuration(date) {
            return new Duration(this.diff(date));
        }

        // TODO: this should be a duration

    }, {
        key: "diff",
        value: function diff(date) {
            date = this.constructor.toDate(date);
            return Math.abs(+this - date);
        }

        // Just to keep moment compatibility, until we actually implement locales

    }, {
        key: "locale",
        value: function locale(loc) {
            return this;
        }
    }, {
        key: "evalToken",
        value: function evalToken(token) {
            var func = this.constructor.tokenFormattersMap.get(token);
            if (!func) {
                return token;
            }
            return func(this);
        }
    }, {
        key: "format",
        value: function format() {
            var _this2 = this;

            var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "ISO";

            var tokens = this.constructor.splitToTokens(str);
            tokens = tokens.map(function (token) {
                return _this2.evalToken(token);
            });
            return tokens.join("");
        }
    }, {
        key: "isValid",
        value: function isValid() {
            return this.toString() !== "Invalid Date";
        }
    }, {
        key: "utc",
        value: function utc() {
            // Temp hack
            return this.constructor.fromUnixMilliseconds(+this + this.getTimezoneOffset() * 60 * 1000);
        }
    }, {
        key: "isLeapYear",
        value: function isLeapYear() {
            var year = this.getFullYear();
            return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
        }
    }, {
        key: "daysInMonth",
        value: function daysInMonth() {
            // The 0th day of the next months is actually the last day in the current month
            var lastDayInMonth = new BaseDate(this.getFullYear(), this.getMonth() + 1, 0);
            return lastDayInMonth.getDate();
        }
    }, {
        key: "getDaysCountPerMonth",
        value: function getDaysCountPerMonth(index) {
            var months = [31, 28 + this.isLeapYear(), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            return months[index];
        }
    }, {
        key: "getDayInYear",
        value: function getDayInYear() {
            var month = this.getMonth();
            var totalDays = 0;
            for (var i = 0; i < month; i += 1) {
                totalDays += this.getDaysCountPerMonth(i);
            }
            return totalDays + this.getDate() - 1;
        }
    }, {
        key: "getWeekInYear",
        value: function getWeekInYear() {
            return (this.getDayInYear() - this.getWeekDay()) / 7;
        }
    }], [{
        key: "create",

        // Still need to do this mess because of Babel, should be removed when moving to native ES6
        value: function create(value) {
            // Try to do an educated guess if this date is in unix seconds or milliseconds
            if (arguments.length === 1 && isNumber(value) && value < MAX_AUTO_UNIX_TIME) {
                return instantiateNative(BaseDate, StemDate, value * 1000.0);
            } else {
                return instantiateNative.apply(undefined, [BaseDate, StemDate].concat(Array.prototype.slice.call(arguments)));
            }
        }
    }, {
        key: "toDate",
        value: function toDate(date) {
            if (date instanceof StemDate) {
                return date;
            } else {
                return new this(date);
            }
        }
    }, {
        key: "now",
        value: function now() {
            return new this(BaseDate.now());
        }
    }, {
        key: "fromUnixMilliseconds",
        value: function fromUnixMilliseconds(unixMilliseconds) {
            return this.create(new BaseDate(unixMilliseconds));
        }
    }, {
        key: "fromUnixSeconds",
        value: function fromUnixSeconds(unixSecons) {
            return this.fromUnixMilliseconds(unixSecons * 1000);
        }

        // Creates a Date object from an instance of DOMHighResTimeStamp, returned by performance.now() for instance

    }, {
        key: "fromHighResTimestamp",
        value: function fromHighResTimestamp(highResTimestamp) {
            return this.fromUnixMilliseconds(highResTimestamp + self.performance.timing.navigationStart);
        }

        // You don't usually need to call this in most cases, constructor uses MAX_AUX_UNIX_TIME

    }, {
        key: "unix",
        value: function unix(unixTime) {
            return this.fromUnixSeconds(unixTime);
        }
    }, {
        key: "min",
        value: function min() {
            // TODO: simplify and remove code duplication
            var result = this.constructor.toDate(arguments[0]);
            for (var index = 1; index < arguments.length; index++) {
                var candidate = this.constructor.toDate(arguments[index]);
                if (candidate.isBefore(result)) {
                    result = candidate;
                }
            }
            return result;
        }
    }, {
        key: "max",
        value: function max() {
            var result = this.constructor.toDate(arguments[0]);
            for (var index = 1; index < arguments.length; index++) {
                var candidate = this.constructor.toDate(arguments[index]);
                if (candidate.isAfter(result)) {
                    result = candidate;
                }
            }
            return result;
        }
    }, {
        key: "splitToTokens",
        value: function splitToTokens(str) {
            // TODO: "[HH]HH" will be split to ["HH", "HH"], so the escape does not solve the problem
            var tokens = [];
            var lastIsLetter = null;
            var escapeByCurlyBracket = false;
            var escapeBySquareBracket = false;
            for (var i = 0; i < str.length; i++) {
                var charCode = str.charCodeAt(i);
                if (charCode === 125 && escapeByCurlyBracket) {
                    // '}' ending the escape
                    escapeByCurlyBracket = false;
                    lastIsLetter = null;
                } else if (charCode === 93 && escapeBySquareBracket) {
                    // ']' ending the escape
                    escapeBySquareBracket = false;
                    lastIsLetter = null;
                } else if (escapeByCurlyBracket || escapeBySquareBracket) {
                    // The character is escaped no matter what it is
                    tokens[tokens.length - 1] += str[i];
                } else if (charCode === 123) {
                    // '{' starts a new escape
                    escapeByCurlyBracket = true;
                    tokens.push("");
                } else if (charCode === 91) {
                    // '[' starts a new escape
                    escapeBySquareBracket = true;
                    tokens.push("");
                } else {
                    var isLetter = 65 <= charCode && charCode <= 90 || 97 <= charCode && charCode <= 122;
                    if (isLetter === lastIsLetter) {
                        tokens[tokens.length - 1] += str[i];
                    } else {
                        tokens.push(str[i]);
                    }
                    lastIsLetter = isLetter;
                }
            }
            if (escapeByCurlyBracket || escapeBySquareBracket) {
                console.warn("Unfinished escaped sequence!");
            }
            return tokens;
        }
    }]);
    return StemDate;
}(BaseDate)) || _class$40;

Duration.prototype.format = function (pattern) {
    return StemDate.fromUnixMilliseconds(this.toMilliseconds()).utc().format(pattern);
};

var miniWeekDays = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
var shortWeekDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var longWeekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
var shortMonths = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var longMonths = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

var DateLocale = function () {
    function DateLocale() {
        var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, DateLocale);

        Object.assign(this, obj);
        this.formats = this.formats || {};
    }

    createClass(DateLocale, [{
        key: "getFormat",
        value: function getFormat(longDate) {
            return this.formats[longDate];
        }
    }, {
        key: "setFormat",
        value: function setFormat(pattern, func) {
            this.formats[pattern] = func;
        }
    }, {
        key: "format",
        value: function format(date, pattern) {
            return date.format(pattern);
        }
    }, {
        key: "getRelativeTime",
        value: function getRelativeTime() {
            throw Error("Not implemented");
        }
    }]);
    return DateLocale;
}();

StemDate.tokenFormattersMap = new Map([["ISO", function (date) {
    return date.toISOString();
}], ["Y", function (date) {
    return date.getFullYear();
}], ["YY", function (date) {
    return padNumber(date.getFullYear() % 100, 2);
}], ["YYYY", function (date) {
    return date.getFullYear();
}], ["M", function (date) {
    return date.getMonth() + 1;
}], ["MM", function (date) {
    return padNumber(date.getMonth() + 1, 2);
}], ["MMM", function (date) {
    return shortMonths[date.getMonth()];
}], ["MMMM", function (date) {
    return longMonths[date.getMonth()];
}], ["D", function (date) {
    return date.getDate();
}], ["Do", function (date) {
    return suffixWithOrdinal(date.getDate());
}], ["DD", function (date) {
    return padNumber(date.getDate(), 2);
}], ["d", function (date) {
    return date.getWeekDay();
}], ["do", function (date) {
    return suffixWithOrdinal(date.getWeekDay());
}], ["dd", function (date) {
    return miniWeekDays[date.getWeekDay()];
}], ["ddd", function (date) {
    return shortWeekDays[date.getWeekDay()];
}], ["dddd", function (date) {
    return longWeekdays[date.getWeekDay()];
}], ["H", function (date) {
    return date.getHours();
}], ["HH", function (date) {
    return padNumber(date.getHours(), 2);
}], ["h", function (date) {
    return date.getHours() % 12;
}], ["hh", function (date) {
    return padNumber(date.getHours() % 12, 2);
}], ["m", function (date) {
    return date.getMinutes();
}], ["mm", function (date) {
    return padNumber(date.getMinutes(), 2);
}], ["s", function (date) {
    return date.getSeconds();
}], ["ss", function (date) {
    return padNumber(date.getSeconds(), 2);
}], ["S", function (date) {
    return Math.floor(date.getMilliseconds() / 100);
}], ["SS", function (date) {
    return padNumber(Math.floor(date.getMilliseconds() / 10), 2);
}], ["SSS", function (date) {
    return padNumber(date.getMilliseconds(), 3);
}], ["ms", function (date) {
    return padNumber(date.getMilliseconds(), 3);
}], ["LL", function (date) {
    return date.format("MMMM Do, YYYY");
}]]);

var Date$1 = StemDate;

// File meant to handle server time/client time differences
var ServerTime = {
    now: function now() {
        return StemDate().subtract(this.getOffset());
    },
    getOffset: function getOffset() {
        return this.offset;
    },
    set: function set(date) {
        var onlyIfMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!onlyIfMissing || this.offset == null) {
            this.offset = Date.now() - new StemDate(date);
        }
    },
    setPageLoadTime: function setPageLoadTime(unixTime) {

        this.serverPageLoad = unixTime;
        this.offset = performance.timing.responseStart - unixTime * 1000;
    }
};

// TODO: should use +TimeUnit.DAY
var DAY_IN_MILLISECONDS = 24 * 60 * 60 * 1000;

// TODO: should have a generic method time1.isSame("x", time);
function isDifferentDay(timeA, timeB) {
    // return !StemDate(timeA).same(TimeUnit.DAY, timeB);
    timeA = StemDate(timeA);
    timeB = StemDate(timeB);

    // First check if difference is gre
    if (timeA.diff(timeB) > +TimeUnit.DAY) {
        return true;
    }
    // Check if different day of the month, when difference is less than a day
    return timeA.getDate() !== timeB.getDate();
}

// import {Button} from "./button/Button";

var DatePickerTable = function (_UI$Element) {
    inherits(DatePickerTable, _UI$Element);

    function DatePickerTable() {
        classCallCheck(this, DatePickerTable);
        return possibleConstructorReturn(this, (DatePickerTable.__proto__ || Object.getPrototypeOf(DatePickerTable)).apply(this, arguments));
    }

    return DatePickerTable;
}(UI.Element);

var TimePickerWidget = function (_UI$Element2) {
    inherits(TimePickerWidget, _UI$Element2);

    function TimePickerWidget() {
        classCallCheck(this, TimePickerWidget);
        return possibleConstructorReturn(this, (TimePickerWidget.__proto__ || Object.getPrototypeOf(TimePickerWidget)).apply(this, arguments));
    }

    createClass(TimePickerWidget, [{
        key: "render",
        value: function render() {
            var hours = parseInt(this.options.time / (60 * 60 * 1000));
            var minutes = parseInt((this.options.time - 60 * 60 * 1000 * hours) / (60 * 1000));
            var seconds = parseInt((this.options.time - 60 * 60 * 1000 * hours - 60 * 1000 * minutes) / 1000);
            var textSpanStyle = {
                display: "inline-block",
                flex: 1,
                textAlign: "center",
                fontSize: "1.5em",
                fontWeight: "bold",
                padding: "0 5px"
            };
            return [UI.createElement(
                "div",
                { style: { width: "130px", display: "flex" } },
                UI.createElement("div", { style: textSpanStyle, ref: "hours" }),
                UI.createElement(
                    "div",
                    { style: textSpanStyle },
                    ":"
                ),
                UI.createElement("div", { style: textSpanStyle, ref: "minutes" }),
                UI.createElement(
                    "div",
                    { style: textSpanStyle },
                    ":"
                ),
                UI.createElement("div", { style: textSpanStyle, ref: "seconds" })
            ), UI.createElement(
                "div",
                { style: { width: "130px", display: "flex" } },
                UI.createElement(VerticalSlideBar, { value: hours / 23, ref: "hourSlider", height: 200, barHeight: 5, style: { flex: 1 } }),
                UI.createElement("div", { style: { flex: 1 } }),
                UI.createElement(VerticalSlideBar, { value: minutes / 59, ref: "minuteSlider", height: 200, barHeight: 5, style: { flex: 1 } }),
                UI.createElement("div", { style: { flex: 1 } }),
                UI.createElement(VerticalSlideBar, { value: seconds / 59, ref: "secondSlider", height: 200, barHeight: 5, style: { flex: 1, marginRight: "5px" } })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            var changeCallback = function changeCallback() {
                var hours = parseInt(_this3.hourSlider.getValue() * 23);
                var minutes = parseInt(_this3.minuteSlider.getValue() * 59);
                var seconds = parseInt(_this3.secondSlider.getValue() * 59);
                _this3.hours.node.innerHTML = (hours < 10 ? "0" : "") + hours;
                _this3.minutes.node.innerHTML = (minutes < 10 ? "0" : "") + minutes;
                _this3.seconds.node.innerHTML = (seconds < 10 ? "0" : "") + seconds;
                var time = (hours * 60 * 60 + minutes * 60 + seconds) * 1000;
                _this3.dispatch("changeTime", time);
            };
            this.hourSlider.addListener("change", changeCallback);
            this.minuteSlider.addListener("change", changeCallback);
            this.secondSlider.addListener("change", changeCallback);
            changeCallback();
        }
    }]);
    return TimePickerWidget;
}(UI.Element);

var DateTimeWindow = function (_VolatileFloatingWind) {
    inherits(DateTimeWindow, _VolatileFloatingWind);

    function DateTimeWindow() {
        classCallCheck(this, DateTimeWindow);
        return possibleConstructorReturn(this, (DateTimeWindow.__proto__ || Object.getPrototypeOf(DateTimeWindow)).apply(this, arguments));
    }

    createClass(DateTimeWindow, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.style = Object.assign({
                marginBottom: "5px",
                border: "1px solid #bbb",
                borderRadius: "2px",
                position: "absolute",
                overflow: "auto",
                boxShadow: "0 6px 12px rgba(0,0,0,.175)",
                backgroundColor: "white",
                padding: "10px",
                zIndex: 10000
            }, options.style || {});
            get(DateTimeWindow.prototype.__proto__ || Object.getPrototypeOf(DateTimeWindow.prototype), "setOptions", this).call(this, options);
            this.computeInitial();
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(DatePickerTable, { ref: "datePicker", date: this.date }), UI.createElement(TimePickerWidget, { ref: "timePicker", time: this.time })];
        }
    }, {
        key: "computeInitial",
        value: function computeInitial() {
            var initialDateTime = StemDate.parse(this.formatISO(this.options.initialDateTime)) || StemDate.now();
            this.time = initialDateTime % DAY_IN_MILLISECONDS;
            this.date = parseInt(initialDateTime / DAY_IN_MILLISECONDS);
        }
    }, {
        key: "formatISO",
        value: function formatISO(str) {
            if (!str) {
                return "";
            }
            while (str.indexOf("/") !== -1) {
                str = str.replace("/", " ");
            }
            while (str.indexOf(":") !== -1) {
                str = str.replace(":", " ");
            }
            var tokens = str.split(" ");
            return tokens[2] + "-" + tokens[1] + "-" + tokens[0] + "T" + tokens[3] + ":" + tokens[4] + ":" + tokens[5] + ".000Z";
        }
    }, {
        key: "getValue",
        value: function getValue() {
            var currentDate = this.time + DAY_IN_MILLISECONDS * this.date;
            currentDate = StemDate.create(currentDate);
            var date = currentDate.toISOString();
            date = date.slice(8, 10) + "/" + date.slice(5, 7) + "/" + date.slice(0, 4);
            return date + " " + currentDate.toTimeString().slice(0, 8);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.options.output.setValue(this.getValue());
            this.datePicker.addListener("changeDate", function (date) {
                _this5.date = date;
                _this5.options.output.setValue(_this5.getValue());
            });
            this.timePicker.addListener("changeTime", function (time) {
                _this5.time = time;
                _this5.options.output.setValue(_this5.getValue());
            });
        }
    }]);
    return DateTimeWindow;
}(VolatileFloatingWindow);

var DateTimePicker$$1 = function (_UI$Element3) {
    inherits(DateTimePicker$$1, _UI$Element3);

    function DateTimePicker$$1() {
        classCallCheck(this, DateTimePicker$$1);
        return possibleConstructorReturn(this, (DateTimePicker$$1.__proto__ || Object.getPrototypeOf(DateTimePicker$$1)).apply(this, arguments));
    }

    createClass(DateTimePicker$$1, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.format = options.format || "DD/MM/YYYY HH:mm:ss";
            get(DateTimePicker$$1.prototype.__proto__ || Object.getPrototypeOf(DateTimePicker$$1.prototype), "setOptions", this).call(this, options);
            if (this.options.date) {
                this.setDate(this.options.date);
            }
        }
    }, {
        key: "parseDateFromString",
        value: function parseDateFromString(str, format) {
            if (format !== "DD/MM/YYYY HH:mm:ss") {
                throw Error("Format not supported!");
            }
            // Just parsing DD/MM/YYYY HH:mm:ss for now
            while (str.indexOf('/') !== -1) {
                str = str.replace('/', ' ');
            }
            while (str.indexOf(':') !== -1) {
                str = str.replace(':', ' ');
            }
            var tokens = str.split(' ');
            var integerTokens = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var token = _step.value;

                    var number = parseFloat(token);
                    if (!isNaN(number)) {
                        integerTokens.push(number);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var years = integerTokens.length >= 3 ? integerTokens[2] : 0;
            var months = integerTokens.length >= 2 ? integerTokens[1] - 1 : 0;
            var days = integerTokens.length >= 1 ? integerTokens[0] : 0;
            var hours = integerTokens.length >= 4 ? integerTokens[3] : 0;
            var minutes = integerTokens.length >= 5 ? integerTokens[4] : 0;
            var seconds = integerTokens.length >= 6 ? integerTokens[5] : 0;
            var date = new StemDate(years, months, days, hours, minutes, seconds);
            if (!date.getTime()) {
                return null;
            }
            return date;
        }
    }, {
        key: "getDate",
        value: function getDate() {
            var str = this.textInput.getValue();
            if (!str) {
                return null;
            }
            var format = this.options.format;
            return this.parseDateFromString(str, format);
        }
    }, {
        key: "setDate",
        value: function setDate(date) {
            this.options.date = date;
            this.options.dateString = date.format(this.options.format);
            if (this.textInput) {
                this.textInput.setValue(this.options.dateString);
            }
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(TextInput, { ref: "textInput", placeholder: this.options.format, value: this.options.dateString || "" })];
        }

        // onMount() {
        //     this.calendarSpan.addClickListener((event) => {
        //         if (!this.dateTimeWindow) {
        //             let textInputOffset = getOffset(this.textInput);
        //             this.dateTimeWindow = DateTimeWindow.create(document.body, {
        //                 style: {
        //                     top: textInputOffset.top + 5 + this.textInput.getHeight() + "px",
        //                     left: textInputOffset.left + 5 + "px"
        //                 },
        //                 initialDateTime: this.textInput.getValue(),
        //                 output: this.textInput
        //             });
        //         } else {
        //             this.dateTimeWindow.hide();
        //             delete this.dateTimeWindow;
        //         }
        //         event.stopPropagation();
        //     });
        // }

    }]);
    return DateTimePicker$$1;
}(UI.Element);

function enqueueIfNotLoaded(target, key, descriptor) {
    var method = descriptor.value;
    return Object.assign({}, descriptor, {
        value: function value() {
            if (this.isLoaded()) {
                return method.call.apply(method, [this].concat(Array.prototype.slice.call(arguments)));
            } else {
                this.enqueueMethodCall(method, arguments);
                return null;
            }
        }
    });
}

var EnqueueableMethodMixin = function EnqueueableMethodMixin(BaseClass) {
    return function (_BaseClass) {
        inherits(EnqueueableMethodClass, _BaseClass);

        function EnqueueableMethodClass() {
            classCallCheck(this, EnqueueableMethodClass);
            return possibleConstructorReturn(this, (EnqueueableMethodClass.__proto__ || Object.getPrototypeOf(EnqueueableMethodClass)).apply(this, arguments));
        }

        createClass(EnqueueableMethodClass, [{
            key: "isLoaded",
            value: function isLoaded() {
                throw Error("Not implemented!");
            }
        }, {
            key: "enqueueMethodCall",
            value: function enqueueMethodCall(method, args) {
                this.methodCallQueue = this.methodCallQueue || [];
                this.methodCallQueue.push([method, args]);
            }
        }, {
            key: "resolveQueuedMethods",
            value: function resolveQueuedMethods() {
                if (!this.isLoaded()) {
                    throw Error("Cannot process scheduled jobs, element not loaded");
                }
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = (this.methodCallQueue || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _methodCall$;

                        var methodCall = _step.value;

                        (_methodCall$ = methodCall[0]).call.apply(_methodCall$, [this].concat(toConsumableArray(methodCall[1])));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                delete this.methodCallQueue;
            }
        }]);
        return EnqueueableMethodClass;
    }(BaseClass);
};

var _class$41, _class2$7, _descriptor$16, _dec$19, _class4$1;

function _initDefineProp$17(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$17(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var CodeEditor = (_class$41 = function (_EnqueueableMethodMix) {
    inherits(CodeEditor, _EnqueueableMethodMix);

    function CodeEditor() {
        classCallCheck(this, CodeEditor);
        return possibleConstructorReturn(this, (CodeEditor.__proto__ || Object.getPrototypeOf(CodeEditor)).apply(this, arguments));
    }

    createClass(CodeEditor, [{
        key: "isLoaded",
        value: function isLoaded() {
            return !!this.getAce();
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            var defaultOptions = {
                aceMode: "text",
                readOnly: false,
                aceTheme: "dawn",
                aceKeyboardHandler: "ace",
                fontSize: 14,
                tabSize: 4,
                showLineNumber: true,
                showPrintMargin: false,
                printMarginSize: 80
            };
            options = Object.assign(defaultOptions, options);

            get(CodeEditor.prototype.__proto__ || Object.getPrototypeOf(CodeEditor.prototype), "setOptions", this).call(this, options);

            if (this.options.aceMode) {
                this.options.aceMode = this.options.aceMode.toLowerCase();
            }

            if (this.options.aceMode === "cpp" || this.options.aceMode === "c") {
                this.options.aceMode = "c_cpp";
            }

            if (this.getAce()) {
                this.applyAceOptions();
            }
        }
    }, {
        key: "redraw",
        value: function redraw() {
            if (this.getAce()) {
                this.aceResize();
                this.applyRef();
                return;
            }
            get(CodeEditor.prototype.__proto__ || Object.getPrototypeOf(CodeEditor.prototype), "redraw", this).call(this);
        }
    }, {
        key: "whenLoaded",
        value: function whenLoaded(callback) {
            if (this.isLoaded()) {
                callback();
            } else {
                this.addListenerOnce("aceReady", callback);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            // Sometimes when the parent div resizes the ace editor doesn't fully update.
            this.addListener("resize", function () {
                _this2.aceResize();
            });

            this.addListener("change", function () {
                _this2.aceResize();
            });

            if (!window.ace) {
                this.constructor.requireAce(function () {
                    _this2.onDelayedMount();
                });
                return;
            }
            this.onDelayedMount();
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {
            var _this3 = this;

            this.ace = window.ace.edit(this.node);

            // Removes some warnings
            this.getAce().$blockScrolling = Infinity;

            this.resolveQueuedMethods();

            this.applyAceOptions();

            //#voodoo was here to automatically redraw when unhiding
            //This Ace event listener might be useful in the future
            this.getAce().renderer.$textLayer.addEventListener("changeCharacterSize", function (event) {
                _this3.aceResize();
            });
            this.dispatch("aceReady");
        }
    }, {
        key: "getAce",
        value: function getAce() {
            return this.ace;
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.getAce().getValue();
        }
    }, {
        key: "applyAceOptions",
        value: function applyAceOptions() {
            var _this4 = this;

            //set the language mode
            this.setAceMode(this.options.aceMode);
            this.setAceKeyboardHandler(this.options.aceKeyboardHandler);
            this.setAceTheme(this.options.aceTheme);
            this.setAceFontSize(this.options.fontSize);
            this.setAceTabSize(this.options.tabSize);
            this.setAceLineNumberVisible(this.options.showLineNumber);
            this.setAcePrintMarginVisible(this.options.showPrintMargin);
            this.setAcePrintMarginSize(this.options.printMarginSize);
            this.setReadOnly(this.options.readOnly);
            this.setUseWrapMode(this.options.lineWrapping || false);

            if (this.options.numLines) {
                this.options.maxLines = this.options.minLines = this.options.numLines;
            }

            if (this.options.maxLines) {
                this.setAceOptions({
                    maxLines: this.options.maxLines
                });
            }

            if (this.options.minLines) {
                this.setAceOptions({
                    minLines: this.options.minLines
                });
            }

            if (this.options.value) {
                this.setValue(this.options.value, -1);
            }
            if (this.options.hasOwnProperty("enableBasicAutocompletion") || this.options.hasOwnProperty("enableLiveAutocompletion")) {
                var langTools = "/static/js/ext/ace/ext-language_tools.js";
                require([langTools], function () {
                    _this4.setBasicAutocompletion(_this4.options.enableBasicAutocompletion);
                    _this4.setLiveAutocompletion(_this4.options.enableLiveAutocompletion);
                    _this4.setSnippets(_this4.options.enableSnippets);
                });
            }
        }
    }, {
        key: "aceResize",
        value: function aceResize() {
            this.getAce().resize();
        }
    }, {
        key: "setValue",
        value: function setValue(sourceCode, fakeUserChange) {
            // We need to wrap the ace call in these flags so any event listeners can know if this change
            // was done by us or by the user
            this.apiChange = !fakeUserChange;
            this.getAce().setValue(sourceCode, -1);
            this.apiChange = false;
        }
    }, {
        key: "setAceOptions",
        value: function setAceOptions(options) {
            this.getAce().setOptions(options);
        }

        // TODO: should this be setEditable?

    }, {
        key: "setReadOnly",
        value: function setReadOnly(value) {
            this.getAce().setReadOnly(value);
        }
    }, {
        key: "setAceMode",
        value: function setAceMode(aceMode) {
            if (aceMode.hasOwnProperty("aceMode")) {
                aceMode = aceMode.aceMode;
            }
            this.getAce().getSession().setMode("ace/mode/" + aceMode);
        }
    }, {
        key: "getAceKeyboardHandler",
        value: function getAceKeyboardHandler() {
            return this.getAce().$keybindingId;
        }
    }, {
        key: "setAceKeyboardHandler",
        value: function setAceKeyboardHandler(keyboardHandler) {
            if (keyboardHandler.hasOwnProperty("aceName")) {
                keyboardHandler = keyboardHandler.aceName;
            }
            this.getAce().setKeyboardHandler("ace/keyboard/" + keyboardHandler);
        }
    }, {
        key: "getAceMode",
        value: function getAceMode() {
            return this.getAce().getSession().getMode();
        }
    }, {
        key: "setAceTheme",
        value: function setAceTheme(theme) {
            if (theme.hasOwnProperty("aceName")) {
                theme = theme.aceName;
            }
            this.getAce().setTheme("ace/theme/" + theme);
        }
    }, {
        key: "getAceTheme",
        value: function getAceTheme() {
            return this.getAce().getTheme();
        }
    }, {
        key: "setAceFontSize",
        value: function setAceFontSize(fontSize) {
            this.getAce().setOptions({
                fontSize: fontSize + "px"
            });
        }
    }, {
        key: "getAceFontSize",
        value: function getAceFontSize() {
            return this.getAce().getFontSize();
        }
    }, {
        key: "setAceTabSize",
        value: function setAceTabSize(tabSize) {
            this.getAce().setOptions({
                tabSize: tabSize
            });
        }
    }, {
        key: "getAceTabSize",
        value: function getAceTabSize() {
            return this.getAce().getOption("tabSize");
        }
    }, {
        key: "setAceLineNumberVisible",
        value: function setAceLineNumberVisible(value) {
            this.getAce().renderer.setShowGutter(value);
        }
    }, {
        key: "getAceLineNumberVisible",
        value: function getAceLineNumberVisible() {
            return this.getAce().renderer.getShowGutter();
        }
    }, {
        key: "setAcePrintMarginVisible",
        value: function setAcePrintMarginVisible(value) {
            this.getAce().setShowPrintMargin(value);
        }
    }, {
        key: "getAcePrintMarginVisible",
        value: function getAcePrintMarginVisible() {
            return this.getAce().getShowPrintMargin();
        }
    }, {
        key: "setAcePrintMarginSize",
        value: function setAcePrintMarginSize(printMarginSize) {
            this.getAce().setPrintMarginColumn(printMarginSize);
        }
    }, {
        key: "getAcePrintMarginSize",
        value: function getAcePrintMarginSize() {
            return this.getAce().getPrintMarginColumn();
        }
    }, {
        key: "setBasicAutocompletion",
        value: function setBasicAutocompletion(value) {
            this.getAce().setOptions({
                enableBasicAutocompletion: value
            });
        }
    }, {
        key: "setLiveAutocompletion",
        value: function setLiveAutocompletion(value) {
            this.getAce().setOptions({
                enableLiveAutocompletion: value
            });
        }
    }, {
        key: "setSnippets",
        value: function setSnippets(value) {
            this.getAce().setOptions({
                enableSnippets: value
            });
        }
    }, {
        key: "setAnnotations",
        value: function setAnnotations(annotations) {
            this.getAce().getSession().setAnnotations(annotations);
        }
    }, {
        key: "setUseWrapMode",
        value: function setUseWrapMode(value) {
            this.getAce().getSession().setUseWrapMode(value);
        }
    }, {
        key: "setIndentedSoftWrap",
        value: function setIndentedSoftWrap(value) {
            this.getAce().setOption("indentedSoftWrap", value);
        }
    }, {
        key: "blockScroll",
        value: function blockScroll() {
            this.getAce().$blockScrolling = Infinity;
        }
    }, {
        key: "setFoldStyle",
        value: function setFoldStyle(foldStyle) {
            this.getAce().getSession().setFoldStyle(foldStyle);
        }
    }, {
        key: "setHighlightActiveLine",
        value: function setHighlightActiveLine(value) {
            this.getAce().setHighlightActiveLine(value);
        }
    }, {
        key: "setHighlightGutterLine",
        value: function setHighlightGutterLine(value) {
            this.getAce().setHighlightGutterLine(value);
        }
    }, {
        key: "setShowGutter",
        value: function setShowGutter(value) {
            this.getAce().renderer.setShowGutter(value);
        }
    }, {
        key: "getScrollTop",
        value: function getScrollTop() {
            return this.getAce().getSession().getScrollTop();
        }
    }, {
        key: "setScrollTop",
        value: function setScrollTop(value) {
            this.getAce().getSession().setScrollTop(value);
        }
    }, {
        key: "addMarker",
        value: function addMarker(startLine, startCol, endLine, endCol) {
            var _getAce$getSession;

            var Range = this.constructor.AceRange;

            for (var _len = arguments.length, args = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
                args[_key - 4] = arguments[_key];
            }

            return (_getAce$getSession = this.getAce().getSession()).addMarker.apply(_getAce$getSession, [new Range(startLine, startCol, endLine, endCol)].concat(args));
        }
    }, {
        key: "removeMarker",
        value: function removeMarker(marker) {
            this.getAce().getSession().removeMarker(marker);
        }
    }, {
        key: "getRendererLineHeight",
        value: function getRendererLineHeight() {
            return this.getAce().renderer.lineHeight;
        }
    }, {
        key: "getTextRange",
        value: function getTextRange(startLine, startCol, endLine, endCol) {
            var Range = this.constructor.AceRange;
            return this.getAce().getSession().doc.getTextRange(new Range(startLine, startCol, endLine, endCol));
        }
    }, {
        key: "setTextRange",
        value: function setTextRange(startLine, startCol, endLine, endCol, text) {
            var Range = this.constructor.AceRange;
            this.getAce().getSession().replace(new Range(startLine, startCol, endLine, endCol), text);
        }
    }, {
        key: "removeLine",
        value: function removeLine(line) {
            var Range = this.constructor.AceRange;
            this.getAce().getSession().getDocument().remove(new Range(line, 0, line + 1, 0));
        }
    }, {
        key: "insertAtLine",
        value: function insertAtLine(line, str) {
            var column = this.getAce().session.getLine(line - 1).length;
            this.getAce().gotoLine(line, column);
            this.insert(str);
        }
    }, {
        key: "replaceLine",
        value: function replaceLine(line, str) {
            var Range = this.constructor.AceRange;
            this.getAce().getSession().getDocument().replace(new Range(line, 0, line + 1, 0), str);
        }
    }, {
        key: "addAceSessionEventListener",
        value: function addAceSessionEventListener(event, callback) {
            this.getAce().getSession().addEventListener(event, callback);
        }
    }, {
        key: "addAceSessionChangeListener",
        value: function addAceSessionChangeListener(callback) {
            this.addAceSessionEventListener("change", callback);
        }
    }, {
        key: "addAceChangeListener",
        value: function addAceChangeListener(callback) {
            this.getAce().on("change", callback);
        }
    }, {
        key: "addAceEventListener",
        value: function addAceEventListener() {
            var _getAce;

            (_getAce = this.getAce()).addEventListener.apply(_getAce, arguments);
        }
    }, {
        key: "focus",
        value: function focus$$1() {
            this.getAce().focus();
        }
    }, {
        key: "gotoEnd",
        value: function gotoEnd() {
            var editor = this.getAce();
            var editorRow = editor.session.getLength() - 1;
            var editorColumn = editor.session.getLine(editorRow).length;
            editor.gotoLine(editorRow + 1, editorColumn);
        }
    }, {
        key: "setUndoManager",
        value: function setUndoManager(undoManager) {
            this.getAce().getSession().setUndoManager(undoManager);
        }
    }, {
        key: "setAceRendererOption",
        value: function setAceRendererOption(key, value) {
            this.getAce().renderer.setOption(key, value);
        }

        // Inserts the text at the current cursor position

    }, {
        key: "insert",
        value: function insert(text) {
            this.getAce().insert(text);
        }

        // Appends the text at the end of the document

    }, {
        key: "append",
        value: function append(text) {
            var lastRow = this.getAce().getSession().getLength() - 1;
            if (lastRow < 0) {
                lastRow = 0;
            }
            var lastRowLength = this.getAce().getSession().getLine(lastRow).length;
            var scrolledToBottom = this.getAce().isRowFullyVisible(lastRow);
            // console.log("Scroll to bottom ", scrolledToBottom);
            this.getAce().getSession().insert({
                row: lastRow,
                column: lastRowLength
            }, text);

            this.aceResize();

            if (scrolledToBottom) {
                // TODO: Include scroll lock option!
                // TODO: See if scrolling to bottom can be done better
                // TODO: for some reason the scroll bar height is not being updated, this needs to be fixed
                this.getAce().scrollToLine(this.getAce().getSession().getLength() - 1, true, true, function () {});
            }
        }
    }, {
        key: "copyTextToClipboard",
        value: function copyTextToClipboard() {
            this.getAce().selectAll();
            this.getAce().focus();
            document.execCommand('copy');
        }
    }], [{
        key: "requireAce",
        value: function requireAce(callback) {
            throw Error("You need to implement requireAce");
        }
    }]);
    return CodeEditor;
}(EnqueueableMethodMixin(UI.Element)), _applyDecoratedDescriptor$17(_class$41.prototype, "applyAceOptions", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "applyAceOptions"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "aceResize", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "aceResize"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setValue", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setValue"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAceOptions", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAceOptions"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setReadOnly", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setReadOnly"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAceMode", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAceMode"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAceKeyboardHandler", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAceKeyboardHandler"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAceTheme", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAceTheme"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAceFontSize", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAceFontSize"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAceTabSize", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAceTabSize"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAceLineNumberVisible", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAceLineNumberVisible"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAcePrintMarginVisible", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAcePrintMarginVisible"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAcePrintMarginSize", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAcePrintMarginSize"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setBasicAutocompletion", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setBasicAutocompletion"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setLiveAutocompletion", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setLiveAutocompletion"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setSnippets", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setSnippets"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAnnotations", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAnnotations"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setUseWrapMode", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setUseWrapMode"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setIndentedSoftWrap", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setIndentedSoftWrap"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "blockScroll", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "blockScroll"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setFoldStyle", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setFoldStyle"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setHighlightActiveLine", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setHighlightActiveLine"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setHighlightGutterLine", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setHighlightGutterLine"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setShowGutter", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setShowGutter"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setScrollTop", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setScrollTop"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "addMarker", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "addMarker"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "removeMarker", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "removeMarker"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setTextRange", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setTextRange"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "removeLine", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "removeLine"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "insertAtLine", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "insertAtLine"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "replaceLine", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "replaceLine"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "addAceSessionEventListener", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "addAceSessionEventListener"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "addAceSessionChangeListener", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "addAceSessionChangeListener"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "addAceChangeListener", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "addAceChangeListener"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "addAceEventListener", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "addAceEventListener"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "focus", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "focus"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "gotoEnd", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "gotoEnd"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setUndoManager", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setUndoManager"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "setAceRendererOption", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "setAceRendererOption"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "insert", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "insert"), _class$41.prototype), _applyDecoratedDescriptor$17(_class$41.prototype, "append", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class$41.prototype, "append"), _class$41.prototype), _class$41);
var StaticCodeHighlighterStyle = (_class2$7 = function (_StyleSheet) {
    inherits(StaticCodeHighlighterStyle, _StyleSheet);

    function StaticCodeHighlighterStyle() {
        var _ref;

        var _temp, _this5, _ret;

        classCallCheck(this, StaticCodeHighlighterStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret = (_temp = (_this5 = possibleConstructorReturn(this, (_ref = StaticCodeHighlighterStyle.__proto__ || Object.getPrototypeOf(StaticCodeHighlighterStyle)).call.apply(_ref, [this].concat(args))), _this5), _initDefineProp$17(_this5, "hideActive", _descriptor$16, _this5), _temp), possibleConstructorReturn(_this5, _ret);
    }

    return StaticCodeHighlighterStyle;
}(StyleSheet), _descriptor$16 = _applyDecoratedDescriptor$17(_class2$7.prototype, "hideActive", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            " .ace_gutter-active-line": {
                display: "none"
            },
            " .ace_active-line": {
                display: "none"
            },
            " .ace_cursor": {
                display: "none"
            }
        };
    }
}), _class2$7);
var StaticCodeHighlighter = (_dec$19 = registerStyle(StaticCodeHighlighterStyle), _dec$19(_class4$1 = function (_CodeEditor) {
    inherits(StaticCodeHighlighter, _CodeEditor);

    function StaticCodeHighlighter() {
        classCallCheck(this, StaticCodeHighlighter);
        return possibleConstructorReturn(this, (StaticCodeHighlighter.__proto__ || Object.getPrototypeOf(StaticCodeHighlighter)).apply(this, arguments));
    }

    createClass(StaticCodeHighlighter, [{
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign({
                fontSize: 13,
                readOnly: true,
                lineWrapping: true
            }, options);
            get(StaticCodeHighlighter.prototype.__proto__ || Object.getPrototypeOf(StaticCodeHighlighter.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.hideActive);
        }
    }]);
    return StaticCodeHighlighter;
}(CodeEditor)) || _class4$1);

// Class that for every markup tag returns the UI class to instantiate for that element

var MarkupClassMap = function () {
    function MarkupClassMap(fallback) {
        var extraClasses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        classCallCheck(this, MarkupClassMap);

        this.classMap = new Map();
        this.fallback = fallback;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = extraClasses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var extraClass = _step.value;

                this.addClass(extraClass[0], extraClass[1]);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }

    createClass(MarkupClassMap, [{
        key: "addClass",
        value: function addClass(className, classObject) {
            this.classMap.set(className, classObject);
        }
    }, {
        key: "registerDependencies",
        value: function registerDependencies(dependencies) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var dependency = _step2.value;

                    if (dependency && dependency.registerMarkup) {
                        dependency.registerMarkup(this);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "getClass",
        value: function getClass(className) {
            var classObject = this.classMap.get(className);
            if (!classObject && this.fallback) {
                classObject = this.fallback.getClass(className);
            }
            return classObject;
        }
    }, {
        key: "get",
        value: function get$$1(className) {
            return this.getClass(className);
        }
    }, {
        key: "has",
        value: function has(className) {
            return this.getClass(className);
        }
    }], [{
        key: "addClass",
        value: function addClass(className, classObject) {
            this.GLOBAL.addClass(className, classObject);
        }
    }]);
    return MarkupClassMap;
}();

MarkupClassMap.GLOBAL = new MarkupClassMap();

var MarkupRenderer = function (_Panel) {
    inherits(MarkupRenderer, _Panel);

    function MarkupRenderer() {
        classCallCheck(this, MarkupRenderer);
        return possibleConstructorReturn(this, (MarkupRenderer.__proto__ || Object.getPrototypeOf(MarkupRenderer)).apply(this, arguments));
    }

    createClass(MarkupRenderer, [{
        key: "setOptions",
        value: function setOptions(options) {
            if (!options.classMap) {
                options.classMap = new MarkupClassMap(MarkupClassMap.GLOBAL);
            }
            if (!options.parser) {
                options.parser = new MarkupParser({
                    uiElements: options.classMap
                });
            }
            get(MarkupRenderer.prototype.__proto__ || Object.getPrototypeOf(MarkupRenderer.prototype), "setOptions", this).call(this, options);

            this.setValue(this.options.value || "");
            if (this.options.classMap) {
                this.classMap = this.options.classMap;
            }
        }
    }, {
        key: "setValue",
        value: function setValue(value) {
            if (typeof value === "string") {
                this.options.rawValue = value;
                try {
                    value = this.options.parser.parse(value);
                } catch (e) {
                    console.error("Can't parse ", value, e);
                    value = {
                        tag: "span",
                        children: [value]
                    };
                }
            }
            this.options.value = value;
        }
    }, {
        key: "reparse",
        value: function reparse() {
            if (this.options.rawValue) {
                this.setValue(this.options.rawValue);
            }
        }
    }, {
        key: "registerDependencies",
        value: function registerDependencies(dependencies) {
            if (dependencies.length > 0) {
                this.classMap.registerDependencies(dependencies);
                this.reparse();
            }
        }
    }, {
        key: "addClass",
        value: function addClass(className, classObject) {
            this.classMap.addClass(className, classObject);
        }
    }, {
        key: "getClass",
        value: function getClass(className) {
            return this.classMap.getClass(className);
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.options.value;
        }
    }, {
        key: "convertToUI",
        value: function convertToUI(value) {
            var _this2 = this;

            if (value instanceof UI.TextElement || value instanceof UI.Element) {
                // TODO: investigate this!
                return value;
            }

            if (typeof value === "string") {
                return new UI.TextElement(value);
            }
            if (Array.isArray(value)) {
                return value.map(function (x) {
                    return _this2.convertToUI(x);
                });
            }
            if (value.children) {
                value.children = this.convertToUI(value.children);
            }

            var classObject = this.getClass(value.tag) || value.tag;

            // TODO: maybe just copy to another object, not delete?
            //delete value.tag;
            return UI.createElement.apply(UI, [classObject, value].concat(toConsumableArray(value.children || [])));
        }
    }, {
        key: "render",
        value: function render() {
            return this.convertToUI(this.getValue());
        }
    }]);
    return MarkupRenderer;
}(Panel);

MarkupClassMap.addClass("CodeSnippet", StaticCodeHighlighter);

var SafeUriEnhancer = function SafeUriEnhancer(BaseClass, attribute) {
    return function (_BaseClass) {
        inherits(SafeUriClass, _BaseClass);

        function SafeUriClass() {
            classCallCheck(this, SafeUriClass);
            return possibleConstructorReturn(this, (SafeUriClass.__proto__ || Object.getPrototypeOf(SafeUriClass)).apply(this, arguments));
        }

        createClass(SafeUriClass, [{
            key: "setOptions",
            value: function setOptions(options) {
                if (options.hasOwnProperty(attribute) && !this.constructor.isSafeUri(options[attribute])) {
                    return get(SafeUriClass.prototype.__proto__ || Object.getPrototypeOf(SafeUriClass.prototype), "setOptions", this).call(this, Object.assign({}, options, defineProperty({}, attribute, undefined)));
                }
                return get(SafeUriClass.prototype.__proto__ || Object.getPrototypeOf(SafeUriClass.prototype), "setOptions", this).call(this, options);
            }
        }], [{
            key: "isSafeUri",
            value: function isSafeUri(uri) {
                return uri.indexOf(":") === -1 || uri.startsWith("http:") || uri.startsWith("https:") || uri.startsWith("mailto:");
            }
        }]);
        return SafeUriClass;
    }(BaseClass);
};

MarkupClassMap.addClass("Link", SafeUriEnhancer(Link, "href"));
MarkupClassMap.addClass("Image", SafeUriEnhancer(Image$1, "src"));

var State = function (_Dispatchable) {
    inherits(State, _Dispatchable);

    function State() {
        classCallCheck(this, State);

        var _this = possibleConstructorReturn(this, (State.__proto__ || Object.getPrototypeOf(State)).call(this));

        _this.stores = new Map();
        // A version of applyEvent that's binded to this
        // TODO: applyEvent should use the @bind decorator
        _this.applyEventWrapper = function (event) {
            _this.applyEvent(event);
        };
        return _this;
    }

    createClass(State, [{
        key: "getStore",
        value: function getStore(objectType) {
            objectType = objectType && objectType.toLowerCase();
            return this.stores.get(objectType);
        }
    }, {
        key: "getStoreForEvent",
        value: function getStoreForEvent(event) {
            var objectType = event.objectType || event.store;
            return this.getStore(objectType);
        }
    }, {
        key: "addStore",
        value: function addStore(store) {
            var objectType = store.objectType.toLowerCase();
            if (!this.stores.has(objectType)) {
                this.stores.set(objectType, store);
            } else {
                throw Error("GlobalState: Adding a store for an existing object type: " + store.objectType);
            }
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event == null) {
                return;
            }
            if (Array.isArray(event)) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = event[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var individualEvent = _step.value;

                        this.applyEvent(individualEvent);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                return;
            }
            if (event.state) {
                this.importState(event.state);
                // We can have events that only have a state
                if (!this.getStoreForEvent(event)) {
                    return;
                }
            }
            var store = this.getStoreForEvent(event);
            if (store) {
                return store.applyEvent(event);
            } else {
                console.log("GlobalState: Missing store for event: ", event);
            }
        }
    }, {
        key: "get",
        value: function get$$1(objectType, objectId) {
            var store = this.getStore(objectType);
            if (store) {
                var args = Array.prototype.slice.call(arguments, 1);
                return store.get.apply(store, toConsumableArray(args));
            } else {
                console.error("GlobalState: Can't find store ", objectType);
                return null;
            }
        }

        // Import the store for objectType and remove it from stateMap

    }, {
        key: "importStateFromTempMap",
        value: function importStateFromTempMap(objectType, stateMap) {
            var storeState = stateMap.get(objectType);
            stateMap.delete(objectType);

            var store = this.getStore(objectType);

            if (!store) {
                console.error("Failed to import state, can't find store ", objectType);
                return;
            }
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = store.getDependencies()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var dependency = _step2.value;

                    this.importStateFromTempMap(dependency.toLowerCase(), stateMap);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            store.importState(storeState);
        }

        // Imports the state information from a plain object

    }, {
        key: "importState",
        value: function importState(state) {
            if (Array.isArray(state)) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = state[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var obj = _step3.value;

                        this.importState(obj);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                return;
            }
            // Import everything in a map and then do an implicit topological sort by dependencies
            var stateMap = new Map();
            for (var objectType in state) {
                stateMap.set(objectType.toLowerCase(), state[objectType]);
            }
            while (stateMap.size > 0) {
                var allKeys = stateMap.keys();
                var _objectType = allKeys.next().value;
                this.importStateFromTempMap(_objectType, stateMap);
            }
        }
    }]);
    return State;
}(Dispatchable);

var GlobalState = new State();

// When creating a store without an explicit state, this value should be assumes
// Change it to null for instance of you don't want stores to be added to any state by default
var DefaultState = GlobalState;

self.GlobalState = GlobalState;

// The store information is kept in a symbol, to not interfere with serialization/deserialization
var StoreSymbol = Symbol("Store");

var StoreObject = function (_Dispatchable) {
    inherits(StoreObject, _Dispatchable);

    function StoreObject(obj, event, store) {
        classCallCheck(this, StoreObject);

        var _this = possibleConstructorReturn(this, (StoreObject.__proto__ || Object.getPrototypeOf(StoreObject)).call(this));

        Object.assign(_this, obj);
        _this.setStore(store);
        return _this;
    }

    createClass(StoreObject, [{
        key: "setStore",
        value: function setStore(store) {
            this[StoreSymbol] = store;
        }
    }, {
        key: "getStore",
        value: function getStore() {
            return this[StoreSymbol];
        }

        // By default, applying an event just shallow copies the fields from event.data

    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            Object.assign(this, event.data);
        }
    }, {
        key: "addUpdateListener",


        // Add a listener for all updates, callback will receive the events after they were applied
        value: function addUpdateListener(callback) {
            return this.addListener("update", callback);
        }
    }, {
        key: "addDeleteListener",
        value: function addDeleteListener(callback) {
            return this.addListener("delete", callback);
        }

        // Add a listener on updates from events with this specific type.
        // Can accept an array as eventType
        // Returns an object that implements the Cleanup interface.

    }, {
        key: "addEventListener",
        value: function addEventListener(eventType, callback) {
            var _this2 = this;

            if (Array.isArray(eventType)) {
                var handlers = eventType.map(function (e) {
                    return _this2.addEventListener(e, callback);
                });
                return new CleanupJobs(handlers);
            }
            // Ensure the private event dispatcher exists
            if (!this._eventDispatcher) {
                this._eventDispatcher = new Dispatchable();
                this.addUpdateListener(function (event) {
                    _this2._eventDispatcher.dispatch(event.type, event, _this2);
                });
            }
            return this._eventDispatcher.addListener(eventType, callback);
        }
    }, {
        key: "getStreamName",
        value: function getStreamName() {
            throw "getStreamName not implemented";
        }
    }, {
        key: "registerToStream",
        value: function registerToStream() {
            this.getStore().getState().registerStream(this.getStreamName());
        }
    }], [{
        key: "getStoreName",
        value: function getStoreName() {
            return this.name;
        }
    }]);
    return StoreObject;
}(Dispatchable);

var BaseStore = function (_Dispatchable2) {
    inherits(BaseStore, _Dispatchable2);

    function BaseStore(objectType) {
        var ObjectWrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StoreObject;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck(this, BaseStore);

        var _this3 = possibleConstructorReturn(this, (BaseStore.__proto__ || Object.getPrototypeOf(BaseStore)).call(this));

        _this3.options = options;
        _this3.objectType = objectType.toLowerCase();
        _this3.ObjectWrapper = ObjectWrapper;
        _this3.attachToState();
        return _this3;
    }

    createClass(BaseStore, [{
        key: "attachToState",
        value: function attachToState() {
            if (this.getState()) {
                this.getState().addStore(this);
            }
        }
    }, {
        key: "getState",
        value: function getState() {
            // Allow explicit no state
            if (this.options.hasOwnProperty("state")) {
                return this.options.state;
            } else {
                return DefaultState;
            }
        }

        // Is used by the state object to see which stores need to be loaded first

    }, {
        key: "getDependencies",
        value: function getDependencies() {
            return this.options.dependencies || [];
        }
    }]);
    return BaseStore;
}(Dispatchable);

// Store type primarily intended to store objects that come from a server DB, and have a unique numeric .id field


var GenericObjectStore = function (_BaseStore) {
    inherits(GenericObjectStore, _BaseStore);

    function GenericObjectStore(objectType) {
        classCallCheck(this, GenericObjectStore);

        var _this4 = possibleConstructorReturn(this, (GenericObjectStore.__proto__ || Object.getPrototypeOf(GenericObjectStore)).apply(this, arguments));

        _this4.objects = new Map();
        return _this4;
    }

    createClass(GenericObjectStore, [{
        key: "has",
        value: function has(id) {
            return !!this.get(id);
        }
    }, {
        key: "get",
        value: function get$$1(id) {
            if (id == null) {
                return null;
            }
            return this.objects.get(parseInt(id));
        }
    }, {
        key: "getObjectIdForEvent",
        value: function getObjectIdForEvent(event) {
            return event.objectId || event.data.id;
        }
    }, {
        key: "getObjectForEvent",
        value: function getObjectForEvent(event) {
            var objectId = this.getObjectIdForEvent(event);
            return this.get(objectId);
        }

        // TODO: should this default to iterable?

    }, {
        key: "all",
        value: function all(asIterable) {
            var values = this.objects.values();
            if (!asIterable) {
                values = Array.from(values);
            }
            return values;
        }
    }, {
        key: "createObject",
        value: function createObject(event) {
            var obj = new this.ObjectWrapper(event.data, event, this);
            obj.setStore(this);
            return obj;
        }
    }, {
        key: "applyCreateEvent",
        value: function applyCreateEvent(event) {
            var sendDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var existingObject = this.getObjectForEvent(event);

            if (existingObject) {
                var refreshEvent = Object.assign({}, event);
                refreshEvent.type = "refresh";
                existingObject.applyEvent(refreshEvent);
                existingObject.dispatch("update", event);
                return existingObject;
            } else {
                var newObject = this.createObject(event);
                this.objects.set(this.getObjectIdForEvent(event), newObject);

                if (sendDispatch) {
                    this.dispatch("create", newObject, event);
                }
                return newObject;
            }
        }
    }, {
        key: "applyUpdateOrCreateEvent",
        value: function applyUpdateOrCreateEvent(event) {
            var obj = this.getObjectForEvent(event);
            if (!obj) {
                obj = this.applyCreateEvent(event, false);
                this.dispatch("create", obj, event);
            } else {
                this.applyEventToObject(obj, event);
            }
            this.dispatch("updateOrCreate", obj, event);
            return obj;
        }
    }, {
        key: "applyDeleteEvent",
        value: function applyDeleteEvent(event) {
            var objDeleted = this.getObjectForEvent(event);
            if (objDeleted) {
                this.objects.delete(this.getObjectIdForEvent(event));
                objDeleted.dispatch("delete", event, objDeleted);
                this.dispatch("delete", objDeleted, event);
            }
            return objDeleted;
        }
    }, {
        key: "applyEventToObject",
        value: function applyEventToObject(obj, event) {
            obj.applyEvent(event);
            obj.dispatch("update", event);
            this.dispatch("update", obj, event);
            return obj;
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            event.data = event.data || {};

            if (event.type === "create") {
                return this.applyCreateEvent(event);
            } else if (event.type === "delete") {
                return this.applyDeleteEvent(event);
            } else if (event.type === "updateOrCreate") {
                return this.applyUpdateOrCreateEvent(event);
            } else {
                var obj = this.getObjectForEvent(event);
                if (!obj) {
                    console.error("I don't have object of type ", this.objectType, " ", event.objectId);
                    return;
                }
                return this.applyEventToObject(obj, event);
            }
        }
    }, {
        key: "importState",
        value: function importState(objects) {
            objects = objects || [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = objects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var obj = _step.value;

                    this.fakeCreate(obj);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        // Create a fake creation event, to insert the raw object

    }, {
        key: "fakeCreate",
        value: function fakeCreate(obj) {
            var eventType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "fakeCreate";

            if (!obj) {
                return;
            }
            var event = {
                objectType: this.objectType,
                objectId: obj.id,
                type: eventType,
                data: obj
            };
            return this.applyCreateEvent(event);
        }

        // Add a listener on all object creation events
        // If fakeExisting, will also pass existing objects to your callback

    }, {
        key: "addCreateListener",
        value: function addCreateListener(callback, fakeExisting) {
            if (fakeExisting) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = this.objects.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var object = _step2.value;

                        var _event = {
                            objectType: this.objectType,
                            objectId: object.id,
                            type: "fakeCreate",
                            data: object
                        };
                        callback(object, _event);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }

            return this.addListener("create", callback);
        }

        // Add a listener for any updates to objects in store
        // The callback will receive the object and the event

    }, {
        key: "addUpdateListener",
        value: function addUpdateListener(callback) {
            return this.addListener("update", callback);
        }

        // Add a listener for any object deletions

    }, {
        key: "addDeleteListener",
        value: function addDeleteListener(callback) {
            return this.addListener("delete", callback);
        }
    }]);
    return GenericObjectStore;
}(BaseStore);

var SingletonStore = function (_BaseStore2) {
    inherits(SingletonStore, _BaseStore2);

    function SingletonStore(objectType) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, SingletonStore);
        return possibleConstructorReturn(this, (SingletonStore.__proto__ || Object.getPrototypeOf(SingletonStore)).call(this, objectType, SingletonStore, options));
    }

    createClass(SingletonStore, [{
        key: "get",
        value: function get$$1() {
            return this;
        }
    }, {
        key: "all",
        value: function all() {
            return [this];
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            Object.assign(this, event.data);
            this.dispatch("update", event, this);
        }
    }, {
        key: "importState",
        value: function importState(obj) {
            Object.assign(this, obj);
            this.dispatch("update", event, this);
        }
    }, {
        key: "addUpdateListener",
        value: function addUpdateListener(callback) {
            return this.addListener("update", callback);
        }
    }]);
    return SingletonStore;
}(BaseStore);

// Use the same logic as StoreObject when listening to events


SingletonStore.prototype.addEventListener = StoreObject.prototype.addEventListener;

// TODO: this file should be called StoreExtenders

var AjaxFetchMixin = function AjaxFetchMixin(BaseStoreClass) {
    return function (_BaseStoreClass) {
        inherits(AjaxFetchMixin, _BaseStoreClass);

        function AjaxFetchMixin() {
            classCallCheck(this, AjaxFetchMixin);
            return possibleConstructorReturn(this, (AjaxFetchMixin.__proto__ || Object.getPrototypeOf(AjaxFetchMixin)).apply(this, arguments));
        }

        createClass(AjaxFetchMixin, [{
            key: "fetch",
            value: function fetch(id, successCallback, errorCallback) {
                var _this2 = this;

                var forceFetch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

                if (!forceFetch) {
                    var obj = this.get(id);
                    if (obj) {
                        successCallback(obj);
                        return;
                    }
                }
                if (!this.fetchJobs) {
                    this.fetchJobs = [];
                }
                this.fetchJobs.push({ id: id, success: successCallback, error: errorCallback });
                if (!this.fetchTimeout) {
                    this.fetchTimeout = setTimeout(function () {
                        _this2.executeAjaxFetch();
                    }, this.options.fetchTimeoutDuration || 0);
                }
            }
        }, {
            key: "getFetchRequestData",
            value: function getFetchRequestData(ids, fetchJobs) {
                return {
                    ids: ids
                };
            }
        }, {
            key: "getFetchRequestObject",
            value: function getFetchRequestObject(ids, fetchJobs) {
                var _this3 = this;

                var requestData = this.getFetchRequestData(ids, fetchJobs);

                // TODO: options.fetchURL should also support a function(ids, fetchJobs), do it when needed
                return {
                    url: this.options.fetchURL,
                    type: this.options.fetchType || "GET",
                    dataType: "json",
                    data: requestData,
                    cache: false,
                    success: function success(data) {
                        GlobalState.importState(data.state || {});
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = fetchJobs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var fetchJob = _step.value;

                                var obj = _this3.get(fetchJob.id);
                                if (obj) {
                                    fetchJob.success(obj);
                                } else {
                                    console.error("Failed to fetch object ", fetchJob.id, " of type ", _this3.objectType);
                                    if (fetchJob.error) {
                                        fetchJob.error();
                                    }
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    },
                    error: function error(_error) {
                        console.error("Failed to fetch objects of type ", _this3.objectType, ":\n", _error);
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = fetchJobs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var fetchJob = _step2.value;

                                if (fetchJob.error) {
                                    fetchJob.error(_error);
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    }
                };
            }

            //returns an array of ajax requests that have to be executed

        }, {
            key: "getFetchRequests",
            value: function getFetchRequests(fetchJobs) {
                var idFetchJobs = new Map();

                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = fetchJobs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var fetchJob = _step3.value;

                        var objectId = fetchJob.id;
                        if (!idFetchJobs.has(objectId)) {
                            idFetchJobs.set(objectId, new Array());
                        }
                        idFetchJobs.get(objectId).push(fetchJob);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                var maxChunkSize = this.options.maxFetchObjectCount || 256;

                var idChunks = splitInChunks(Array.from(idFetchJobs.keys()), maxChunkSize);
                var fetchJobsChunks = splitInChunks(Array.from(idFetchJobs.values()), maxChunkSize);

                var requests = [];
                for (var i = 0; i < idChunks.length; i += 1) {
                    requests.push(this.getFetchRequestObject(idChunks[i], unwrapArray(fetchJobsChunks[i])));
                }

                return requests;
            }
        }, {
            key: "executeAjaxFetch",
            value: function executeAjaxFetch() {
                var fetchJobs = this.fetchJobs;
                this.fetchJobs = null;

                var requests = this.getFetchRequests(fetchJobs);

                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = requests[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var requestObject = _step4.value;

                        Ajax.fetch(requestObject);
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                clearTimeout(this.fetchTimeout);
                this.fetchTimeout = null;
            }
        }]);
        return AjaxFetchMixin;
    }(BaseStoreClass);
};

var VirtualStoreObjectMixin = function VirtualStoreObjectMixin(BaseStoreObjectClass) {
    return function (_BaseStoreObjectClass) {
        inherits(VirtualStoreObjectMixin, _BaseStoreObjectClass);

        function VirtualStoreObjectMixin() {
            classCallCheck(this, VirtualStoreObjectMixin);
            return possibleConstructorReturn(this, (VirtualStoreObjectMixin.__proto__ || Object.getPrototypeOf(VirtualStoreObjectMixin)).apply(this, arguments));
        }

        createClass(VirtualStoreObjectMixin, [{
            key: "hasTemporaryId",
            value: function hasTemporaryId() {
                return (typeof this.id === "string" || this.id instanceof String) && this.id.startsWith("temp-");
            }

            // Meant for updating temporary objects that need to exist before being properly created

        }, {
            key: "updateId",
            value: function updateId(newId) {
                if (this.id == newId) {
                    return;
                }
                var oldId = this.id;
                if (!this.hasTemporaryId()) {
                    console.error("This is only meant to replace temporary ids!");
                }
                this.id = newId;
                this.dispatch("updateId", { oldId: oldId });
            }
        }]);
        return VirtualStoreObjectMixin;
    }(BaseStoreObjectClass);
};

// TODO: there's still a bug in this class when not properly matching virtual obj sometimes I think
var VirtualStoreMixin = function VirtualStoreMixin(BaseStoreClass) {
    return function (_BaseStoreClass2) {
        inherits(VirtualStoreMixin, _BaseStoreClass2);

        function VirtualStoreMixin() {
            classCallCheck(this, VirtualStoreMixin);
            return possibleConstructorReturn(this, (VirtualStoreMixin.__proto__ || Object.getPrototypeOf(VirtualStoreMixin)).apply(this, arguments));
        }

        createClass(VirtualStoreMixin, [{
            key: "generateVirtualId",
            value: function generateVirtualId() {
                return this.constructor.generateVirtualId();
            }

            // TODO: we probably shouldn't have getVirtualObject take in an event

        }, {
            key: "getVirtualObject",
            value: function getVirtualObject(event) {
                return this.objects.get("temp-" + event.virtualId);
            }
        }, {
            key: "get",
            value: function get$$1(id) {
                return this.objects.get(id);
            }
        }, {
            key: "applyUpdateObjectId",
            value: function applyUpdateObjectId(object, id) {
                if (object.id === id) {
                    return;
                }
                var oldId = object.id;
                object.updateId(id);
                this.objects.delete(oldId);
                this.objects.set(object.id, object);
                this.dispatch("updateObjectId", object, oldId);
            }
        }, {
            key: "applyCreateEvent",
            value: function applyCreateEvent(event) {

                if (event.virtualId) {
                    var existingVirtualObject = this.getVirtualObject(event);
                    if (existingVirtualObject) {
                        this.applyUpdateObjectId(existingVirtualObject, event.objectId);
                    }
                }

                return get(VirtualStoreMixin.prototype.__proto__ || Object.getPrototypeOf(VirtualStoreMixin.prototype), "applyCreateEvent", this).apply(this, arguments);
            }
        }], [{
            key: "generateVirtualId",
            value: function generateVirtualId() {
                if (!this.virtualIdCounter) {
                    this.virtualIdCounter = 0;
                }
                this.virtualIdCounter += 1;
                return this.virtualIdCounter;
            }
        }]);
        return VirtualStoreMixin;
    }(BaseStoreClass);
};

var DoubleClickable = function DoubleClickable(BaseClass) {
    return function (_BaseClass) {
        inherits(DoubleClickable, _BaseClass);

        function DoubleClickable() {
            var _ref;

            var _temp, _this, _ret;

            classCallCheck(this, DoubleClickable);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = DoubleClickable.__proto__ || Object.getPrototypeOf(DoubleClickable)).call.apply(_ref, [this].concat(args))), _this), _this.singleClickCallbacks = new Map(), _this.doubleClickCallbacks = new Map(), _temp), possibleConstructorReturn(_this, _ret);
        }
        // @lazyInit


        // @lazyInit


        createClass(DoubleClickable, [{
            key: "addClickListener",
            value: function addClickListener(callback) {
                var _this2 = this;

                if (this.singleClickCallbacks.has(callback)) {
                    return;
                }

                var callbackWrapper = function callbackWrapper() {
                    var now = Date.now();

                    if (!_this2.hasOwnProperty("_singleClickTime") || now - _this2._singleClickTime >= _this2.getSingleClickTimeout()) {
                        // It's a single click
                        // TODO: why is this wrapped in a setTimeout?
                        setTimeout(function () {
                            _this2._singleClickTime = now;
                        });
                        setTimeout(function () {
                            if (_this2.hasOwnProperty("_singleClickTime") && _this2._singleClickTime === now) {
                                callback();
                            }
                        }, _this2.getSingleClickTimeout());
                    } else {
                        // It's a double click
                        setTimeout(function () {
                            delete _this2._singleClickTime;
                        });
                    }
                };
                this.singleClickCallbacks.set(callback, callbackWrapper);
                get(DoubleClickable.prototype.__proto__ || Object.getPrototypeOf(DoubleClickable.prototype), "addClickListener", this).call(this, callbackWrapper);
            }
        }, {
            key: "getSingleClickTimeout",
            value: function getSingleClickTimeout() {
                return 250;
            }
        }, {
            key: "removeClickListener",
            value: function removeClickListener(callback) {
                var callbackWrapper = this.singleClickCallbacks.get(callback);
                if (callbackWrapper) {
                    this.singleClickCallbacks.delete(callback);
                    get(DoubleClickable.prototype.__proto__ || Object.getPrototypeOf(DoubleClickable.prototype), "removeClickListener", this).call(this, callbackWrapper);
                }
            }
        }, {
            key: "addDoubleClickListener",
            value: function addDoubleClickListener(callback) {
                var _this3 = this;

                if (this.doubleClickCallbacks.has(callback)) {
                    return;
                }

                var callbackWrapper = function callbackWrapper() {

                    var now = new Date().getTime();

                    if (!_this3.hasOwnProperty("_singleClickTime") || now - _this3._singleClickTime >= _this3.getSingleClickTimeout()) {
                        // It's a single click
                        setTimeout(function () {
                            _this3._singleClickTime = now;
                        });
                    } else {
                        // It's a double click
                        setTimeout(function () {
                            delete _this3._singleClickTime;
                        });
                        callback();
                    }
                };
                this.doubleClickCallbacks.set(callback, callbackWrapper);
                get(DoubleClickable.prototype.__proto__ || Object.getPrototypeOf(DoubleClickable.prototype), "addClickListener", this).call(this, callbackWrapper);
            }
        }, {
            key: "removeDoubleClickListener",
            value: function removeDoubleClickListener(callback) {
                var callbackWrapper = this.doubleClickCallbacks.get(callback);
                if (callbackWrapper) {
                    this.doubleClickCallbacks.delete(callback);
                    get(DoubleClickable.prototype.__proto__ || Object.getPrototypeOf(DoubleClickable.prototype), "removeClickListener", this).call(this, callbackWrapper);
                }
            }
        }]);
        return DoubleClickable;
    }(BaseClass);
};

var _class$42, _descriptor$17;

function _initDefineProp$18(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$18(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var FullScreenStyle = (_class$42 = function (_StyleSheet) {
    inherits(FullScreenStyle, _StyleSheet);

    function FullScreenStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, FullScreenStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FullScreenStyle.__proto__ || Object.getPrototypeOf(FullScreenStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$18(_this, "fullScreen", _descriptor$17, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return FullScreenStyle;
}(StyleSheet), _descriptor$17 = _applyDecoratedDescriptor$18(_class$42.prototype, "fullScreen", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            height: "100%",
            backgroundColor: "#FFFFFF"
        };
    }
}), _class$42);

/*
* Implements a Class Factory, to be able to create element that can be easily set to full screen
*/

// TODO: is this a good pattern, and should this method live somewhere else?
function callFirstMethodAvailable(obj, methodNames) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = methodNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var methodName = _step.value;

            if (typeof obj[methodName] === "function") {
                obj[methodName]();
                return methodName;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return null;
}

// TODO: might need a clean-up
// Don't automate this, these names differ slightly (eg. moz has uppercase Screen)
var ENTER_FULL_SCREEN_METHODS = ["requestFullscreen", "webkitRequestFullscreen", "msRequestFullscreen", "mozRequestFullScreen"];

var EXIT_FULL_SCREEN_METHODS = ["exitFullscreen", "webkitExitFullscreen", "msExitFullscreen", "mozCancelFullScreen"];

var FULL_SCREEN_CHANGE_EVENTS = ["webkitfullscreenchange", "mozfullscreenchange", "fullscreenchange", "MSFullscreenChange"];

// TODO: lowercase the s in screen?
// TODO: this should not be directly in UI namespace
var FullScreenable = function FullScreenable(BaseClass) {
    var _class, _temp;

    return _temp = _class = function (_BaseClass) {
        inherits(FullScreenable, _BaseClass);

        function FullScreenable() {
            classCallCheck(this, FullScreenable);
            return possibleConstructorReturn(this, (FullScreenable.__proto__ || Object.getPrototypeOf(FullScreenable)).apply(this, arguments));
        }

        createClass(FullScreenable, [{
            key: "getDefaultOptions",
            value: function getDefaultOptions() {
                return Object.assign({}, get(FullScreenable.prototype.__proto__ || Object.getPrototypeOf(FullScreenable.prototype), "getDefaultOptions", this).call(this), {
                    fullContainer: true
                });
            }
        }, {
            key: "extraNodeAttributes",
            value: function extraNodeAttributes(attr) {
                get(FullScreenable.prototype.__proto__ || Object.getPrototypeOf(FullScreenable.prototype), "extraNodeAttributes", this).call(this, attr);
                if (this.options.fullContainer) {
                    attr.addClass(GlobalStyle.Utils.fullContainer);
                } else {
                    attr.setStyle("height", "100%");
                }
            }
        }, {
            key: "enterFullScreen",
            value: function enterFullScreen() {
                this.attachEnterFullscreenHandler();
                if (!callFirstMethodAvailable(this.node, ENTER_FULL_SCREEN_METHODS)) {
                    console.error("No valid full screen function available");
                    return;
                }
                this._expectingFullScreen = true;
            }
        }, {
            key: "setFullScreenStyle",
            value: function setFullScreenStyle() {
                this.addClass(this.constructor.fullScreenStyleSheet.fullScreen);
                if (this.options.fullContainer) {
                    this.removeClass(GlobalStyle.Utils.fullContainer);
                    this.setStyle("height", "100%");
                }
            }
        }, {
            key: "isFullScreen",
            value: function isFullScreen() {
                return this._isFullScreen;
            }
        }, {
            key: "exitFullScreen",
            value: function exitFullScreen() {
                if (!callFirstMethodAvailable(document, EXIT_FULL_SCREEN_METHODS)) {
                    console.error("No valid available function to exit fullscreen");
                    return;
                }
            }
        }, {
            key: "unsetFullScreenStyle",
            value: function unsetFullScreenStyle() {
                this.removeClass(this.constructor.fullScreenStyleSheet.fullScreen);
                if (this.options.fullContainer) {
                    this.addClass(GlobalStyle.Utils.fullContainer);
                    this.setStyle("height", null);
                }
            }
        }, {
            key: "toggleFullScreen",
            value: function toggleFullScreen() {
                if (this.isFullScreen()) {
                    this.exitFullScreen();
                } else {
                    this.enterFullScreen();
                }
            }
        }, {
            key: "attachEnterFullscreenHandler",
            value: function attachEnterFullscreenHandler() {
                var _this2 = this;

                if (this._attachedFullscreenHandler) {
                    return;
                }
                this._attachedFullscreenHandler = true;
                var fullScreenFunction = function fullScreenFunction() {
                    if (_this2._expectingFullScreen) {
                        _this2._expectingFullScreen = false;
                        _this2._isFullScreen = true;
                        _this2.dispatch("enterFullScreen");
                        _this2.setFullScreenStyle();
                    } else {
                        if (_this2._isFullScreen) {
                            _this2._isFullScreen = false;
                            _this2.dispatch("exitFullScreen");
                            _this2.unsetFullScreenStyle();
                        }
                    }
                    _this2.dispatch("resize");
                };
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = FULL_SCREEN_CHANGE_EVENTS[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var eventName = _step2.value;

                        document.addEventListener(eventName, fullScreenFunction);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
        }]);
        return FullScreenable;
    }(BaseClass), _class.fullScreenStyleSheet = FullScreenStyle.getInstance(), _temp;
};

var navSessionManager = new SessionStorageMap("navManager");

var BasicOrientedElementInterface = function BasicOrientedElementInterface(BaseClass) {
    return function (_BaseClass) {
        inherits(BasicOrientedElement, _BaseClass);

        function BasicOrientedElement() {
            classCallCheck(this, BasicOrientedElement);
            return possibleConstructorReturn(this, (BasicOrientedElement.__proto__ || Object.getPrototypeOf(BasicOrientedElement)).apply(this, arguments));
        }

        createClass(BasicOrientedElement, [{
            key: "getOrientation",
            value: function getOrientation() {
                if (this.options.orientation) {
                    return this.options.orientation;
                }
                if (this.parent && typeof this.parent.getOrientation === "function") {
                    return this.parent.getOrientation();
                }
                return Orientation.HORIZONTAL;
            }
        }, {
            key: "styleSheet",
            get: function get$$1() {
                return this.options.styleSheet || this.parent.styleSheet;
            }
        }]);
        return BasicOrientedElement;
    }(BaseClass);
};

var BasicOrientedElement = BasicOrientedElementInterface(UI.Element);
var BasicOrientedLinkElement = BasicOrientedElementInterface(Link);

// NavElements should know if they are in vertical or horizontal mode, so they can behave differently
var NavElementInterface = function NavElementInterface(BaseClass) {
    return function (_BaseClass2) {
        inherits(NavElement, _BaseClass2);

        function NavElement() {
            classCallCheck(this, NavElement);

            var _this2 = possibleConstructorReturn(this, (NavElement.__proto__ || Object.getPrototypeOf(NavElement)).apply(this, arguments));

            _this2.isToggled = _this2.getToggledState();
            return _this2;
        }

        createClass(NavElement, [{
            key: "extraNodeAttributes",
            value: function extraNodeAttributes(attr) {
                get(NavElement.prototype.__proto__ || Object.getPrototypeOf(NavElement.prototype), "extraNodeAttributes", this).call(this, attr);
                if (this.getOrientation() === Orientation.HORIZONTAL) {
                    // it is in the navbar
                    attr.addClass(this.styleSheet.navElementHorizontal);

                    if (this.parent instanceof NavSection) {
                        attr.setStyle("float", "left");
                    } else {
                        // it is an element in a dropdown
                        attr.addClass(this.styleSheet.navCollapseElement);
                    }
                } else {
                    // it is in the sidebar
                    attr.addClass(this.styleSheet.navElementVertical);
                }
            }
        }, {
            key: "getSelf",
            value: function getSelf() {
                var style = this.getOrientation() === Orientation.HORIZONTAL ? this.styleSheet.navElementValueHorizontal : this.styleSheet.navElementValueVertical;
                var marginLeft = this.getOrientation() === Orientation.VERTICAL && unwrapArray(this.render()).length ? "-20px" : "0";

                return UI.createElement(
                    BasicOrientedElement,
                    { className: style, style: { marginLeft: marginLeft } },
                    this.getValue()
                );
            }
        }, {
            key: "getSubElements",
            value: function getSubElements() {
                var childrenToRender = unwrapArray(this.render());
                if (childrenToRender.length) {
                    var subElementsClass = void 0;
                    if (!this.isToggled) {
                        subElementsClass = "hidden";
                    }
                    return UI.createElement(
                        BasicOrientedElement,
                        { ref: "contentArea", className: subElementsClass },
                        childrenToRender
                    );
                }
                return null;
            }
        }, {
            key: "getValue",
            value: function getValue() {
                var result = void 0;
                if (unwrapArray(this.render()).length) {
                    if (this.getOrientation() === Orientation.VERTICAL) {
                        // is in the sidebar
                        result = [UI.createElement(FACollapseIcon, { ref: "collapseIcon", collapsed: !this.isToggled, className: this.styleSheet.navElementVerticalArrow }), this.options.value];
                    } else if (this.getOrientation() === Orientation.HORIZONTAL) {
                        // is in the navbar
                        result = [this.options.value, UI.createElement(FACollapseIcon, { collapsed: false, className: this.styleSheet.navElementHorizontalArrow })];
                    }
                } else {
                    result = this.options.value;
                }
                return result;
            }
        }, {
            key: "getChildrenToRender",
            value: function getChildrenToRender() {
                return [this.getSelf(), this.getSubElements()];
            }
        }, {
            key: "showChildren",
            value: function showChildren() {
                this.contentArea.removeClass("hidden");
            }
        }, {
            key: "hideChildren",
            value: function hideChildren() {
                this.contentArea.addClass("hidden");
            }
        }, {
            key: "toggleChildren",
            value: function toggleChildren() {
                if (!unwrapArray(this.render()).length) {
                    return;
                }

                if (!this.isToggled) {
                    this.showChildren();
                } else {
                    this.hideChildren();
                }

                if (this.collapseIcon) {
                    this.collapseIcon.setCollapsed(this.isToggled);
                }
                this.isToggled = !this.isToggled;

                this.saveToggledState();
            }
        }, {
            key: "getSessionKeyName",
            value: function getSessionKeyName() {
                var sessionKeyName = this.options.sessionKey || this.options.href;
                if (!sessionKeyName) {
                    throw Error("Persistent nav element needs a unique session key!");
                }
                return sessionKeyName;
            }
        }, {
            key: "getLocalToggledState",
            value: function getLocalToggledState() {
                if (this.hasOwnProperty("isToggled")) {
                    return !!this.isToggled;
                }
                return !!this.options.defaultToggled;
            }
        }, {
            key: "getToggledState",
            value: function getToggledState() {
                if (!this.options.persistent) {
                    return this.getLocalToggledState();
                }
                var sessionKeyName = this.getSessionKeyName();
                return navSessionManager.get(sessionKeyName, this.getLocalToggledState());
            }
        }, {
            key: "saveToggledState",
            value: function saveToggledState() {
                if (!this.options.persistent) {
                    return;
                }
                var sessionKeyName = this.getSessionKeyName();
                navSessionManager.set(sessionKeyName, this.getLocalToggledState());
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this3 = this;

                get(NavElement.prototype.__proto__ || Object.getPrototypeOf(NavElement.prototype), "onMount", this).call(this);
                this.addNodeListener("mouseenter", function () {
                    if (_this3.getOrientation() === Orientation.HORIZONTAL && unwrapArray(_this3.render()).length) {
                        _this3.showChildren();
                    }
                });
                this.addNodeListener("mouseleave", function () {
                    if (_this3.getOrientation() === Orientation.HORIZONTAL && unwrapArray(_this3.render()).length) {
                        _this3.hideChildren();
                    }
                });
                this.addClickListener(function (event) {
                    if (_this3.getOrientation() === Orientation.VERTICAL) {
                        event.stopPropagation();
                        _this3.toggleChildren();
                    }
                });
            }
        }]);
        return NavElement;
    }(BaseClass);
};

var NavElement = NavElementInterface(UI.Primitive(BasicOrientedElement, "li"));

var NavLinkElement = function (_NavElementInterface) {
    inherits(NavLinkElement, _NavElementInterface);

    function NavLinkElement() {
        classCallCheck(this, NavLinkElement);
        return possibleConstructorReturn(this, (NavLinkElement.__proto__ || Object.getPrototypeOf(NavLinkElement)).apply(this, arguments));
    }

    createClass(NavLinkElement, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(NavLinkElement.prototype.__proto__ || Object.getPrototypeOf(NavLinkElement.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.navLinkElement);
        }
    }, {
        key: "render",
        value: function render() {
            return this.options.children;
        }
    }]);
    return NavLinkElement;
}(NavElementInterface(BasicOrientedLinkElement));

var NavSection = function (_UI$Primitive) {
    inherits(NavSection, _UI$Primitive);

    function NavSection() {
        classCallCheck(this, NavSection);
        return possibleConstructorReturn(this, (NavSection.__proto__ || Object.getPrototypeOf(NavSection)).apply(this, arguments));
    }

    createClass(NavSection, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            if (this.getOrientation() === Orientation.HORIZONTAL) {
                // it is in the navbar
                attr.addClass(this.styleSheet.navSectionHorizontal);
                // this is functionality, should be isolated from the actual design
                attr.setStyle("float", this.getAnchor());
            } else {
                // it is in the sidebar
                attr.addClass(this.styleSheet.navSectionVertical);
            }
        }
    }, {
        key: "getAnchor",
        value: function getAnchor() {
            return this.options.anchor || Direction.LEFT;
        }
    }, {
        key: "getOrientation",
        value: function getOrientation() {
            return this.parent.getOrientation();
        }
    }, {
        key: "styleSheet",
        get: function get$$1() {
            return this.options.styleSheet || this.parent.styleSheet;
        }
    }]);
    return NavSection;
}(UI.Primitive("ul"));

var NavAnchoredNotifications = function (_NavSection) {
    inherits(NavAnchoredNotifications, _NavSection);

    function NavAnchoredNotifications() {
        classCallCheck(this, NavAnchoredNotifications);
        return possibleConstructorReturn(this, (NavAnchoredNotifications.__proto__ || Object.getPrototypeOf(NavAnchoredNotifications)).apply(this, arguments));
    }

    createClass(NavAnchoredNotifications, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(NavAnchoredNotifications.prototype.__proto__ || Object.getPrototypeOf(NavAnchoredNotifications.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                position: "relative"
            });
        }
    }, {
        key: "getSwitcherStyle",
        value: function getSwitcherStyle() {
            return {
                position: "absolute",
                maxWidth: "calc(100vw - 76px)",
                top: "50px",
                right: "0",
                height: "300px",
                width: "400px",
                boxShadow: "0px 0px 10px #666",
                zIndex: "-1"
            };
        }
    }, {
        key: "render",
        value: function render() {
            return [this.options.children, UI.createElement(Switcher, { ref: "switcher", style: this.getSwitcherStyle(), className: "hidden" })];
        }
    }, {
        key: "show",
        value: function show(content, child) {
            var _this7 = this;

            this.activeChild = child;
            this.switcher.removeClass("hidden");
            this.switcher.setActive(content, child);
            this.bodyListener = document.body.addEventListener("click", function () {
                return _this7.hide();
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.switcher.addClass("hidden");
            this.activeChild = null;
            document.body.removeEventListener("click", this.bodyListener);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.addListener("changeSwitcher", function (content, child) {
                if (_this8.activeChild == child) {
                    _this8.hide();
                } else {
                    _this8.show(content, child);
                }
            });

            this.switcher.addClickListener(function (event) {
                event.stopPropagation();
            });
        }
    }]);
    return NavAnchoredNotifications;
}(NavSection);

var NavIcon = function (_NavElement) {
    inherits(NavIcon, _NavElement);

    function NavIcon() {
        classCallCheck(this, NavIcon);
        return possibleConstructorReturn(this, (NavIcon.__proto__ || Object.getPrototypeOf(NavIcon)).apply(this, arguments));
    }

    createClass(NavIcon, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(NavIcon.prototype.__proto__ || Object.getPrototypeOf(NavIcon.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.icon);
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return [this.getIcon(), this.getContent()];
        }
    }, {
        key: "getContent",
        value: function getContent() {
            return null;
        }
    }, {
        key: "getIcon",
        value: function getIcon() {
            return null;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.addClickListener(function (event) {
                event.stopPropagation();
            });
        }
    }]);
    return NavIcon;
}(NavElement);

var LeftSideNavIcon = function (_NavIcon) {
    inherits(LeftSideNavIcon, _NavIcon);

    function LeftSideNavIcon() {
        classCallCheck(this, LeftSideNavIcon);
        return possibleConstructorReturn(this, (LeftSideNavIcon.__proto__ || Object.getPrototypeOf(LeftSideNavIcon)).apply(this, arguments));
    }

    createClass(LeftSideNavIcon, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(LeftSideNavIcon.prototype.__proto__ || Object.getPrototypeOf(LeftSideNavIcon.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.sideIcon);
        }
    }, {
        key: "getIcon",
        value: function getIcon() {
            return UI.createElement(FAIcon, { icon: "bars", size: Size.LARGE });
        }
    }]);
    return LeftSideNavIcon;
}(NavIcon);

var RightSideNavIcon = function (_NavIcon2) {
    inherits(RightSideNavIcon, _NavIcon2);

    function RightSideNavIcon() {
        classCallCheck(this, RightSideNavIcon);
        return possibleConstructorReturn(this, (RightSideNavIcon.__proto__ || Object.getPrototypeOf(RightSideNavIcon)).apply(this, arguments));
    }

    createClass(RightSideNavIcon, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(RightSideNavIcon.prototype.__proto__ || Object.getPrototypeOf(RightSideNavIcon.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.sideIcon);
        }
    }, {
        key: "getIcon",
        value: function getIcon() {
            return UI.createElement(FAIcon, { icon: "ellipsis-v", size: Size.LARGE });
        }
    }]);
    return RightSideNavIcon;
}(NavIcon);

var WrappedNavIcon = function (_NavIcon3) {
    inherits(WrappedNavIcon, _NavIcon3);

    function WrappedNavIcon() {
        classCallCheck(this, WrappedNavIcon);
        return possibleConstructorReturn(this, (WrappedNavIcon.__proto__ || Object.getPrototypeOf(WrappedNavIcon)).apply(this, arguments));
    }

    createClass(WrappedNavIcon, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(WrappedNavIcon.prototype.__proto__ || Object.getPrototypeOf(WrappedNavIcon.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.wrappedIcon);
        }
    }, {
        key: "getIcon",
        value: function getIcon() {
            return UI.createElement(FAIcon, { icon: "ellipsis-h", size: Size.LARGE });
        }
    }]);
    return WrappedNavIcon;
}(NavIcon);

var _class$43, _descriptor$18, _descriptor2$15, _descriptor3$15, _descriptor4$13, _descriptor5$11, _descriptor6$9, _descriptor7$7, _descriptor8$5, _descriptor9$5, _descriptor10$4, _descriptor11$4, _descriptor12$4, _descriptor13$4, _descriptor14$4, _descriptor15$4, _descriptor16$4, _descriptor17$4, _descriptor18$2, _descriptor19$2, _descriptor20$2;

function _initDefineProp$19(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$19(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var NavStyle = (_class$43 = function (_StyleSheet) {
    inherits(NavStyle, _StyleSheet);

    function NavStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, NavStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NavStyle.__proto__ || Object.getPrototypeOf(NavStyle)).call.apply(_ref, [this].concat(args))), _this), _this.dimensions = {
            collapseArrowWidth: "20px",
            navbarHeight: "50px",
            sidepanelElementHeight: "30px",
            sidepanelWidthLeft: "250px",
            sidepanelWidth: "330px",
            sidepanelHideWidth: "335px",
            sidepanelTransitionDuration: ".15s",
            boxShadowWidth: "5px",
            backgroundTransitionDuration: ".2s"
        }, _initDefineProp$19(_this, "icon", _descriptor$18, _this), _initDefineProp$19(_this, "sideIcon", _descriptor2$15, _this), _initDefineProp$19(_this, "wrappedIcon", _descriptor3$15, _this), _this.navElement = {
            transition: "background-color " + _this.dimensions.backgroundTransitionDuration
        }, _initDefineProp$19(_this, "navLinkElement", _descriptor4$13, _this), _initDefineProp$19(_this, "navManager", _descriptor5$11, _this), _initDefineProp$19(_this, "navElementHorizontal", _descriptor6$9, _this), _initDefineProp$19(_this, "navElementHorizontalArrow", _descriptor7$7, _this), _initDefineProp$19(_this, "navElementValueHorizontal", _descriptor8$5, _this), _initDefineProp$19(_this, "navSectionHorizontal", _descriptor9$5, _this), _this.sidePanel = {
            top: "0",
            bottom: "0",
            height: "100%",
            backgroundColor: function backgroundColor() {
                return _this.getColors().sidepanelBackground;
            },
            overflow: "hidden",
            position: "fixed",
            zIndex: "3000",
            boxShadow: function boxShadow() {
                return _this.getColors().boxShadowSidePanel;
            },
            width: function width() {
                return _this.dimensions.sidepanelWidth;
            },
            transitionDuration: function transitionDuration() {
                return _this.dimensions.sidepanelTransitionDuration;
            }
        }, _initDefineProp$19(_this, "leftSidePanel", _descriptor10$4, _this), _initDefineProp$19(_this, "rightSidePanel", _descriptor11$4, _this), _initDefineProp$19(_this, "navElementVertical", _descriptor12$4, _this), _initDefineProp$19(_this, "navElementVerticalArrow", _descriptor13$4, _this), _initDefineProp$19(_this, "navElementValueVertical", _descriptor14$4, _this), _initDefineProp$19(_this, "navSectionVertical", _descriptor15$4, _this), _initDefineProp$19(_this, "navCollapseElement", _descriptor16$4, _this), _initDefineProp$19(_this, "sidePanelGroup", _descriptor17$4, _this), _initDefineProp$19(_this, "hrStyle", _descriptor18$2, _this), _initDefineProp$19(_this, "navVerticalLeftHide", _descriptor19$2, _this), _initDefineProp$19(_this, "navVerticalRightHide", _descriptor20$2, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(NavStyle, [{
        key: "getColors",

        // Custom variables
        value: function getColors() {
            var themeProperties = this.themeProperties;

            var navManagerColor = themeProperties.COLOR_PRIMARY;
            var navBarColor = themeProperties.NAV_MANAGER_COLOR_NAV_BAR || navManagerColor;
            var sidePanelColor = themeProperties.NAV_MANAGER_COLOR_SIDE_PANEL || enhance(navManagerColor, 0.05);

            this.colors = {
                boxShadowNavManager: themeProperties.NAV_MANAGER_BOX_SHADOW_NAVBAR,
                boxShadowSidePanel: themeProperties.NAV_MANAGER_BOX_SHADOW_SIDE_PANEL,
                sidepanelBackground: themeProperties.NAV_MANAGER_SIDE_PANEL_BACKGROUND_COLOR || sidePanelColor,
                sidepanelHover: themeProperties.NAV_MANAGER_SIDE_PANEL_HOVER_COLOR || enhance(sidePanelColor, 0.1),
                navbarBackground: themeProperties.NAV_MANAGER_NAV_BAR_BACKGROUND_COLOR || navBarColor,
                navbarHover: themeProperties.NAV_MANAGER_NAV_BAR_HOVER_COLOR || enhance(navBarColor, 0.1),
                hr: themeProperties.NAV_MANAGER_HR_COLOR || enhance(sidePanelColor, 0.15),
                text: themeProperties.NAV_MANAGER_TEXT_COLOR || enhance(navManagerColor, 1)
            };

            return this.colors;
        }

        // Icons


        // Nav manager elements


        // Navbar


        // Navbar elements


        // Sidepanel


        // Sidepanel elements


        // Sidepanel transitions

    }]);
    return NavStyle;
}(StyleSheet), _descriptor$18 = _applyDecoratedDescriptor$19(_class$43.prototype, "icon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: this.getColors().text,
            lineHeight: this.dimensions.navbarHeight,
            height: this.dimensions.navbarHeight,
            width: this.dimensions.navbarHeight,
            display: "inline-block",
            cursor: "pointer",
            textAlign: "center",
            ":hover": {
                backgroundColor: this.getColors().navbarHover
            }
        };
    }
}), _descriptor2$15 = _applyDecoratedDescriptor$19(_class$43.prototype, "sideIcon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "120%"
        };
    }
}), _descriptor3$15 = _applyDecoratedDescriptor$19(_class$43.prototype, "wrappedIcon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "100%",
            flex: "1"
        };
    }
}), _descriptor4$13 = _applyDecoratedDescriptor$19(_class$43.prototype, "navLinkElement", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "block",
            color: this.getColors().text,
            textDecoration: "none",
            listStyleType: "none",
            ":hover": {
                backgroundColor: this.getColors().sidepanelHover,
                color: this.getColors().text,
                textDecoration: "none"
            },
            ":focus": {
                color: this.getColors().text,
                textDecoration: "none"
            },
            ":active": {
                color: this.getColors().text,
                textDecoration: "none"
            },
            ":visited": {
                color: this.getColors().text,
                textDecoration: "none"
            }
        };
    }
}), _descriptor5$11 = _applyDecoratedDescriptor$19(_class$43.prototype, "navManager", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            height: this.dimensions.navbarHeight,
            lineHeight: this.dimensions.navbarHeight,
            width: "100%",
            backgroundColor: this.getColors().navbarBackground,
            boxShadow: this.getColors().boxShadowNavManager,
            zIndex: "9999",
            position: "fixed"
        };
    }
}), _descriptor6$9 = _applyDecoratedDescriptor$19(_class$43.prototype, "navElementHorizontal", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: this.getColors().text,
            backgroundColor: this.getColors().navbarBackground,
            listStyleType: "none",
            cursor: "pointer",
            ">:nth-child(2)": {
                position: "absolute"
            }
        };
    }
}), _descriptor7$7 = _applyDecoratedDescriptor$19(_class$43.prototype, "navElementHorizontalArrow", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            paddingLeft: ".1em",
            verticalAlign: "middle"
        };
    }
}), _descriptor8$5 = _applyDecoratedDescriptor$19(_class$43.prototype, "navElementValueHorizontal", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.navElement, {
            padding: "0 0.7em",
            color: this.getColors().text,
            width: "100%",
            ":hover": {
                backgroundColor: this.getColors().navbarHover
            }
        }];
    }
}), _descriptor9$5 = _applyDecoratedDescriptor$19(_class$43.prototype, "navSectionHorizontal", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            paddingLeft: "0",
            height: this.dimensions.navbarHeight,
            marginBottom: "0"
        };
    }
}), _descriptor10$4 = _applyDecoratedDescriptor$19(_class$43.prototype, "leftSidePanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.sidePanel, {
            overflowY: "scroll",
            width: this.dimensions.sidepanelWidthLeft,
            "-ms-overflow-style": "none",
            overflow: "-moz-scrollbars-none",
            "::-webkit-scrollbar": {
                display: "none"
            }
        }];
    }
}), _descriptor11$4 = _applyDecoratedDescriptor$19(_class$43.prototype, "rightSidePanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return this.sidePanel;
    }
}), _descriptor12$4 = _applyDecoratedDescriptor$19(_class$43.prototype, "navElementVertical", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: this.getColors().text,
            cursor: "pointer",
            listStyleType: "none",
            minHeight: this.dimensions.sidepanelElementHeight,
            overflow: "hidden",
            position: "relative",
            ">*": {
                paddingLeft: this.dimensions.collapseArrowWidth
            }
        };
    }
}), _descriptor13$4 = _applyDecoratedDescriptor$19(_class$43.prototype, "navElementVerticalArrow", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: this.dimensions.collapseArrowWidth,
            textAlign: "center"
        };
    }
}), _descriptor14$4 = _applyDecoratedDescriptor$19(_class$43.prototype, "navElementValueVertical", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.navElement, {
            color: this.getColors().text,
            zIndex: "1",
            position: "relative",
            width: "100%",
            height: this.dimensions.sidepanelElementHeight,
            lineHeight: this.dimensions.sidepanelElementHeight,
            ":hover": {
                backgroundColor: this.getColors().sidepanelHover
            }
        }];
    }
}), _descriptor15$4 = _applyDecoratedDescriptor$19(_class$43.prototype, "navSectionVertical", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            paddingLeft: "0",
            marginBottom: "0",
            width: "100%"
        };
    }
}), _descriptor16$4 = _applyDecoratedDescriptor$19(_class$43.prototype, "navCollapseElement", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: this.getColors().text,
            textAlign: "initial",
            lineHeight: this.dimensions.sidepanelElementHeight
        };
    }
}), _descriptor17$4 = _applyDecoratedDescriptor$19(_class$43.prototype, "sidePanelGroup", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            paddingTop: this.dimensions.navbarHeight,
            height: "inherit",
            width: this.dimensions.sidepanelWidth,
            position: "absolute",
            zIndex: "3"
        };
    }
}), _descriptor18$2 = _applyDecoratedDescriptor$19(_class$43.prototype, "hrStyle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this2 = this;

        return {
            margin: "10px 5%",
            borderTop: function borderTop() {
                return "2px solid " + _this2.getColors().hr;
            }
        };
    }
}), _descriptor19$2 = _applyDecoratedDescriptor$19(_class$43.prototype, "navVerticalLeftHide", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "-" + this.dimensions.sidepanelHideWidth,
            overflow: "hidden"
        };
    }
}), _descriptor20$2 = _applyDecoratedDescriptor$19(_class$43.prototype, "navVerticalRightHide", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginRight: "-" + this.dimensions.sidepanelHideWidth,
            overflow: "hidden"
        };
    }
}), _class$43);

var maxDistanceFromSide = 25; // Pixels
var minSwipeDistance = 60; // Pixels
var minSwipeSpeed = 0.5; // Pixels per millisecond

function touchEventHandler(ignoreCondition, successCondition, onSuccess) {
    var xType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "client";

    return function (event) {
        if (ignoreCondition(event.targetTouches[0][xType + "X"])) {
            return;
        }
        var startX = event.targetTouches[0][xType + "X"];
        var panelToggler = new Dispatcher();
        var startTime = StemDate.now();

        var touchCallback = function touchCallback(event) {
            if (successCondition(event.targetTouches[0][xType + "X"], startX, StemDate.now() - startTime)) {
                panelToggler.dispatch(true);
            }
        };
        var touchendCallback = function touchendCallback() {
            panelToggler.dispatch(false);
        };
        document.addEventListener("touchmove", touchCallback);
        document.addEventListener("touchend", touchendCallback);

        panelToggler.addListener(function (success) {
            if (success) {
                onSuccess();
            }
            document.removeEventListener("touchmove", touchCallback);
            document.removeEventListener("touchend", touchendCallback);
        });
    };
}

function initializeSwipeRight(navManager) {
    var maxDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : maxDistanceFromSide;
    var minDistance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : minSwipeDistance;
    var minSpeed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : minSwipeSpeed;

    document.addEventListener("touchstart", touchEventHandler(function (touchX) {
        return navManager.leftSidePanel.visible || window.pageXOffset !== 0 || touchX > maxDistance;
    }, function (touchX, startX, duration) {
        return touchX - startX >= minDistance && (touchX - startX) / duration >= minSpeed;
    }, function () {
        return navManager.toggleLeftSidePanel();
    }));
    navManager.leftSidePanel.addNodeListener("touchstart", touchEventHandler(function () {
        return !navManager.leftSidePanel.visible;
    }, function (touchX, startX) {
        return startX - touchX >= minDistance && startX - touchX >= minSpeed;
    }, function () {
        return navManager.toggleLeftSidePanel();
    }));
}

function initializeSwipeLeft(navManager) {
    var maxDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : maxDistanceFromSide;
    var minDistance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : minSwipeDistance;
    var minSpeed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : minSwipeSpeed;

    document.addEventListener("touchstart", touchEventHandler(function (touchX) {
        return navManager.rightSidePanel.visible || window.innerWidth - touchX > maxDistance;
    }, function (touchX, startX, duration) {
        return startX - touchX >= minDistance && (startX - touchX) / duration >= minSpeed;
    }, function () {
        return navManager.toggleRightSidePanel();
    }));
    navManager.rightSidePanel.addNodeListener("touchstart", touchEventHandler(function () {
        return !navManager.rightSidePanel.visible;
    }, function (touchX, startX, duration) {
        return touchX - startX >= minDistance && (touchX - startX) / duration >= minSpeed;
    }, function () {
        return navManager.toggleRightSidePanel();
    }));
}

function initializeSwipeEvents(navManager) {
    var maxDistanceFromSide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : maxDistanceFromSide;
    var minDistance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : minSwipeDistance;
    var minSpeed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : minSwipeSpeed;

    if (!Device.isTouchDevice()) {
        return;
    }
    if (navManager.leftSidePanel) {
        initializeSwipeRight(navManager, maxDistanceFromSide, minDistance, minSpeed);
    }
    if (navManager.rightSidePanel) {
        initializeSwipeLeft(navManager, maxDistanceFromSide, minDistance, minSpeed);
    }
}

var _dec$20, _class$44, _dec2$7, _class3$12;

var SidePanelGroup = function (_UI$Element) {
    inherits(SidePanelGroup, _UI$Element);

    function SidePanelGroup() {
        classCallCheck(this, SidePanelGroup);
        return possibleConstructorReturn(this, (SidePanelGroup.__proto__ || Object.getPrototypeOf(SidePanelGroup)).apply(this, arguments));
    }

    createClass(SidePanelGroup, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.sidePanelGroup);
            if (this.options.anchor === Direction.RIGHT) {
                attr.setStyle("right", 0);
            } else {
                attr.setStyle("width", "250px");
            }
        }
    }, {
        key: "getOrientation",
        value: function getOrientation() {
            return Orientation.VERTICAL;
        }
    }, {
        key: "styleSheet",
        get: function get$$1() {
            return this.options.styleSheet || this.parent.styleSheet;
        }
    }]);
    return SidePanelGroup;
}(UI.Element);

var SidePanel = (_dec$20 = registerStyle(NavStyle), _dec$20(_class$44 = function (_UI$Element2) {
    inherits(SidePanel, _UI$Element2);

    function SidePanel() {
        classCallCheck(this, SidePanel);

        var _this2 = possibleConstructorReturn(this, (SidePanel.__proto__ || Object.getPrototypeOf(SidePanel)).apply(this, arguments));

        if (!_this2.node) {
            _this2.mount(document.body);
        }

        if (_this2.options.name) {
            _this2.storageSerializer = new SessionStorageMap("sidePanel" + _this2.options.name);
            _this2.visible = _this2.storageSerializer.get("visible");
        }

        if (_this2.visible) {
            _this2.show();
        } else {
            _this2.hide();
        }
        return _this2;
    }

    createClass(SidePanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            if (this.options.anchor === Direction.RIGHT) {
                attr.addClass(this.styleSheet.rightSidePanel);
                attr.setStyle("right", "0");
            } else {
                attr.addClass(this.styleSheet.leftSidePanel);
            }
        }
    }, {
        key: "setVisible",
        value: function setVisible(value) {
            this.visible = value;
            if (this.storageSerializer) {
                this.storageSerializer.set("visible", value);
            }
        }
    }, {
        key: "show",
        value: function show() {
            if (this.options.anchor === Direction.RIGHT) {
                this.removeClass(this.styleSheet.navVerticalRightHide);
            } else {
                this.removeClass(this.styleSheet.navVerticalLeftHide);
            }

            this.setVisible(true);
        }
    }, {
        key: "hide",
        value: function hide() {
            if (this.options.anchor === Direction.RIGHT) {
                this.addClass(this.styleSheet.navVerticalRightHide);
            } else {
                this.addClass(this.styleSheet.navVerticalLeftHide);
            }

            this.setVisible(false);
        }
    }, {
        key: "toggle",
        value: function toggle() {
            if (this.visible) {
                this.hide();
            } else {
                this.show();
            }
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            return UI.createElement(
                SidePanelGroup,
                { ref: "this.wrappedPanel", anchor: this.options.anchor },
                this.render()
            );
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.addClickListener(function (event) {
                event.stopPropagation();
            });
        }
    }]);
    return SidePanel;
}(UI.Element)) || _class$44);

var NavCarouselStyle = function (_CarouselStyle) {
    inherits(NavCarouselStyle, _CarouselStyle);

    function NavCarouselStyle() {
        var _ref;

        var _temp, _this3, _ret;

        classCallCheck(this, NavCarouselStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this3 = possibleConstructorReturn(this, (_ref = NavCarouselStyle.__proto__ || Object.getPrototypeOf(NavCarouselStyle)).call.apply(_ref, [this].concat(args))), _this3), _this3.hoverColor = function () {
            return NavStyle.getInstance().getColors().sidepanelHover;
        }, _this3.textColor = function () {
            return NavStyle.getInstance().getColors().text;
        }, _this3.navigatorTransitionTime = function () {
            return NavStyle.getInstance().dimensions.backgroundTransitionDuration;
        }, _temp), possibleConstructorReturn(_this3, _ret);
    }

    return NavCarouselStyle;
}(CarouselStyle$$1);

var NavManager = (_dec2$7 = registerStyle(NavStyle), _dec2$7(_class3$12 = function (_UI$Primitive) {
    inherits(NavManager, _UI$Primitive);
    createClass(NavManager, [{
        key: "getCarouselStyleSheet",
        value: function getCarouselStyleSheet() {
            return this.options.carouselStyleSheet || NavCarouselStyle.getInstance();
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                persistentLeftSidePanel: true,
                persistentRightSidePanel: true
            };
        }
    }]);

    function NavManager(options) {
        classCallCheck(this, NavManager);

        var _this4 = possibleConstructorReturn(this, (NavManager.__proto__ || Object.getPrototypeOf(NavManager)).call(this, options));

        _this4.leftSidePanel = UI.createElement(
            SidePanel,
            { anchor: Direction.LEFT, name: "left", persistent: _this4.options.persistentLeftSidePanel },
            UI.createElement(
                Carousel$$1,
                { ref: _this4.refLink("carousel"), styleSheet: _this4.getCarouselStyleSheet() },
                UI.createElement(
                    BasicOrientedElement,
                    { orientation: Orientation.VERTICAL, ref: _this4.refLink("navigationPanel"),
                        styleSheet: _this4.styleSheet },
                    _this4.getLeftSidePanelChildren()
                )
            )
        );

        _this4.rightSidePanel = UI.createElement(
            SidePanel,
            { anchor: Direction.RIGHT, name: "right", persistent: _this4.options.persistentRightSidePanel },
            _this4.getRightSidePanelChildren()
        );
        return _this4;
    }

    createClass(NavManager, [{
        key: "getLeftSidePanelChildren",
        value: function getLeftSidePanelChildren() {
            return [];
        }
    }, {
        key: "getRightSidePanelChildren",
        value: function getRightSidePanelChildren() {
            return [];
        }
    }, {
        key: "getLeftConditionedChildren",
        value: function getLeftConditionedChildren() {
            return [];
        }
    }, {
        key: "getRightConditionedChildren",
        value: function getRightConditionedChildren() {
            return [];
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.navManager);
        }
    }, {
        key: "getOrientation",
        value: function getOrientation() {
            return Orientation.HORIZONTAL;
        }
    }, {
        key: "leftSideIconAction",
        value: function leftSideIconAction() {
            if (this.wrapped) {
                if (this.carousel.getActive() === this.navigationPanel) {
                    this.toggleLeftSidePanel();
                } else {
                    this.carousel.setActive(this.navigationPanel);
                    if (!this.leftSidePanel.visible) {
                        this.toggleLeftSidePanel();
                    }
                }
            } else {
                this.toggleLeftSidePanel();
            }
        }

        // TODO: lots of duplicate code here, with left/right stuff

    }, {
        key: "getLeftSideIcon",
        value: function getLeftSideIcon() {
            var _this5 = this;

            if (!this.leftSidePanel) {
                return null;
            }

            if (!this.leftPanelToggler) {
                this.leftPanelToggler = UI.createElement(LeftSideNavIcon, { onClick: function onClick() {
                        return _this5.leftSideIconAction();
                    } });
            }
            return this.leftPanelToggler;
        }
    }, {
        key: "rightSideIconAction",
        value: function rightSideIconAction() {
            this.toggleRightSidePanel();
        }
    }, {
        key: "getRightSideIcon",
        value: function getRightSideIcon() {
            var _this6 = this;

            if (!this.rightSidePanel) {
                return null;
            }
            if (!this.rightPanelToggler) {
                this.rightPanelToggler = UI.createElement(RightSideNavIcon, { onClick: function onClick() {
                        return _this6.rightSideIconAction();
                    } });
            }
            return this.rightPanelToggler;
        }
    }, {
        key: "getFixedWidth",
        value: function getFixedWidth() {
            var width = 10;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;

                    width += child.getWidth();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            width -= this.getLeftConditioned().getWidth();
            width -= this.getRightConditioned().getWidth();
            return width;
        }
    }, {
        key: "wrappedIconAction",
        value: function wrappedIconAction() {
            if (this.wrapped) {
                if (this.carousel.getActive() === this.wrappedPanel) {
                    this.toggleLeftSidePanel();
                } else {
                    this.carousel.setActive(this.wrappedPanel);
                    if (!this.leftSidePanel.visible) {
                        this.toggleLeftSidePanel();
                    }
                }
            } else {
                this.toggleLeftSidePanel();
            }
        }
    }, {
        key: "getWrappedIcon",
        value: function getWrappedIcon() {
            var _this7 = this;

            if (!this.wrappedToggler) {
                this.wrappedToggler = UI.createElement(WrappedNavIcon, { onClick: function onClick() {
                        return _this7.wrappedIconAction();
                    },
                    className: this.wrapped ? "" : "hidden" });
            }
            return this.wrappedToggler;
        }
    }, {
        key: "getLeftFixed",
        value: function getLeftFixed() {
            return [];
        }
    }, {
        key: "getRightFixed",
        value: function getRightFixed() {
            return [];
        }
    }, {
        key: "getLeftConditionedWrapper",
        value: function getLeftConditionedWrapper() {
            if (!this.leftConditionedWrapper) {
                this.leftConditionedWrapper = UI.createElement(
                    NavSection,
                    { anchor: Direction.LEFT },
                    this.getLeftConditioned()
                );
            }
            return this.leftConditionedWrapper;
        }
    }, {
        key: "getRightConditionedWrapper",
        value: function getRightConditionedWrapper() {
            if (!this.rightConditionedWrapper) {
                this.rightConditionedWrapper = UI.createElement(
                    NavSection,
                    { anchor: Direction.RIGHT },
                    this.getRightConditioned()
                );
            }
            return this.rightConditionedWrapper;
        }
    }, {
        key: "getLeftConditioned",
        value: function getLeftConditioned() {
            if (!this.leftConditioned) {
                this.leftConditioned = UI.createElement(
                    NavSection,
                    null,
                    this.getLeftConditionedChildren()
                );
            }
            return this.leftConditioned;
        }
    }, {
        key: "getRightConditioned",
        value: function getRightConditioned() {
            if (!this.rightConditioned) {
                this.rightConditioned = UI.createElement(
                    NavSection,
                    null,
                    this.getRightConditionedChildren()
                );
            }
            return this.rightConditioned;
        }
    }, {
        key: "toggleSidePanel",
        value: function toggleSidePanel(mainPanel, toggleEvent) {
            var secondaryPanel = mainPanel == this.leftSidePanel ? this.rightSidePanel : this.leftSidePanel;
            mainPanel.toggle();
            this.dispatch(toggleEvent, mainPanel.visible);
            if (secondaryPanel && mainPanel.visible && secondaryPanel.visible) {
                mainPanel.setStyle("z-index", 3001);
                secondaryPanel.setStyle("z-index", 3000);
            }
        }
    }, {
        key: "toggleLeftSidePanel",
        value: function toggleLeftSidePanel() {
            this.toggleSidePanel(this.leftSidePanel, "toggledLeftSide");
        }
    }, {
        key: "toggleRightSidePanel",
        value: function toggleRightSidePanel() {
            this.toggleSidePanel(this.rightSidePanel, "toggledRightSide");
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getLeftSideIcon(), this.getLeftFixed(), this.getLeftConditionedWrapper(), this.getWrappedIcon(), UI.createElement(
                NavSection,
                { style: { marginLeft: "auto" } },
                this.getRightConditionedWrapper()
            ), this.getRightFixed(), this.getRightSideIcon()];
        }
    }, {
        key: "bindToNode",
        value: function bindToNode() {
            get(NavManager.prototype.__proto__ || Object.getPrototypeOf(NavManager.prototype), "bindToNode", this).apply(this, arguments);
            this.onMount();
        }

        // This method enforces the wrapping to be skipped. It is useful when navbar elements change.

    }, {
        key: "skipWrap",
        value: function skipWrap() {
            this.wrapSkip = true;
            this.wrapScheduled = false;
        }
    }, {
        key: "unskipWrap",
        value: function unskipWrap() {
            this.wrapSkip = false;
            if (this.wrapScheduled) {
                this.checkForWrap();
            }
        }
    }, {
        key: "checkForWrap",
        value: function checkForWrap() {
            var _this8 = this;

            if (this.wrapSkip) {
                this.wrapScheduled = true;
                return;
            }
            var wrapNavElements = function wrapNavElements() {
                _this8.wrapped = true;
                _this8.wrappedPanel = UI.createElement(BasicOrientedElement, { orientation: Orientation.VERTICAL, styleSheet: _this8.styleSheet });
                _this8.carousel.appendChild(_this8.wrappedPanel);

                changeParent(_this8.getRightConditioned(), _this8.wrappedPanel);
                changeParent(_this8.getLeftConditioned(), _this8.wrappedPanel);
                _this8.getRightConditioned().redraw();
                _this8.getLeftConditioned().redraw();
                _this8.getWrappedIcon().removeClass("hidden");
            };

            var unwrapNavElements = function unwrapNavElements() {
                _this8.wrapped = false;
                _this8.getWrappedIcon().addClass("hidden");
                changeParent(_this8.getLeftConditioned(), _this8.getLeftConditionedWrapper());
                changeParent(_this8.getRightConditioned(), _this8.getRightConditionedWrapper());
                _this8.carousel.eraseChild(_this8.wrappedPanel);
                _this8.getLeftConditioned().redraw();
                _this8.getRightConditioned().redraw();
            };

            if (this.getLeftConditioned().children.length || this.getRightConditioned().children.length) {
                if (!this.wrapped) {
                    this.unwrappedTotalWidth = 10;
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var child = _step2.value;

                            this.unwrappedTotalWidth += child.getWidth();
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }
                }
                if (window.innerWidth < this.unwrappedTotalWidth && !this.wrapped) {
                    wrapNavElements();
                    this.dispatch("wrapped", true);
                } else if (window.innerWidth >= this.unwrappedTotalWidth && this.wrapped) {
                    unwrapNavElements();
                    this.dispatch("wrapped", false);
                }
            } else if (this.wrapped) {
                unwrapNavElements();
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            NavManager.Global = this;
            initializeSwipeEvents(this);
            setTimeout(function () {
                return _this9.checkForWrap();
            });
            window.addEventListener("resize", function () {
                return _this9.checkForWrap();
            });
            this.addListener("maybeWrap", function () {
                return _this9.checkForWrap();
            });
            this.addClickListener(function (event) {
                event.stopPropagation();
            });
        }
    }]);
    return NavManager;
}(UI.Primitive("nav"))) || _class3$12);


var initializeNavbar = function initializeNavbar() {
    NavManager.Global = NavManager.Global || new NavManager();
    return NavManager.Global;
};

var Country = function (_StoreObject) {
    inherits(Country, _StoreObject);

    function Country() {
        classCallCheck(this, Country);
        return possibleConstructorReturn(this, (Country.__proto__ || Object.getPrototypeOf(Country)).apply(this, arguments));
    }

    createClass(Country, [{
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }, {
        key: "getIsoCode",
        value: function getIsoCode() {
            return this.isoCode;
        }
    }, {
        key: "getEmojiName",
        value: function getEmojiName() {
            return "flag_" + this.getIsoCode().toLowerCase();
        }
    }]);
    return Country;
}(StoreObject);

var ALL_COUNTRIES_PLACEHOLDER = function ALL_COUNTRIES_PLACEHOLDER(name) {
    return { id: 0, name: "", toString: function toString() {
            return name || "All Countries";
        } };
};
var NO_COUNTRY_PLACEHOLDER = function NO_COUNTRY_PLACEHOLDER(name) {
    return { id: -1, name: "", toString: function toString() {
            return name || "None";
        } };
};

var COUNTRY_COMPARATOR = function COUNTRY_COMPARATOR(a, b) {
    if (a.name > b.name) {
        return 1;
    }
    return -1;
};

var CountryStoreClass = function (_GenericObjectStore) {
    inherits(CountryStoreClass, _GenericObjectStore);

    function CountryStoreClass() {
        classCallCheck(this, CountryStoreClass);
        return possibleConstructorReturn(this, (CountryStoreClass.__proto__ || Object.getPrototypeOf(CountryStoreClass)).apply(this, arguments));
    }

    createClass(CountryStoreClass, [{
        key: "allWithNone",
        value: function allWithNone() {
            var noneName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "None";

            return [NO_COUNTRY_PLACEHOLDER(noneName)].concat(toConsumableArray(this.all().sort(COUNTRY_COMPARATOR)));
        }
    }, {
        key: "getCountriesFromIds",
        value: function getCountriesFromIds(countriesIds) {
            var allCountries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var countries = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = countriesIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var countryId = _step.value;

                    countries.push(CountryStore.get(countryId));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var result = countries.sort(COUNTRY_COMPARATOR);
            if (allCountries) {
                result.unshift(ALL_COUNTRIES_PLACEHOLDER());
            }
            return result;
        }
    }]);
    return CountryStoreClass;
}(GenericObjectStore);

var CountryStore = new CountryStoreClass("country", Country);

var User = function (_StoreObject) {
    inherits(User, _StoreObject);

    function User(obj) {
        classCallCheck(this, User);

        var _this = possibleConstructorReturn(this, (User.__proto__ || Object.getPrototypeOf(User)).call(this, obj));

        _this.taskSummaries = new Map();
        return _this;
    }

    createClass(User, [{
        key: "getName",
        value: function getName() {}
    }, {
        key: "getCustomSetting",
        value: function getCustomSetting(key, defaultValue) {
            var keyChain = key.split(":");
            var currentDict = this.customSettings;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = keyChain[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _key = _step.value;

                    if (_key in currentDict) {
                        currentDict = currentDict[_key];
                    } else {
                        return defaultValue;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return currentDict;
        }
    }, {
        key: "getParsedCustomSetting",
        value: function getParsedCustomSetting(key, defaultValue) {
            return JSON.parse(this.getCustomSetting(key, defaultValue));
        }
    }, {
        key: "setCustomSetting",
        value: function setCustomSetting(key, value) {
            var keyChain = key.split(":");
            var lastKey = keyChain.pop();
            if (!this.customSettings) {
                this.customSettings = {};
            }
            var currentDict = this.customSettings;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = keyChain[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _key2 = _step2.value;

                    if (!(_key2 in currentDict)) {
                        currentDict[_key2] = {};
                    }
                    currentDict = currentDict[_key2];
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            currentDict[lastKey] = value;

            var event = {
                key: key,
                rawValue: value,
                origin: "set"
            };
            try {
                event.value = JSON.parse(value);
            } catch (e) {
                event.value = value;
            }
            this.dispatch("updateCustomSetting", event);
        }
    }, {
        key: "saveCustomSetting",
        value: function saveCustomSetting(key, value) {
            if (this.id != USER.id) {
                console.error("Invalid user");
                return;
            }

            this.dispatch("updateCustomSetting", {
                key: key,
                value: value,
                origin: "save"
            });

            var request = {
                customSettingsKey: key,
                customSettingsValue: value
            };

            if (!this.timeouts) {
                this.timeouts = new Map();
            }
            if (this.timeouts.has(key)) {
                clearTimeout(this.timeouts.get(key));
            }
            this.timeouts.set(key, setTimeout(function () {
                Ajax.postJSON("/accounts/profile_changed/", request).then(function () {}, function () {});
            }));
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.type === "setCustomSetting") {
                console.log("Updated custom settings: ", event);
                this.setCustomSetting(event["data"].key, event["data"].value);
            } else {
                get(User.prototype.__proto__ || Object.getPrototypeOf(User.prototype), "applyEvent", this).call(this, event);
            }
        }
    }, {
        key: "getCodeFontSize",
        value: function getCodeFontSize() {
            return this.getParsedCustomSetting("workspace:codeFontSize", 14);
        }
    }, {
        key: "getFileFontSize",
        value: function getFileFontSize() {
            return this.getParsedCustomSetting("workspace:fileFontSize", 14);
        }
    }, {
        key: "getTabSize",
        value: function getTabSize() {
            return this.getParsedCustomSetting("workspace:tabSize", 4);
        }
    }, {
        key: "getShowLineNumber",
        value: function getShowLineNumber() {
            return this.getParsedCustomSetting("workspace:showLineNumber", true);
        }
    }, {
        key: "getShowPrintMargin",
        value: function getShowPrintMargin() {
            return this.getParsedCustomSetting("workspace:showPrintMargin", false);
        }
    }, {
        key: "getPrintMarginSize",
        value: function getPrintMarginSize() {
            return this.getParsedCustomSetting("workspace:printMarginSize", 80);
        }
    }, {
        key: "getBasicAutocompletionStatus",
        value: function getBasicAutocompletionStatus() {
            return this.getParsedCustomSetting("workspace:enableBasicAutocompletion", true);
        }
    }, {
        key: "getLiveAutocompletionStatus",
        value: function getLiveAutocompletionStatus() {
            return this.getParsedCustomSetting("workspace:enableLiveAutocompletion", true);
        }
    }, {
        key: "getSnippetsStatus",
        value: function getSnippetsStatus() {
            return this.getParsedCustomSetting("workspace:enableSnippets", false);
        }
    }, {
        key: "getShowTagsInArchive",
        value: function getShowTagsInArchive(archiveId) {
            return this.getParsedCustomSetting("archive:showTags-" + archiveId, false);
        }
    }]);
    return User;
}(StoreObject);

var UserStoreClass = function (_GenericObjectStore) {
    inherits(UserStoreClass, _GenericObjectStore);

    function UserStoreClass() {
        classCallCheck(this, UserStoreClass);
        return possibleConstructorReturn(this, (UserStoreClass.__proto__ || Object.getPrototypeOf(UserStoreClass)).call(this, "user", User));
    }

    createClass(UserStoreClass, [{
        key: "getCurrentUser",
        value: function getCurrentUser() {
            return USER;
        }
    }]);
    return UserStoreClass;
}(GenericObjectStore);

var UserStore = new UserStoreClass();

var PublicUser = function (_StoreObject2) {
    inherits(PublicUser, _StoreObject2);

    function PublicUser() {
        classCallCheck(this, PublicUser);
        return possibleConstructorReturn(this, (PublicUser.__proto__ || Object.getPrototypeOf(PublicUser)).apply(this, arguments));
    }

    createClass(PublicUser, [{
        key: "getDisplayHandle",
        value: function getDisplayHandle() {
            var name = void 0;
            if (this.displayName) {
                name = this.name || this.username;
            } else {
                name = this.username || this.name;
            }
            return name || "user-" + this.id;
        }
    }, {
        key: "getProfileUrl",
        value: function getProfileUrl() {
            if (this.username) {
                return "/user/" + this.username;
            } else {
                return "/userid/" + this.id;
            }
        }
    }, {
        key: "getRating",
        value: function getRating() {
            return this.rating;
        }
    }, {
        key: "getCountry",
        value: function getCountry() {
            return CountryStore.get(this.countryId);
        }
    }]);
    return PublicUser;
}(StoreObject);

var PublicUserStoreClass = function (_AjaxFetchMixin) {
    inherits(PublicUserStoreClass, _AjaxFetchMixin);

    function PublicUserStoreClass() {
        classCallCheck(this, PublicUserStoreClass);
        return possibleConstructorReturn(this, (PublicUserStoreClass.__proto__ || Object.getPrototypeOf(PublicUserStoreClass)).call(this, "publicuser", PublicUser, {
            fetchTimeoutDuration: 20,
            maxFetchObjectCount: 512,
            fetchURL: "/accounts/public_user_profiles/"
        }));
    }

    createClass(PublicUserStoreClass, [{
        key: "getCountries",
        value: function getCountries() {
            var countryIds = new Set();
            var users = this.all();
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = users[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var user = _step3.value;

                    if (user && user.countryId && !countryIds.has(user.countryId)) {
                        countryIds.add(user.countryId);
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return CountryStore.getCountriesFromIds(countryIds);
        }
    }]);
    return PublicUserStoreClass;
}(AjaxFetchMixin(GenericObjectStore));

var PublicUserStore = new PublicUserStoreClass();

window.USER = Object.assign({
    id: 0,
    customSettings: {}
}, window.USER || {});

window.USER = UserStore.fakeCreate(window.USER);

var UserNotification = function (_StoreObject3) {
    inherits(UserNotification, _StoreObject3);

    function UserNotification() {
        classCallCheck(this, UserNotification);
        return possibleConstructorReturn(this, (UserNotification.__proto__ || Object.getPrototypeOf(UserNotification)).apply(this, arguments));
    }

    createClass(UserNotification, [{
        key: "getUser",
        value: function getUser() {
            return UserStore.get(this.userId);
        }
    }, {
        key: "isRead",
        value: function isRead() {
            return this.id <= this.getUser().lastReadNotificationId;
        }
    }]);
    return UserNotification;
}(StoreObject);

var UserNotificationStore = new GenericObjectStore("UserNotification", UserNotification, { dependencies: ["user"] });

var Tag = function (_StoreObject) {
    inherits(Tag, _StoreObject);

    function Tag() {
        classCallCheck(this, Tag);
        return possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).apply(this, arguments));
    }

    createClass(Tag, [{
        key: "toString",
        value: function toString() {
            var result = this.name;
            var parent = this.getParent();
            if (parent) {
                result = parent + " - " + result;
            }
            return result;
        }
    }, {
        key: "getParent",
        value: function getParent() {
            return TagStore.get(this.parentId);
        }
    }, {
        key: "getDepth",
        value: function getDepth() {
            var depth = -1;
            var tag = this;
            while (tag) {
                tag = tag.getParent();
                depth += 1;
            }
            return depth;
        }
    }]);
    return Tag;
}(StoreObject);

var TagStore = new GenericObjectStore("tag", Tag);

TagStore.getTagByName = function (name) {
    if (!this._caseSensitiveCache) {
        this._caseSensitiveCache = new Map();
    }
    if (this._caseSensitiveCache.has(name)) {
        return this._caseSensitiveCache.get(name);
    }
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = this.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var tag = _step.value;

            if (tag.name === name) {
                this._caseSensitiveCache.set(name, tag);
                return tag;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return null;
};
TagStore.getTagByNameInsensitive = function (name) {
    var lowerCaseName = name.toLocaleLowerCase();
    if (!this._caseInsensitiveCache) {
        this._caseInsensitiveCache = new Map();
    }
    if (this._caseInsensitiveCache.has(lowerCaseName)) {
        return this._caseInsensitiveCache.get(lowerCaseName);
    }
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = this.all()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var tag = _step2.value;

            if (tag.name.toLocaleLowerCase() === lowerCaseName) {
                this._caseInsensitiveCache.set(name, tag);
                return tag;
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return null;
};

// A basic store that can be used to keep objects that map to ISO-code backed languages

var LanguageObject = function (_StoreObject) {
    inherits(LanguageObject, _StoreObject);

    function LanguageObject(obj) {
        classCallCheck(this, LanguageObject);

        var _this = possibleConstructorReturn(this, (LanguageObject.__proto__ || Object.getPrototypeOf(LanguageObject)).call(this, obj));

        _this.translationMap = new Map();
        return _this;
    }

    createClass(LanguageObject, [{
        key: "toString",
        value: function toString() {
            var name = this.name;
            if (this.localName && this.localName != this.name) {
                name += " (" + this.localName + ")";
            }
            return name;
        }
    }, {
        key: "buildTranslation",
        value: function buildTranslation(callback) {
            Language.dispatch("buildTranslationMap", this);
            callback(this.translationMap);
        }
    }]);
    return LanguageObject;
}(StoreObject);

var LanguageStoreClass = function (_GenericObjectStore) {
    inherits(LanguageStoreClass, _GenericObjectStore);

    function LanguageStoreClass() {
        classCallCheck(this, LanguageStoreClass);
        return possibleConstructorReturn(this, (LanguageStoreClass.__proto__ || Object.getPrototypeOf(LanguageStoreClass)).call(this, "Language", LanguageObject));
    }

    createClass(LanguageStoreClass, [{
        key: "getLanguageForCode",
        value: function getLanguageForCode(isoCode) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var language = _step.value;

                    if (language.isoCode === isoCode) {
                        return language;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "setLocale",
        value: function setLocale(language) {
            if (this.Locale == language) {
                return;
            }
            this.Locale = language;
            this.dispatch("localeChange", language);
        }
    }, {
        key: "getLocale",
        value: function getLocale() {
            return this.Locale;
        }
    }]);
    return LanguageStoreClass;
}(GenericObjectStore);

var Language = new LanguageStoreClass();

var TranslationKey = function (_StoreObject) {
    inherits(TranslationKey, _StoreObject);

    function TranslationKey() {
        classCallCheck(this, TranslationKey);
        return possibleConstructorReturn(this, (TranslationKey.__proto__ || Object.getPrototypeOf(TranslationKey)).apply(this, arguments));
    }

    return TranslationKey;
}(StoreObject);

var TranslationKeyStore = new GenericObjectStore("TranslationKey", TranslationKey);

var TranslationEntry = function (_StoreObject2) {
    inherits(TranslationEntry, _StoreObject2);

    function TranslationEntry() {
        classCallCheck(this, TranslationEntry);
        return possibleConstructorReturn(this, (TranslationEntry.__proto__ || Object.getPrototypeOf(TranslationEntry)).apply(this, arguments));
    }

    createClass(TranslationEntry, [{
        key: "getLanguage",
        value: function getLanguage() {
            return Language.get(this.languageId);
        }
    }, {
        key: "getTranslationKey",
        value: function getTranslationKey() {
            return TranslationKeyStore.get(this.translationKeyId);
        }
    }]);
    return TranslationEntry;
}(StoreObject);

var TranslationEntryStore = new GenericObjectStore("TranslationEntry", TranslationEntry);

Language.addListener("buildTranslationMap", function (language) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = TranslationEntryStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var translationEntry = _step.value;

            if (translationEntry.languageId === language.id) {
                language.translationMap.set(translationEntry.getTranslationKey().value, translationEntry.value);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
});

var ChatMarkupRenderer = function (_MarkupRenderer) {
    inherits(ChatMarkupRenderer, _MarkupRenderer);

    function ChatMarkupRenderer() {
        classCallCheck(this, ChatMarkupRenderer);
        return possibleConstructorReturn(this, (ChatMarkupRenderer.__proto__ || Object.getPrototypeOf(ChatMarkupRenderer)).apply(this, arguments));
    }

    createClass(ChatMarkupRenderer, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.classMap = this.constructor.classMap;
            get(ChatMarkupRenderer.prototype.__proto__ || Object.getPrototypeOf(ChatMarkupRenderer.prototype), "setOptions", this).call(this, options);
        }
    }]);
    return ChatMarkupRenderer;
}(MarkupRenderer);

ChatMarkupRenderer.classMap = new MarkupClassMap(MarkupClassMap.GLOBAL);

function isWhiteSpace(character) {
    return (character + "").trim() === "";
}

// TODO: why is there a callback second argument??
function consoleTokenizer(input, callback) {
    var currentToken = "";
    var doubleQuotesOpen = false;
    var tokens = [];
    var i = 0;

    while (i < input.length) {
        if (input[i] === "\\") {
            // A backslash can only be followed by another backslash or double quotes
            if (input[i + 1] === "\\" || input[i + 1] === "\"") {
                currentToken += input[i + 1];
                i += 2;
            } else {
                throw "A backslash must be followed by another backslash or double quotes";
            }
        } else if (input[i] === "\"") {
            // Double quotes that are placed at the end of the token must be at the end of the string or followed by
            // a white character, meaning the current token is ended and needs to be inserted in the array
            if (doubleQuotesOpen === true && (i + 1 === input.length || isWhiteSpace(input[i + 1]))) {
                doubleQuotesOpen = false;
                tokens.push(currentToken);
                currentToken = "";
                i += 2;
            } else if (doubleQuotesOpen === false && currentToken === "") {
                // Double quotes can also mean the beginning of a token with special characters
                doubleQuotesOpen = true;
                i += 1;
            } else {
                throw "Double quotes must be preceded by backslash if they are inside a word";
            }
        } else if (!doubleQuotesOpen && isWhiteSpace(input[i])) {
            // A whitespace outside of double quotes closure means the end of a token, so it is inserted in the
            // array and reinitialized with empty string
            if (currentToken !== "") {
                tokens.push(currentToken);
                currentToken = "";
            }
            i += 1;
        } else {
            // If there is no special case we append the current letter to the end of the token
            currentToken += input[i];
            i += 1;
        }
    }

    // Insert the current token if it isn't empty
    if (currentToken !== "") {
        tokens.push(currentToken);
    }

    // Double quotes open are a syntax error
    if (doubleQuotesOpen === true) {
        throw "Double quotes can't be left open";
    }

    return tokens;
}

var Formatter = {
    cpuTime: function cpuTime(value) {
        if (value == null) {
            return "-";
        }
        return Math.round(value * 1000.0) + " ms";
    },
    memory: function memory(value) {
        var shortForm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (value == null) {
            return "-";
        }
        if (value < 2048) {
            return value + (shortForm ? "" : " ") + "B";
        }
        var memUsage = value / 1024;
        var suffix = "KB";

        if (memUsage >= 1024 * 1024) {
            memUsage /= 1024 * 1024;
            suffix = "GB";
        } else if (memUsage >= 10 * 1024) {
            memUsage /= 1024;
            suffix = "MB";
        }

        memUsage = Math.round(memUsage * 10) / 10;
        return memUsage.toString() + (shortForm ? "" : " ") + suffix;
    },
    duration: function duration(value, options) {
        // value in milliseconds
        value = new Duration(value);

        var result = [];
        if (options.days && value.toDays()) {
            var d = value.toDays() + " day";
            if (value.toDays() >= 2) {
                d += "s";
            }
            result.push(d);
        }

        if (options.hours && value.getHours()) {
            var h = value.getHours() + " hour";
            if (value.getHours() >= 2) {
                h += "s";
            }
            result.push(h);
        }

        if (options.minutes && value.getMinutes()) {
            var m = value.getMinutes() + " minute";
            if (value.getMinutes() >= 2) {
                m += "s";
            }
            result.push(m);
        }

        if (options.seconds && value.getSeconds()) {
            var s = value.getSeconds() + " second";
            if (value.getSeconds() >= 2) {
                s += "s";
            }
            result.push(s);
        }
        if (result.length === 0) {
            return "";
        }
        if (result.length === 1) {
            return result[0];
        }
        if (options.lastSeparator) {
            var firstPart = result.slice(0, -1).join(options.separator || " ");
            return firstPart + options.lastSeparator + result[result.length - 1];
        }
        return result.join(options.separator || " ");
    },
    truncate: function truncate(value) {
        var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var power = Math.pow(10, precision);
        if (typeof value === "string") {
            value = parseFloat(value);
        }
        return Math.round(value * power) / power;
    }
};

function getTextWidth(text, options) {
    options = options || {};
    // Re-use canvas object for better performance
    var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
    var context = canvas.getContext("2d");
    context.font = (options.fontSize || 12) + "px " + (options.font || "Segoe UI");
    var metrics = context.measureText(text);
    return metrics.width;
}

function parseIntegers(str) {
    var int = [];
    var currentInt = 0;
    var started = false;
    var sign = 1;
    for (var i = 0; i < str.length; i += 1) {
        if ("0123456789".indexOf(str[i]) !== -1) {
            started = true;
            currentInt = currentInt * 10 + str.charCodeAt(i) - 48;
        } else if ("-".indexOf(str[i]) !== -1 && !started) {
            sign = -1;
        } else {
            if (started) {
                int.push(sign * currentInt);
            }
            currentInt = 0;
            sign = 1;
            if ("-".indexOf(str[i]) !== -1) {
                sign = -1;
            }
            started = false;
        }
    }
    if (started) {
        int.push(sign * currentInt);
    }
    return int;
}

// This is how you calculate viewport height. See: https://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript
//var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
//var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)

var GraphNode = function (_DoubleClickable) {
    inherits(GraphNode, _DoubleClickable);

    function GraphNode() {
        classCallCheck(this, GraphNode);
        return possibleConstructorReturn(this, (GraphNode.__proto__ || Object.getPrototypeOf(GraphNode)).apply(this, arguments));
    }

    createClass(GraphNode, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                color: "black",
                innerColor: "white",
                circleAttr: {
                    radius: 19,
                    strokeWidth: 2
                },
                textAttr: {
                    text: "N/A",
                    dy: ".35em",
                    textAnchor: "middle",
                    strokeWidth: 1,
                    fontSize: 14
                },
                fixed: false,
                dragging: false,
                secondLabelSign: 1, //whether the label NEXT to the node should be above or below
                secondLabelPadding: 10 //distance from node
            };
        }
    }, {
        key: "render",
        value: function render() {
            var children = [UI.createElement(SVG.Circle, _extends({ ref: "circle"
            }, this.options.circleAttr, { fill: this.options.innerColor, stroke: this.options.color,
                center: this.options.data.center })), UI.createElement(SVG.Text, _extends({ ref: "label"
            }, this.options.textAttr, { fill: this.options.color, stroke: this.options.color, text: this.options.data.label + "",
                x: this.options.data.center.x,
                y: this.options.data.center.y }))];
            if (this.options.data.hasOwnProperty("secondLabel")) {
                children.push(UI.createElement(SVG.Text, _extends({ ref: "secondLabel"
                }, this.options.textAttr, { fill: this.options.color,
                    stroke: this.options.color, text: this.options.data.secondLabel + "",
                    x: this.options.data.center.x,
                    y: this.options.data.center.y + this.options.secondLabelSign * (this.options.circleAttr.radius + this.options.secondLabelPadding)
                })));
            }
            return children;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            if (this.getRadius() < 7) {
                this.label.setOpacity(0);
                this.circle.setAttribute("fill", this.options.color);
            }

            this.setStyle("cursor", "pointer");

            // this is required for graph editor, so entering "edit" mode removes these listeners
            this._fixNodeCallback = function () {
                if (_this2.isFixed()) {
                    _this2.setFixed(false);
                } else {
                    _this2.setFixed(true);
                }
            };
            this.addClickListener(this._fixNodeCallback);

            this.addDragListener({
                onStart: function onStart() {
                    _this2.dragging = true;
                    // this.getGraph().setFrictionCoef(0.01);
                },
                onDrag: function onDrag(deltaX, deltaY) {
                    var x = _this2.getCenter().x + deltaX;
                    var y = _this2.getCenter().y + deltaY;
                    _this2.setCenter({ x: x, y: y });
                },
                onEnd: function onEnd() {
                    _this2.dragging = false;
                    // this.getGraph().setFrictionCoef(this.getGraph().getDefaultOptions().frictionCoef);
                }
            });
        }
    }, {
        key: "getGraph",
        value: function getGraph() {
            return this.options.graph;
        }
    }, {
        key: "getMarkup",
        value: function getMarkup() {
            var scaleX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            var options = {};
            var defaultOptions = this.getDefaultOptions();
            if (this.options.color !== defaultOptions.color) {
                options.options = options.options || {};
                options.options.color = this.options.color;
            }
            if (this.options.innerColor !== defaultOptions.innerColor) {
                options.options = options.options || {};
                options.options.innerColor = this.options.innerColor;
            }
            if (this.getRadius() !== defaultOptions.circleAttr.radius) {
                options.options = options.options || {};
                options.options.circleAttr = options.options.circleAttr || {};
                options.options.circleAttr.radius = this.getRadius();
            }
            if (this.options.circleAttr.strokeWidth !== defaultOptions.circleAttr.strokeWidth) {
                options.options = options.options || {};
                options.options.circleAttr = options.options.circleAttr || {};
                options.options.circleAttr.strokeWidth = this.circle.getAttribute("stroke-width");
            }
            if (this.options.fixed) {
                options.options = options.options || {};
                options.options.fixed = true;
            }
            options.label = this.getLabel();
            options.center = {};
            options.center.x = Formatter.truncate(this.getCenter().x * scaleX, 1);
            options.center.y = Formatter.truncate(this.getCenter().y * scaleY, 1);
            return JSON.stringify(options).replace(/\"[^\"]*\":/g, function (str) {
                return str.substring(1, str.length - 2) + ":";
            });
        }
    }, {
        key: "getOutgoingEdges",
        value: function getOutgoingEdges() {
            var graph = this.getGraph();
            var edges = [];
            for (var i = 0; i < graph.edges.length; i += 1) {
                var edge = graph.edges[i];
                if (edge.getSource() === this || !edge.isDirected && edge.getTarget() === this) {
                    edges.push(edge);
                }
            }
            return edges;
        }
    }, {
        key: "getIngoingEdges",
        value: function getIngoingEdges() {
            var graph = this.getGraph();
            var edges = [];
            for (var i = 0; i < graph.edges.length; i += 1) {
                var edge = graph.edges[i];
                if (edge.getTarget() === this || !edge.isDirected() && edge.getSource() === this) {
                    edges.push(edge);
                }
            }
            return edges;
        }
    }, {
        key: "getIncidentEdges",
        value: function getIncidentEdges() {
            var graph = this.getGraph();
            var edges = [];
            for (var i = 0; i < graph.edges.length; i += 1) {
                var edge = graph.edges[i];
                if (edge.getSource() === this || edge.getTarget() === this) {
                    edges.push(edge);
                }
            }
            return edges;
        }
    }, {
        key: "setInnerColor",
        value: function setInnerColor(color) {
            this.options.innerColor = color;
            this.circle.setAttribute("fill", this.options.innerColor);
        }
    }, {
        key: "getInnerColor",
        value: function getInnerColor() {
            return this.options.innerColor;
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.options.color = color;
            this.circle.setAttribute("stroke", this.options.color);
            this.label.setAttribute("stroke", this.options.color);
            this.label.setAttribute("fill", this.options.color);
            if (this.secondLabel) {
                this.secondLabel.setAttribute("stroke", this.options.color);
                this.secondLabel.setAttribute("fill", this.options.color);
            }
        }
    }, {
        key: "getColor",
        value: function getColor() {
            return this.options.color;
        }
    }, {
        key: "setLabel",
        value: function setLabel(label) {
            this.options.data.label = label;
            this.getGraph().options.nodes[this.getGraph().nodes.indexOf(this)].label = label;
            this.label.setText(label);
        }
    }, {
        key: "getLabel",
        value: function getLabel() {
            return this.options.data.label;
        }
    }, {
        key: "boundCoords",
        value: function boundCoords(coords) {
            var box = this.getGraph().getBox();
            var radius = this.getRadius();

            var x = coords.x;
            if (x < box.x + radius) {
                x = box.x + radius;
            }
            if (x > box.x + box.width - radius) {
                x = box.x + box.width - radius;
            }

            var y = coords.y;
            if (y < box.y + radius) {
                y = box.y + radius;
            }
            if (y > box.y + box.height - radius) {
                y = box.y + box.height - radius;
            }

            return { x: x, y: y };
        }
    }, {
        key: "setCenter",
        value: function setCenter(coords) {
            var updateEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            coords = this.boundCoords(coords);
            this.options.data.center = coords;

            this.circle.setCenter(coords.x, coords.y);
            this.label.setPosition(coords.x, coords.y);
            if (this.secondLabel) {
                this.secondLabel.setPosition(coords.x, coords.y + this.options.secondLabelSign * (this.getRadius() + this.options.secondLabelPadding));
            }

            if (updateEdges) {
                var edges = this.getIncidentEdges();
                for (var i = 0; i < edges.length; i += 1) {
                    var edge = edges[i];
                    edge.update();
                }
            }

            this.getGraph().nodeCenterChanged(this, coords);
        }
    }, {
        key: "getCenter",
        value: function getCenter() {
            return this.options.data.center;
        }
    }, {
        key: "setFixed",
        value: function setFixed(value) {
            var highlight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.options.fixed = value;
            if (highlight === true) {
                if (value === true) {
                    this.circle.setAttribute("stroke-width", 5);
                } else {
                    this.circle.setAttribute("stroke-width", 2);
                }
            }
        }
    }, {
        key: "isFixed",
        value: function isFixed() {
            return this.options.fixed;
        }
    }, {
        key: "setRadius",
        value: function setRadius(radius) {
            this.circle.setRadius(radius);
            if (radius < 7) {
                this.label.setOpacity(0);
                this.circle.setAttribute("fill", this.options.color);
            } else {
                this.label.setOpacity(1);
                this.circle.setAttribute("fill", this.options.innerColor);
            }
        }
    }, {
        key: "getRadius",
        value: function getRadius() {
            return this.circle.getRadius();
        }
    }, {
        key: "getPopupPosition",
        value: function getPopupPosition() {
            var deltaX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var deltaY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var forceTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if (forceTransition && forceTransition.points.has(this)) {
                var result = void 0;
                var coords = forceTransition.points.get(this);
                result = {
                    x: coords.x + deltaX,
                    y: coords.y + deltaY
                };
                return result;
            }
        }

        // Transitions start here

    }, {
        key: "changeColorTransition",
        value: function changeColorTransition(color, duration) {
            var _this3 = this;

            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            return new Transition({
                func: function func(t, context) {
                    _this3.setColor(Color.interpolate(context.color, color, t));
                },
                context: {
                    color: this.options.color
                },
                duration: duration,
                startTime: startTime,
                dependsOn: dependsOn
            });
        }
    }, {
        key: "moveTransition",
        value: function moveTransition(options) {
            var _this4 = this;

            return new Transition({
                func: function func(t, context) {
                    _this4.setCenter({
                        x: (1 - t) * context.coords.x + t * options.newCoords.x,
                        y: (1 - t) * context.coords.y + t * options.newCoords.y
                    });
                },
                context: {
                    coords: this.getCenter()
                },
                duration: options.duration,
                startTime: options.startTime,
                dependsOn: options.dependsOn
            });
        }
    }, {
        key: "x",
        get: function get$$1() {
            return this.options.data.center.x;
        }
    }, {
        key: "y",
        get: function get$$1() {
            return this.options.data.center.y;
        }
    }]);
    return GraphNode;
}(DoubleClickable(Draggable(SVG.Group)));

var GraphEdge = function (_SVG$Group) {
    inherits(GraphEdge, _SVG$Group);

    function GraphEdge() {
        classCallCheck(this, GraphEdge);
        return possibleConstructorReturn(this, (GraphEdge.__proto__ || Object.getPrototypeOf(GraphEdge)).apply(this, arguments));
    }

    createClass(GraphEdge, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                color: "black",
                pathAttr: {
                    fill: "none",
                    strokeWidth: 2
                },
                invisiblePathAttr: {
                    opacity: 0,
                    fill: "none",
                    strokeWidth: 30
                },
                curveArcRadius: 0,
                supportsBending: true
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(GraphEdge.prototype.__proto__ || Object.getPrototypeOf(GraphEdge.prototype), "setOptions", this).call(this, options);
            this.options.color = this.options.color || this.getDefaultOptions().color;
        }
    }, {
        key: "render",
        value: function render() {
            var sourceCenter = this.getGraph().options.nodes[this.options.data.source].center;
            if (this.getSource()) {
                // If this is not the first time drawing the edge, take the data from the node itself,
                // as the options of the graph might be outdated
                sourceCenter = this.getSource().getCenter();
            }
            var targetCenter = this.getGraph().options.nodes[this.options.data.target].center;
            if (this.getTarget()) {
                // Same as above
                targetCenter = this.getTarget().getCenter();
            }
            this.options.children = [UI.createElement(SVG.Path, _extends({ ref: "path",
                d: "M " + sourceCenter.x + " " + sourceCenter.y + " L " + targetCenter.x + " " + targetCenter.y
            }, this.options.pathAttr, {
                stroke: this.options.color
            })), UI.createElement(SVG.Path, _extends({ ref: "invisiblePath",
                d: "M " + sourceCenter.x + " " + sourceCenter.y + " L " + targetCenter.x + " " + targetCenter.y
            }, this.options.invisiblePathAttr, {
                stroke: this.options.color
            }))];
            this.arrow = UI.createElement(SVG.Polygon, { ref: "arrow",
                points: [{ x: -15, y: 7.5 }, { x: 0, y: 0 }, { x: -15, y: -7.5 }],
                stroke: this.options.color, fill: this.options.color
            });
            if (this.options.label) {
                this.options.children.push(UI.createElement(SVG.Text, { ref: "costLabel", text: this.options.label }));
            }
            if (this.options.directed) {
                this.options.children.push(this.arrow);
            }
            return this.options.children;
        }
    }, {
        key: "getLabel",
        value: function getLabel() {
            return this.options.label;
        }
    }, {
        key: "setLabel",
        value: function setLabel(label) {
            if (!this.costLabel) {
                this.costLabel = UI.createElement(SVG.Text, { text: label });
                this.costLabel.mount(this);
                this.drawCost(true);
            }
            this.costLabel.setText(label);
            this.options.label = label;
            this.update();
        }
    }, {
        key: "drawCost",
        value: function drawCost() {
            var forced = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (!this.getLabel() && !forced) {
                return;
            }
            var costLabelPadding = 5;
            var pathLength = this.path.node.getTotalLength();
            var midPoint = this.path.node.getPointAtLength(pathLength / 2);
            var vector = void 0;

            if (midPoint.x <= 0 || midPoint.y <= 0) {
                return;
            }

            vector = this.computeBisectorVector(pathLength, midPoint);
            this.costLabel.setPosition(midPoint.x + vector.x * (this.costLabel.getWidth() / 2 + costLabelPadding), midPoint.y + vector.y * (this.costLabel.getHeight() / 2 + costLabelPadding));
        }
    }, {
        key: "computeBisectorVector",
        value: function computeBisectorVector() {
            var pathLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.path.node.getTotalLength();
            var midPoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.path.node.getPointAtLength(pathLength / 2);

            var EPS$$1 = 1;
            var SLOPE_EPS = 0.15;
            var normalizationUnit = void 0;
            // Take a the vector characterizing the slope at the midpoint of the path
            var auxiliaryPoint = this.path.node.getPointAtLength(pathLength / 2 + EPS$$1);
            var vector = normalizeVector({
                x: auxiliaryPoint.x - midPoint.x,
                y: auxiliaryPoint.y - midPoint.y
            });

            // Get the perpendicular vector
            vector = rotatePoint(vector, 0, Math.PI / 2);
            // Negate the vector if it doesn't have the right orientation (we want to bring the text ABOVE the edge)
            if (vector.y >= 0) {
                vector = rotatePoint(vector, 0, Math.PI);
            }
            // The biggest direction vector will be set to 1 in its absolute value, and so the values must be normalized
            normalizationUnit = Math.max(Math.abs(vector.x), Math.abs(vector.y));

            // If the path has length 0, the vector is null
            if (pathLength === 0) {
                return {
                    x: 0,
                    y: 1
                };
            }

            vector.x /= normalizationUnit;
            vector.y /= normalizationUnit;

            // For paths with small slope the x coordinate is calculated using a linear function.
            // For paths with bigger slope the x coordinate is a constant.
            if (Math.abs(vector.x) < SLOPE_EPS) {
                vector.x = Math.sign(vector.x) * (1 - (SLOPE_EPS - Math.abs(vector.x)) / SLOPE_EPS);
            } else {
                vector.x = Math.sign(vector.x);
            }

            return vector;
        }
    }, {
        key: "getArrowStartPercent",
        value: function getArrowStartPercent() {
            var totalLen = this.path.getLength();
            var EPS$$1 = 0.1;

            for (var curLen = this.getSource().getRadius(); curLen < totalLen; curLen += EPS$$1) {
                var point = this.path.getPointAtLength(curLen);
                if (distance(this.getSource().getCenter(), point) > this.getSource().getRadius()) {
                    return curLen / totalLen;
                }
            }

            return 1;
        }
    }, {
        key: "getMarkup",
        value: function getMarkup() {
            var options = {};
            var defaultOptions = this.getDefaultOptions();
            if (this.options.color !== defaultOptions.color) {
                options.color = this.options.color;
            }
            if (this.options.pathAttr.strokeWidth !== defaultOptions.pathAttr.strokeWidth) {
                options.pathAttr = options.pathAttr || {};
                options.pathAttr.strokeWidth = this.options.pathAttr.strokeWidth;
            }
            if (this.getLabel()) {
                options.label = this.getLabel();
            }
            options.source = this.getSourceIndex();
            options.target = this.getTargetIndex();
            return JSON.stringify(options).replace(/\"[^\"]*\":/g, function (str) {
                return str.substring(1, str.length - 2) + ":";
            });
        }
    }, {
        key: "getArrowEndPercent",
        value: function getArrowEndPercent() {
            var totalLen = this.path.getLength();
            var EPS$$1 = 0.1;

            for (var curLen = totalLen - this.getTarget().getRadius(); curLen >= 0; curLen -= EPS$$1) {
                var point = this.path.node.getPointAtLength(curLen);
                if (distance(this.getTarget().getCenter(), point) > this.getTarget().getRadius()) {
                    return curLen / totalLen;
                }
            }

            return 0;
        }
    }, {
        key: "setDirected",
        value: function setDirected(boolFlag) {
            if (this.options.directed === boolFlag) {
                return;
            }
            this.options.directed = boolFlag;
            if (!this.options.directed) {
                this.eraseChild(this.arrow, false);
            } else {
                this.appendChild(this.arrow);
                this.setArrowOnPath(1);
            }
        }
    }, {
        key: "getPathString",
        value: function getPathString() {
            if (this.options.curveArcRadius === 0) {
                // If the curve ratio is 0, the path is a line
                return "M " + this.getSource().x + " " + this.getSource().y + " L " + this.getTarget().x + " " + this.getTarget().y;
            } else {
                // Draw a quadratic Bezier curve
                // Compute Bezier control point
                var edgeMidPoint = {
                    x: (this.getSource().x + this.getTarget().x) / 2,
                    y: (this.getSource().y + this.getTarget().y) / 2
                };
                var bezierControlPoint = addVectors(scaleVector(normalizeVector(subtractVectors(rotatePoint(this.getSource().getCenter(), edgeMidPoint, Math.PI / 2), edgeMidPoint)), this.options.curveArcRadius * 2), edgeMidPoint);

                return "M" + this.getSource().x + "," + this.getSource().y + "Q" + bezierControlPoint.x + "," + bezierControlPoint.y + "," + this.getTarget().x + "," + this.getTarget().y;
            }
        }
    }, {
        key: "setArrowOnPath",
        value: function setArrowOnPath(percent) {
            var endPercent = this.getArrowEndPercent();
            var startPercent = this.getArrowStartPercent();
            var length = (startPercent + percent * (endPercent - startPercent)) * this.path.getLength();
            var point = this.path.getPointAtLengthWithAngle(length);
            this.arrow.node.setAttribute("transform", "translate (" + point.x + " " + point.y + ") " + "rotate(" + (point.alpha + 180) + ")");
        }
    }, {
        key: "setCurveArcRadius",
        value: function setCurveArcRadius(newCurveArcRadius) {
            this.options.curveArcRadius = newCurveArcRadius;
        }
    }, {
        key: "getCurveArcRadius",
        value: function getCurveArcRadius() {
            return this.options.curveArcRadius;
        }
    }, {
        key: "setBendingSupport",
        value: function setBendingSupport(value) {
            this.options.supportsBending = value;
        }
    }, {
        key: "update",
        value: function update() {
            var newPath = this.getPathString();
            this.path.setPath(newPath);
            this.invisiblePath.setPath(newPath);

            this.drawCost();

            if (this.options.directed) {
                this.setArrowOnPath(1);
            }
        }
    }, {
        key: "getGraph",
        value: function getGraph() {
            return this.options.graph;
        }
    }, {
        key: "delete",
        value: function _delete() {
            this.getGraph().options.edges.erase(this.data);
            this.getGraph().edgeGroup.eraseChild(this);
        }
    }, {
        key: "reverse",
        value: function reverse() {
            var aux = this.options.data.source;
            this.options.data.source = this.options.data.target;
            this.options.data.target = aux;
        }
    }, {
        key: "getSourceIndex",
        value: function getSourceIndex() {
            return this.options.data.source;
        }
    }, {
        key: "getTargetIndex",
        value: function getTargetIndex() {
            return this.options.data.target;
        }
    }, {
        key: "getSource",
        value: function getSource() {
            return this.getGraph().nodes[this.options.data.source];
        }
    }, {
        key: "getTarget",
        value: function getTarget() {
            return this.getGraph().nodes[this.options.data.target];
        }
    }, {
        key: "getColor",
        value: function getColor() {
            return this.options.color;
        }
    }, {
        key: "isDirected",
        value: function isDirected() {
            return this.options.directed;
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.options.color = color;
            if (this.node) {
                this.path.setAttribute("stroke", color);
                this.invisiblePath.setAttribute("stroke", color);
                if (this.arrow.node) {
                    this.arrow.setAttribute("stroke", color);
                    this.arrow.setAttribute("fill", color);
                }
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(GraphEdge.prototype.__proto__ || Object.getPrototypeOf(GraphEdge.prototype), "onMount", this).call(this);
            this.drawCost();
        }

        // Transitions start here

    }, {
        key: "changeColorTransition",
        value: function changeColorTransition(color, duration) {
            var _this2 = this;

            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            return new Transition({
                func: function func(t, context) {
                    _this2.setColor(Color.interpolate(context.color, color, t));
                },
                context: {
                    color: this.options.color
                },
                duration: duration,
                startTime: startTime,
                dependsOn: dependsOn
            });
        }
    }, {
        key: "bendingTransition",
        value: function bendingTransition(targetCurveArcRadius, duration) {
            var _this3 = this;

            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            return new Transition({
                func: function func(t, context) {
                    _this3.setCurveArcRadius(context.curveArcRadius + t * (targetCurveArcRadius - context.curveArcRadius));
                    _this3.update();
                },
                context: {
                    curveArcRadius: this.options.curveArcRadius
                },
                duration: duration,
                startTime: startTime,
                dependsOn: dependsOn
            });
        }
    }, {
        key: "arrowTravelTransition",
        value: function arrowTravelTransition(duration) {
            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var _this4 = this;

            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var keepArrow = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;
            // Make the edge undirected
            var currentDependencies = [];
            if (this.isDirected()) {
                var modifier = new Modifier$1({
                    func: function func() {
                        _this4.setDirected(false);
                    },
                    reverseFunc: function reverseFunc() {
                        _this4.setDirected(true);
                    }
                });
                transitionList.push(modifier, false);
                currentDependencies = [modifier];
            }

            // Append the arrow
            var appendArrowModifier = new Modifier$1({
                func: function func() {
                    _this4.appendChild(_this4.arrow);
                },
                reverseFunc: function reverseFunc() {
                    _this4.eraseChild(_this4.arrow, false);
                },
                dependsOn: currentDependencies
            });
            transitionList.push(appendArrowModifier, false);

            // Move the arrow
            var moveArrowTransition = new Transition({
                func: function func(t) {
                    _this4.setArrowOnPath(t);
                },
                duration: duration,
                dependsOn: [appendArrowModifier]
            });
            transitionList.push(moveArrowTransition, false);

            // Remove the arrow
            var removeArrowModifier = new Modifier$1({
                func: function func() {
                    _this4.eraseChild(_this4.arrow, false);
                },
                reverseFunc: function reverseFunc() {
                    _this4.appendChild(_this4.arrow);
                },
                dependsOn: [moveArrowTransition]
            });
            transitionList.push(removeArrowModifier, false);

            transitionList.push(new Transition({
                func: function func() {},
                duration: 1
            }), false);

            // Make the edge directed
            if (keepArrow) {
                transitionList.push(new Modifier$1({
                    func: function func() {
                        _this4.setDirected(true);
                    },
                    reverseFunc: function reverseFunc() {
                        _this4.setDirected(false);
                    },
                    dependsOn: [removeArrowModifier]
                }), false);
            }

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "getPopupPosition",
        value: function getPopupPosition() {
            var deltaX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var deltaY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var forceTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if (forceTransition && forceTransition.lines.has(this)) {
                var options = forceTransition.lines.get(this);
                this.setCurveArcRadius(options.curveArcRadius);
                this.getSource().setCenter(forceTransition.points.get(this.getSource()));
                this.getTarget().setCenter(forceTransition.points.get(this.getTarget()));
                this.update();
            }
            var midpoint = this.path.node.getPointAtLength(this.path.node.getTotalLength() / 2);
            return {
                x: midpoint.x + deltaX,
                y: midpoint.y + deltaY
            };
        }

        // Only works for straight-line edges

    }, {
        key: "turnToDashesTransition",
        value: function turnToDashesTransition(duration) {
            var dashArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "3,3";
            var forceTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var _this5 = this;

            var dependsOn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
            var startTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;

            var appendDummy = new Modifier$1({
                func: function func() {
                    var sourceCenter = void 0;
                    var targetCenter = void 0;
                    if (!forceTransition) {
                        sourceCenter = _this5.getSource().getCenter();
                        targetCenter = _this5.getTarget().getCenter();
                    } else {
                        sourceCenter = forceTransition.points.get(_this5.getSource());
                        targetCenter = forceTransition.points.get(_this5.getTarget());
                    }
                    // Append the dummy line
                    var dummyPath = UI.createElement(SVG.Line, _extends({ x1: sourceCenter.x, x2: sourceCenter.x,
                        y1: sourceCenter.y, y2: sourceCenter.y,
                        ref: _this5.refLink("dummyPath"),
                        strokeDasharray: dashArray }, _this5.options.pathAttr));

                    var fakePath = UI.createElement(SVG.Line, _extends({ x1: sourceCenter.x, x2: targetCenter.x,
                        y1: sourceCenter.y, y2: targetCenter.y,
                        ref: _this5.refLink("fakePath")
                    }, _this5.options.pathAttr));
                    _this5.appendChild(dummyPath);
                    _this5.appendChild(fakePath);
                    _this5.path.setAttribute("opacity", 0);
                },
                reverseFunc: function reverseFunc() {
                    _this5.eraseChild(_this5.dummyPath, true);
                    _this5.eraseChild(_this5.fakePath, true);
                    _this5.path.setAttribute("opacity", 1);
                }
            });
            transitionList.push(appendDummy, false);

            // Dash the dummy path
            var strokeDummy = new Transition({
                func: function func(t) {
                    var sourceCenter = _this5.getSource().getCenter();
                    var targetCenter = _this5.getTarget().getCenter();
                    var x2 = (1 - t) * sourceCenter.x + t * targetCenter.x;
                    var y2 = (1 - t) * sourceCenter.y + t * targetCenter.y;
                    _this5.dummyPath.setAttribute("x2", x2);
                    _this5.dummyPath.setAttribute("y2", y2);
                    _this5.fakePath.setAttribute("x1", x2);
                    _this5.fakePath.setAttribute("y1", y2);
                },
                dependsOn: [appendDummy],
                duration: duration
            });
            transitionList.push(strokeDummy, false);

            // Remove the dummy and dash the path itself
            var removeDummy = new Modifier$1({
                func: function func() {
                    _this5.path.setAttribute("stroke-dasharray", dashArray);
                    _this5.path.setAttribute("opacity", 1);
                    _this5.eraseChild(_this5.dummyPath, false);
                    _this5.eraseChild(_this5.fakePath, false);
                },
                reverseFunc: function reverseFunc() {
                    _this5.path.setAttribute("stroke-dasharray", null);
                    _this5.path.setAttribute("opacity", 0);
                    _this5.appendChild(_this5.dummyPath);
                    _this5.appendChild(_this5.fakePath);
                },
                dependsOn: [strokeDummy]
            });
            transitionList.push(removeDummy, false);

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }]);
    return GraphEdge;
}(SVG.Group);

var CSAForceLayout = function () {
    createClass(CSAForceLayout, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                chargeStrength: 10,
                edgeStrength: 15,
                gravityStrength: 0.007,
                idealEdgeDistance: 140, // it used to be 140
                repulsionDistance: 140
            };
        }
    }]);

    function CSAForceLayout(options) {
        classCallCheck(this, CSAForceLayout);

        this.setOptions(options);
    }

    createClass(CSAForceLayout, [{
        key: "setOptions",
        value: function setOptions(options) {
            this.options = Object.assign(this.getDefaultOptions(), options);
            this.points = this.options.points;
            this.edges = this.options.edges;
            this.gravityCenter = this.options.gravityCenter;
            this.adjMatrix = this.buildAdjacencyMatrix();
        }
    }, {
        key: "buildAdjacencyMatrix",
        value: function buildAdjacencyMatrix() {
            var _this = this;

            // Create a bi-dimensional matrix, initialize with false
            var adjMatrix = Array(this.points.length).fill().map(function () {
                return Array(_this.points.length).fill(false);
            });

            for (var i = 0; i < this.edges.length; i += 1) {
                adjMatrix[this.edges[i].first][this.edges[i].second] = true;
                adjMatrix[this.edges[i].second][this.edges[i].first] = true;
            }
            return adjMatrix;
        }
    }, {
        key: "idealEdgeDistance",
        value: function idealEdgeDistance() {
            return this.options.idealEdgeDistance;
        }
    }, {
        key: "repulsionDistance",
        value: function repulsionDistance() {
            return this.options.repulsionDistance;
        }
    }, {
        key: "updateVectors",
        value: function updateVectors(point1, point2, attractionForce) {
            var dx = point2.x - point1.x;
            var dy = point2.y - point1.y;
            var vectorSize = Math.sqrt(dx * dx + dy * dy);
            if (vectorSize < 1e-9) {
                var angle = Math.random() * 2 * Math.PI;
                dx = Math.sin(angle);
                dy = Math.cos(angle);
                vectorSize = 1;
            }
            point1.dx += attractionForce * dx / vectorSize;
            point1.dy += attractionForce * dy / vectorSize;

            point2.dx += -attractionForce * dx / vectorSize;
            point2.dy += -attractionForce * dy / vectorSize;
        }
    }, {
        key: "calculateAttractions",
        value: function calculateAttractions(points) {
            for (var i = 0; i < points.length; i += 1) {
                for (var j = i + 1; j < points.length; j += 1) {
                    var dist = distance(points[i], points[j]);
                    // If there is an edge between the points try to bring the distance between them closer to the ideal edge distance
                    if (this.adjMatrix[i][j]) {
                        var force = dist < 1e-9 ? 1000 : this.options.edgeStrength * (dist - this.idealEdgeDistance()) / dist;
                        this.updateVectors(points[i], points[j], force);
                    }
                    // If there is no edge between the points, they mustn't be closer than the repulsionDistance.
                    else {
                            if (dist < this.repulsionDistance()) {
                                var _force = dist < 1e-9 ? 1000 : this.options.chargeStrength * (dist - this.repulsionDistance()) / dist;
                                this.updateVectors(points[i], points[j], _force);
                            }
                        }
                }
            }
        }
    }, {
        key: "gravitateTowards",
        value: function gravitateTowards(points, center) {
            for (var i = 0; i < points.length; i += 1) {
                var dist = distance(points[i], center);
                this.updateVectors(points[i], center, dist * this.options.gravityStrength);
            }
        }
    }, {
        key: "calculateVectors",
        value: function calculateVectors(numIterations) {
            var points = [];
            for (var i = 0; i < this.points.length; i += 1) {
                points.push({
                    x: this.points[i].x,
                    y: this.points[i].y,
                    dx: 0,
                    dy: 0
                });
            }

            numIterations = numIterations || 1;

            for (var iter = 0; iter < numIterations; iter += 1) {
                for (var _i = 0; _i < points.length; _i += 1) {
                    points[_i].x += points[_i].dx;
                    points[_i].y += points[_i].dy;
                    points[_i].dx = 0;
                    points[_i].dy = 0;
                }
                this.calculateAttractions(points);
                if (this.options.gravityCenter) {
                    this.gravitateTowards(points, this.options.gravityCenter);
                }
            }

            return points;
        }

        //TODO(@all): These commented functions are part of Mihai's implementation of the Force Layout. It looks cool but it's unstable.
        //TODO(@all): For instance, a cycle with three nodes will go batshit crazy.
        //TODO(@all): Find a way to make his approach work(be stable).

        //normalizeOptions() {
        //    let maxSize = Math.max(this.options.box.x2 - this.options.box.x1, this.options.box.y2 - this.options.box.y1);
        //    this.options.chargeStrength *= maxSize * maxSize / 4.0;
        //
        //    this.options.gravityStrength /= this.points.length;
        //    if (this.edges.length > 0) {
        //        this.options.edgeStrength /= this.edges.length;
        //    }
        //    if (this.points.length > 1) {
        //        this.options.chargeStrength /= this.points.length * (this.points.length - 1) / 2.0;
        //    }
        //}

        //calculateEdgeAttractions(points, edges) {
        //    for (let k = 0; k < edges.length; k += 1) {
        //        let i = edges[k].first, j = edges[k].second;
        //        let dist = math.distance(points[i], points[j]);
        //        let force = dist * this.options.edgeStrength;
        //        this.updateVectors(points[i], points[j], force);
        //        this.updateVectors(points[j], points[i], force);
        //    }
        //}

        //calculateCharges(points) {
        //    for (let i = 0; i < points.length; i += 1) {
        //        for (let j = i + 1; j < points.length; j += 1) {
        //            let dist = math.distance(points[i], points[j]);
        //            if (dist < 1e-2) {
        //                let force = 1e2 * points[i].charge * points[j].charge * this.options.chargeStrength;
        //                this.updateVectors(points[i], {x: -1, y: -1}, force);
        //                this.updateVectors(points[j], {x: 1, y: 1}, force);
        //            } else {
        //                let force = -(1.0 / dist) * points[i].charge * points[j].charge * this.options.chargeStrength;
        //                this.updateVectors(points[i], points[j], force);
        //                this.updateVectors(points[j], points[i], force);
        //            }
        //        }
        //    }
        //}

    }]);
    return CSAForceLayout;
}();

var Graph = function (_SVG$Group) {
    inherits(Graph, _SVG$Group);

    function Graph() {
        classCallCheck(this, Graph);
        return possibleConstructorReturn(this, (Graph.__proto__ || Object.getPrototypeOf(Graph)).apply(this, arguments));
    }

    createClass(Graph, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                nodes: [],
                edges: [],
                gravityCenterXPercentage: 0.5,
                gravityCenterYPercentage: 0.5,
                box: {
                    x: 0,
                    y: 0,
                    width: 400,
                    height: 400
                },
                indexType: "0",
                directed: false,
                forcePaused: false,
                bendEdgesIfForcePaused: false,
                idlePaused: false,
                idlePauseThreshold: 0.05,
                idealEdgeDistance: CSAForceLayout.prototype.getDefaultOptions().idealEdgeDistance,
                nodeOptions: GraphNode.prototype.getDefaultOptions(),
                supportsBending: true
            };
        }
    }, {
        key: "populateNodeData",
        value: function populateNodeData() {
            for (var i = 0; i < this.options.nodes.length; i += 1) {
                var nodeData = this.options.nodes[i];
                // Set label
                if (this.options.indexType === "0") {
                    nodeData.label = i;
                } else if (this.options.indexType === "1") {
                    nodeData.label = i + 1;
                } else if (this.options.indexType === "custom") {
                    if (!nodeData.hasOwnProperty("label") || nodeData.label === "") {
                        nodeData.label = i + 1;
                    }
                } else {
                    nodeData.label = "";
                }

                // Set center
                nodeData.center = nodeData.center || {
                    x: Math.random() * this.options.box.width + this.options.box.x,
                    y: Math.random() * this.options.box.height + this.options.box.y
                };
            }
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(Graph.prototype.__proto__ || Object.getPrototypeOf(Graph.prototype), "setOptions", this).call(this, options);
            this.populateNodeData();
            this.options.gravityCenter = {
                x: this.options.gravityCenterXPercentage * this.options.box.width + this.options.box.x,
                y: this.options.gravityCenterYPercentage * this.options.box.height + this.options.box.y
            };
        }
    }, {
        key: "getMarkup",
        value: function getMarkup() {
            var markup = "<Graph indexType=\"custom\" height=\"400\" width=\"400\" ";
            markup += "nodes={[";
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var node = _step.value;

                    if (node !== this.nodes[0]) {
                        markup += ",";
                    }
                    markup += node.getMarkup(400 / this.options.box.width, 400 / this.options.box.height);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            markup += "]} edges={[";
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.edges[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var edge = _step2.value;

                    if (edge !== this.edges[0]) {
                        markup += ",";
                    }
                    markup += edge.getMarkup();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            markup += "]} />";
            return markup;
        }
    }, {
        key: "render",
        value: function render() {
            var nodes = [];
            for (var i = 0; i < this.options.nodes.length; i += 1) {
                var nodeData = this.options.nodes[i];
                var nodeOptions = Object.assign({}, this.options.nodeOptions, nodeData.options);
                nodes.push(UI.createElement(GraphNode, _extends({ graph: this, data: nodeData }, nodeOptions)));
            }

            var edges = [];
            for (var _i = 0; _i < this.options.edges.length; _i += 1) {
                var edgeData = this.options.edges[_i];
                var data = { source: edgeData.source, target: edgeData.target };
                var directed = edgeData.hasOwnProperty("directed") ? edgeData.directed : this.options.directed;
                var color = edgeData.color;
                edges.push(UI.createElement(GraphEdge, _extends({ graph: this, label: edgeData.label, data: data, directed: directed, color: color }, edgeData.options)));
            }

            return [UI.createElement(
                SVG.Group,
                { ref: "edgeGroup" },
                edges
            ), UI.createElement(
                SVG.Group,
                { ref: "nodeGroup" },
                nodes
            )];
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(Graph.prototype.__proto__ || Object.getPrototypeOf(Graph.prototype), "redraw", this).call(this);
            // HACK for bending edges to work if force is paused
            if (this.options.forcePaused && this.options.bendEdgesIfForcePaused) {
                this.getEdgeBendingTransitions().start();
            }
            for (var i = 0; i < this.edges.length; i += 1) {
                this.edges[i].update();
            }
            if (!this.options.forcePaused && !this.options.idlePaused) {
                this.startPerpetualForce();
            }
        }
    }, {
        key: "pauseForce",
        value: function pauseForce() {
            this.options.forcePaused = true;
        }
    }, {
        key: "unpauseForce",
        value: function unpauseForce() {
            var initialValue = this.options.forcePaused;
            this.options.forcePaused = false;
            if (initialValue) {
                this.startPerpetualForce();
            }
        }
    }, {
        key: "pauseIdle",
        value: function pauseIdle() {
            this.options.idlePaused = true;
        }
    }, {
        key: "unpauseIdle",
        value: function unpauseIdle() {
            var initialValue = this.options.idlePaused;
            this.options.idlePaused = false;
            if (initialValue) {
                this.startPerpetualForce();
            }
        }
    }, {
        key: "startPerpetualForce",
        value: function startPerpetualForce() {
            var _this2 = this;
            var updateForces = function updateForces() {
                _this2.runForces();

                if (!_this2.options.forcePaused && !_this2.options.idlePaused) {
                    requestAnimationFrame(updateForces);
                } else if (_this2.options.forcePaused) {
                    // Straighten any bended edges
                    requestAnimationFrame(function () {
                        for (var i = 0; i < _this2.edges.length; ++i) {
                            _this2.edges[i].setCurveArcRadius(0);
                            _this2.edges[i].update();
                        }
                    });
                }
            };
            requestAnimationFrame(updateForces);
        }

        // TODO(@mikester): This shouldn't call setOptions

    }, {
        key: "setData",
        value: function setData(nodes, edges) {
            this.options.nodes = nodes;
            this.options.edges = edges;
            this.setOptions(this.options);
            this.redraw();
        }
    }, {
        key: "removeNode",
        value: function removeNode(node) {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = node.getIncidentEdges()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var edge = _step3.value;

                    this.removeEdge(edge);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.options.nodes.erase(node.options.data);
            var oldIndices = new Map(),
                i = 0;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.nodes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var oldNode = _step4.value;

                    oldIndices.set(i++, oldNode);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.nodeGroup.eraseChild(node);

            // After erasing a node, all edges must be updated so the indices of their source and target
            // remain correct
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.edges[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _edge = _step5.value;

                    var source = oldIndices.get(_edge.getSourceIndex());
                    var target = oldIndices.get(_edge.getTargetIndex());
                    for (i = 0; i < this.nodes.length; i += 1) {
                        if (this.nodes[i] === source) {
                            _edge.options.data.source = i;
                        } else if (this.nodes[i] === target) {
                            _edge.options.data.target = i;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        }
    }, {
        key: "addNode",
        value: function addNode(node) {
            node.options.data = node.options.data || {};
            node.options.data.center = node.options.data.center || {
                x: Math.random() * this.options.box.width + this.options.box.x,
                y: Math.random() * this.options.box.height + this.options.box.y
            };
            node.options.circleAttr = node.options.circleAttr || {};
            if (this.options.nodeRadius) {
                node.options.circleAttr.radius = this.options.nodeRadius;
            }
            if (this.options.nodeFill) {
                node.options.innerColor = this.options.nodeFill;
            }
            if (this.options.nodeStroke) {
                node.options.color = this.options.nodeStroke;
            }
            node.options.graph = this;
            this.nodeGroup.appendChild(node);
            this.options.nodes.push(node.options.data);
            return node;
        }
    }, {
        key: "removeEdge",
        value: function removeEdge(edge) {
            this.options.edges.erase(edge.options.data);
            this.edgeGroup.eraseChild(edge);
        }
    }, {
        key: "addEdge",
        value: function addEdge(edge) {
            edge.options.graph = this;
            if (this.options.edgeColor) {
                edge.options.color = this.options.edgeColor;
            }
            this.edgeGroup.appendChild(edge);
            this.options.edges.push(edge.options.data);
            if (this.isDirected()) {
                edge.setArrowOnPath(1);
            }
            return edge;
        }
    }, {
        key: "nodeCenterChanged",
        value: function nodeCenterChanged(node, coords) {
            this.unpauseIdle();

            // Uncomment this if you ever need to listen on node center change
            // this.dispatch("setNodeCenter", {node: node, coords: coords});
        }
    }, {
        key: "getBox",
        value: function getBox() {
            return this.options.box;
        }
    }, {
        key: "setBox",
        value: function setBox(newBox) {
            this.options.box = newBox;
        }
    }, {
        key: "setAllCenters",
        value: function setAllCenters(forces) {
            // This function is implemented in order to cut the number of
            // edge redraws in half on a cycle of the forces

            // if (!this._lastForcesFrameTime) {
            //     this._lastForcesFrameTime = 16;
            // }
            // let equilibrium = true;
            for (var i = 0; i < this.nodes.length; i += 1) {
                var node = this.nodes[i];
                if (!node.isFixed() && !node.dragging) {
                    // // The forces acting on nodes are NOT the the correct scale
                    // // of how much they should move. Since the force is mass times
                    // // acceleration, and considering all nodes have mass 1, the
                    // // forces give the nodes a vectorial acceleration.
                    // node.velocity = node.velocity || {x: 3, y: 3};
                    //
                    // // This is the time elapsed since the last frame, in seconds.
                    // // We will consider that forces run at 5x the natural speed, so
                    // // the movement seems more smooth and the equilibrium is reached faster
                    // let time = this._lastForcesFrameTime / 1000 * 5;
                    //
                    // // The new velocity of the node, in ideal conditions, would be the old one
                    // // + time * acceleration. Since in ideal conditions the equilibrium is never
                    // // reached, we will introduce a force of friction between the nodes and the
                    // // canvas itself. This force will make the nodes reach an equilibrium point
                    // // faster or slower, depending on the coefficient of friction.
                    // let applyFriction = (x) => {
                    //     let u = this.options.frictionCoef;
                    //     return x >= u ? x - u : (x <= -u ? x + u : x);
                    // };
                    // if (Math.abs(node.velocity.x) <= 1.5) {
                    //     forces[i].dx *= 10;
                    // }
                    // if (Math.abs(node.velocity.y) <= 1.5) {
                    //     forces[i].dy *= 10;
                    // }
                    // node.velocity.x = applyFriction(node.velocity.x + forces[i].dx * time);
                    // node.velocity.y = applyFriction(node.velocity.y + forces[i].dy * time);
                    //
                    // if (Math.abs(node.velocity.x) > 30) {
                    //     node.velocity.x = 30 * (node.velocity.x > 0 ? 1 : -1);
                    // } else if (Math.abs(node.velocity.x) < 0.03) {
                    //     node.velocity.x = 0;
                    // }
                    // if (Math.abs(node.velocity.y) > 30) {
                    //     node.velocity.y = 30 * (node.velocity.y > 0 ? 1 : -1);
                    // } else if (Math.abs(node.velocity.y) < 0.03) {
                    //     node.velocity.y = 0;
                    // }


                    node.setCenter({
                        x: node.getCenter().x + forces[i].dx,
                        y: node.getCenter().y + forces[i].dy
                    }, false);

                    // if (node.velocity.x || node.velocity.y) {
                    //     equilibrium = false;
                    // }
                }
            }
            for (var _i2 = 0; _i2 < this.edges.length; _i2 += 1) {
                this.edges[_i2].update();
            }

            // if (equilibrium) {
            //     this.setFrictionCoef(0.035);
            // }
        }

        // setFrictionCoef(frictionCoef) {
        //     this.options.frictionCoef = frictionCoef;
        // }

    }, {
        key: "runForces",
        value: function runForces() {
            var forcesStartTime = performance.now();
            if (!this.nodes || !this.edges) {
                return;
            }
            var forceOptions = {
                idealEdgeDistance: this.options.idealEdgeDistance,
                points: this.nodes.map(function (node) {
                    return node.getCenter();
                }),
                edges: this.edges.map(function (edge) {
                    return { first: edge.options.data.source, second: edge.options.data.target };
                }),
                gravityCenter: this.getGravityCenter()
            };
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.nodes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var node = _step6.value;

                    if (node.dragging) {
                        forceOptions.gravityStrength = 0;
                        break;
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            var forceLayout = new CSAForceLayout(forceOptions);
            var points = forceLayout.calculateVectors(1);
            this.setAllCenters(points);

            var maxDelta = 0;
            for (var i = 0; i < this.nodes.length; i += 1) {
                if (!this.nodes[i].isFixed() && !this.nodes[i].dragging) {
                    maxDelta = Math.max(maxDelta, vectorLength({ x: points[i].dx, y: points[i].dy }));
                }
            }

            if (maxDelta < this.options.idlePauseThreshold) {
                this.pauseIdle();
            }

            if (this.options.supportsBending) {
                this.getEdgeBendingTransitions().start();
            }

            // This is the time it took to redraw the graph in the last frame
            // Needed to that on higher scale graphs the equilibrium will be reached
            // In the same time, not in the same number of frames
            this._lastForcesFrameTime = performance.now() - forcesStartTime;
        }
    }, {
        key: "getEdge",
        value: function getEdge(a, b) {
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.edges[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var edge = _step7.value;

                    if (edge.getSource().getLabel() === "" + a && edge.getTarget().getLabel() === "" + b) {
                        return edge;
                    }
                    if (edge.getSource().getLabel() === "" + b && edge.getTarget().getLabel() === "" + a) {
                        return edge;
                    }
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }
        }
    }, {
        key: "getEdgeBendingTransitions",
        value: function getEdgeBendingTransitions() {
            var transitions = new TransitionList();
            for (var i = 0; i < this.edges.length; i += 1) {
                var edge = this.edges[i];

                if (!edge.options.supportsBending) {
                    return;
                }

                var edgeStartCoords = edge.getSource().getCenter();
                var edgeEndCoords = edge.getTarget().getCenter();
                var edgeLine = lineEquation(edgeStartCoords, edgeEndCoords);
                var biggestNode = null;

                for (var _i3 = 0; _i3 < this.nodes.length; _i3 += 1) {
                    if (this.nodes[_i3] === edge.getSource() || this.nodes[_i3] === edge.getTarget()) {
                        continue;
                    }
                    var nodeCoords = this.nodes[_i3].getCenter();

                    // Take the node's projection on this line
                    var nodeProjection = perpendicularFoot(nodeCoords, edgeLine);

                    // If the node almost intersects the line and
                    // If the node's projection si on the segment determined by the edge points
                    // In other words, if the node almost intersects the segemnt determined by the edge
                    if (distancePointLine(nodeCoords, edgeLine) <= this.nodes[_i3].getRadius() + 10 && pointOnSegment(nodeProjection, edgeStartCoords, edgeEndCoords)) {
                        // Store the node with the biggest radius out of all the ones that respect the above restrictions
                        if (biggestNode === null || this.nodes[_i3].getRadius() > biggestNode.getRadius()) {
                            biggestNode = this.nodes[_i3];
                        }
                    }
                }

                // Note that the code below is a little different than the one in CSAForceTransition
                // This one moves faster, it's more responsive to movement

                //If there exists a node that almost intersects the edge and current arc radius is 0
                if (biggestNode !== null && edge.options.curveArcRadius === 0) {
                    var targetCurveArcRadius = 2.5 * biggestNode.getRadius() * (signedDistancePointLine(biggestNode.getCenter(), edgeLine) > 0 ? -1 : 1);
                    // Transition the edge(in 200 ms) to a bended state, in the direction opposite of where
                    // the node is coming from and with a curve arc radius proportional to the incoming node's radius
                    transitions.add(edge.bendingTransition(targetCurveArcRadius, 200), false);
                } else if (biggestNode === null && edge.options.curveArcRadius !== 0) {
                    // Otherwise, if there is no obstruction but the edge isn't straight
                    // Transition the edge(in 200 ms) to be straight
                    transitions.add(edge.bendingTransition(0, 200), false);
                }
            }

            return transitions;
        }
    }, {
        key: "getIndexType",
        value: function getIndexType() {
            return this.options.indexType;
        }
    }, {
        key: "isDirected",
        value: function isDirected() {
            return this.options.directed;
        }
    }, {
        key: "setDirected",
        value: function setDirected(value) {
            this.options.directed = value;
            for (var i = 0; i < this.edges.length; i += 1) {
                this.edges[i].setDirected(value);
            }
        }
    }, {
        key: "setFixed",
        value: function setFixed(value) {
            var highlight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.fixed = value;
            for (var i = 0; i < this.nodes.length; i += 1) {
                var node = this.nodes[i];
                node.setFixed(value, highlight);
            }
        }
    }, {
        key: "setGravityCenter",
        value: function setGravityCenter(newCenter) {
            this.options.gravityCenter = newCenter;
        }
    }, {
        key: "getGravityCenter",
        value: function getGravityCenter() {
            return {
                x: this.options.gravityCenter.x,
                y: this.options.gravityCenter.y
            };
        }
    }, {
        key: "nodeCount",
        value: function nodeCount() {
            return this.options.nodes.length;
        }
    }, {
        key: "getNodeIndex",
        value: function getNodeIndex(node) {
            return this.nodes.indexOf(node);
        }
    }, {
        key: "getNode",
        value: function getNode(label) {
            for (var i = 0; i < this.nodes.length; i += 1) {
                if (this.nodes[i].getLabel() === label) {
                    return this.nodes[i];
                }
            }
        }
    }, {
        key: "computeVector",
        value: function computeVector(node1, node2, way) {
            var SLOPE_EPS = 0.15;
            var pathLength = distance(node1.getCenter(), node2.getCenter());
            var normalizationUnit = void 0;
            // Take a the vector characterizing the slope at the midpoint of the path
            var midPoint = {
                x: (node1.x + node2.x) * 0.5,
                y: (node1.y + node2.y) * 0.5
            };
            var auxiliaryPoint = {
                x: node1.x * 0.55 + node2.x * 0.45,
                y: node1.y * 0.55 + node2.y * 0.45
            };
            var vector = normalizeVector({
                x: auxiliaryPoint.x - midPoint.x,
                y: auxiliaryPoint.y - midPoint.y
            });

            // Get the perpendicular vector
            vector = rotatePoint(vector, 0, Math.PI / 2);
            // The biggest direction vector will be set to 1 in its absolute value, and so the values must be normalized
            normalizationUnit = Math.max(Math.abs(vector.x), Math.abs(vector.y));

            // If the path has length 0, the vector is null
            if (pathLength === 0) {
                return {
                    x: 0,
                    y: 1
                };
            }

            vector.x /= normalizationUnit;
            vector.y /= normalizationUnit;

            // For paths with small slope the x coordinate is calculated using a linear function.
            // For paths with bigger slope the x coordinate is a constant.
            if (Math.abs(vector.x) < SLOPE_EPS) {
                vector.x = Math.sign(vector.x) * (1 - (SLOPE_EPS - Math.abs(vector.x)) / SLOPE_EPS);
            } else {
                vector.x = Math.sign(vector.x);
            }

            return vector;
        }
    }, {
        key: "getBentPosition",
        value: function getBentPosition(node1, node2, t) {
            var way = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

            var midPoint = {
                x: node1.x * t + node2.x * (1 - t),
                y: node1.y * t + node2.y * (1 - t)
            };
            var vector = this.computeVector(node1, node2, way);
            if (t > 0.5) {
                t = 1 - t;
            }
            return {
                x: midPoint.x + vector.x * t * 40,
                y: midPoint.y + vector.y * t * 40
            };
        }

        // The Transitions start here

    }, {
        key: "changeColorTransition",
        value: function changeColorTransition(color, duration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;
            for (var i = 0; i < this.nodes.length; i += 1) {
                var node = this.nodes[i];
                transitionList.add(node.changeColorTransition(color, duration), false);
            }
            for (var _i4 = 0; _i4 < this.edges.length; _i4 += 1) {
                var edge = this.edges[_i4];
                transitionList.add(edge.changeColorTransition(color, duration), false);
            }
            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "mergeNodesAnimated",
        value: function mergeNodesAnimated() {
            var toMerge = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var duration = arguments[1];
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;

            var centerX = 0;
            var centerY = 0;
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = toMerge[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var i = _step8.value;

                    this.nodes[i].setFixed(true);
                    centerX += this.nodes[i].x;
                    centerY += this.nodes[i].y;
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            centerX /= toMerge.length;
            centerY /= toMerge.length;

            var moveStartTime = transitionList.getLength();

            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
                for (var _iterator9 = toMerge[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var _i5 = _step9.value;

                    transitionList.add(this.nodes[_i5].moveTransition({
                        newCoords: { x: centerX, y: centerY },
                        duration: duration,
                        startTime: moveStartTime,
                        dependsOn: dependsOn
                    }));
                }
            } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                    }
                } finally {
                    if (_didIteratorError9) {
                        throw _iteratorError9;
                    }
                }
            }

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "swapNodeLabelsTransition",
        value: function swapNodeLabelsTransition(node1, node2, duration) {
            var _this3 = this;

            var dependsOn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
            var startTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            var label1 = node1.label;
            var label2 = node2.label;
            var swap = function swap() {
                var dataLabel1 = node1.options.data.label;
                var dataLabel2 = node2.options.data.label;
                node1.setLabel(dataLabel2);
                node2.setLabel(dataLabel1);
                var node1LabelX = node1.label.options.x;
                var node1LabelY = node1.label.options.y;
                var node2LabelX = node1.label.options.x;
                var node2LabelY = node1.label.options.y;
                node1.label.setPosition(node2LabelX, node2LabelY);
                node2.label.setPosition(node1LabelX, node1LabelY);
            };
            var firstHalf = new Transition({
                func: function func(t) {
                    t = 1 - t * 0.5;
                    label1.setPosition(_this3.getBentPosition(node1, node2, t).x, _this3.getBentPosition(node1, node2, t).y);
                    label2.setPosition(_this3.getBentPosition(node2, node1, t).x, _this3.getBentPosition(node2, node1, t).y);
                },
                duration: duration / 2,
                startTime: 0
            });
            var modifier = new Modifier$1({
                func: function func() {
                    swap();
                },
                reverseFunc: function reverseFunc() {
                    swap();
                },
                startTime: duration / 2,
                dependsOn: [firstHalf]
            });
            var secondHalf = new Transition({
                func: function func(t) {
                    t = 0.5 - t * 0.5;
                    label2.setPosition(_this3.getBentPosition(node1, node2, t).x, _this3.getBentPosition(node1, node2, t).y);
                    label1.setPosition(_this3.getBentPosition(node2, node1, t).x, _this3.getBentPosition(node2, node1, t).y);
                },
                duration: duration / 2,
                startTime: duration / 2,
                dependsOn: [modifier]
            });
            var result = new TransitionList();
            result.dependsOn = dependsOn;
            result.push(firstHalf, false);
            result.push(modifier, false);
            result.push(secondHalf, false);
            result.setStartTime(startTime);
            return result;
        }
    }, {
        key: "addEdgeTransition",
        value: function addEdgeTransition(edgeData, duration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            var _this4 = this;

            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var inMovie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;

            var edge = UI.createElement(GraphEdge, _extends({ graph: this, data: edgeData }, edgeData.options, { opacity: 0 }));
            var addEdgeModifier = new Modifier$1({
                func: function func() {
                    _this4.options.edges.push(edge.options.data);
                    _this4.edgeGroup.appendChild(edge);
                },
                reverseFunc: function reverseFunc() {
                    _this4.options.edges.erase(edge.options.data);
                    _this4.edgeGroup.eraseChild(edge, !inMovie);
                },
                startTime: transitionList.getLength()
            });
            transitionList.add(addEdgeModifier, false);

            transitionList.add(edge.changeOpacityTransition(1, duration, [addEdgeModifier], transitionList.getLength()), false);

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "addNodeTransition",
        value: function addNodeTransition(nodeData, duration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            var _this5 = this;

            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var inMovie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;

            nodeData = nodeData || {};
            nodeData.center = nodeData.center || {
                x: Math.random() * this.options.box.width + this.options.box.x,
                y: Math.random() * this.options.box.height + this.options.box.y
            };
            var nodeOptions = Object.assign({}, this.options.nodeOptions, nodeData.options);
            var node = UI.createElement(GraphNode, _extends({ graph: this, data: nodeData }, nodeOptions, { opacity: 0 }));

            var addNodeModifier = new Modifier$1({
                func: function func() {
                    _this5.options.nodes.push(node.options.data);
                    _this5.nodeGroup.appendChild(node);
                },
                reverseFunc: function reverseFunc() {
                    _this5.options.nodes.erase(node.options.data);
                    _this5.nodeGroup.eraseChild(node, !inMovie);
                },
                startTime: transitionList.getLength()
            });
            transitionList.add(addNodeModifier, false);

            transitionList.add(node.changeOpacityTransition(1, duration, [addNodeModifier], transitionList.getLength()), false);

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "removeEdgeTransition",
        value: function removeEdgeTransition(edge, duration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            var _this6 = this;

            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var inMovie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;

            var changeOpacityTransition = edge.changeOpacityTransition(0, duration, [], transitionList.getLength());
            transitionList.add(changeOpacityTransition, false);
            transitionList.add(new Modifier$1({
                func: function func() {
                    _this6.options.edges.erase(edge.options.data);
                    _this6.edgeGroup.eraseChild(edge, !inMovie);
                },
                reverseFunc: function reverseFunc() {
                    _this6.options.edges.insert(edge.options.data);
                    _this6.edgeGroup.appendChild(edge);
                },
                dependsOn: [changeOpacityTransition],
                startTime: transitionList.getLength()
            }), false);

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "removeNodeTransition",
        value: function removeNodeTransition(node, duration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            var _this7 = this;

            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var inMovie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;

            // Remove incident edges
            var edges = node.getIncidentEdges();
            var edgeOpacityStartTime = transitionList.getLength();
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
                for (var _iterator10 = edges[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                    var edge = _step10.value;

                    transitionList.add(this.removeEdgeTransition(edge, duration, [], edgeOpacityStartTime, inMovie), false);
                }

                // Change node opacity
            } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
                        _iterator10.return();
                    }
                } finally {
                    if (_didIteratorError10) {
                        throw _iteratorError10;
                    }
                }
            }

            var nodeOpacityTransition = node.changeOpacityTransition(0, duration, [], transitionList.getLength());
            transitionList.add(nodeOpacityTransition, false);

            transitionList.add(new Modifier$1({
                func: function func(context) {
                    context["nodeIndex"] = _this7.nodes.indexOf(node);
                    _this7.options.nodes.erase(node.options.data);
                    _this7.nodeGroup.eraseChild(node, !inMovie);

                    var _iteratorNormalCompletion11 = true;
                    var _didIteratorError11 = false;
                    var _iteratorError11 = undefined;

                    try {
                        for (var _iterator11 = _this7.edges[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                            var edge = _step11.value;

                            if (edge.options.data.source > context["nodeIndex"]) {
                                edge.options.data.source -= 1;
                            }
                            if (edge.options.data.target > context["nodeIndex"]) {
                                edge.options.data.target -= 1;
                            }
                        }
                    } catch (err) {
                        _didIteratorError11 = true;
                        _iteratorError11 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion11 && _iterator11.return) {
                                _iterator11.return();
                            }
                        } finally {
                            if (_didIteratorError11) {
                                throw _iteratorError11;
                            }
                        }
                    }
                },
                reverseFunc: function reverseFunc(context) {
                    _this7.options.nodes.splice(context["nodeIndex"], 0, node.options.data);
                    _this7.nodeGroup.options.children.splice(context["nodeIndex"], 0, node);
                    node.mount(_this7.nodeGroup, null);
                    var _iteratorNormalCompletion12 = true;
                    var _didIteratorError12 = false;
                    var _iteratorError12 = undefined;

                    try {
                        for (var _iterator12 = _this7.edges[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                            var edge = _step12.value;

                            if (edge.options.data.source >= context["nodeIndex"]) {
                                edge.options.data.source += 1;
                            }
                            if (edge.options.data.target >= context["nodeIndex"]) {
                                edge.options.data.target += 1;
                            }
                        }
                    } catch (err) {
                        _didIteratorError12 = true;
                        _iteratorError12 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion12 && _iterator12.return) {
                                _iterator12.return();
                            }
                        } finally {
                            if (_didIteratorError12) {
                                throw _iteratorError12;
                            }
                        }
                    }
                },
                context: {},
                dependsOn: [nodeOpacityTransition],
                startTime: transitionList.getLength()
            }), false);

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "showLabelsTransition",
        value: function showLabelsTransition(duration) {
            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;

            var showLabelsStartTime = transitionList.getLength();
            var _iteratorNormalCompletion13 = true;
            var _didIteratorError13 = false;
            var _iteratorError13 = undefined;

            try {
                for (var _iterator13 = this.nodes[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                    var node = _step13.value;

                    transitionList.add(node.label.changeOpacityTransition(1, duration, [], showLabelsStartTime), false);
                }
            } catch (err) {
                _didIteratorError13 = true;
                _iteratorError13 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion13 && _iterator13.return) {
                        _iterator13.return();
                    }
                } finally {
                    if (_didIteratorError13) {
                        throw _iteratorError13;
                    }
                }
            }

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "nodes",
        get: function get$$1() {
            if (!this.nodeGroup) {
                return false;
            }
            return this.nodeGroup.children;
        }
    }, {
        key: "edges",
        get: function get$$1() {
            if (!this.edgeGroup) {
                return false;
            }
            return this.edgeGroup.children;
        }
    }]);
    return Graph;
}(SVG.Group);

var GraphSVG = function (_SVG$SVGRoot) {
    inherits(GraphSVG, _SVG$SVGRoot);

    function GraphSVG() {
        classCallCheck(this, GraphSVG);
        return possibleConstructorReturn(this, (GraphSVG.__proto__ || Object.getPrototypeOf(GraphSVG)).apply(this, arguments));
    }

    createClass(GraphSVG, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                width: 300,
                height: 200
            };
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(GraphSVG.prototype.__proto__ || Object.getPrototypeOf(GraphSVG.prototype), "getNodeAttributes", this).call(this);
            attr.setStyle("height", this.options.height + "px");
            attr.setStyle("width", this.options.width + "px");
            return attr;
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(GraphSVG.prototype.__proto__ || Object.getPrototypeOf(GraphSVG.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "render",
        value: function render() {
            //TODO: do NOT use {...this.options} in a new object
            return [UI.createElement(Graph, _extends({ ref: "graph" }, this.options, {
                box: { x: 0, y: 0, width: this.options.width, height: this.options.height } }))];
        }
    }]);
    return GraphSVG;
}(SVG.SVGRoot);

var ChatGraph = function (_Graph) {
    inherits(ChatGraph, _Graph);

    function ChatGraph() {
        classCallCheck(this, ChatGraph);
        return possibleConstructorReturn(this, (ChatGraph.__proto__ || Object.getPrototypeOf(ChatGraph)).apply(this, arguments));
    }

    createClass(ChatGraph, [{
        key: "setOptions",
        value: function setOptions(options) {
            var maxAllowedNodes = 16;
            if (options.nodes) {
                while (options.nodes.length > maxAllowedNodes) {
                    options.nodes.pop();
                }
            }
            if (options.edges) {
                for (var i = 0; i < options.edges.length; ++i) {
                    if (options.edges[i].source >= maxAllowedNodes || options.edges[i].target >= maxAllowedNodes) {
                        options.edges.splice(i, 1);
                        --i;
                    }
                }
            }
            options.idlePauseThreshold = 1;
            get(ChatGraph.prototype.__proto__ || Object.getPrototypeOf(ChatGraph.prototype), "setOptions", this).call(this, options);
        }
    }]);
    return ChatGraph;
}(Graph);

var ChatGraphSVG = function (_SVG$SVGRoot) {
    inherits(ChatGraphSVG, _SVG$SVGRoot);

    function ChatGraphSVG() {
        classCallCheck(this, ChatGraphSVG);
        return possibleConstructorReturn(this, (ChatGraphSVG.__proto__ || Object.getPrototypeOf(ChatGraphSVG)).apply(this, arguments));
    }

    createClass(ChatGraphSVG, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                width: 300,
                height: 300
            };
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(ChatGraphSVG.prototype.__proto__ || Object.getPrototypeOf(ChatGraphSVG.prototype), "getNodeAttributes", this).call(this);
            attr.setStyle("height", this.options.height + "px");
            attr.setStyle("width", this.options.width + "px");
            return attr;
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            delete options.style;
            get(ChatGraphSVG.prototype.__proto__ || Object.getPrototypeOf(ChatGraphSVG.prototype), "setOptions", this).call(this, options);
            this.options.height = Math.min(this.options.height, 400);
            this.options.width = Math.min(this.options.width, 400);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(SVG.Rect, { ref: "borderRect",
                x: 0, y: 0, width: this.options.width, height: this.options.height,
                stroke: "gray", fill: "white" }), UI.createElement(ChatGraph, _extends({ ref: "graph" }, this.options, {
                box: { x: 0, y: 0, width: this.options.width, height: this.options.height } }))];
        }
    }, {
        key: "onMount",
        value: function onMount() {}
    }]);
    return ChatGraphSVG;
}(SVG.SVGRoot);

ChatMarkupRenderer.classMap.addClass("Graph", ChatGraphSVG);

var _class$45, _temp$9;

var WebsocketStreamHandler = (_temp$9 = _class$45 = function (_Dispatcher) {
    inherits(WebsocketStreamHandler, _Dispatcher);

    function WebsocketStreamHandler(websocketSubscriber, streamName) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        classCallCheck(this, WebsocketStreamHandler);

        var _this = possibleConstructorReturn(this, (WebsocketStreamHandler.__proto__ || Object.getPrototypeOf(WebsocketStreamHandler)).call(this));

        _this.websocketSubscriber = websocketSubscriber;
        _this.streamName = streamName;
        _this.options = options;
        _this.bytesReceived = 0;
        _this.isIndexed = false;
        _this.lastMessageIndex = -1;
        _this.messageBuffer = new Map();
        _this.missedPackets = 0;
        _this.status = _this.constructor.NONE;
        _this.tryCount = 0; // TODO: rename to resubscribesubscribeTryCount
        return _this;
    }

    createClass(WebsocketStreamHandler, [{
        key: "sendSubscribe",
        value: function sendSubscribe() {
            var _this2 = this;

            var websocketSubscriber = this.websocketSubscriber;

            this.clearResubscribeTimeout();
            this.status = this.constructor.SUBSCRIBING;

            if (this.haveIndex()) {
                websocketSubscriber.sendResubscribe(this.streamName, this.getLastIndex());
            } else {
                websocketSubscriber.sendSubscribe(this.streamName);
            }

            this.subscribeTryCount++;

            var subscribeTimeout = websocketSubscriber.constructor.STREAM_SUBSCRIBE_TIMEOUT || 3000;
            var subscribeTimeoutMax = websocketSubscriber.constructor.STREAM_SUBSCRIBE_MAX_TIMEOUT || 30000;
            var timeoutDuration = Math.min(subscribeTimeout * this.subscribeTryCount, subscribeTimeoutMax);

            this.resendSubscribeTimeout = setTimeout(function () {
                console.log("WebsocketSubscriber: stream subscribe timeout for #" + streamName + " reached! Trying to resubscribe again!");
                _this2.sendSubscribe();
            }, timeoutDuration);
        }
    }, {
        key: "clearResubscribeTimeout",
        value: function clearResubscribeTimeout() {
            if (this.resendSubscribeTimeout) {
                clearTimeout(this.resendSubscribeTimeout);
                this.resendSubscribeTimeout = undefined;
            }
        }
    }, {
        key: "setStatusSubscribed",
        value: function setStatusSubscribed() {
            this.clearResubscribeTimeout();
            this.status = this.constructor.SUBSCRIBED;
        }
    }, {
        key: "getStatus",
        value: function getStatus() {
            return this.status;
        }
    }, {
        key: "resetStatus",
        value: function resetStatus() {
            this.clearResubscribeTimeout();
            this.status = this.constructor.NONE;
            this.subscribeTryCount = 0;
        }
    }, {
        key: "processPacket",
        value: function processPacket(packet) {
            this.bytesReceived += packet.length;

            var firstSpace = packet.indexOf(" ");
            var type = void 0,
                payload = void 0;
            if (firstSpace > 0) {
                type = packet.substr(0, firstSpace).trim();
                payload = packet.substr(firstSpace + 1).trim();
            } else {
                console.error("WebsocketStreamHandler: Could not process stream packet: " + packet);
                return;
            }

            if (type === "i") {
                this.processIndexedPacket(payload);
            } else if (type === "v") {
                this.processVanillaPacket(payload);
            } else if (type === "n") {
                this.processMissedPacket(payload);
            } else {
                console.error("WebsocketStreamHandler: invalid packet type " + type);
            }
        }
    }, {
        key: "processIndexedMessage",
        value: function processIndexedMessage(index, message) {
            this.isIndexed = true;
            if (this.lastMessageIndex == -1) {
                this.lastMessageIndex = index;
                this.processVanillaPacket(message);
            } else if (this.lastMessageIndex + 1 == index) {
                this.lastMessageIndex = index;
                this.processVanillaPacket(message);
                ++index;
                while (this.messageBuffer.has(index)) {
                    message = this.messageBuffer.get(index);
                    this.messageBuffer.delete(index);
                    this.lastMessageIndex = index;
                    this.processVanillaPacket(message);
                    ++index;
                }
            } else {
                this.messageBuffer.set(index, message);
            }
        }
    }, {
        key: "processMissedPacket",
        value: function processMissedPacket(packet) {
            this.processIndexedMessage(parseInt(packet), WebsocketStreamHandler.MISSING_MESSAGE);
        }
    }, {
        key: "processVanillaPacket",
        value: function processVanillaPacket(packet) {
            if (packet == WebsocketStreamHandler.MISSING_MESSAGE) {
                this.missedPackets++;
            }

            if (!this.options.rawMessage) {
                try {
                    packet = JSON.parse(packet);
                } catch (exception) {
                    if (!this.options.parseMayFail) {
                        console.error("WebsocketStreamHandler: Failed to parse ", packet, " on stream ", this.streamName, " Exception:", exception.message);
                        return;
                    }
                }
            }
            this.dispatch(packet);
        }
    }, {
        key: "processIndexedPacket",
        value: function processIndexedPacket(packet) {
            var firstSpace = packet.indexOf(" ");
            var message = void 0,
                index = void 0;
            if (firstSpace > 0) {
                index = parseInt(packet.substr(0, firstSpace).trim());
                message = packet.substr(firstSpace + 1).trim();
            } else {
                console.error("WebsocketStreamHandler: Could not process indexed stream packet: " + packet);
                return;
            }

            this.processIndexedMessage(index, message);
        }
    }, {
        key: "haveIndex",
        value: function haveIndex() {
            return this.isIndexed;
        }
    }, {
        key: "getLastIndex",
        value: function getLastIndex() {
            return this.lastMessageIndex;
        }
    }]);
    return WebsocketStreamHandler;
}(Dispatcher), _class$45.NONE = Symbol(), _class$45.SUBSCRIBING = Symbol(), _class$45.SUBSCRIBED = Symbol(), _class$45.UNSUBSCRIBED = Symbol(), _class$45.MISSING_MESSAGE = "INVALID_MESSAGE_MISSING_FROM_ROLLING_WINDOW", _temp$9);

var _class$46, _temp$10;

var WebsocketSubscriber = (_temp$10 = _class$46 = function (_Dispatchable) {
    inherits(WebsocketSubscriber, _Dispatchable);

    function WebsocketSubscriber() {
        var urls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.WEBSOCKET_URL;
        classCallCheck(this, WebsocketSubscriber);

        var _this = possibleConstructorReturn(this, (WebsocketSubscriber.__proto__ || Object.getPrototypeOf(WebsocketSubscriber)).call(this));

        if (!Array.isArray(urls)) {
            urls = [urls];
        }
        _this.urls = urls;
        _this.streamHandlers = new Map();
        _this.attemptedConnect = false;
        _this.connectionStatus = WebsocketSubscriber.ConnectionStatus.NONE;
        _this.websocket = null;
        _this.failedReconnectAttempts = 0;
        _this.numConnectionAttempts = 0;
        //TODO: should probably try to connect right now?
        return _this;
    }

    createClass(WebsocketSubscriber, [{
        key: "setConnectionStatus",
        value: function setConnectionStatus(connectionStatus) {
            this.connectionStatus = connectionStatus;
            this.dispatch("connectionStatus", connectionStatus);
        }
    }, {
        key: "getNextUrl",
        value: function getNextUrl() {
            var currentURLIndex = this.numConnectionAttempts++ % this.urls.length;
            return this.urls[currentURLIndex];
        }
    }, {
        key: "newConnection",
        value: function newConnection(url) {
            return new WebSocket(url);
        }
    }, {
        key: "connect",
        value: function connect() {
            var _this2 = this;

            var url = this.getNextUrl();
            this.setConnectionStatus(WebsocketSubscriber.ConnectionStatus.CONNECTING);
            try {
                console.log("WebsocketSubscriber: Connecting to " + url + " ...");
                this.websocket = this.newConnection(url);
                this.websocket.onopen = function () {
                    _this2.onWebsocketOpen();
                };
                this.websocket.onmessage = function (event) {
                    _this2.onWebsocketMessage(event);
                };
                this.websocket.onerror = function (event) {
                    _this2.onWebsocketError(event);
                };
                this.websocket.onclose = function (event) {
                    _this2.onWebsocketClose(event);
                };
            } catch (e) {
                this.tryReconnect();
                console.error("WebsocketSubscriber: Failed to connect to ", url, "\nError: ", e.message);
            }
        }
    }, {
        key: "tryReconnect",
        value: function tryReconnect() {
            var _this3 = this;

            var reconnectWait = Math.min(WebsocketSubscriber.CONNECT_RETRY_TIMEOUT * this.failedReconnectAttempts, WebsocketSubscriber.CONNECT_RETRY_MAX_TIMEOUT);

            this.failedReconnectAttempts++;

            if (!this.reconnectTimeout) {
                this.reconnectTimeout = setTimeout(function () {
                    _this3.reconnectTimeout = null;
                    console.log("WebsocketSubscriber: Trying to reconnect websocket connection");
                    _this3.connect();
                }, reconnectWait);
            }
        }
    }, {
        key: "getStreamStatus",
        value: function getStreamStatus(streamName) {
            var streamHandler = this.getStreamHandler(streamName);
            return streamHandler && streamHandler.status;
        }
    }, {
        key: "subscribe",
        value: function subscribe(streamName) {
            // TODO: make sure to not explicitly support streams with spaces in the name
            console.log("WebsocketSubscriber: Subscribing to stream ", streamName);

            if (!this.attemptedConnect) {
                this.connect();
                this.attemptedConnect = true;
            }

            if (this.streamHandlers.has(streamName)) {
                console.warning("WebsocketSubscriber: Already subscribed to stream ", streamName);
                return;
            }

            var streamHandler = new WebsocketStreamHandler(this, streamName);
            this.streamHandlers.set(streamName, streamHandler);

            // Check if the websocket connection is open, to see if we can send the subscription now
            if (this.isOpen()) {
                this.sendSubscribe(streamName);
            }

            return streamHandler;
        }
    }, {
        key: "isOpen",
        value: function isOpen() {
            return this.websocket && this.websocket.readyState === 1;
        }
    }, {
        key: "sendSubscribe",
        value: function sendSubscribe(streamName) {
            if (this.isOpen()) {
                this.send("s " + streamName);
            }
        }
    }, {
        key: "sendResubscribe",
        value: function sendResubscribe(streamName, index) {
            if (this.isOpen(streamName)) {
                this.send("r " + index + " " + streamName);
            }
        }
    }, {
        key: "resubscribe",
        value: function resubscribe() {
            // Iterate over all streams and resubscribe to them
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.streamHandlers.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var streamHandler = _step.value;

                    streamHandler.sendSubscribe();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "onStreamSubscribe",
        value: function onStreamSubscribe(streamName) {
            var streamHandler = this.getStreamHandler(streamName);
            if (!streamHandler) {
                console.error("WebsocketSubscriber: received subscribe success response for unrequested stream #" + streamName);
                return;
            }
            streamHandler.setStatusSubscribed();
        }
    }, {
        key: "onWebsocketOpen",
        value: function onWebsocketOpen() {
            this.previousFailedReconnectAttempts = this.failedReconnectAttempts;
            this.failedReconnectAttempts = 0;
            console.log("WebsocketSubscriber: Websocket connection established!");

            this.reset();
            this.setConnectionStatus(WebsocketSubscriber.ConnectionStatus.CONNECTED);
            this.resubscribe();
        }
    }, {
        key: "processStreamPacket",
        value: function processStreamPacket(packet) {
            var firstSpace = packet.indexOf(" ");
            var streamName = void 0,
                afterStreamName = void 0;
            if (firstSpace > 0) {
                streamName = packet.substr(0, firstSpace).trim();
                afterStreamName = packet.substr(firstSpace + 1).trim();
            } else {
                console.error("WebsocketSubscriber: Could not process stream packet: " + packet);
                return;
            }

            var streamHandler = this.streamHandlers.get(streamName);
            // TODO: have a special mode if no handler is registered
            if (!streamHandler) {
                console.error("WebsocketSubscriber: No handler for websocket stream ", streamName);
                return;
            }
            streamHandler.processPacket(afterStreamName);
        }
    }, {
        key: "fatalErrorClose",
        value: function fatalErrorClose(data) {
            this.failedReconnectAttempts = this.previousFailedReconnectAttempts;
            console.error("WebsocketSubscriber: server fatal error close: ", data);
            this.onWebsocketError(data);
        }
    }, {
        key: "onWebsocketMessage",
        value: function onWebsocketMessage(event) {
            if (event.data === WebsocketSubscriber.HEARTBEAT_MESSAGE) {
                // TODO: keep track of the last heartbeat timestamp
            } else {
                var firstSpace = event.data.indexOf(" ");
                var type = void 0,
                    payload = void 0;

                if (firstSpace > 0) {
                    type = event.data.substr(0, firstSpace).trim();
                    payload = event.data.substr(firstSpace + 1).trim();
                } else {
                    type = event.data;
                    payload = "";
                }

                if (type === "e" || type === "error") {
                    // error
                    console.error("WebsocketSubscriber: Websocket error: ", payload);
                    payload = payload.split(" ");
                    var errorType = payload[0];
                    if (errorType === "invalidSubscription") {
                        // Stop trying to resubscribe to a stream that's been rejected by the server
                        var streamName = payload[1];
                        var streamHandler = this.getStreamHandler(streamName);
                        if (streamHandler) {
                            // TODO: set permission denied explicitly?
                            streamHandler.clearResubscribeTimeout();
                        }
                    }
                } else if (type === "s") {
                    // subscribed
                    console.log("WebsocketSubscriber: Successfully subscribed to stream ", payload);
                    this.onStreamSubscribe(payload);
                } else if (type === "m") {
                    // stream message
                    this.processStreamPacket(payload);
                } else if (type === "c") {
                    // command
                    this.dispatch("serverCommand", payload);
                } else if (type == "efc") {
                    // error - fatal - close
                    this.fatalErrorClose(payload);
                } else {
                    console.error("WebsocketSubscriber: Can't process " + event.data);
                }
            }
        }
    }, {
        key: "reset",
        value: function reset() {
            this.setConnectionStatus(WebsocketSubscriber.ConnectionStatus.DISCONNECTED);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.streamHandlers.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var streamHandler = _step2.value;

                    streamHandler.resetStatus();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "onWebsocketError",
        value: function onWebsocketError(event) {
            console.error("WebsocketSubscriber: Websocket connection is broken!");
            this.reset();
            this.tryReconnect();
        }
    }, {
        key: "onWebsocketClose",
        value: function onWebsocketClose(event) {
            console.log("WebsocketSubscriber: Connection closed!");
            this.reset();
            this.tryReconnect();
        }
    }, {
        key: "send",
        value: function send(message) {
            // TODO: if the websocket is not open, enqueue WebsocketSubscriber message to be sent on open or just fail?
            this.websocket.send(message);
        }
    }, {
        key: "getStreamHandler",
        value: function getStreamHandler(streamName) {
            var streamHandler = this.streamHandlers.get(streamName);
            if (!streamHandler) {
                streamHandler = this.subscribe(streamName);
            }
            return streamHandler;
        }

        // this should be pretty much the only external function

    }, {
        key: "addStreamListener",
        value: function addStreamListener(streamName, callback) {
            var streamHandler = this.getStreamHandler(streamName);
            if (streamHandler.callbackExists(callback)) {
                return;
            }
            streamHandler.addListener(callback);
        }
    }], [{
        key: "addListener",
        value: function addListener(streamName, callback) {
            return this.Global.addStreamListener(streamName, callback);
        }
    }]);
    return WebsocketSubscriber;
}(Dispatchable), _class$46.ConnectionStatus = {
    NONE: 0,
    CONNECTING: 1,
    CONNECTED: 2,
    DISCONNECTED: 3
}, _class$46.STREAM_SUBSCRIBE_TIMEOUT = 3000, _class$46.STREAM_SUBSCRIBE_MAX_TIMEOUT = 30000, _class$46.CONNECT_RETRY_TIMEOUT = 3000, _class$46.CONNECT_RETRY_MAX_TIMEOUT = 30000, _class$46.HEARTBEAT_MESSAGE = "-hrtbt-", _temp$10);


WebsocketSubscriber.Global = new WebsocketSubscriber();

var TermDefinitionObject = function (_StoreObject) {
    inherits(TermDefinitionObject, _StoreObject);

    function TermDefinitionObject() {
        classCallCheck(this, TermDefinitionObject);
        return possibleConstructorReturn(this, (TermDefinitionObject.__proto__ || Object.getPrototypeOf(TermDefinitionObject)).apply(this, arguments));
    }

    return TermDefinitionObject;
}(StoreObject);

var TermDefinition = new GenericObjectStore("termdefinition", TermDefinitionObject);

TermDefinition.getDefinition = function (term) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = this.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var definition = _step.value;

            if (definition.term === term) {
                return definition;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return null;
};

var extraLanguageAttributesMap = {
    1: {
        enforcedTemplateComment: '/* \n * ATTENTION!\n * This task does not have an enforced\n * template in this language!\n *\n * However, you can still submit any custom code.\n */\n\n',
        compiler: "g++ 6.3.0",
        comment: "Compiled with `g++ -static -O2 -lm -Wall -Wno-unused-result -std=c++14 -DCS_ACADEMY -DONLINE_JUDGE`",
        alternativeExtensions: ["h", "hpp"]
    },
    2: {
        enforcedTemplateComment: '/* \n * ATTENTION!\n * This task does not have an enforced\n * template in this language!\n *\n * However, you can still submit any custom code.\n */\n\n',
        compiler: "OpenJDK Java 8",
        comment: "Runned with `java  -Xmx4g -Xss256m -DONLINE_JUDGE -DCS_ACADEMY Main`"
    },
    3: {
        enforcedTemplateComment: '"""\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n"""\n\n',
        compiler: "Python 2.7.13+"
    },
    4: {
        enforcedTemplateComment: '"""\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n"""\n\n',
        comment: "Comes with `numpy` and `scipy` modules",
        compiler: "Python 3.6.1+"
    },
    5: {
        enforcedTemplateComment: '/* \n * ATTENTION!\n * This task does not have an enforced\n * template in this language!\n *\n * However, you can still submit any custom code.\n */\n\n',
        compiler: "Mono 4.6.2+",
        comment: "Compiled with `mcs -define:ONLINE_JUDGE -define:CS_ACADEMY`"
    },
    6: {
        enforcedTemplateComment: '{-\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n-}\n\n',
        compiler: "GHC 8.0.2+"
    },
    7: {
        enforcedTemplateComment: '# ATTENTION!\n# This task does not have an enforced\n# template in this language!\n#\n# However, you can still submit any custom code.\n\n',
        compiler: "Bash 4.4.7+"
    },
    8: {
        enforcedTemplateComment: '! ATTENTION!\n! This task does not have an enforced\n! template in this language!\n! \n! However, you can still submit any custom code.\n\n',
        compiler: "GNU Fortran 6.3.0+",
        comment: "Compiled with `gfortran -ffree-form`"
    },
    9: {
        enforcedTemplateComment: '--[=====[\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n--]=====]\n\n',
        compiler: "Lua 5.2.4+"
    },
    10: {
        enforcedTemplateComment: '# ATTENTION!\n# This task does not have an enforced\n# template in this language!\n# \n# However, you can still submit any custom code.\n\n',
        compiler: "Ruby 2.3.3+"
    },
    11: {
        enforcedTemplateComment: '# ATTENTION!\n# This task does not have an enforced\n# template in this language!\n# \n# However, you can still submit any custom code.\n\n',
        compiler: "Perl 5.24.1+"
    },
    12: {
        enforcedTemplateComment: '/*\n * ATTENTION!\n * This task does not have an enforced\n * template in this language!\n *\n * However, you can still submit any custom code.\n */\n\n',
        compiler: "PHP 7.0.18+"
    },
    13: {
        enforcedTemplateComment: '/* \n * ATTENTION!\n * This task does not have an enforced\n * template in this language!\n *\n * However, you can still submit any custom code.\n */\n\n',
        compiler: "gcc 6.3.0",
        comment: "Compiled with `gcc -O2 -lm -Wall -Wno-unused-result -DCS_ACADEMY -DONLINE_JUDGE`"
    },
    14: {
        enforcedTemplateComment: '/*\n * ATTENTION!\n * This task does not have an enforced\n * template in this language!\n *\n * However, you can still submit any custom code.\n */\n\n',
        compiler: "gcc 6.3.0",
        comment: "Compiled with `gcc -DCS_ACADEMY -DONLINE_JUDGE -I 'gnustep-config --variable=GNUSTEP_SYSTEM_HEADERS' -L 'gnustep-config --variable=GNUSTEP_SYSTEM_LIBRARIES' -lgnustep-base -fconstant-string-class=NSConstantString -D_NATIVE_OBJC_EXCEPTIONS -Wl,--no-as-needed -lgnustep-base -lobjc`"
    },
    15: {
        enforcedTemplateComment: '"\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n"\n\n',
        compiler: "GNU Smalltalk 3.2.5"
    },
    16: {
        enforcedTemplateComment: '(*\n * ATTENTION!\n * This task does not have an enforced\n * template in this language!\n *\n * However, you can still submit any custom code.\n *)\n\n',
        compiler: "OCaml 4.02.3"
    },
    17: {
        enforcedTemplateComment: '/* \n * ATTENTION!\n * This task does not have an enforced\n * template in this language!\n *\n * However, you can still submit any custom code.\n */\n\n',
        compiler: "Node v7.10.0"
    },
    18: {
        enforcedTemplateComment: '*> ATTENTION!\n*> This task does not have an enforced\n*> template in this language!\n*> \n*> However, you can still submit any custom code.\n\n',
        compiler: "OpenCOBOL 1.1.0",
        comment: "Compiled with `cobc -free -x`"
    },
    19: {
        enforcedTemplateComment: '-- ATTENTION!\n-- This task does not have an enforced\n-- template in this language!\n--\n-- However, you can still submit any custom code.\n\n',
        compiler: "GNATMAKE 6.3.0"
    },
    20: {
        enforcedTemplateComment: '{\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n}\n\n',
        compiler: "Free Pascal 3.0.2",
        comment: "Compiled with `fpc -O2 -Sgic -viwn -Tlinux -dONLINE_JUDGE -dCS_ACADEMY -XS`"
    },
    21: {
        enforcedTemplateComment: ';; ATTENTION!\n;; This task does not have an enforced\n;; template in this language!\n;; \n;; However, you can still submit any custom code.\n\n',
        compiler: "SBCL 1.3.3"
    },
    22: {
        enforcedTemplateComment: '% ATTENTION!\n% This task does not have an enforced\n% template in this language!\n% \n% However, you can still submit any custom code.\n\n',
        compiler: "Erlang/OTP 19 [erts-8.2.1]"
    },
    23: {
        enforcedTemplateComment: '# ATTENTION!\n# This task does not have an enforced\n# template in this language!\n# \n# However, you can still submit any custom code.\n\n',
        compiler: "TCL Shell 8.6.6"
    },
    24: {
        enforcedTemplateComment: '#{\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n#}\n\n',
        compiler: "GNU Octave 4.0.3"
    },
    25: {
        enforcedTemplateComment: '#{\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n#}\n\n',
        compiler: "Go 1.7.4 linux/amd64"
    },
    26: {
        enforcedTemplateComment: '#{\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n#}\n\n',
        compiler: "Swift 3.1.1"
    },
    27: {
        enforcedTemplateComment: '#{\n ATTENTION!\n This task does not have an enforced\n template in this language!\n \n However, you can still submit any custom code.\n#}\n\n',
        compiler: "Scala 2.11.8",
        comment: "Runned with `scala -J-Xmx4g -J-Xss256m -DONLINE_JUDGE -DCS_ACADEMY Main`"
    }
};

var ProgrammingLanguageObject = function (_StoreObject) {
    inherits(ProgrammingLanguageObject, _StoreObject);

    function ProgrammingLanguageObject(obj) {
        classCallCheck(this, ProgrammingLanguageObject);

        var _this = possibleConstructorReturn(this, (ProgrammingLanguageObject.__proto__ || Object.getPrototypeOf(ProgrammingLanguageObject)).call(this, obj));

        Object.assign(_this, extraLanguageAttributesMap[_this.id] || {});
        return _this;
    }

    createClass(ProgrammingLanguageObject, [{
        key: "getDefaultSource",
        value: function getDefaultSource() {
            var user = UserStore.getCurrentUser();
            if (user) {
                return user.getCustomSetting("workspace:programmingLanguage:" + this.id + ":defaultSource", this.defaultSource);
            }
            return this.defaultSource;
        }
    }, {
        key: "getDefaultTemplateComment",

        // This is appended to the beginning of the code for languages which
        // do not have a template in an enforced template task

        value: function getDefaultTemplateComment() {
            return this.enforcedTemplateComment;
        }
    }, {
        key: "getExtension",
        value: function getExtension() {
            return this.extension;
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }]);
    return ProgrammingLanguageObject;
}(StoreObject);
var ProgrammingLanguage = new GenericObjectStore("programminglanguage", ProgrammingLanguageObject);

//TODO: make static methods
ProgrammingLanguage.getLanguageForFileName = function (fileName) {
    //get extension
    var parts = fileName.split(".");
    if (parts.length >= 2) {
        // Trying to get the language by languageId
        var nameWithoutExtension = parts[0];
        // 4 is the length of "Main". If that ever changes...Forta Steaua
        var languageId = parseInt(nameWithoutExtension.substring(4));
        var language = ProgrammingLanguage.get(languageId);
        if (language) {
            return language;
        }
    }
    var extension = parts.length >= 2 ? parts.pop() : parts[0];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = ProgrammingLanguage.objects.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var programmingLanguage = _step.value;

            if (programmingLanguage.extension === extension || programmingLanguage.hasOwnProperty("alternativeExtensions") && programmingLanguage.alternativeExtensions.indexOf(extension) !== -1) {
                return programmingLanguage;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    console.error("Can't get a programming language for fileName: ", fileName);
    //TODO: should return text here
    return {
        aceMode: "text"
    };
};

ProgrammingLanguage.getDefaultLanguage = function () {
    var programmingLanguageId = 1; // C++
    var user = UserStore.getCurrentUser();
    if (user) {
        programmingLanguageId = user.getParsedCustomSetting("workspace:preferredProgrammingLanguage", programmingLanguageId);
    }
    return ProgrammingLanguage.get(programmingLanguageId);
};

var AceSettingObject = function (_StoreObject) {
    inherits(AceSettingObject, _StoreObject);

    function AceSettingObject() {
        classCallCheck(this, AceSettingObject);
        return possibleConstructorReturn(this, (AceSettingObject.__proto__ || Object.getPrototypeOf(AceSettingObject)).apply(this, arguments));
    }

    createClass(AceSettingObject, [{
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }]);
    return AceSettingObject;
}(StoreObject);

var AceTheme = new GenericObjectStore("AceTheme", AceSettingObject);
AceTheme.getDefaultTheme = function () {
    var aceThemeId = 1; // Dawn
    var user = UserStore.getCurrentUser();
    if (user) {
        aceThemeId = user.getParsedCustomSetting("workspace:aceTheme", aceThemeId);
    }
    return AceTheme.get(aceThemeId);
};

var AceKeyboardHandler = new GenericObjectStore("AceEditorKeyboardHandler", AceSettingObject);
AceKeyboardHandler.getDefaultKeyboardHandler = function () {
    var aceKeyboardHandlerId = 1; // ace
    var user = UserStore.getCurrentUser();
    if (user) {
        aceKeyboardHandlerId = user.getParsedCustomSetting("workspace:aceKeyboardHandler", aceKeyboardHandlerId);
    }
    return AceKeyboardHandler.get(aceKeyboardHandlerId);
};

var DifficultyObject = function (_StoreObject) {
    inherits(DifficultyObject, _StoreObject);

    function DifficultyObject() {
        classCallCheck(this, DifficultyObject);
        return possibleConstructorReturn(this, (DifficultyObject.__proto__ || Object.getPrototypeOf(DifficultyObject)).apply(this, arguments));
    }

    createClass(DifficultyObject, [{
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }]);
    return DifficultyObject;
}(StoreObject);

var Difficulty = new GenericObjectStore("difficulty", DifficultyObject);

Difficulty.getDefaultDifficulty = function () {
    return Difficulty.get(2);
};

Difficulty.importState([{ id: -1, name: "TUTORIAL", color: "#00dd00" }, { id: 1, name: "EASY", color: "green" }, { id: 2, name: "MEDIUM", color: "orange" }, { id: 3, name: "HARD", color: "red" }, { id: 4, name: "HARDEST", color: "#aa0000" }]);

Object.assign(Difficulty, {
    EASY: Difficulty.get(1),
    MEDIUM: Difficulty.get(2),
    HARD: Difficulty.get(3),
    HARDEST: Difficulty.get(4),
    TUTORIAL: Difficulty.get(-1)
});

var FRONT_PAGE_CHAT_ID = 2;

var INTERVIEWS_ARCHIVE_ID = 3;
var ALGORITHMS_ARCHIVE_ID = 1;

var ABOUT_ARTICLES = [{ articleId: 141, title: "Environment", url: "environment" }, { articleId: 137, title: "Markup", url: "markup" }, { articleId: 147, title: "Contests", url: "contests" }, { articleId: 149, title: "Workspace Tutorial", url: "workspace-tutorial" }, { articleId: 148, title: "Rating", url: "rating" }, { articleId: 1124, title: "Problem Setting", url: "problem-setting" }, { articleId: 354, title: "T&C", url: "terms-and-conditions" }];

// Social authentication app settings
window.FACEBOOK_MANAGER_OPTIONS = {
    appId: "375510855971020"
};

window.GOOGLE_MANAGER_OPTIONS = {
    clientId: "469601560740-qk0ngdqb8fl07thec3jq9cpjt4k7ver2.apps.googleusercontent.com"
};

var ContestScoring = function (_StoreObject) {
    inherits(ContestScoring, _StoreObject);

    function ContestScoring() {
        classCallCheck(this, ContestScoring);
        return possibleConstructorReturn(this, (ContestScoring.__proto__ || Object.getPrototypeOf(ContestScoring)).apply(this, arguments));
    }

    createClass(ContestScoring, [{
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }], [{
        key: "PARTIAL_SCORING",
        get: function get$$1() {
            return ContestScoringStore.get(1);
        }
    }, {
        key: "ACM",
        get: function get$$1() {
            return ContestScoringStore.get(2);
        }
    }, {
        key: "CSA",
        get: function get$$1() {
            return ContestScoringStore.get(3);
        }
    }]);
    return ContestScoring;
}(StoreObject);

var ContestScoringStore = new GenericObjectStore("ContestScoring", ContestScoring);

var SocialApp = function (_StoreObject) {
    inherits(SocialApp, _StoreObject);

    function SocialApp() {
        classCallCheck(this, SocialApp);
        return possibleConstructorReturn(this, (SocialApp.__proto__ || Object.getPrototypeOf(SocialApp)).apply(this, arguments));
    }

    createClass(SocialApp, [{
        key: "getClientId",
        value: function getClientId() {
            return this.clientId;
        }
    }]);
    return SocialApp;
}(StoreObject);

var SocialAppStoreClass = function (_GenericObjectStore) {
    inherits(SocialAppStoreClass, _GenericObjectStore);

    function SocialAppStoreClass() {
        classCallCheck(this, SocialAppStoreClass);
        return possibleConstructorReturn(this, (SocialAppStoreClass.__proto__ || Object.getPrototypeOf(SocialAppStoreClass)).call(this, "SocialApp", SocialApp));
    }

    createClass(SocialAppStoreClass, [{
        key: "getSocialApps",
        value: function getSocialApps() {
            return this.all();
        }
    }, {
        key: "getSocialAppByName",
        value: function getSocialAppByName(name) {
            return this.all().find(function (socialApp) {
                return socialApp.name === name;
            });
        }
    }]);
    return SocialAppStoreClass;
}(GenericObjectStore);

var SocialAppStore = new SocialAppStoreClass();

document.STEM_DEBUG = true;

var startTime = performance.now();

// GlobalState initialization
GlobalState.registerStream = function (streamName) {
    WebsocketSubscriber.addListener(streamName, GlobalState.applyEventWrapper);
};
GlobalState.importState(PublicState.PublicState);
//Register on the global event stream
GlobalState.registerStream("global-events");
if (USER.id) {
    //Register on the user event stream
    GlobalState.registerStream("user-" + USER.id + "-events");
}

// CSASettings initialization

var CSASettingsClass = function (_SingletonStore) {
    inherits(CSASettingsClass, _SingletonStore);

    function CSASettingsClass() {
        classCallCheck(this, CSASettingsClass);
        return possibleConstructorReturn(this, (CSASettingsClass.__proto__ || Object.getPrototypeOf(CSASettingsClass)).call(this, "CSASettings"));
    }

    return CSASettingsClass;
}(SingletonStore);

var CSASettings = new CSASettingsClass();

// Load ISO 3 language codes
Object.assign(Language, {
    ENGLISH: Language.getLanguageForCode("eng"),
    ROMANIAN: Language.getLanguageForCode("rom"),
    RUSSIAN: Language.getLanguageForCode("rus"),
    MANDARIN: Language.getLanguageForCode("cmn"),
    JAPANESE: Language.getLanguageForCode("jpn"),
    ARABIC: Language.getLanguageForCode("ara"),
    SPANISH: Language.getLanguageForCode("spa"),
    FRENCH: Language.getLanguageForCode("fra"),
    GERMAN: Language.getLanguageForCode("deu"),
    ITALIAN: Language.getLanguageForCode("ita"),
    POLISH: Language.getLanguageForCode("pol"),
    DUTCH: Language.getLanguageForCode("nld")
});
Language.setLocale(Language.get(USER.localeLanguageId) || Language.ENGLISH);
setLanguageStore(Language);

console.log("CSAState took", (performance.now() - startTime).toFixed(2), "ms at", performance.now().toFixed(2), "ms.");

var _class$47, _temp$11;

var BasePopup = (_temp$11 = _class$47 = function (_FloatingWindow) {
    inherits(BasePopup, _FloatingWindow);

    function BasePopup() {
        classCallCheck(this, BasePopup);
        return possibleConstructorReturn(this, (BasePopup.__proto__ || Object.getPrototypeOf(BasePopup)).apply(this, arguments));
    }

    createClass(BasePopup, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            var options = get(BasePopup.prototype.__proto__ || Object.getPrototypeOf(BasePopup.prototype), "getDefaultOptions", this).call(this);
            options.x = 0;
            options.y = 0;
            options.contentPadding = "7px";
            options.contentStyle = {};
            options.arrowDirection = Direction.UP;
            options.arrowColor = "white";
            options.backgroundColor = "white";
            return options;
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(BasePopup.prototype.__proto__ || Object.getPrototypeOf(BasePopup.prototype), "setOptions", this).call(this, options);
            this.options.style = Object.assign({
                boxShadow: "0px 0px 4px rgba(0,0,0,0.5)",
                borderRadius: "5px",
                display: "table",
                maxWidth: "350px",
                backgroundColor: this.options.backgroundColor,
                position: "absolute",
                left: this.options.x + "px",
                top: this.options.y + "px",
                zIndex: "3",
                right: "0px"
            }, this.options.style);
            this.createArrowStyle();
        }
    }, {
        key: "setContent",
        value: function setContent(content) {
            this.options.children = content;
            this.redraw();
        }
    }, {
        key: "getContent",
        value: function getContent() {
            return UI.createElement(
                "div",
                { style: Object.assign({ padding: this.options.contentPadding }, this.options.contentStyle), ref: "contentArea" },
                this.options.children
            );
        }
    }, {
        key: "createArrowStyle",
        value: function createArrowStyle() {
            var baseArrowOutline = {
                "left": "50%",
                "z-index": "-3",
                "position": "absolute",
                "width": "0",
                "height": "0",
                "border-left": "10px solid transparent",
                "border-right": "10px solid transparent",
                marginLeft: "-11px"
            };

            this["arrow" + Direction.UP + "Outline"] = Object.assign({
                "border-bottom": "10px solid #C8C8C8",
                "margin-top": "-10.8px",
                marginLeft: "-11px"
            }, baseArrowOutline);

            this["arrow" + Direction.DOWN + "Outline"] = Object.assign({
                "border-top": "10px solid #C8C8C8",
                "margin-top": "2px"
            }, baseArrowOutline);

            var baseArrow = {
                "left": "50%",
                "position": "absolute",
                "width": "0",
                "height": "0",
                "border-left": "10px solid transparent",
                "border-right": "10px solid transparent"
            };

            this["arrow" + Direction.UP] = Object.assign({
                "margin-top": "-10px",
                "border-bottom": "10px solid " + this.options.arrowColor
            }, baseArrow);

            this["arrow" + Direction.DOWN] = Object.assign({
                "border-top": "10px solid " + this.options.arrowColor
            }, baseArrow);
        }
    }, {
        key: "getArrow",
        value: function getArrow() {
            var direction = this.options.arrowDirection;
            return [UI.createElement(Panel, { ref: "popupArrow", style: this["arrow" + direction] }), UI.createElement(Panel, { ref: "popupArrowOutline", style: this["arrow" + direction + "Outline"] })];
        }
    }, {
        key: "render",
        value: function render() {
            return this.options.arrowDirection === Direction.UP ? [this.getArrow(), this.getContent()] : [this.getContent(), this.getArrow()];
        }
    }, {
        key: "bindInsideParent",
        value: function bindInsideParent() {
            if (this.target) {
                this.options.x = this.target.offsetWidth / 2;
                this.options.y = this.options.arrowDirection === Direction.UP ? this.target.offsetHeight : 0;
            }
            var left = parseFloat(this.options.x);
            var top = parseFloat(this.options.y) + (this.options.arrowDirection === Direction.UP ? 11 : -this.getHeight() - 11);
            var arrowMargin = -11;
            left -= this.getWidth() / 2;
            if (this.options.bodyPlaced && this.target) {
                var rect = this.target.getBoundingClientRect();
                left += rect.left;
                top += rect.top;
            }
            if (this.target && !this.options.bodyPlaced) {
                if (this.node.offsetParent && !this.options.bodyPlaced) {
                    var left2 = left + this.node.offsetParent.offsetLeft;
                    if (left2 < 0) {
                        left -= left2 - 2;
                        arrowMargin += left2 + 2;
                    } else if (left2 + this.getWidth() > this.node.offsetParent.offsetParent.offsetWidth) {
                        var delta = this.node.offsetParent.offsetParent.offsetWidth - (left2 + this.getWidth());
                        arrowMargin -= delta - 2;
                        left += delta - 2;
                    }
                }
            } else {
                if (left < 0) {
                    arrowMargin += left + 2;
                    left = 2;
                } else if (left + this.getWidth() > this.parentNode.offsetWidth) {
                    var _delta = left + this.getWidth() - this.parentNode.offsetWidth;
                    arrowMargin += _delta;
                    left -= _delta;
                }
            }
            this.popupArrow.setStyle("margin-left", arrowMargin + "px");
            this.popupArrowOutline.setStyle("margin-left", arrowMargin + "px");

            this.setStyle("left", left + "px");
            this.setStyle("top", top + "px");
        }
    }, {
        key: "setParent",
        value: function setParent(parent) {
            var newParent = void 0;
            if (parent instanceof HTMLElement) {
                newParent = parent;
            } else {
                newParent = parent.node;
            }
            if (newParent === this.parentNode) {
                return;
            }
            if (this.isInDocument()) {
                this.parentNode.removeChild(this.node);
                newParent.appendChild(this.node);
                this.setParentNode(newParent);
            } else {
                this.setParentNode(newParent);
            }
        }
    }, {
        key: "setCenter",
        value: function setCenter(center) {
            var _this2 = this;

            var manual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            this.options.x = center.x;
            this.options.y = center.y;
            if (manual) {
                setTimeout(function () {
                    _this2.bindInsideParent();
                }, 0);
            } else {
                this.bindInsideParent();
            }
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            get(BasePopup.prototype.__proto__ || Object.getPrototypeOf(BasePopup.prototype), "onUnmount", this).call(this);
            if (this.options.bodyPlaced && this.target) {
                this.constructor.bodyPopups.delete(this);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            if (this.options.target) {
                if (this.options.target instanceof HTMLElement) {
                    this.target = this.options.target;
                } else {
                    this.target = this.options.target.node;
                }
                this.options.x = this.target.offsetWidth / 2;
                this.options.y = this.target.offsetHeight;
            }
            get(BasePopup.prototype.__proto__ || Object.getPrototypeOf(BasePopup.prototype), "onMount", this).call(this);
            // Set the Popup inside the parent
            this.bindInsideParent();
            if (this.options.bodyPlaced && this.target) {
                this.constructor.bodyPopups.add(this);
            }
        }
    }], [{
        key: "clearBodyPopups",
        value: function clearBodyPopups() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.bodyPopups[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var popup = _step.value;

                    popup.hide();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.bodyPopups.clear();
        }
    }]);
    return BasePopup;
}(FloatingWindow), _class$47.bodyPopups = new Set(), _temp$11);

var Popup = function (_BasePopup) {
    inherits(Popup, _BasePopup);

    function Popup() {
        classCallCheck(this, Popup);
        return possibleConstructorReturn(this, (Popup.__proto__ || Object.getPrototypeOf(Popup)).apply(this, arguments));
    }

    createClass(Popup, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            var options = get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), "getDefaultOptions", this).call(this);
            options.titleFontSize = "12pt";
            options.contentFontSize = "10pt";
            options.arrowColor = "#F3F3F3";
            return options;
        }
    }, {
        key: "getContent",
        value: function getContent() {
            var contentArea = get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), "getContent", this).call(this);
            contentArea.options.style = Object.assign({
                fontSize: this.options.contentFontSize
            }, contentArea.options.style || {});

            return [UI.createElement(
                Panel,
                { ref: "titleArea", style: { backgroundColor: "#F3F3F3", paddingLeft: "20px", fontSize: this.options.titleFontSize,
                        fontWeight: "bold", paddingTop: "6px", paddingBottom: "6px", textAlign: "center",
                        borderBottom: "1px solid #BEBEBE" } },
                this.getTitleAreaContent()
            ), contentArea];
        }
    }, {
        key: "setTitle",
        value: function setTitle(newTitle) {
            this.options.title = newTitle;
            this.redraw();
        }
    }, {
        key: "getTitleAreaContent",
        value: function getTitleAreaContent() {
            return [UI.createElement(Button, { className: "pull-right", ref: "closeButton", style: { backgroundColor: "transparent", border: "none", color: "#888888", fontSize: "18pt", padding: "2px", marginRight: "3px", marginTop: "-12px" }, label: "\xD7" }), UI.createElement(
                "div",
                { style: { marginRight: "25px" } },
                this.options.title
            )];
        }
    }, {
        key: "bindWindowListeners",
        value: function bindWindowListeners() {
            var _this4 = this;

            this.addClickListener(function (event) {
                event.stopPropagation();
            });

            var documentListener = function documentListener() {
                _this4.hide();
                if (!Device.supportsEvent("click")) {
                    document.removeEventListener("touchstart", documentListener);
                } else {
                    document.removeEventListener("click", documentListener);
                }
            };
            if (!Device.supportsEvent("click")) {
                document.addEventListener("touchstart", documentListener);
            } else {
                document.addEventListener("click", documentListener);
            }
        }
    }, {
        key: "show",
        value: function show() {
            get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), "show", this).call(this);
            this.bindWindowListeners();
        }
    }, {
        key: "redraw",
        value: function redraw() {
            if (this.isInDocument()) {
                this.bindInsideParent();
            }
            get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), "redraw", this).call(this);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            get(Popup.prototype.__proto__ || Object.getPrototypeOf(Popup.prototype), "onMount", this).call(this);

            // fake a click event that will propagate to window and trigger
            // the events of any other popup, closing them
            var fakeClickEvent = document.createEvent("MouseEvents");
            fakeClickEvent.initEvent("click", true, false);
            document.body.dispatchEvent(fakeClickEvent);

            // Make the popup close when something else is clicked
            this.bindWindowListeners();

            // Close button behavior
            this.closeButton.addClickListener(function () {
                _this5.hide();
                _this5.closeButton.node.blur();
            });
            var closeButtonColor = this.closeButton.options.style.color;
            this.closeButton.addNodeListener("mouseover", function () {
                _this5.closeButton.setStyle("color", "#0082AD");
            });
            this.closeButton.addNodeListener("mouseout", function () {
                _this5.closeButton.setStyle("color", closeButtonColor);
            });
        }
    }]);
    return Popup;
}(BasePopup);

var ScriptResolver = function (_Dispatchable) {
    inherits(ScriptResolver, _Dispatchable);

    function ScriptResolver(scriptPath) {
        classCallCheck(this, ScriptResolver);

        var _this = possibleConstructorReturn(this, (ScriptResolver.__proto__ || Object.getPrototypeOf(ScriptResolver)).call(this));

        _this.loaded = false;
        _this.jobs = [];
        // TODO: should be more thought out
        var scriptElement = document.createElement("script");
        scriptElement.async = true;
        scriptElement.src = scriptPath;
        scriptElement.onload = function () {
            return _this.onLoad();
        };
        // TODO: what about error?
        document.getElementsByTagName("head")[0].appendChild(scriptElement);
        return _this;
    }

    createClass(ScriptResolver, [{
        key: "onLoad",
        value: function onLoad() {
            this.loaded = true;
            for (var i = 0; i < this.jobs.length; i += 1) {
                this.jobs[i](this);
            }
            this.jobs = [];
        }
    }, {
        key: "resolve",
        value: function resolve(callback) {
            if (this.loaded) {
                callback(this);
                return;
            }
            this.jobs.push(callback);
        }
    }]);
    return ScriptResolver;
}(Dispatchable);

var scriptResolveMap = new Map();

function ensureSingle(script) {
    var scriptResolver = scriptResolveMap.get(script);
    if (!scriptResolver) {
        scriptResolver = new ScriptResolver(script);
        scriptResolveMap.set(script, scriptResolver);
    }
    return new Promise(function (resolve, reject) {
        scriptResolver.resolve(resolve, reject);
    });
}

function ensure(scripts, callback) {
    if (!Array.isArray(scripts)) {
        scripts = [scripts];
    }
    var promises = scripts.map(function (script) {
        return ensureSingle(script);
    });
    Promise.all(promises).then(function () {
        callback.apply(undefined, arguments);
    });
}

var ErrorMessage = function (_StoreObject) {
    inherits(ErrorMessage, _StoreObject);

    function ErrorMessage() {
        classCallCheck(this, ErrorMessage);
        return possibleConstructorReturn(this, (ErrorMessage.__proto__ || Object.getPrototypeOf(ErrorMessage)).apply(this, arguments));
    }

    createClass(ErrorMessage, [{
        key: "getTranslation",
        value: function getTranslation() {
            var translationKey = TranslationKeyStore.get(this.translationKeyId);
        }
    }]);
    return ErrorMessage;
}(StoreObject);

var ErrorMessageStoreClass = function (_GenericObjectStore) {
    inherits(ErrorMessageStoreClass, _GenericObjectStore);

    function ErrorMessageStoreClass() {
        classCallCheck(this, ErrorMessageStoreClass);
        return possibleConstructorReturn(this, (ErrorMessageStoreClass.__proto__ || Object.getPrototypeOf(ErrorMessageStoreClass)).call(this, "ErrorMessage", ErrorMessage));
    }

    return ErrorMessageStoreClass;
}(GenericObjectStore);

var ErrorMessageStore = new ErrorMessageStoreClass();

var ErrorHandlers = {};

ErrorHandlers.wrapError = function (error) {
    if (error instanceof StoreObject) {
        return error;
    }

    if (error.id) {
        return ErrorMessageStore.fakeCreate(error);
    } else {
        if (typeof error === "string" || error instanceof String) {
            error = { message: error };
        } else if (error instanceof Error) {
            error = {
                name: error.name,
                message: error.message
            };
        }
        return new ErrorMessage(error);
    }
};

ErrorHandlers.showErrorAlert = function (error) {
    ErrorModal.show({
        error: ErrorHandlers.wrapError(error)
    });
};

ErrorHandlers.PAGE_NOT_FOUND = ErrorHandlers.wrapError("Page not found.");

var SocialAccountManager = function (_Dispatchable) {
    inherits(SocialAccountManager, _Dispatchable);

    function SocialAccountManager(socialApp, options) {
        classCallCheck(this, SocialAccountManager);

        var _this = possibleConstructorReturn(this, (SocialAccountManager.__proto__ || Object.getPrototypeOf(SocialAccountManager)).call(this));

        _this.socialApp = socialApp;
        _this.options = options;
        return _this;
    }

    createClass(SocialAccountManager, [{
        key: "getSocialApp",
        value: function getSocialApp() {
            return this.socialApp;
        }
    }, {
        key: "getClientId",
        value: function getClientId() {
            return this.getSocialApp().getClientId();
        }
    }, {
        key: "setLoaded",
        value: function setLoaded() {
            this.loaded = true;
            this.dispatch("loaded");
        }
    }], [{
        key: "getInstance",
        value: function getInstance() {
            if (!this._Global) {
                this._Global = new this();
            }
            return this._Global;
        }

        // TODO: all managers should call the onError function (if one is passed in) to report issues

    }, {
        key: "login",
        value: function login(callback, onError) {
            var _getInstance;

            (_getInstance = this.getInstance()).login.apply(_getInstance, arguments);
        }
    }, {
        key: "connect",
        value: function connect(callback, onError) {
            var _getInstance2;

            (_getInstance2 = this.getInstance()).connect.apply(_getInstance2, arguments);
        }
    }]);
    return SocialAccountManager;
}(Dispatchable);

var GoogleManager = function (_SocialAccountManager) {
    inherits(GoogleManager, _SocialAccountManager);

    function GoogleManager() {
        classCallCheck(this, GoogleManager);

        var _this = possibleConstructorReturn(this, (GoogleManager.__proto__ || Object.getPrototypeOf(GoogleManager)).call(this, SocialAppStore.getSocialAppByName("Google"), {
            loginByTokenUrl: "/accounts/google/login/token/"
        }));

        _this.ensureScriptNodeExists();
        return _this;
    }

    createClass(GoogleManager, [{
        key: "sendData",
        value: function sendData(url, data) {
            var onSuccess = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOOP_FUNCTION;

            Ajax.postJSON(url, data).then(onSuccess);
        }
    }, {
        key: "ensureScriptNodeExists",
        value: function ensureScriptNodeExists() {
            var _this2 = this;

            var id = "google-jsapi";
            if (document.getElementById(id)) {
                return;
            }
            var scriptElement = document.createElement("script");
            scriptElement.id = id;
            scriptElement.async = true;
            scriptElement.onload = function () {
                gapi.load("auth2", function () {
                    gapi.auth2.init({
                        client_id: _this2.getClientId()
                    }).then(function () {
                        // Handle the initial sign-in state.
                        // this.updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
                        _this2.updateSigninStatus(_this2.getGoogleAuth().isSignedIn.get());

                        // Listen for sign-in state changes.
                        // gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSigninStatus);
                        _this2.getGoogleAuth().isSignedIn.listen(_this2.updateSigninStatus);

                        _this2.setLoaded();
                    });
                });
            };
            scriptElement.src = "https://apis.google.com/js/platform.js";
            document.getElementsByTagName("head")[0].appendChild(scriptElement);
        }
    }, {
        key: "getGoogleAuth",
        value: function getGoogleAuth() {
            return gapi.auth2.getAuthInstance();
        }
    }, {
        key: "getGoogleUser",
        value: function getGoogleUser() {
            return this.getGoogleAuth().currentUser.get();
        }
    }, {
        key: "getAuthResponse",
        value: function getAuthResponse() {
            return this.getGoogleUser().getAuthResponse();
        }
    }, {
        key: "updateSigninStatus",
        value: function updateSigninStatus(isSignedIn) {
            if (isSignedIn) {
                console.log("Google user is signed in");
            }
        }
    }, {
        key: "handleProcess",
        value: function handleProcess(process) {
            var _this3 = this;

            if (!this.loaded) {
                this.addListenerOnce("loaded", function () {
                    return _this3.handleProcess(process);
                });
                return;
            }
            this.getGoogleAuth().grantOfflineAccess({
                redirect_uri: "postmessage",
                immediate: false
            }).then(function (data) {
                Object.assign(data, {
                    process: process
                });
                _this3.sendData(_this3.options.loginByTokenUrl, data, function () {
                    return self.location.reload();
                });
            });
        }
    }, {
        key: "login",
        value: function login() {
            this.handleProcess("login");
        }
    }, {
        key: "connect",
        value: function connect() {
            this.handleProcess("connect");
        }
    }]);
    return GoogleManager;
}(SocialAccountManager);

var FacebookManager = function (_SocialAccountManager) {
    inherits(FacebookManager, _SocialAccountManager);

    function FacebookManager() {
        classCallCheck(this, FacebookManager);

        var _this = possibleConstructorReturn(this, (FacebookManager.__proto__ || Object.getPrototypeOf(FacebookManager)).call(this, SocialAppStore.getSocialAppByName("Facebook"), {
            version: "v2.7",
            loginByTokenUrl: "/accounts/facebook/login/token/",
            loginOptions: {
                auth_type: "rerequest",
                scope: "email"
            },
            logoutUrl: "/accounts/logout/",
            // TODO: should probably look at https://www.facebook.com/translations/FacebookLocales.xml and Language.Locale
            locale: "en_US"
        }));

        _this.ensureScriptNodeExists();
        return _this;
    }

    createClass(FacebookManager, [{
        key: "sendData",
        value: function sendData(url, data) {
            var _this2 = this;

            Ajax.postJSON(url, data).then(function (data) {
                if (data.next) {
                    self.location.href = data.next;
                } else {
                    location.reload();
                }
            }, function (error) {
                _this2.dispatch("loginError", error);
            });
        }
    }, {
        key: "ensureScriptNodeExists",
        value: function ensureScriptNodeExists() {
            var _this3 = this;

            self.fbAsyncInit = function () {
                FB.init({
                    appId: _this3.getClientId(),
                    version: _this3.options.version,
                    status: true,
                    cookie: true,
                    xfbml: true
                });

                _this3.setLoaded();
            };

            var id = "facebook-jssdk";
            if (document.getElementById(id)) {
                return;
            }
            var scriptElement = document.createElement("script");
            scriptElement.id = id;
            scriptElement.async = true;
            scriptElement.src = "//connect.facebook.net/" + this.options.locale + "/sdk.js";
            document.getElementsByTagName("head")[0].appendChild(scriptElement);
        }
    }, {
        key: "onLoginCanceled",
        value: function onLoginCanceled(response) {}
    }, {
        key: "onLoginError",
        value: function onLoginError(response) {}
    }, {
        key: "onLoginSuccess",
        value: function onLoginSuccess(response, nextUrl, process) {
            var data = {
                next: nextUrl || '',
                process: process,
                accessToken: response.authResponse.accessToken,
                expiresIn: response.authResponse.expiresIn
            };
            this.sendData(this.options.loginByTokenUrl, data);
        }
    }, {
        key: "logout",
        value: function logout() {
            var _this4 = this;

            if (!self.FB) {
                return;
            }
            FB.logout(function (response) {
                _this4.onLogoutSuccess(response, nextUrl);
            });
        }
    }, {
        key: "onLogoutSuccess",
        value: function onLogoutSuccess(response) {
            if (this.options.logoutUrl) {
                this.sendData(this.options.logoutUrl, data);
            }
        }
    }, {
        key: "handleProcess",
        value: function handleProcess(nextUrl, action, process) {
            var _this5 = this;

            if (!this.loaded) {
                this.addListenerOnce("loaded", function () {
                    return _this5.handleProcess(process);
                });
                return;
            }

            if (action === "reauthenticate") {
                this.options.loginOptions.auth_type = action;
            }

            FB.login(function (response) {
                if (response.authResponse) {
                    _this5.onLoginSuccess(response, nextUrl, process);
                } else if (response && response.status && ["not_authorized", "unknown"].indexOf(response.status) > -1) {
                    _this5.onLoginCanceled(response);
                } else {
                    _this5.onLoginError(response);
                }
            }, this.options.loginOptions);
        }
    }, {
        key: "login",
        value: function login(nextUrl, action, process) {
            this.handleProcess(nextUrl = self.location.pathname, action = "authenticate", process = "login");
        }
    }, {
        key: "connect",
        value: function connect(nextUrl, action, process) {
            this.handleProcess(nextUrl = self.location.pathname, action = "authenticate", process = "connect");
        }
    }]);
    return FacebookManager;
}(SocialAccountManager);

var GithubManager = function (_SocialAccountManager) {
    inherits(GithubManager, _SocialAccountManager);

    function GithubManager() {
        classCallCheck(this, GithubManager);
        return possibleConstructorReturn(this, (GithubManager.__proto__ || Object.getPrototypeOf(GithubManager)).call(this, SocialAppStore.getSocialAppByName("Github"), {
            loginWindowOptions: "height=600,width=800,scrollbars=yes"
        }));
    }

    createClass(GithubManager, [{
        key: "login",
        value: function login(callback) {
            var githubUri = "https://github.com/login/oauth/authorize";

            var rawParams = {
                client_id: this.getClientId()
            };

            var uri = composeURL(githubUri, rawParams);
            var githubWindow = window.open(uri, "githubWindow", this.options.loginWindowOptions);

            githubWindow.onbeforeunload = callback;
        }
    }]);
    return GithubManager;
}(SocialAccountManager);

var _class$48, _descriptor$19, _descriptor2$16, _descriptor3$16, _descriptor4$14, _descriptor5$12, _descriptor6$10, _descriptor7$8, _descriptor8$6, _descriptor9$6, _descriptor10$5, _descriptor11$5, _descriptor12$5, _descriptor13$5, _descriptor14$5, _descriptor15$5, _descriptor16$5, _descriptor17$5, _descriptor18$3, _descriptor19$3, _descriptor20$3, _descriptor21$1, _descriptor22, _descriptor23;

function _initDefineProp$20(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$20(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var loginHeight = 500;
var registerHeight = 500;
var width = 500;
var buttonHeight = 60;
var fontAwesomeIconHeight = 40;
var textColor = "#252525";
var signInButtonHeight = 50;
var signInButtonWidth = 120;

var LoginStyle = (_class$48 = function (_StyleSheet) {
    inherits(LoginStyle, _StyleSheet);

    function LoginStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, LoginStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = LoginStyle.__proto__ || Object.getPrototypeOf(LoginStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$20(_this, "loginRegisterSystem", _descriptor$19, _this), _initDefineProp$20(_this, "loginRegisterButtons", _descriptor2$16, _this), _initDefineProp$20(_this, "loginSystemButton", _descriptor3$16, _this), _initDefineProp$20(_this, "registerSystemButton", _descriptor4$14, _this), _this.selectedLeft = {
            borderBottom: "0",
            borderRight: "0",
            backgroundColor: "#fff",
            fontWeight: "bold"
        }, _initDefineProp$20(_this, "selectedLeftClass", _descriptor5$12, _this), _this.selectedRight = {
            borderBottom: "0",
            borderLeft: "0",
            backgroundColor: "#fff",
            fontWeight: "bold"
        }, _initDefineProp$20(_this, "selectedRightClass", _descriptor6$10, _this), _initDefineProp$20(_this, "loginWidget", _descriptor7$8, _this), _initDefineProp$20(_this, "registerWidget", _descriptor8$6, _this), _this.fontAwesomeIcon = {
            height: fontAwesomeIconHeight + "px",
            lineHeight: fontAwesomeIconHeight + "px",
            width: "15%",
            maxWidth: "15%",
            textAlign: "center",
            fontSize: "150%",
            display: "inline-block",
            float: "left",
            borderTopLeftRadius: "5px",
            borderBottomLeftRadius: "5px",
            borderRight: "0px solid white",
            marginTop: "20px"
        }, _initDefineProp$20(_this, "input", _descriptor9$6, _this), _initDefineProp$20(_this, "countrySelect", _descriptor10$5, _this), _initDefineProp$20(_this, "badLogin", _descriptor11$5, _this), _initDefineProp$20(_this, "rememberMe", _descriptor12$5, _this), _initDefineProp$20(_this, "rememberMeCheckbox", _descriptor13$5, _this), _initDefineProp$20(_this, "forgotPassword", _descriptor14$5, _this), _initDefineProp$20(_this, "signInButtonContainer", _descriptor15$5, _this), _initDefineProp$20(_this, "signInButton", _descriptor16$5, _this), _initDefineProp$20(_this, "horizontalLine", _descriptor17$5, _this), _this.connectWith = {
            width: "100%",
            textAlign: "center",
            marginTop: "20px"
        }, _this.connectIcons = {
            width: "60%",
            marginLeft: "20%",
            marginRight: "20%",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            marginTop: "20px"
        }, _initDefineProp$20(_this, "faLogo", _descriptor18$3, _this), _initDefineProp$20(_this, "recaptchaContainer", _descriptor19$3, _this), _initDefineProp$20(_this, "connectWithButtonsSpan", _descriptor20$3, _this), _initDefineProp$20(_this, "thirdPartyLoginContainer", _descriptor21$1, _this), _this.socialConnectDimensions = "35px", _initDefineProp$20(_this, "socialConnectButtonContainer", _descriptor22, _this), _initDefineProp$20(_this, "socialConnectButtonIcon", _descriptor23, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return LoginStyle;
}(StyleSheet), _descriptor$19 = _applyDecoratedDescriptor$20(_class$48.prototype, "loginRegisterSystem", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return function () {
            if (Device.isTouchDevice()) {
                console.log("Touch device mode on");
                return {
                    position: "absolute",
                    height: loginHeight + "px",
                    width: width + "px",
                    backgroundColor: "#fff",
                    maxHeight: "100%",
                    maxWidth: "100%"
                };
            } else {
                return {
                    maxWidth: "100%",
                    height: loginHeight + "px",
                    width: width + "px",
                    margin: "0 auto",
                    backgroundColor: "#fff"
                };
            }
        };
    }
}), _descriptor2$16 = _applyDecoratedDescriptor$20(_class$48.prototype, "loginRegisterButtons", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "left",
            width: "100%",
            height: buttonHeight / loginHeight * 100 + "%"
        };
    }
}), _descriptor3$16 = _applyDecoratedDescriptor$20(_class$48.prototype, "loginSystemButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return defineProperty({
            // height: buttonHeight + "px",
            height: "100%",
            // lineHeight: buttonHeight / loginHeight * 100 + "%",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            textAlign: "center",
            fontSize: "100%",
            width: "50%",
            backgroundColor: "#f6f6f6",
            color: textColor,
            border: "1px solid #d3d5d9",
            cursor: "pointer",
            float: "left",
            borderLeft: "0",
            borderTop: "0",
            textTransform: "uppercase"
        }, "fontSize", "1.1em");
    }
}), _descriptor4$14 = _applyDecoratedDescriptor$20(_class$48.prototype, "registerSystemButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return defineProperty({
            // height: buttonHeight + "px",
            height: "100%",
            // lineHeight: buttonHeight / loginHeight * 100 + "%",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            textAlign: "center",
            fontSize: "100%",
            width: "50%",
            backgroundColor: "#f6f6f6",
            color: textColor,
            border: "1px solid #d3d5d9",
            cursor: "pointer",
            float: "left",
            borderRight: "0",
            borderTop: "0",
            textTransform: "uppercase"
        }, "fontSize", "1.1em");
    }
}), _descriptor5$12 = _applyDecoratedDescriptor$20(_class$48.prototype, "selectedLeftClass", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            borderBottom: "0",
            borderRight: "0",
            backgroundColor: "#fff"
        };
    }
}), _descriptor6$10 = _applyDecoratedDescriptor$20(_class$48.prototype, "selectedRightClass", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            borderBottom: "0",
            borderLeft: "0",
            backgroundColor: "#fff"
        };
    }
}), _descriptor7$8 = _applyDecoratedDescriptor$20(_class$48.prototype, "loginWidget", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: loginHeight - buttonHeight + "px",
            width: width + "px",
            maxWidth: "100%",
            padding: "5% 10%",
            color: textColor,
            borderTop: "0px solid #d3d5d9"
        };
    }
}), _descriptor8$6 = _applyDecoratedDescriptor$20(_class$48.prototype, "registerWidget", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: registerHeight - buttonHeight + "px",
            width: width + "px",
            maxWidth: "100%",
            padding: "5% 10%",
            color: textColor,
            borderTop: "0px solid #d3d5d9"
        };
    }
}), _descriptor9$6 = _applyDecoratedDescriptor$20(_class$48.prototype, "input", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "85%",
            maxWidth: "85%",
            height: fontAwesomeIconHeight + "px",
            lineHeight: fontAwesomeIconHeight + "px",
            display: "inline-block",
            float: "left",
            borderRadius: "0",
            borderTopRightRadius: "5px",
            borderBottomRightRadius: "5px",
            marginTop: "20px",
            fontWeight: "bold",
            color: textColor,
            border: "0px solid #d3d5d9",
            borderLeft: "0px solid white",
            boxShadow: "none",
            fontSize: "85%",
            ":focus": {
                boxShadow: "none",
                outline: "none",
                border: "0px solid #d3d5d9",
                borderLeft: "0px solid white"
            }
        };
    }
}), _descriptor10$5 = _applyDecoratedDescriptor$20(_class$48.prototype, "countrySelect", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "85%",
            maxWidth: "85%",
            lineHeight: "30px",
            marginTop: "30px",
            marginBottom: "10px"
        };
    }
}), _descriptor11$5 = _applyDecoratedDescriptor$20(_class$48.prototype, "badLogin", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "30px",
            width: "100%",
            fontSize: "14px",
            color: this.themeProperties.COLOR_DANGER,
            textAlign: "center"
        };
    }
}), _descriptor12$5 = _applyDecoratedDescriptor$20(_class$48.prototype, "rememberMe", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "left",
            paddingLeft: "5px"
        };
    }
}), _descriptor13$5 = _applyDecoratedDescriptor$20(_class$48.prototype, "rememberMeCheckbox", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            float: "left"
        };
    }
}), _descriptor14$5 = _applyDecoratedDescriptor$20(_class$48.prototype, "forgotPassword", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "right",
            paddingRight: "5px"
        };
    }
}), _descriptor15$5 = _applyDecoratedDescriptor$20(_class$48.prototype, "signInButtonContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            height: "50px",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            margin: "20px auto"
        };
    }
}), _descriptor16$5 = _applyDecoratedDescriptor$20(_class$48.prototype, "signInButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "auto",
            marginRight: "auto",
            backgroundColor: "#f6f6f6",
            marginTop: "20px",
            minWidth: signInButtonWidth + "px",
            height: signInButtonHeight + "px",
            textAlign: "center",
            lineHeight: signInButtonHeight + "px",
            border: "0px solid #d3d5d9",
            fontSize: "18px",
            color: "#252525",
            ":hover": {
                border: "0px solid #0b79a7",
                borderBottom: "2px solid #0b79a7",
                color: "#0b79a7"
            }
        };
    }
}), _descriptor17$5 = _applyDecoratedDescriptor$20(_class$48.prototype, "horizontalLine", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            borderBottom: "1px solid #d3d5d9",
            width: "100%",
            marginTop: "20px"
        };
    }
}), _descriptor18$3 = _applyDecoratedDescriptor$20(_class$48.prototype, "faLogo", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "40px",
            paddingLeft: "15px",
            paddingRight: "15px",
            borderRadius: "3px",
            textAlign: "center",
            fontSize: "18px",
            marginLeft: "5px",
            marginRight: "5px",
            transition: ".2s",
            color: "#fff",
            ":hover": {
                transition: ".2s",
                opacity: ".9"
            },
            cursor: "pointer",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            fontWeight: "bold"
        };
    }
}), _descriptor19$3 = _applyDecoratedDescriptor$20(_class$48.prototype, "recaptchaContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "space-around",
            alignItems: "center",
            flexDirection: "column",
            width: "100%"
        };
    }
}), _descriptor20$3 = _applyDecoratedDescriptor$20(_class$48.prototype, "connectWithButtonsSpan", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            paddingLeft: "15px",
            fontSize: "15px"
        };
    }
}), _descriptor21$1 = _applyDecoratedDescriptor$20(_class$48.prototype, "thirdPartyLoginContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexWrap: "wrap",
            margin: "15px 0"
        };
    }
}), _descriptor22 = _applyDecoratedDescriptor$20(_class$48.prototype, "socialConnectButtonContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            alignItems: "center",
            height: this.socialConnectDimensions,
            color: "#fff",
            paddingRight: "10px",
            borderRadius: "5px",
            margin: "5px",
            outline: "none",
            paddingTop: "0",
            cursor: "pointer",
            fontSize: "13px",
            border: "0",
            ":hover": {
                opacity: ".85"
            }
        };
    }
}), _descriptor23 = _applyDecoratedDescriptor$20(_class$48.prototype, "socialConnectButtonIcon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.socialConnectDimensions,
            width: this.socialConnectDimensions,
            display: "flex !important",
            justifyContent: "center",
            alignItems: "center"
        };
    }
}), _class$48);

var _dec$21, _class$49, _dec2$8, _class2$8, _dec3$2, _class3$13, _dec4, _class4$2, _dec5, _class5$4, _dec6, _class6$1, _dec7, _class7$4;

var ERROR_TIMEOUT = 6 * 1000;

var accountsConfig = {
    username: true,
    country: true
};

var socialLoginSpecificInfo = {
    Google: {
        name: "Google",
        color: "#de4b39",
        icon: "google-plus",
        loginManager: GoogleManager
    },
    Facebook: {
        name: "Facebook",
        color: "#3b5998",
        icon: "facebook",
        loginManager: FacebookManager
    },
    Github: {
        name: "Github",
        color: "#000",
        icon: "github",
        loginManager: GithubManager
    }
};

var SocialConnectButton = (_dec$21 = registerStyle(LoginStyle), _dec$21(_class$49 = function (_UI$Primitive) {
    inherits(SocialConnectButton, _UI$Primitive);

    function SocialConnectButton() {
        classCallCheck(this, SocialConnectButton);
        return possibleConstructorReturn(this, (SocialConnectButton.__proto__ || Object.getPrototypeOf(SocialConnectButton)).apply(this, arguments));
    }

    createClass(SocialConnectButton, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            var specificInfo = this.options.specificInfo;


            attr.addClass(this.styleSheet.socialConnectButtonContainer);
            attr.setStyle({
                backgroundColor: specificInfo.color
            });
        }
    }, {
        key: "getLoginManager",
        value: function getLoginManager() {
            return this.options.specificInfo.loginManager.getInstance();
        }
    }, {
        key: "render",
        value: function render() {
            var specificInfo = this.options.specificInfo;


            return [UI.createElement(FAIcon, { icon: specificInfo.icon, className: this.styleSheet.socialConnectButtonIcon }), UI.createElement(
                "span",
                null,
                " ",
                specificInfo.name
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            // Access the login manager, to load any scripts needed by the social provider
            // TODO: try to find a way to not load all provider scripts on the login page
            this.getLoginManager();
            this.addClickListener(function () {
                var loginElement = _this2.options.loginElement;
                loginElement && loginElement.clearErrorMessage();
                _this2.getLoginManager().login();
            });
        }
    }]);
    return SocialConnectButton;
}(UI.Primitive("button"))) || _class$49);
var ThirdPartyLogin = (_dec2$8 = registerStyle(LoginStyle), _dec2$8(_class2$8 = function (_UI$Element) {
    inherits(ThirdPartyLogin, _UI$Element);

    function ThirdPartyLogin() {
        classCallCheck(this, ThirdPartyLogin);
        return possibleConstructorReturn(this, (ThirdPartyLogin.__proto__ || Object.getPrototypeOf(ThirdPartyLogin)).apply(this, arguments));
    }

    createClass(ThirdPartyLogin, [{
        key: "getSocialApps",
        value: function getSocialApps() {
            return SocialAppStore.all();
        }
    }, {
        key: "getConnectWith",
        value: function getConnectWith() {
            return UI.createElement(
                "div",
                { style: this.styleSheet.connectWith },
                UI.T("or connect with")
            );
        }
    }, {
        key: "getConnectWithButtons",
        value: function getConnectWithButtons() {
            var _this4 = this;

            return UI.createElement(
                "div",
                { className: this.styleSheet.thirdPartyLoginContainer },
                this.getSocialApps().map(function (socialApp) {
                    return UI.createElement(SocialConnectButton, { specificInfo: socialLoginSpecificInfo[socialApp.name],
                        loginElement: _this4.options.loginElement });
                })
            );
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getConnectWith(), this.getConnectWithButtons()];
        }
    }]);
    return ThirdPartyLogin;
}(UI.Element)) || _class2$8);

var LoginWidget = (_dec3$2 = registerStyle(LoginStyle), _dec3$2(_class3$13 = function (_UI$Element2) {
    inherits(LoginWidget, _UI$Element2);

    function LoginWidget() {
        classCallCheck(this, LoginWidget);
        return possibleConstructorReturn(this, (LoginWidget.__proto__ || Object.getPrototypeOf(LoginWidget)).apply(this, arguments));
    }

    createClass(LoginWidget, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.loginWidget);
        }
    }, {
        key: "getEmailInput",
        value: function getEmailInput() {
            var emailIcon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "user";

            return [UI.createElement(
                "div",
                { style: { width: "100%" } },
                UI.createElement(FAIcon, {
                    icon: emailIcon,
                    style: this.styleSheet.fontAwesomeIcon
                }),
                UI.createElement(EmailInput, {
                    autofocus: "autofocus",
                    placeholder: "Email address",
                    name: "email",
                    ref: "emailInput",
                    className: this.styleSheet.input
                })
            )];
        }
    }, {
        key: "getPasswordInput",
        value: function getPasswordInput() {
            var passwordInputOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            passwordInputOptions = Object.assign({
                name: "password",
                className: this.styleSheet.input,
                ref: "passwordInput",
                placeholder: "Password",
                style: { marginBottom: "20px" }
            }, passwordInputOptions);
            return [UI.createElement(
                "div",
                { style: { width: "80% !important" } },
                UI.createElement(FAIcon, { icon: "lock",
                    style: this.styleSheet.fontAwesomeIcon
                }),
                UI.createElement(PasswordInput, passwordInputOptions)
            )];
        }
    }, {
        key: "getRememberMeCheckbox",
        value: function getRememberMeCheckbox() {
            return [UI.createElement(CheckboxInput, { checked: true,
                ref: "rememberInput", className: this.styleSheet.rememberMeCheckbox }), UI.createElement(
                "div",
                { className: this.styleSheet.rememberMe },
                UI.T("Remember me")
            )];
        }
    }, {
        key: "getForgotPassword",
        value: function getForgotPassword() {
            return UI.createElement(Link, { className: this.styleSheet.forgotPassword, href: "/accounts/password_reset",
                value: UI.T("Forgot Password?") });
        }
    }, {
        key: "getClearBothArea",
        value: function getClearBothArea() {
            return UI.createElement("div", { style: { clear: "both", height: "20px" } });
        }
    }, {
        key: "getErrorArea",
        value: function getErrorArea() {
            return UI.createElement(TemporaryMessageArea, { className: this.styleSheet.badLogin, ref: "loginErrorMessage" });
        }
    }, {
        key: "getSignInValue",
        value: function getSignInValue() {
            return "Sign In";
        }
    }, {
        key: "getSignInButton",
        value: function getSignInButton() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.signInButtonContainer },
                UI.createElement(SubmitInput, { className: this.styleSheet.signInButton, value: this.getSignInValue() })
            );
        }
    }, {
        key: "getHorizontalLine",
        value: function getHorizontalLine() {
            return UI.createElement("div", { className: this.styleSheet.horizontalLine });
        }
    }, {
        key: "getThirdPartyLogin",
        value: function getThirdPartyLogin() {
            return SocialAppStore.all().length ? [this.getHorizontalLine(), UI.createElement(ThirdPartyLogin, { loginElement: this })] : null;
        }
    }, {
        key: "render",
        value: function render() {

            return [UI.createElement(
                "form",
                { ref: "form" },
                this.getEmailInput(),
                this.getPasswordInput(),
                this.getRememberMeCheckbox(),
                this.getForgotPassword(),
                this.getSignInButton(),
                this.getClearBothArea(),
                this.getErrorArea()
            ), this.getThirdPartyLogin()];
        }
    }, {
        key: "setErrorMessage",
        value: function setErrorMessage(error) {
            var isError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.loginErrorMessage.showMessage(error.message, isError ? Theme.Global.getProperty("COLOR_DANGER") : "#000", ERROR_TIMEOUT);
        }
    }, {
        key: "clearErrorMessage",
        value: function clearErrorMessage() {
            this.loginErrorMessage.clear();
        }
    }, {
        key: "sendLogin",
        value: function sendLogin() {
            var _this6 = this;

            this.clearErrorMessage();
            var data = {
                email: this.emailInput.getValue(),
                password: this.passwordInput.getValue(),
                remember: this.rememberInput.getValue()
            };
            Ajax.postJSON("/accounts/login/", data).then(function () {
                return location.reload();
            }, function (error) {
                return _this6.setErrorMessage(error);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            if (this.form) {
                this.form.addNodeListener("submit", function (event) {
                    _this7.sendLogin();
                    event.preventDefault();
                });
            }
        }
    }]);
    return LoginWidget;
}(UI.Element)) || _class3$13);

var RecaptchaWidget = function (_UI$Element3) {
    inherits(RecaptchaWidget, _UI$Element3);

    function RecaptchaWidget() {
        classCallCheck(this, RecaptchaWidget);
        return possibleConstructorReturn(this, (RecaptchaWidget.__proto__ || Object.getPrototypeOf(RecaptchaWidget)).apply(this, arguments));
    }

    createClass(RecaptchaWidget, [{
        key: "render",
        value: function render() {
            return UI.createElement("div", { key: Math.random() });
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(RecaptchaWidget.prototype.__proto__ || Object.getPrototypeOf(RecaptchaWidget.prototype), "redraw", this).call(this);

            if (window.grecaptcha && window.GOOGLE_RECAPTCHA_PUBLIC_KEY) {
                this.captchaId = grecaptcha.render(this.children[0].node, {
                    "sitekey": window.GOOGLE_RECAPTCHA_PUBLIC_KEY
                });
            }
        }
    }, {
        key: "getResponse",
        value: function getResponse() {
            return grecaptcha.getResponse(this.captchaId);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            window.onRecaptchaCallback = function () {
                return _this9.redraw();
            };

            ensure("https://www.google.com/recaptcha/api.js?render=explicit&onload=onRecaptchaCallback", function () {});
        }
    }]);
    return RecaptchaWidget;
}(UI.Element);

var RegisterWidget = (_dec4 = registerStyle(LoginStyle), _dec4(_class4$2 = function (_UI$Element4) {
    inherits(RegisterWidget, _UI$Element4);

    function RegisterWidget() {
        classCallCheck(this, RegisterWidget);
        return possibleConstructorReturn(this, (RegisterWidget.__proto__ || Object.getPrototypeOf(RegisterWidget)).apply(this, arguments));
    }

    createClass(RegisterWidget, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.registerWidget);
        }
    }, {
        key: "getSignUpButton",
        value: function getSignUpButton() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.signInButtonContainer },
                UI.createElement(SubmitInput, { className: this.styleSheet.signInButton, value: "Sign Up", ref: "submitButton" })
            );
        }
    }, {
        key: "getUsernameInput",
        value: function getUsernameInput() {
            return [UI.createElement(
                "div",
                { style: { width: "100%" } },
                UI.createElement(FAIcon, { icon: "user",
                    style: this.styleSheet.fontAwesomeIcon }),
                UI.createElement(TextInput, {
                    placeholder: "Username",
                    ref: "usernameInput",
                    className: this.styleSheet.input
                })
            )];
        }
    }, {
        key: "getCountryInput",
        value: function getCountryInput() {
            return [UI.createElement(
                "div",
                { style: { width: "100%", marginBottom: "20px" } },
                UI.createElement(FAIcon, { icon: "flag", style: this.styleSheet.fontAwesomeIcon }),
                UI.createElement(Select, { ref: "countrySelect", options: CountryStore.allWithNone("Don't set country"),
                    className: this.styleSheet.countrySelect }),
                UI.createElement("div", { style: { clear: "both" } })
            )];
        }
    }, {
        key: "render",
        value: function render() {
            var formFields = [this.getEmailInput(), this.getPasswordInput()];
            if (accountsConfig.username) {
                formFields.splice(1, 0, this.getUsernameInput());
                formFields[0] = this.getEmailInput("envelope");
            }
            if (accountsConfig.country) {
                formFields[formFields.length - 1] = this.getPasswordInput({ style: {} });
                formFields.push(this.getCountryInput());
            }
            return [UI.createElement(
                "form",
                { ref: "form" },
                formFields,
                UI.createElement(
                    "div",
                    { className: this.styleSheet.recaptchaContainer },
                    UI.createElement(RecaptchaWidget, { ref: "recaptchaWidget" }),
                    this.getSignUpButton(),
                    UI.createElement(TemporaryMessageArea, { ref: "errorArea" })
                )
            )];
        }
    }, {
        key: "sendRegistration",
        value: function sendRegistration() {
            var _this11 = this;

            this.submitButton.updateOptions({ value: "Signing up..." });

            var data = {
                email: this.emailInput.getValue(),
                recaptchaKey: this.recaptchaWidget.getResponse(),
                password: this.passwordInput.getValue()
            };
            if (this.usernameInput) {
                data.username = this.usernameInput.getValue();
            }
            if (this.countrySelect) {
                data.countryId = this.countrySelect.get().id;
            }
            Ajax.postJSON("/accounts/signup_request/", data).then(function () {
                _this11.recaptchaWidget.hide();
                _this11.submitButton.hide();
                _this11.errorArea.showMessage("Done! Please check your email to continue", "black", 26 * 60 * 60 * 1000);
            }, function (error) {
                _this11.errorArea.showMessage("Error in registration: " + error.message, "red", 4000);
                _this11.submitButton.updateOptions({ value: "Sign Up" });
                _this11.recaptchaWidget.redraw();
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            this.form.addNodeListener("submit", function (event) {
                _this12.sendRegistration();
                event.preventDefault();
            });
        }
    }]);
    return RegisterWidget;
}(UI.Element)) || _class4$2);

RegisterWidget.prototype.getEmailInput = LoginWidget.prototype.getEmailInput;
RegisterWidget.prototype.getPasswordInput = LoginWidget.prototype.getPasswordInput;
RegisterWidget.prototype.getHorizontalLine = LoginWidget.prototype.getHorizontalLine;

// original name: LoginRegisterSystem
var NormalLogin = (_dec5 = registerStyle(LoginStyle), _dec5(_class5$4 = function (_UI$Element5) {
    inherits(NormalLogin, _UI$Element5);

    function NormalLogin() {
        classCallCheck(this, NormalLogin);

        var _this13 = possibleConstructorReturn(this, (NormalLogin.__proto__ || Object.getPrototypeOf(NormalLogin)).call(this));

        _this13.state = 0;
        return _this13;
    }

    createClass(NormalLogin, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.loginRegisterSystem);
        }
    }, {
        key: "getLoginButton",
        value: function getLoginButton() {
            var style = {};

            if (this.state === 0) {
                style = this.styleSheet.selectedLeft;
            }

            return UI.createElement(
                "div",
                { className: this.styleSheet.loginSystemButton,
                    style: style,
                    ref: "loginButton" },
                UI.T("Log In")
            );
        }
    }, {
        key: "getRegisterButton",
        value: function getRegisterButton() {
            var style = {};

            if (this.state === 1) {
                style = this.styleSheet.selectedRight;
            }

            return UI.createElement(
                "div",
                { className: this.styleSheet.registerSystemButton,
                    style: style,
                    ref: "registerButton" },
                UI.T("Sign Up")
            );
        }
    }, {
        key: "render",
        value: function render() {
            var result = [UI.createElement(
                "div",
                { className: this.styleSheet.loginRegisterButtons },
                this.getLoginButton(),
                this.getRegisterButton()
            ), UI.createElement(
                Switcher,
                { ref: "switcher" },
                UI.createElement(LoginWidget, { ref: "loginWidget", active: this.state === 0 }),
                UI.createElement(RegisterWidget, { ref: "registerWidget", active: this.state === 1 })
            )];

            return result;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this14 = this;

            this.loginButton.addClickListener(function () {
                _this14.state = 0;
                _this14.switcher.setActive(_this14.loginWidget);
                _this14.redraw();
            });

            this.registerButton.addClickListener(function () {
                _this14.state = 1;
                _this14.switcher.setActive(_this14.registerWidget);
                _this14.redraw();
            });
        }
    }]);
    return NormalLogin;
}(UI.Element)) || _class5$4);
var LoginTabButton = (_dec6 = registerStyle(LoginStyle), _dec6(_class6$1 = function (_UI$Primitive2) {
    inherits(LoginTabButton, _UI$Primitive2);

    function LoginTabButton() {
        classCallCheck(this, LoginTabButton);
        return possibleConstructorReturn(this, (LoginTabButton.__proto__ || Object.getPrototypeOf(LoginTabButton)).apply(this, arguments));
    }

    createClass(LoginTabButton, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                children: [UI.T("Log In")]
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.loginSystemButton);
            if (this.options.active) {
                attr.addClass(this.styleSheet.selectedLeftClass);
            }
        }
    }]);
    return LoginTabButton;
}(UI.Primitive(BasicTabTitle, "div"))) || _class6$1);
var RegisterTabButton = (_dec7 = registerStyle(LoginStyle), _dec7(_class7$4 = function (_UI$Primitive3) {
    inherits(RegisterTabButton, _UI$Primitive3);

    function RegisterTabButton() {
        classCallCheck(this, RegisterTabButton);
        return possibleConstructorReturn(this, (RegisterTabButton.__proto__ || Object.getPrototypeOf(RegisterTabButton)).apply(this, arguments));
    }

    createClass(RegisterTabButton, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                children: [UI.T("Register")]
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.registerSystemButton);
            if (this.options.active) {
                attr.addClass(this.styleSheet.selectedRightClass);
            }
        }
    }]);
    return RegisterTabButton;
}(UI.Primitive(BasicTabTitle, "div"))) || _class7$4);

var Login = function (_UI$Element6) {
    inherits(Login, _UI$Element6);

    function Login() {
        classCallCheck(this, Login);
        return possibleConstructorReturn(this, (Login.__proto__ || Object.getPrototypeOf(Login)).apply(this, arguments));
    }

    createClass(Login, [{
        key: "render",
        value: function render() {
            return [UI.createElement(NormalLogin, null)];
        }
    }]);
    return Login;
}(UI.Element);

var LoginModal = function (_Modal) {
    inherits(LoginModal, _Modal);

    function LoginModal() {
        classCallCheck(this, LoginModal);
        return possibleConstructorReturn(this, (LoginModal.__proto__ || Object.getPrototypeOf(LoginModal)).apply(this, arguments));
    }

    createClass(LoginModal, [{
        key: "getModalWindowStyle",
        value: function getModalWindowStyle() {
            if (Device.isTouchDevice()) {
                return {
                    position: "relative",
                    padding: "0",
                    boxShadow: "0 5px 15px rgba(0,0,0,0.5)",
                    // margin: "60px auto",
                    display: this.options.display || "block",
                    left: "0",
                    right: "0",
                    width: "100vw",
                    height: "600px",
                    background: "white",
                    overflow: this.options.overflow || "auto",
                    maxHeight: "100%",
                    maxWidth: "500px",
                    verticalAlign: "center",
                    margin: "0 auto"
                };
            }
            return {
                position: "relative",
                padding: "0",
                boxShadow: "0 5px 15px rgba(0,0,0,0.5)",
                margin: "60px auto",
                display: this.options.display || "block",
                maxHeight: this.options.maxHeight || "85%",
                left: "0",
                right: "0",
                width: "500px",
                height: this.options.height || "600px",
                background: "white",
                overflow: this.options.overflow || "auto"
            };
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(Login, null);
        }
    }], [{
        key: "requireLogin",
        value: function requireLogin(func) {
            if (USER.isAuthenticated) {
                return func();
            } else {
                this.show();
            }
        }
    }]);
    return LoginModal;
}(Modal);

var Logout = {
    logout: function logout() {
        Ajax.postJSON("/accounts/logout/", {}).then(function () {
            return location.reload();
        });
    }
};

var UserHandle = function (_UI$Element) {
    inherits(UserHandle, _UI$Element);

    function UserHandle() {
        classCallCheck(this, UserHandle);
        return possibleConstructorReturn(this, (UserHandle.__proto__ || Object.getPrototypeOf(UserHandle)).apply(this, arguments));
    }

    createClass(UserHandle, [{
        key: "setOptions",
        value: function setOptions(options) {

            options.userId = options.userId || options.id;

            get(UserHandle.prototype.__proto__ || Object.getPrototypeOf(UserHandle.prototype), "setOptions", this).call(this, options);

            this.setUser(PublicUserStore.get(this.options.userId));
        }
    }, {
        key: "setUser",
        value: function setUser(user) {
            this.user = user;
        }
    }, {
        key: "getNodeType",
        value: function getNodeType() {
            return "span";
        }
    }, {
        key: "getRatingColor",
        value: function getRatingColor() {
            if (!this.user) {
                return "#BBB";
            }
            if (this.user.isAdmin) {
                return "black";
            }
            if (!this.user.rating) {
                return "#BBB";
            }
            var ratingBands = window.RATING_BANDS;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = ratingBands[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var ratingBand = _step.value;

                    if (ratingBand.minRating <= this.user.rating && this.user.rating < ratingBand.maxRating) {
                        return ratingBand.color;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.options.color = color;
            this.handle.setStyle("color", color);
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var handle = void 0,
                countryEmoji = void 0;
            if (!this.user) {
                PublicUserStore.fetch(this.options.userId, function (user) {
                    _this2.setUser(user);
                    _this2.redraw();
                });
                handle = UI.createElement(
                    "span",
                    { ref: "handle", style: { color: "#BBB" }, onClick: function onClick() {
                            return null;
                        } },
                    "user-" + this.options.userId
                );
            } else {
                var clickFunc = null;
                if (!this.options.hasOwnProperty("disableClick")) {
                    clickFunc = function clickFunc() {
                        _this2.togglePopup();
                        UI.event.stopPropagation();
                        UI.event.preventDefault();
                    };
                }
                if (this.options.showCountry && this.user.countryId) {
                    countryEmoji = UI.createElement(UI.Emoji, { style: { paddingRight: "2px" }, width: "1.6em", height: "1.6em",
                        value: this.user.getCountry().getEmojiName(), title: this.user.getCountry().name });
                }
                handle = UI.createElement(
                    "span",
                    { ref: "handle", style: {
                            cursor: "pointer",
                            color: this.options.color ? this.options.color : this.getRatingColor()
                        },
                        onClick: clickFunc },
                    UI.createElement(
                        "b",
                        null,
                        this.user.getDisplayHandle()
                    )
                );
            }

            //The purpose of the container is to simplify the usage of the popup.
            return [UI.createElement(
                "span",
                { ref: "container", style: { position: "relative" } },
                countryEmoji,
                handle,
                this.options.children
            )];
        }
    }, {
        key: "getPopupTitle",
        value: function getPopupTitle() {
            var profileLink = UI.createElement(Link, { href: this.user.getProfileUrl(), value: this.user.name || this.user.username || "user-" + this.user.id });
            if (USER.isSuperUser) {
                return UI.createElement(
                    "span",
                    { style: { position: "relative" } },
                    profileLink,
                    UI.createElement("br", null),
                    UI.createElement(
                        "span",
                        null,
                        "id: " + this.user.id
                    )
                );
            } else {
                return profileLink;
            }
        }
    }, {
        key: "getPopupContent",
        value: function getPopupContent() {
            var rez = [];
            if (this.user.rating) {
                rez.push(UI.createElement(
                    "p",
                    { style: { "height": "25px", "line-height": "25px" } },
                    "Rating: " + this.user.rating
                ));
                rez.push(UI.createElement(
                    "p",
                    { style: { "height": "25px", "line-height": "25px" } },
                    UI.createElement(Link, { href: "/ratings", value: "Rank: " + this.user.globalRatingRank })
                ));
            } else {
                rez.push(UI.createElement(
                    "p",
                    { style: { "height": "25px", "line-height": "25px" } },
                    "Rating: N/A"
                ));
            }
            if (this.user.countryId) {
                var country = CountryStore.get(this.user.countryId);
                var emojiName = country.getEmojiName();
                rez.push(UI.createElement(
                    "p",
                    { style: { "height": "25px", "line-height": "25px" } },
                    "Country: ",
                    country.name,
                    UI.createElement(UI.Emoji, { style: { paddingLeft: "3px" }, title: country.name,
                        value: emojiName, height: "1.6em", width: "1.6em" })
                ));
            }
            //if (USER.isSuperUser) {
            //    rez.push(<p><ReputationWidget reputation={this.user.reputation}/></p>);
            //}
            return rez;
        }
    }, {
        key: "togglePopup",
        value: function togglePopup() {
            if (this.options.noPopup) {
                window.open(this.user.getProfileUrl(), "_blank");
                return;
            }
            if (this.popup && this.popup.isInDocument()) {
                this.popup.hide();
                return;
            }
            this.popup = Popup.create(this.container, Object.assign({
                target: this.handle,
                title: this.getPopupTitle(),
                children: this.getPopupContent(),
                transitionTime: 300,
                titleFontSize: "10pt",
                style: {
                    minWidth: "150px",
                    maxWidth: "270px"
                }
            }));
        }
    }]);
    return UserHandle;
}(UI.Element);

var UserReactionCollection = function (_StoreObject) {
    inherits(UserReactionCollection, _StoreObject);

    function UserReactionCollection() {
        classCallCheck(this, UserReactionCollection);
        return possibleConstructorReturn(this, (UserReactionCollection.__proto__ || Object.getPrototypeOf(UserReactionCollection)).apply(this, arguments));
    }

    createClass(UserReactionCollection, [{
        key: "getUserReactionStore",
        value: function getUserReactionStore() {
            return this.getStore().getState().getStore("UserReaction");
        }

        // TODO should be done as generator? Clearly needs to have indexed data!

    }, {
        key: "getReactions",
        value: function getReactions() {
            var reactions = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getUserReactionStore().all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var reaction = _step.value;

                    if (reaction.collectionId == this.id) {
                        reactions.push(reaction);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return reactions;
        }
    }, {
        key: "getCurrentUserReaction",
        value: function getCurrentUserReaction() {
            var currentUser = window.USER;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getReactions()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var userReaction = _step2.value;

                    if (userReaction.userId == currentUser.id) {
                        return userReaction;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return null;
        }
    }, {
        key: "getCurrentUserReactionType",
        value: function getCurrentUserReactionType() {
            var currentUserReaction = this.getCurrentUserReaction();
            return currentUserReaction && currentUserReaction.type;
        }
    }]);
    return UserReactionCollection;
}(StoreObject);

var UserReaction = function (_StoreObject2) {
    inherits(UserReaction, _StoreObject2);

    function UserReaction() {
        classCallCheck(this, UserReaction);
        return possibleConstructorReturn(this, (UserReaction.__proto__ || Object.getPrototypeOf(UserReaction)).apply(this, arguments));
    }

    return UserReaction;
}(StoreObject);

var UserReactionCollectionStore = new GenericObjectStore("UserReactionCollection", UserReactionCollection);
var UserReactionStore = new GenericObjectStore("UserReaction", UserReaction);

var MessageInstance = function (_VirtualStoreObjectMi) {
    inherits(MessageInstance, _VirtualStoreObjectMi);

    function MessageInstance(obj, event) {
        classCallCheck(this, MessageInstance);

        var _this = possibleConstructorReturn(this, (MessageInstance.__proto__ || Object.getPrototypeOf(MessageInstance)).call(this, obj, event));

        PublicUserStore.fakeCreate(event.user);
        return _this;
    }

    createClass(MessageInstance, [{
        key: "getNormalizedId",
        value: function getNormalizedId() {
            // TODO: Pretty bad implementation, works though
            var messageId = this.id + "";
            if (messageId.startsWith("temp-")) {
                messageId = messageId.substr(5);
            }
            return parseInt(messageId);
        }
    }, {
        key: "getDate",
        value: function getDate() {
            return this.timeAdded;
        }
    }, {
        key: "getUser",
        value: function getUser() {
            var user = PublicUserStore.get(this.userId);
            if (user) {
                return user.username;
            }
            return "user-" + this.userId;
        }
    }, {
        key: "getContent",
        value: function getContent() {
            return this.content;
        }
    }, {
        key: "getMessageThread",
        value: function getMessageThread() {
            return MessageThreadStore.get(this.messageThreadId);
        }
    }, {
        key: "getReactionCollection",
        value: function getReactionCollection() {
            var fakeIfMissing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var reactionCollection = UserReactionCollectionStore.get(this.reactionCollectionId);
            if (fakeIfMissing && !reactionCollection) {
                return {
                    upvotesCount: 0,
                    downvotesCount: 0,
                    getCurrentUserReactionType: function getCurrentUserReactionType() {}
                };
            }
            return reactionCollection;
        }
    }, {
        key: "getNumLikes",
        value: function getNumLikes() {
            return this.getReactionCollection(true).upvotesCount;
        }
    }, {
        key: "getNumDislikes",
        value: function getNumDislikes() {
            return this.getReactionCollection(true).downvotesCount;
        }
    }, {
        key: "getVotesBalance",
        value: function getVotesBalance() {
            return this.getNumLikes() - this.getNumDislikes();
        }
    }, {
        key: "getUserVote",
        value: function getUserVote() {
            return this.getReactionCollection(true).getCurrentUserReactionType();
        }
    }, {
        key: "getPreviousMessage",
        value: function getPreviousMessage() {
            // TODO: this should be cached and kept by the message thread
            var ans = null;
            var currentId = this.getNormalizedId();
            // If message has temporary id, then it is identical with the previous message id, so instead the
            // previous previous message would be found instead.
            if (this.hasTemporaryId()) {
                currentId += 1;
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getMessageThread().getMessages()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var message = _step.value;

                    if (message.id < currentId && (!ans || ans.id < message.id)) {
                        ans = message;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return ans;
        }
    }, {
        key: "getNextMessage",
        value: function getNextMessage() {
            throw "Implement me!";
        }
    }, {
        key: "hasMarkupEnabled",
        value: function hasMarkupEnabled() {
            return this.getMessageThread().hasMarkupEnabled();
        }
    }, {
        key: "getTimeOfDay",
        value: function getTimeOfDay() {
            return StemDate.unix(this.timeAdded).format("HH:mm");
        }
    }, {
        key: "edit",
        value: function edit(content) {
            var onSuccess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NOOP_FUNCTION;
            var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOOP_FUNCTION;

            Ajax.postJSON("/chat/edit_message/", {
                messageId: this.id,
                message: content
            }).then(onSuccess, onError);
        }
    }, {
        key: "react",
        value: function react(reaction) {
            var onSuccess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NOOP_FUNCTION;
            var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOOP_FUNCTION;

            Ajax.postJSON("/chat/edit_message/", {
                messageId: this.id,
                reaction: reaction
            }).then(onSuccess, onError);
        }
    }, {
        key: "like",
        value: function like(onSuccess, onError) {
            this.react("like", onSuccess, onError);
        }
    }, {
        key: "dislike",
        value: function dislike(onSuccess, onError) {
            this.react("dislike", onSuccess, onError);
        }
    }, {
        key: "resetReaction",
        value: function resetReaction(onSuccess, onError) {
            this.react("resetReaction", onSuccess, onError);
        }
    }, {
        key: "deleteMessage",
        value: function deleteMessage(onSuccess, onError) {
            Ajax.postJSON("/chat/edit_message/", {
                messageId: this.id,
                hidden: true
            }).then(onSuccess, onError);
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.type === "messageEdit") {
                Object.assign(this, event.data);
                this.dispatch("edit", event);
            } else if (event.type === "reaction") {
                Object.assign(this, event.data);
                this.dispatch("reaction", event);
            } else if (event.type === "messageDelete") {
                this.dispatch("delete", event);
                this.getMessageThread().deleteMessageInstance(this);
            } else {
                get(MessageInstance.prototype.__proto__ || Object.getPrototypeOf(MessageInstance.prototype), "applyEvent", this).call(this, event);
            }
        }
    }, {
        key: "updateId",
        value: function updateId(newId) {
            if (this.id == newId) {
                return;
            }
            var oldId = this.id;
            get(MessageInstance.prototype.__proto__ || Object.getPrototypeOf(MessageInstance.prototype), "updateId", this).call(this, newId);
            var messageThread = this.getMessageThread();
            messageThread.messages.delete(oldId);
            messageThread.messages.set(this.id, this);
        }
    }, {
        key: "setPostError",
        value: function setPostError(postError) {
            this.postError = postError;
            this.dispatch("postError", postError);
            console.log("Post error: ", postError);
        }
    }]);
    return MessageInstance;
}(VirtualStoreObjectMixin(StoreObject));

var MessageThread = function (_StoreObject) {
    inherits(MessageThread, _StoreObject);

    function MessageThread(obj) {
        classCallCheck(this, MessageThread);

        var _this2 = possibleConstructorReturn(this, (MessageThread.__proto__ || Object.getPrototypeOf(MessageThread)).call(this, obj));

        _this2.messages = new Map();
        // TODO: for now don't register for private chats, you get them as user events
        // TODO: don't change the global here, you fool!
        if (!_this2.streamName.startsWith("messagethread-privatechat-")) {
            GlobalState.registerStream(_this2.streamName);
        }
        _this2.online = new Set(_this2.online || []);
        _this2.online.delete(0);
        return _this2;
    }

    createClass(MessageThread, [{
        key: "hasMarkupEnabled",
        value: function hasMarkupEnabled() {
            return this.markupEnabled || false;
        }
    }, {
        key: "addMessageInstance",
        value: function addMessageInstance(messageInstance, event) {
            this.messages.set(messageInstance.id, messageInstance);
            this.dispatch("newMessage", event);
        }
    }, {
        key: "deleteMessageInstance",
        value: function deleteMessageInstance(messageInstance) {
            this.messages.delete(messageInstance.id);
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.data.online) {
                this.online = event.data.online = new Set(event.data.online);
                this.online.delete(0);
            }
            if (event.type === "online") {
                this.dispatch("usersChanged", event);
            } else if (event.type === "onlineDeltaJoined") {
                if (event.data.userId != 0) {
                    this.online.add(event.data.userId);
                }

                this.dispatch("usersChanged", event);
            } else if (event.type === "onlineDeltaLeft") {
                if (event.data.userId != 0) {
                    this.online.delete(event.data.userId);
                }

                this.dispatch("usersChanged", event);
            } else {
                get(MessageThread.prototype.__proto__ || Object.getPrototypeOf(MessageThread.prototype), "applyEvent", this).call(this, event);
            }
        }
    }, {
        key: "getMessages",
        value: function getMessages() {
            var orderDescending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            // TODO: should be also as iterable
            var messages = Array.from(this.messages.values());
            if (orderDescending) {
                return messages.sort(function (a, b) {
                    return b.id - a.id;
                });
            }
            return messages.sort(function (a, b) {
                return a.id - b.id;
            });
        }
    }, {
        key: "getNumMessages",
        value: function getNumMessages() {
            return this.messages.size;
        }
    }, {
        key: "getMaxMessageId",
        value: function getMaxMessageId() {
            var value = 0;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.messages.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var messageInstance = _step2.value;

                    if (!messageInstance.hasTemporaryId() && messageInstance.id > value) {
                        value = messageInstance.id;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return value;
        }

        // This method will return the last message of the message thread,
        // regardless of whether it is virtual or real.

    }, {
        key: "getLastMessage",
        value: function getLastMessage() {
            var lastMessage = null;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.messages.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var messageInstance = _step3.value;

                    if (!lastMessage || lastMessage.getNormalizedId() < messageInstance.getNormalizedId() || lastMessage.getNormalizedId() === messageInstance.getNormalizedId() && messageInstance.hasTemporaryId()) {
                        lastMessage = messageInstance;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return lastMessage;
        }
    }]);
    return MessageThread;
}(StoreObject);

var MessageInstanceStoreClass = function (_VirtualStoreMixin) {
    inherits(MessageInstanceStoreClass, _VirtualStoreMixin);

    function MessageInstanceStoreClass() {
        classCallCheck(this, MessageInstanceStoreClass);
        return possibleConstructorReturn(this, (MessageInstanceStoreClass.__proto__ || Object.getPrototypeOf(MessageInstanceStoreClass)).call(this, "MessageInstance", MessageInstance, { dependencies: ["messagethread", "publicuser"] }));
    }

    createClass(MessageInstanceStoreClass, [{
        key: "createVirtualMessageInstance",
        value: function createVirtualMessageInstance(messageContent, messageThread, temporaryId) {
            var virtualMessageInstance = {
                content: messageContent,
                temporaryId: temporaryId,
                id: "temp-" + temporaryId,
                timeAdded: ServerTime.now().toUnix(),
                userId: parseInt(USER.id),
                messageThreadId: messageThread.id,
                meta: {}
            };

            return this.fakeCreate(virtualMessageInstance, "virtualMessage");
        }
    }]);
    return MessageInstanceStoreClass;
}(VirtualStoreMixin(GenericObjectStore));

var MessageInstanceStore = new MessageInstanceStoreClass();

MessageInstanceStore.addCreateListener(function (messageInstance, createEvent) {
    messageInstance.getMessageThread().addMessageInstance(messageInstance, createEvent);
});

var MessageThreadStore = new GenericObjectStore("messagethread", MessageThread);

var BaseChatObject = function (_StoreObject2) {
    inherits(BaseChatObject, _StoreObject2);

    function BaseChatObject() {
        classCallCheck(this, BaseChatObject);
        return possibleConstructorReturn(this, (BaseChatObject.__proto__ || Object.getPrototypeOf(BaseChatObject)).apply(this, arguments));
    }

    createClass(BaseChatObject, [{
        key: "getMessageThread",
        value: function getMessageThread() {
            return MessageThreadStore.get(this.messageThreadId);
        }
    }, {
        key: "getOnlineUserIds",
        value: function getOnlineUserIds() {
            return this.getMessageThread().online;
        }
    }]);
    return BaseChatObject;
}(StoreObject);

var GroupChat = function (_BaseChatObject) {
    inherits(GroupChat, _BaseChatObject);

    function GroupChat() {
        classCallCheck(this, GroupChat);
        return possibleConstructorReturn(this, (GroupChat.__proto__ || Object.getPrototypeOf(GroupChat)).apply(this, arguments));
    }

    return GroupChat;
}(BaseChatObject);

var GroupChatStoreClass = AjaxFetchMixin(GenericObjectStore);

var GroupChatStore = new GroupChatStoreClass("groupChat", GroupChat, {
    fetchURL: "/chat/group_chat_state/",
    maxFetchObjectCount: 1
});

GroupChatStore.getFetchRequestData = function (ids, fetchJobs) {
    return {
        chatId: ids[0]
    };
};

var PrivateChat = function (_BaseChatObject2) {
    inherits(PrivateChat, _BaseChatObject2);

    function PrivateChat() {
        classCallCheck(this, PrivateChat);
        return possibleConstructorReturn(this, (PrivateChat.__proto__ || Object.getPrototypeOf(PrivateChat)).apply(this, arguments));
    }

    createClass(PrivateChat, [{
        key: "getOtherUserId",
        value: function getOtherUserId() {
            return USER.id === this.user1Id ? this.user2Id : this.user1Id;
        }
    }]);
    return PrivateChat;
}(BaseChatObject);

var PrivateChatStore = new GenericObjectStore("PrivateChat", PrivateChat, {});

PrivateChatStore.getChatWithUser = function (userId) {
    var myUserId = USER.id;
    if (myUserId === userId) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = this.all()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var privateChat = _step4.value;

                if (privateChat.user1Id === userId && privateChat.user2Id === userId) {
                    return privateChat;
                }
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }

        return null;
    }
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
        for (var _iterator5 = this.all()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _privateChat = _step5.value;

            if (_privateChat.user1Id === userId || _privateChat.user2Id === userId) {
                return _privateChat;
            }
        }
    } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                _iterator5.return();
            }
        } finally {
            if (_didIteratorError5) {
                throw _iteratorError5;
            }
        }
    }
};

PrivateChatStore.fetchForUser = function (userId, onSuccess, onError) {
    Ajax.postJSON("/chat/private_chat_state/", {
        userId: userId
    }).then(function (data) {
        return onSuccess(PrivateChatStore.get(data.privateChatId));
    }, onError);
};

PrivateChatStore.addListener("update", function (obj, event) {
    if (event.type === "privateMessage") {
        GlobalState.importState(event.state);
    }
});

var MarkupEditor = function (_Panel) {
    inherits(MarkupEditor, _Panel);

    function MarkupEditor() {
        classCallCheck(this, MarkupEditor);
        return possibleConstructorReturn(this, (MarkupEditor.__proto__ || Object.getPrototypeOf(MarkupEditor)).apply(this, arguments));
    }

    createClass(MarkupEditor, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                showButtons: true
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(MarkupEditor.prototype.__proto__ || Object.getPrototypeOf(MarkupEditor.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle("textAlign", "center");
        }
    }, {
        key: "getMarkupRenderer",
        value: function getMarkupRenderer() {
            var rendererOptions = {};
            if (this.options.classMap) {
                rendererOptions.classMap = this.options.classMap;
            }
            return UI.createElement(MarkupRenderer, _extends({ ref: this.refLink("markupRenderer"), value: this.options.value, style: { height: "100%", overflow: "auto" } }, rendererOptions));
        }
    }, {
        key: "getEditor",
        value: function getEditor() {
            return UI.createElement(TextArea, { ref: "codeEditor", style: {
                    width: "100%",
                    height: "calc(100% - 3px)",
                    resize: "none",
                    backgroundColor: "#F9F9F9"
                }, value: this.options.value || "" });
        }
    }, {
        key: "render",
        value: function render() {
            var buttons = void 0;
            if (this.options.showButtons) {
                buttons = UI.createElement(
                    ButtonGroup,
                    null,
                    UI.createElement(Button, { ref: "toggleLeftButton", label: UI.T("Editor"), level: Level.SUCCESS }),
                    UI.createElement(Button, { ref: "toggleRightButton", label: UI.T("Article"), level: Level.SUCCESS })
                );
            }

            return [buttons, UI.createElement(
                SectionDivider$$1,
                { ref: "sectionDivider", orientation: Orientation.HORIZONTAL,
                    style: { textAlign: "initial", height: "100%", width: "100%", display: "inline-block",
                        overflow: "hidden" } },
                UI.createElement(
                    Panel,
                    { ref: "editorPanel", style: { width: "50%", height: "100%", overflow: "hidden" } },
                    this.getEditor()
                ),
                UI.createElement(
                    Panel,
                    { ref: "rendererPanel", style: { width: "50%", height: "100%", overflow: "auto", padding: "10px" } },
                    this.getMarkupRenderer()
                )
            )];
        }
    }, {
        key: "updateValue",
        value: function updateValue(markup) {
            this.markupRenderer.setValue(markup);
            this.markupRenderer.redraw();
        }
    }, {
        key: "appendValue",
        value: function appendValue(markup) {
            var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "\n";

            var value = this.getValue();
            if (value && separator != null) {
                value += separator;
            }
            value += markup;
            this.setValue(value);
            this.updateValue(value);
        }
    }, {
        key: "setEditorOptions",
        value: function setEditorOptions() {
            var _this2 = this;

            this.editorPanel.addListener("resize", function () {
                _this2.codeEditor.setWidth(_this2.editorPanel.getWidth() - 15);
            });

            this.codeEditor.addNodeListener("input", function () {
                var markup = _this2.codeEditor.getValue();
                try {
                    _this2.updateValue(markup);
                } catch (e) {
                    console.error("Exception in parsing markup: ", e);
                }
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            if (this.options.showButtons) {
                this.toggleLeftButton.addClickListener(function () {
                    if (_this3.editorPanel.getWidth() === 0) {
                        _this3.sectionDivider.expandChild(0);
                        _this3.toggleLeftButton.setLevel(Level.SUCCESS);
                    } else {
                        _this3.sectionDivider.collapseChild(0);
                        _this3.toggleLeftButton.setLevel(Level.DANGER);
                    }
                });
                this.toggleRightButton.addClickListener(function () {
                    if (_this3.rendererPanel.getWidth() === 0) {
                        _this3.sectionDivider.expandChild(1);
                        _this3.toggleRightButton.setLevel(Level.SUCCESS);
                    } else {
                        _this3.sectionDivider.collapseChild(1);
                        _this3.toggleRightButton.setLevel(Level.DANGER);
                    }
                });
            }

            this.setEditorOptions();
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.codeEditor.getValue();
        }
    }, {
        key: "setValue",
        value: function setValue(value) {
            this.updateValue(value);
            return this.codeEditor.setValue(value);
        }
    }]);
    return MarkupEditor;
}(Panel);

// import {Emoji as EmojiMini} from "EmojiMini";
// import "EmojiUI";

UI.Emoji = UI.Emoji || UI.Element;

var ClickableEmote = function (_UI$Emoji) {
    inherits(ClickableEmote, _UI$Emoji);

    function ClickableEmote() {
        classCallCheck(this, ClickableEmote);
        return possibleConstructorReturn(this, (ClickableEmote.__proto__ || Object.getPrototypeOf(ClickableEmote)).apply(this, arguments));
    }

    createClass(ClickableEmote, [{
        key: "redraw",
        value: function redraw() {
            var _this2 = this;

            this.redrawTimeout = setTimeout(function () {
                return get(ClickableEmote.prototype.__proto__ || Object.getPrototypeOf(ClickableEmote.prototype), "redraw", _this2).call(_this2);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.addClickListener(function () {
                var textBox = _this3.options.textBox;
                if (textBox) {
                    textBox.appendValue(_this3.getValueText(), " ");
                }
                if (_this3.options.afterClick) {
                    _this3.options.afterClick();
                }
            });
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            clearTimeout(this.redrawTimeout);
        }
    }]);
    return ClickableEmote;
}(UI.Emoji);

var ClickableEmoji = function (_ClickableEmote) {
    inherits(ClickableEmoji, _ClickableEmote);

    function ClickableEmoji() {
        classCallCheck(this, ClickableEmoji);
        return possibleConstructorReturn(this, (ClickableEmoji.__proto__ || Object.getPrototypeOf(ClickableEmoji)).apply(this, arguments));
    }

    createClass(ClickableEmoji, [{
        key: "getValueText",
        value: function getValueText() {
            return ":" + this.options.value + ":";
        }
    }]);
    return ClickableEmoji;
}(ClickableEmote);

var ClickableTwitchEmote = function (_ClickableEmote2) {
    inherits(ClickableTwitchEmote, _ClickableEmote2);

    function ClickableTwitchEmote() {
        classCallCheck(this, ClickableTwitchEmote);
        return possibleConstructorReturn(this, (ClickableTwitchEmote.__proto__ || Object.getPrototypeOf(ClickableTwitchEmote)).apply(this, arguments));
    }

    createClass(ClickableTwitchEmote, [{
        key: "getValueText",
        value: function getValueText() {
            return this.options.value;
        }
    }]);
    return ClickableTwitchEmote;
}(ClickableEmote);

var EmojiButton = function (_Button) {
    inherits(EmojiButton, _Button);

    function EmojiButton() {
        classCallCheck(this, EmojiButton);
        return possibleConstructorReturn(this, (EmojiButton.__proto__ || Object.getPrototypeOf(EmojiButton)).apply(this, arguments));
    }

    createClass(EmojiButton, [{
        key: "getPopup",
        value: function getPopup() {
            var _this7 = this;

            var textBox = this.options.getTextBox();
            var afterClick = function afterClick() {
                return _this7.closePopup();
            };
            var emotesList = [];
            for (var emoji in EmojiMini.EMOJI) {
                emotesList.push(UI.createElement(ClickableEmoji, { textBox: textBox, afterClick: afterClick, value: emoji }));
            }
            for (var twitchEmoji in EmojiMini.TWITCH_EMOTICONS) {
                emotesList.push(UI.createElement(ClickableTwitchEmote, { textBox: textBox, afterClick: afterClick, value: twitchEmoji }));
            }
            return BasePopup.create(this.parent, {
                target: this,
                children: emotesList,
                arrowDirection: Direction.DOWN,
                style: {
                    display: "flex",
                    overflow: "auto",
                    height: "300px",
                    width: "300px"
                }
            });
        }
    }, {
        key: "closePopup",
        value: function closePopup() {
            if (this.emojiPopup) {
                this.emojiPopup.destroyNode();
                delete this.emojiPopup;
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.addClickListener(function () {
                if (_this8.emojiPopup) {
                    _this8.closePopup();
                } else {
                    _this8.emojiPopup = _this8.getPopup();
                }
            });
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            this.closePopup();
        }
    }]);
    return EmojiButton;
}(Button);

var MarkupEditorModal = function (_Modal) {
    inherits(MarkupEditorModal, _Modal);

    function MarkupEditorModal() {
        classCallCheck(this, MarkupEditorModal);
        return possibleConstructorReturn(this, (MarkupEditorModal.__proto__ || Object.getPrototypeOf(MarkupEditorModal)).apply(this, arguments));
    }

    createClass(MarkupEditorModal, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(MarkupEditorModal.prototype.__proto__ || Object.getPrototypeOf(MarkupEditorModal.prototype), "getDefaultOptions", this).call(this), {
                height: "85%",
                width: "80%",
                destroyOnHide: false
            });
        }
    }, {
        key: "getMarkupEditorStyle",
        value: function getMarkupEditorStyle() {
            return {
                height: "85%",
                border: "solid 5px #DDD",
                borderRadius: "10px"
            };
        }
    }, {
        key: "getButtonStyle",
        value: function getButtonStyle() {
            return {
                margin: "5px"
            };
        }
    }, {
        key: "render",
        value: function render() {
            var _this10 = this;

            return [UI.createElement(MarkupEditor, { ref: this.refLink("markupEditor"), classMap: this.options.classMap, showButtons: false, style: this.getMarkupEditorStyle() }), UI.createElement(
                "div",
                { ref: this.refLink("buttonPanel"), style: { "text-align": "center" } },
                UI.createElement(Button, { ref: "graphExample", label: "Graph",
                    onClick: function onClick() {
                        _this10.appendGraphExample();
                    }, style: this.getButtonStyle(), className: "pull-left" }),
                UI.createElement(Button, { ref: "submissionExample", label: "Submission",
                    onClick: function onClick() {
                        _this10.appendSubmissionExample();
                    }, style: this.getButtonStyle(), className: "pull-left" }),
                UI.createElement(Button, { ref: "codeSnippetExample", level: Level.DEFAULT, size: Size.DEFAULT, label: "Code",
                    onClick: function onClick() {
                        _this10.appendCodeExample();
                    }, style: this.getButtonStyle(), className: "pull-left" }),
                UI.createElement(Button, { ref: "linkExample", level: Level.DEFAULT, size: Size.DEFAULT, label: "Link",
                    onClick: function onClick() {
                        _this10.appendLinkExample();
                    }, style: this.getButtonStyle(), className: "pull-left" }),
                UI.createElement(Button, { ref: "latexExample", level: Level.DEFAULT, size: Size.DEFAULT, label: "LaTeX",
                    onClick: function onClick() {
                        _this10.appendLatexExample();
                    }, style: this.getButtonStyle(), className: "pull-left" }),
                UI.createElement(Button, { ref: this.refLink("doneButton"), level: Level.PRIMARY, label: "Done",
                    className: "pull-right", style: this.getButtonStyle() })
            ),
            //<span ref={this.refLink("emotesContainer")} style={{float: "left", position: "relative", margin: "5px"}}>
            //    <EmojiButton ref="emotes" level={Level.DEFAULT} size={Size.DEFAULT} label="Emoticons" getTextBox={() => this.markupEditor}/>
            //</span>
            //<Button ref="userExample" level={Level.DEFAULT} size={Size.DEFAULT} label="User"
            //           onClick={() => {this.appendUserExample()}} style={this.getButtonStyle()} className="pull-left"/>
            UI.createElement(
                "div",
                { className: "", style: { "position": "absolute", "width": "90%", "margin-top": "45px" } },
                UI.createElement(Link, { href: "/about/#markup", value: "More details here" })
            )];
        }
    }, {
        key: "appendLatexExample",
        value: function appendLatexExample() {
            this.markupEditor.appendValue("$$lim_{x\\to\\infty} f(x)$$");
        }
    }, {
        key: "appendGraphExample",
        value: function appendGraphExample() {
            this.markupEditor.appendValue("<Graph nodes={[{}, {}, {}]} edges={[{source:1, target:2}]} directed />");
        }
    }, {
        key: "appendSubmissionExample",
        value: function appendSubmissionExample() {
            this.markupEditor.appendValue("<Submission id={25717} />");
        }
    }, {
        key: "appendCodeExample",
        value: function appendCodeExample() {
            this.markupEditor.appendValue("```java\n" + "class Main {\n" + "    public static void main (String[] args) throws java.lang.Exception {\n" + "        System.out.println(\"42\");\n" + "    }\n" + "}\n" + "```");
        }
    }, {
        key: "appendUserExample",
        value: function appendUserExample() {
            this.markupEditor.appendValue("<User id={1} />");
        }
    }, {
        key: "appendLinkExample",
        value: function appendLinkExample() {
            this.markupEditor.appendValue("<Link href=\"https://csacademy.com\" value=\"Cool website\" newTab/>");
        }
    }, {
        key: "hide",
        value: function hide() {
            get(MarkupEditorModal.prototype.__proto__ || Object.getPrototypeOf(MarkupEditorModal.prototype), "hide", this).call(this);
            if (this.options.hideCallback) {
                this.options.hideCallback(this);
            }
        }
    }, {
        key: "show",
        value: function show() {
            get(MarkupEditorModal.prototype.__proto__ || Object.getPrototypeOf(MarkupEditorModal.prototype), "show", this).call(this);
            if (this.options.showCallback) {
                this.options.showCallback(this);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            get(MarkupEditorModal.prototype.__proto__ || Object.getPrototypeOf(MarkupEditorModal.prototype), "onMount", this).call(this);
            this.doneButton.addClickListener(function () {
                _this11.hide();
            });
        }
    }]);
    return MarkupEditorModal;
}(Modal);

var _class$50, _descriptor$20, _descriptor2$17, _descriptor3$17, _descriptor4$15, _descriptor5$13;

function _initDefineProp$21(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$21(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var VotingWidgetStyle = (_class$50 = function (_StyleSheet) {
    inherits(VotingWidgetStyle, _StyleSheet);

    function VotingWidgetStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, VotingWidgetStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VotingWidgetStyle.__proto__ || Object.getPrototypeOf(VotingWidgetStyle)).call.apply(_ref, [this].concat(args))), _this), _this.height = 40, _this.size = 1, _this.likeColor = _this.options.likeColor || "#1E8921", _this.dislikeColor = _this.options.dislikeColor || "#C5302C", _this.notVoteColor = _this.options.notVoteColor || "#313534", _this.balanceColor = _this.options.balanceColor || "#313534", _this.orientation = Orientation.VERTICAL, _initDefineProp$21(_this, "container", _descriptor$20, _this), _this.mainClass = {
            height: "40px",
            lineHeight: "40px",
            fontSize: "14px",
            color: "#767676",
            display: "inline-block",
            float: "right",
            textAlign: "right"
        }, _this.thumbsStyle = {
            fontSize: _this.height / 2 + "px",
            lineHeight: _this.height + "px"
        }, _initDefineProp$21(_this, "displayStyle", _descriptor2$17, _this), _this.counterStyle = {
            fontSize: 18 * _this.size + "px",
            fontWeight: "900",
            color: _this.balanceColor
        }, _initDefineProp$21(_this, "thumbsUpHoverStyle", _descriptor3$17, _this), _initDefineProp$21(_this, "thumbsDownHoverStyle", _descriptor4$15, _this), _initDefineProp$21(_this, "padding", _descriptor5$13, _this), _temp), possibleConstructorReturn(_this, _ret);
    } //            |
    //      |- Triadic colors + Shades


    return VotingWidgetStyle;
}(StyleSheet), _descriptor$20 = _applyDecoratedDescriptor$21(_class$50.prototype, "container", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "40px",
            width: "100%",
            fontSize: "14px",
            color: "#767676",
            display: "flex",
            justifyContent: "flex-end",
            alignItems: "center"
        };
    }
}), _descriptor2$17 = _applyDecoratedDescriptor$21(_class$50.prototype, "displayStyle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "left",
            paddingLeft: "3px"
        };
    }
}), _descriptor3$17 = _applyDecoratedDescriptor$21(_class$50.prototype, "thumbsUpHoverStyle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            transition: ".25s",
            ":hover": {
                color: this.likeColor,
                opacity: ".8",
                transition: ".25s"
            }
        };
    }
}), _descriptor4$15 = _applyDecoratedDescriptor$21(_class$50.prototype, "thumbsDownHoverStyle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            transition: ".25s",
            ":hover": {
                color: this.dislikeColor,
                opacity: ".8",
                transition: ".25s"
            }
        };
    }
}), _descriptor5$13 = _applyDecoratedDescriptor$21(_class$50.prototype, "padding", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "3px",
            float: "left",
            display: "inline-block",
            height: this.height + "px"
        };
    }
}), _class$50);

var _dec$22, _class$51;

var VotingWidget = function (_UI$Element) {
    inherits(VotingWidget, _UI$Element);

    function VotingWidget() {
        classCallCheck(this, VotingWidget);
        return possibleConstructorReturn(this, (VotingWidget.__proto__ || Object.getPrototypeOf(VotingWidget)).apply(this, arguments));
    }

    createClass(VotingWidget, [{
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign({
                votesBalance: 0,
                userVote: VoteStatus.NONE,
                size: 1,
                likeColor: this.options.likeColor || "#1E8921", //            |
                dislikeColor: this.options.dislikeColor || "#C5302C", //      |- Triadic colors + Shades
                notVoteColor: this.options.notVoteColor || "#313534",
                balanceColor: this.options.balanceColor || "#313534",
                orientation: Orientation.VERTICAL
            }, options);
            get(VotingWidget.prototype.__proto__ || Object.getPrototypeOf(VotingWidget.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                textAlign: "center",
                marginRight: "10px"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var buttonsStyle = {
                paddingLeft: "4px",
                paddingRight: "4px",
                paddingTop: "0px",
                paddingBottom: "0px",
                lineHeight: "0px",
                backgroundColor: "transparent",
                borderColor: "transparent",
                fontSize: 40 * this.options.size + "px",
                marginTop: 8 * this.options.size + "px",
                marginBottom: 8 * this.options.size + "px",
                display: this.options.orientation === Orientation.VERTICAL ? "block" : "inline-block",
                marginLeft: "auto",
                marginRight: "auto",
                opacity: 0.7,
                cursor: "pointer",
                color: this.options.notVoteColor
            };

            var likeButtonStyle = Object.assign({}, buttonsStyle);
            if (this.getUserVote() === VoteStatus.LIKE) {
                likeButtonStyle.color = this.options.likeColor;
            }

            var dislikeButtonStyle = Object.assign({}, buttonsStyle);
            if (this.getUserVote() === VoteStatus.DISLIKE) {
                dislikeButtonStyle.color = this.options.dislikeColor;
            }

            var counterStyle = {
                fontSize: 18 * this.options.size + "px",
                fontWeight: "900",
                "color": this.options.balanceColor
            };

            return [UI.createElement("span", { className: "fa fa-caret-up voteButton", ref: "likeButton",
                faIcon: "caret-up", style: likeButtonStyle, HTMLtitle: "Click to like" }), UI.createElement(
                "span",
                { ref: "counterContainer", style: counterStyle },
                UI.createElement(UI.TextElement, { ref: "counter", value: this.getVotesBalance() + "" })
            ), UI.createElement("span", { className: "fa fa-caret-down voteButton", ref: "dislikeButton",
                faIcon: "caret-down", style: dislikeButtonStyle, HTMLtitle: "Click to dislike" })];
        }
    }, {
        key: "getVotesBalance",
        value: function getVotesBalance() {
            return this.options.votesBalance;
        }
    }, {
        key: "getUserVote",
        value: function getUserVote() {
            return this.options.userVote;
        }
    }]);
    return VotingWidget;
}(UI.Element);

var CommentVotingWidget = function (_VotingWidget) {
    inherits(CommentVotingWidget, _VotingWidget);

    function CommentVotingWidget() {
        classCallCheck(this, CommentVotingWidget);
        return possibleConstructorReturn(this, (CommentVotingWidget.__proto__ || Object.getPrototypeOf(CommentVotingWidget)).apply(this, arguments));
    }

    createClass(CommentVotingWidget, [{
        key: "getVotesBalance",
        value: function getVotesBalance() {
            return this.options.message.getVotesBalance();
        }
    }, {
        key: "getUserVote",
        value: function getUserVote() {
            return this.options.message.getUserVote();
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(CommentVotingWidget.prototype.__proto__ || Object.getPrototypeOf(CommentVotingWidget.prototype), "setOptions", this).call(this, options);
            this.updateTarget(this.options.message);
        }
    }, {
        key: "updateTarget",
        value: function updateTarget(target) {
            var _this3 = this;

            if (!target || target instanceof UserReactionCollection) {
                this.options.target = target;
                return;
            }
            var possibleTarget = target.getReactionCollection();
            if (possibleTarget) {
                this.options.target = possibleTarget;
                return;
            }
            var tempListener = this.attachEventListener(target, "createReactionCollection", function () {
                _this3.updateOptions({ target: target.getReactionCollection() });
                _this3.setupListener();
                tempListener.remove();
            });
        }
    }, {
        key: "setupListener",
        value: function setupListener() {
            var _this4 = this;

            var target = this.options.target;
            if (target) {
                this.attachUpdateListener(target, function () {
                    _this4.redraw();
                });
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.setupListener();
            this.likeButton.addClickListener(function () {
                if (!USER.isAuthenticated) {
                    LoginModal.show();
                    return;
                }
                if (_this5.getUserVote() === VoteStatus.LIKE) {
                    _this5.options.message.resetReaction();
                } else {
                    _this5.options.message.like();
                }
            });
            this.dislikeButton.addClickListener(function () {
                if (!USER.isAuthenticated) {
                    LoginModal.show();
                    return;
                }
                if (_this5.getUserVote() === VoteStatus.DISLIKE) {
                    _this5.options.message.resetReaction();
                } else {
                    _this5.options.message.dislike();
                }
            });

            this.options.message.addListener("reaction", function () {
                _this5.redraw();
            });
        }
    }]);
    return CommentVotingWidget;
}(VotingWidget);

// TODO: rewrite


var CommentVotingWidgetWithThumbs = (_dec$22 = registerStyle(VotingWidgetStyle), _dec$22(_class$51 = function (_CommentVotingWidget) {
    inherits(CommentVotingWidgetWithThumbs, _CommentVotingWidget);

    function CommentVotingWidgetWithThumbs() {
        classCallCheck(this, CommentVotingWidgetWithThumbs);
        return possibleConstructorReturn(this, (CommentVotingWidgetWithThumbs.__proto__ || Object.getPrototypeOf(CommentVotingWidgetWithThumbs)).apply(this, arguments));
    }

    createClass(CommentVotingWidgetWithThumbs, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.container);
        }
    }, {
        key: "getNumLikes",
        value: function getNumLikes() {
            return this.options.message.getNumLikes();
        }
    }, {
        key: "getNumDislikes",
        value: function getNumDislikes() {
            return this.options.message.getNumDislikes();
        }
    }, {
        key: "render",
        value: function render() {
            var thumbsUpScoreStyle = {};
            var thumbsDownScoreStyle = {};

            // TODO: remove duplicate code
            var likeButtonStyle = Object.assign({}, this.styleSheet.thumbsStyle);
            if (this.getUserVote() === VoteStatus.LIKE) {
                likeButtonStyle.color = thumbsUpScoreStyle.color = this.options.likeColor;
                thumbsUpScoreStyle.fontWeight = "bold";
            }

            var dislikeButtonStyle = Object.assign({}, this.styleSheet.thumbsStyle);
            if (this.getUserVote() === VoteStatus.DISLIKE) {
                dislikeButtonStyle.color = thumbsDownScoreStyle.color = this.options.dislikeColor;
                thumbsDownScoreStyle.fontWeight = "bold";
            }

            return [UI.createElement(
                "span",
                { className: this.styleSheet.displayStyle, style: thumbsUpScoreStyle },
                this.getNumLikes()
            ), UI.createElement("span", { className: "fa fa-thumbs-up voteButton " + this.styleSheet.displayStyle + " " + this.styleSheet.thumbsUpHoverStyle, ref: "likeButton", faIcon: "thumbs-up", style: likeButtonStyle, HTMLtitle: "Click to like" }), UI.createElement("div", { className: this.styleSheet.padding }), UI.createElement(
                "span",
                { className: this.styleSheet.displayStyle, style: thumbsDownScoreStyle },
                this.getNumDislikes()
            ), UI.createElement("span", { className: "fa fa-thumbs-down voteButton " + this.styleSheet.displayStyle + " " + this.styleSheet.thumbsDownHoverStyle, ref: "dislikeButton", faIcon: "thumbs-down", style: dislikeButtonStyle, HTMLtitle: "Click to dislike" })];
        }
    }]);
    return CommentVotingWidgetWithThumbs;
}(CommentVotingWidget)) || _class$51);

var _class$52, _descriptor$21, _descriptor2$18, _descriptor3$18, _descriptor4$16, _descriptor5$14, _descriptor6$11, _descriptor7$9, _descriptor8$7, _descriptor9$7, _descriptor10$6, _descriptor11$6;

function _initDefineProp$22(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$22(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var ChatStyle = (_class$52 = function (_StyleSheet) {
    inherits(ChatStyle, _StyleSheet);

    function ChatStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, ChatStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ChatStyle.__proto__ || Object.getPrototypeOf(ChatStyle)).call.apply(_ref, [this].concat(args))), _this), _this.navbarHeight = "50px", _this.renderMessageHeight = "100px", _this.userFontSize = "1.1em", _this.commentFontSize = "1.1em", _this.backgroundColor = "#fff", _this.hrBackgroundColor = "#ddd", _this.hoverBackgroundColor = "#f8f8f8", _initDefineProp$22(_this, "renderMessageView", _descriptor$21, _this), _initDefineProp$22(_this, "renderMessage", _descriptor2$18, _this), _initDefineProp$22(_this, "chatInput", _descriptor3$18, _this), _initDefineProp$22(_this, "messageBoxButton", _descriptor4$16, _this), _this.previewButton = { // TODO: This is currently not restyled.
            // We might not want to use it because previewButton is bad practice
            height: "30px",
            width: "30px",
            borderRadius: "100%",
            fontSize: "100%",
            marginLeft: "5px"
        }, _this.loadMoreButton = {
            border: "0px",
            color: "#333",
            borderRadius: "0",
            borderBottom: "0",
            backgroundColor: "#eee",
            padding: "5px 10px",
            textTransform: "uppercase",
            marginTop: "15px"
        }, _initDefineProp$22(_this, "messageTimeStampHr", _descriptor5$14, _this), _initDefineProp$22(_this, "messageTimeStamp", _descriptor6$11, _this), _initDefineProp$22(_this, "groupChatMessage", _descriptor7$9, _this), _initDefineProp$22(_this, "comment", _descriptor8$7, _this), _initDefineProp$22(_this, "userHandle", _descriptor9$7, _this), _initDefineProp$22(_this, "commentContent", _descriptor10$6, _this), _initDefineProp$22(_this, "timestamp", _descriptor11$6, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return ChatStyle;
}(StyleSheet), _descriptor$21 = _applyDecoratedDescriptor$22(_class$52.prototype, "renderMessageView", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "100%",
            width: "100%",
            overflowY: "auto",
            overflowX: "hidden",
            backgroundColor: this.backgroundColor,
            position: "relative",
            wordBreak: "break-word"
        };
    }
}), _descriptor2$18 = _applyDecoratedDescriptor$22(_class$52.prototype, "renderMessage", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.renderMessageHeight,
            maxHeight: this.renderMessageHeight,
            width: "100%",
            borderTop: "1px solid " + this.hrBackgroundColor,
            backgroundColor: this.backgroundColor,
            position: "relative"
        };
    }
}), _descriptor3$18 = _applyDecoratedDescriptor$22(_class$52.prototype, "chatInput", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _ref2;

        return _ref2 = {
            height: "100%",
            width: "calc(100% - 50px)",
            // "line-height": "30px",
            paddingTop: "0",
            paddingBottom: "0",
            fontSize: "14px",
            borderRadius: "0",
            paddingLeft: "8px",
            border: "0px"
        }, defineProperty(_ref2, "paddingTop", "5px"), defineProperty(_ref2, "resize", "none"), defineProperty(_ref2, "transition", ".2s"), defineProperty(_ref2, "display", "inline-block"), defineProperty(_ref2, "float", "left"), defineProperty(_ref2, "outline", "none"), defineProperty(_ref2, "position", "absolute"), defineProperty(_ref2, ":focus", {
            outline: "none",
            boxShadow: "none"
        }), defineProperty(_ref2, ":active", {
            outline: "none",
            boxShadow: "none"
        }), _ref2;
    }
}), _descriptor4$16 = _applyDecoratedDescriptor$22(_class$52.prototype, "messageBoxButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            textAlign: "center",
            flex: "1",
            backgroundColor: "#fff",
            border: "0",
            fontSize: "18px",
            transition: ".2s",
            color: "#333",
            padding: "0",
            ":hover": {
                backgroundColor: "transparent",
                color: "#2089b5",
                transition: ".2s"
            },
            ":active": {
                backgroundColor: "transparent",
                color: "#2089b5",
                transition: ".2s"
            },
            ":focus": {
                backgroundColor: "transparent",
                color: "#2089b5",
                transition: ".2s",
                outline: "none"
            },
            ":focus:active": {
                backgroundColor: "transparent",
                color: "#2089b5"
            },
            ":hover:active": {
                backgroundColor: "transparent",
                color: "#2089b5"
            }
        };
    }
}), _descriptor5$14 = _applyDecoratedDescriptor$22(_class$52.prototype, "messageTimeStampHr", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "1px",
            marginTop: "1.5em",
            marginBottom: "1.5em",
            width: "100%",
            maxWidth: "100%",
            backgroundColor: this.hrBackgroundColor,
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            textTransform: "uppercase"
        };
    }
}), _descriptor6$11 = _applyDecoratedDescriptor$22(_class$52.prototype, "messageTimeStamp", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "1.5em",
            width: "auto",
            paddingLeft: "10px",
            paddingRight: "10px",
            backgroundColor: this.backgroundColor,
            textAlign: "center",
            color: "#222",
            fontWeight: "bold"
        };
    }
}), _descriptor7$9 = _applyDecoratedDescriptor$22(_class$52.prototype, "groupChatMessage", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            backgroundColor: "#fff"
        };
    }
}), _descriptor8$7 = _applyDecoratedDescriptor$22(_class$52.prototype, "comment", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            paddingLeft: "12px",
            paddingRight: "12px",
            paddingTop: "12px",
            paddingBottom: "12px",
            ":hover": {
                backgroundColor: this.hoverBackgroundColor
            }
        };
    }
}), _descriptor9$7 = _applyDecoratedDescriptor$22(_class$52.prototype, "userHandle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: this.userFontSize
        };
    }
}), _descriptor10$6 = _applyDecoratedDescriptor$22(_class$52.prototype, "commentContent", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            " p": {
                marginTop: "0",
                marginBottom: "0",
                fontSize: this.commentFontSize,
                color: "#454545",
                // textAlign: "justify",
                wordWrap: "break-word"
            }
        };
    }
}), _descriptor11$6 = _applyDecoratedDescriptor$22(_class$52.prototype, "timestamp", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "#262626",
            fontWeight: "bold",
            margin: "0 10px"
        };
    }
}), _class$52);

var _dec$23, _class$53, _dec2$9, _class2$9;

ButtonStyle.getInstance().ensureFirstUpdate();
InputStyle.getInstance().ensureFirstUpdate();

var PreviewMarkupButton = function (_Button) {
    inherits(PreviewMarkupButton, _Button);

    function PreviewMarkupButton() {
        classCallCheck(this, PreviewMarkupButton);
        return possibleConstructorReturn(this, (PreviewMarkupButton.__proto__ || Object.getPrototypeOf(PreviewMarkupButton)).apply(this, arguments));
    }

    createClass(PreviewMarkupButton, [{
        key: "setOptions",
        value: function setOptions(options) {
            if (!options.faIcon) {
                options.label = options.label || UI.T("Preview");
            }
            get(PreviewMarkupButton.prototype.__proto__ || Object.getPrototypeOf(PreviewMarkupButton.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(PreviewMarkupButton.prototype.__proto__ || Object.getPrototypeOf(PreviewMarkupButton.prototype), "onMount", this).call(this);
            this.addClickListener(function () {
                MarkupEditorModal.show({
                    classMap: ChatMarkupRenderer.classMap,
                    showCallback: function showCallback(modal) {
                        modal.markupEditor.setValue(_this2.options.getValue());
                        modal.markupEditor.codeEditor.getAce().focus();
                    },
                    hideCallback: function hideCallback(modal) {
                        _this2.options.setValue(modal.markupEditor.getValue());
                    }
                });
            });
        }
    }]);
    return PreviewMarkupButton;
}(Button);

var EditableMessage = function (_UI$Element) {
    inherits(EditableMessage, _UI$Element);

    function EditableMessage() {
        classCallCheck(this, EditableMessage);
        return possibleConstructorReturn(this, (EditableMessage.__proto__ || Object.getPrototypeOf(EditableMessage)).apply(this, arguments));
    }

    createClass(EditableMessage, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(EditableMessage.prototype.__proto__ || Object.getPrototypeOf(EditableMessage.prototype), "getDefaultOptions", this).call(this), {
                deletable: true
            });
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(EditableMessage.prototype.__proto__ || Object.getPrototypeOf(EditableMessage.prototype), "setOptions", this).call(this, options);
            this.message = options.message;
        }
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            return [UI.createElement(
                Button,
                { ref: "editButton", onClick: function onClick() {
                        return _this4.toggleEditMode();
                    } },
                UI.T("Edit")
            ), UI.createElement(
                Switcher,
                { ref: "contentSwitcher" },
                UI.createElement(
                    "span",
                    { ref: "contentContainer", style: { "white-space": "pre-line" } },
                    this.message.hasMarkupEnabled() ? UI.createElement(ChatMarkupRenderer, { ref: this.refLink("content"), value: this.message.getContent(),
                        style: { height: "auto" } }) : UI.createElement(UI.TextElement, { ref: "content", value: this.message.getContent() })
                )
            )];
        }
    }, {
        key: "showEditMode",
        value: function showEditMode() {
            var _this5 = this;

            if (!this.editContent) {
                var writingSectionStyle = {
                    "margin-top": "5px"
                };
                var chatInputStyle = {
                    overflow: "auto",
                    height: "60px",
                    width: "100%"
                };

                this.editContent = UI.createElement(
                    "div",
                    { style: writingSectionStyle },
                    UI.createElement(TextArea, { ref: this.refLink("messageInput"), style: chatInputStyle, className: "form-control",
                        value: this.message.getContent() }),
                    UI.createElement(
                        ButtonGroup,
                        null,
                        UI.createElement(Button, { label: UI.T("Cancel"), level: Level.DEFAULT, size: Size.SMALL,
                            onClick: function onClick() {
                                _this5.hideEditMode();
                            } }),
                        UI.createElement(PreviewMarkupButton, { size: Size.SMALL,
                            getValue: function getValue() {
                                return _this5.messageInput.getValue();
                            },
                            setValue: function setValue(value) {
                                _this5.messageInput.setValue(value);_this5.messageInput.node.focus();
                            }
                        }),
                        UI.createElement(Button, { label: UI.T("Save changes"), level: Level.PRIMARY,
                            onClick: function onClick() {
                                return _this5.saveMessageChanges();
                            }, size: Size.SMALL }),
                        this.options.deletable ? UI.createElement(Button, { level: Level.DANGER, label: UI.T("Delete"), size: Size.SMALL,
                            onClick: function onClick() {
                                return _this5.deleteMessage();
                            } }) : ""
                    )
                );
            } else {
                this.messageInput.setValue(this.message.getContent());
            }

            if (!this.contentSwitcher.hasChild(this.editContent)) {
                this.contentSwitcher.appendChild(this.editContent);
            }
            this.contentSwitcher.setActive(this.editContent);
        }
    }, {
        key: "hideEditMode",
        value: function hideEditMode() {
            this.contentSwitcher.setActive(this.contentContainer);
        }
    }, {
        key: "toggleEditMode",
        value: function toggleEditMode() {
            if (this.contentSwitcher.getActive() === this.contentContainer) {
                this.showEditMode();
            } else {
                this.hideEditMode();
            }
        }
    }, {
        key: "saveMessageChanges",
        value: function saveMessageChanges() {
            var _this6 = this;

            var content = this.messageInput.getValue();

            if (content) {
                this.message.edit(content, function () {
                    _this6.hideEditMode();
                });
            }
        }
    }, {
        key: "deleteMessage",
        value: function deleteMessage() {
            if (this.options.deletable) {
                this.message.deleteMessage();
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            this.message.addListener("edit", function () {
                _this7.content.setValue(_this7.message.getContent());
                _this7.redraw();
            });

            this.message.addListener("delete", function () {
                // TODO: refactor this, should delete message, not hide
                _this7.hide();
            });
        }
    }]);
    return EditableMessage;
}(UI.Element);

var GroupChatMessage = (_dec$23 = registerStyle(ChatStyle), _dec$23(_class$53 = function (_EditableMessage) {
    inherits(GroupChatMessage, _EditableMessage);

    function GroupChatMessage() {
        classCallCheck(this, GroupChatMessage);
        return possibleConstructorReturn(this, (GroupChatMessage.__proto__ || Object.getPrototypeOf(GroupChatMessage)).apply(this, arguments));
    }

    createClass(GroupChatMessage, [{
        key: "setOptions",
        value: function setOptions(options) {
            var _this9 = this;

            get(GroupChatMessage.prototype.__proto__ || Object.getPrototypeOf(GroupChatMessage.prototype), "setOptions", this).call(this, options);
            if (this.message.hasTemporaryId()) {
                // TODO: this can also happen when editing a message, another case for later
                this.message.addListener("postError", function () {
                    _this9.redraw();
                });
                this.message.addListener("updateId", function () {
                    // TODO: we might need to updated our position here
                    _this9.options.key = _this9.message.id;
                });
            }
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.groupChatMessage);
        }
    }, {
        key: "shouldShowDayTimestamp",
        value: function shouldShowDayTimestamp() {
            var lastMessage = this.options.message.getPreviousMessage();
            return !lastMessage || isDifferentDay(lastMessage.timeAdded, this.options.message.timeAdded);
        }
    }, {
        key: "render",
        value: function render() {
            var _this10 = this;

            var editButton = void 0;
            if (this.message.userId === USER.id || USER.isSuperUser) {
                // if (USER.isSuperUser) {
                editButton = UI.createElement(
                    "a",
                    { style: Object.assign({ "cursor": "pointer" }, this.styleSheet.timestamp),
                        onClick: function onClick() {
                            return _this10.toggleEditMode();
                        } },
                    UI.T("Edit")
                );
            }

            if (!this.contentSwitcher) {
                this.contentSwitcher = UI.createElement(
                    Switcher,
                    null,
                    UI.createElement(
                        "span",
                        { ref: "contentContainer", style: { "white-space": "pre-line" } },
                        this.message.hasMarkupEnabled() ? UI.createElement(ChatMarkupRenderer, { ref: this.refLink("content"), value: this.message.getContent(),
                            style: { height: "auto" } }) : UI.createElement(UI.TextElement, { ref: "content", value: this.message.getContent() })
                    )
                );
            }

            var date = null;
            if (this.shouldShowDayTimestamp()) {
                date = UI.createElement(
                    "div",
                    { ref: "dayTimestamp", className: this.styleSheet.messageTimeStampHr },
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.messageTimeStamp },
                        StemDate.unix(this.message.timeAdded).format("dddd, MMMM Do")
                    )
                );
            }

            var errorElement = null;
            if (this.message.postError) {
                errorElement = UI.createElement("span", { ref: "errorArea", style: { marginLeft: "1rem" }, className: "fa fa-warning",
                    HTMLTitle: "Error: " + this.message.postError });
            }

            return [date, UI.createElement(
                "div",
                { className: this.styleSheet.comment },
                UI.createElement(UserHandle, { userId: this.message.userId, className: this.styleSheet.userHandle }),
                UI.createElement(
                    "span",
                    { className: this.styleSheet.timestamp },
                    this.message.getTimeOfDay()
                ),
                editButton,
                errorElement,
                UI.createElement(
                    "div",
                    { className: this.styleSheet.commentContent },
                    this.contentSwitcher
                )
            )];
        }
    }]);
    return GroupChatMessage;
}(EditableMessage)) || _class$53);
var PrivateChatMessage = (_dec2$9 = registerStyle(ChatStyle), _dec2$9(_class2$9 = function (_Panel) {
    inherits(PrivateChatMessage, _Panel);

    function PrivateChatMessage() {
        classCallCheck(this, PrivateChatMessage);
        return possibleConstructorReturn(this, (PrivateChatMessage.__proto__ || Object.getPrototypeOf(PrivateChatMessage)).apply(this, arguments));
    }

    createClass(PrivateChatMessage, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(PrivateChatMessage.prototype.__proto__ || Object.getPrototypeOf(PrivateChatMessage.prototype), "setOptions", this).call(this, options);
            this.message = options.message;
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(PrivateChatMessage.prototype.__proto__ || Object.getPrototypeOf(PrivateChatMessage.prototype), "getNodeAttributes", this).call(this);
            attr.addClass(this.styleSheet.groupChatMessage);
            return attr;
        }
    }, {
        key: "shouldShowDayTimestamp",
        value: function shouldShowDayTimestamp() {
            var lastMessage = this.options.message.getPreviousMessage();
            return !lastMessage || isDifferentDay(lastMessage.timeAdded, this.options.message.timeAdded);
        }
    }, {
        key: "isOwnMessage",
        value: function isOwnMessage() {
            return this.message.userId === USER.id;
        }
    }, {
        key: "render",
        value: function render() {
            if (!this.contentSwitcher) {
                this.contentSwitcher = UI.createElement(
                    Switcher,
                    null,
                    UI.createElement(
                        "span",
                        { ref: "contentContainer", style: { "white-space": "pre-line" } },
                        this.message.hasMarkupEnabled() ? UI.createElement(ChatMarkupRenderer, { ref: this.refLink("content"), value: this.message.getContent(),
                            style: { height: "auto" } }) : UI.createElement(UI.TextElement, { ref: "content", value: this.message.getContent() })
                    )
                );
            }

            var date = null;
            if (this.shouldShowDayTimestamp()) {
                date = UI.createElement(
                    "div",
                    { className: this.styleSheet.messageTimeStampHr },
                    UI.createElement(
                        "div",
                        { ref: "dayTimestamp", className: this.styleSheet.messageTimeStamp },
                        StemDate.unix(this.message.timeAdded).format("dddd, MMMM Do")
                    )
                );
            }

            var errorElement = null;
            if (this.message.postError) {
                errorElement = UI.createElement("span", { ref: "errorArea", style: { marginLeft: "1rem" }, className: "fa fa-warning",
                    HTMLTitle: "Error: " + this.message.postError });
            }

            var content = [UI.createElement(
                "div",
                { className: this.styleSheet.comment, style: { margin: "8px 16px", backgroundColor: "#eee" } },
                UI.createElement(UserHandle, { userId: this.message.userId, className: this.styleSheet.userHandle }),
                UI.createElement(
                    "span",
                    { className: this.styleSheet.timestamp },
                    this.message.getTimeOfDay()
                ),
                errorElement,
                UI.createElement(
                    "div",
                    { className: this.styleSheet.commentContent },
                    this.contentSwitcher
                )
            )];

            var paddingDiv = UI.createElement("div", { style: { flexGrow: "1000000" } });

            var result = void 0;
            if (this.isOwnMessage()) {
                result = [date, UI.createElement(
                    "div",
                    { style: {
                            display: "flex"
                        } },
                    paddingDiv,
                    content
                )];
            } else {
                result = [date, UI.createElement(
                    "div",
                    { style: {
                            display: "flex"
                        } },
                    content,
                    paddingDiv
                )];
            }

            return result;
        }
    }]);
    return PrivateChatMessage;
}(Panel)) || _class2$9);

var ChatMessageScrollSection = function (_InfiniteScrollable) {
    inherits(ChatMessageScrollSection, _InfiniteScrollable);

    function ChatMessageScrollSection() {
        classCallCheck(this, ChatMessageScrollSection);
        return possibleConstructorReturn(this, (ChatMessageScrollSection.__proto__ || Object.getPrototypeOf(ChatMessageScrollSection)).apply(this, arguments));
    }

    createClass(ChatMessageScrollSection, [{
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign({
                entryComparator: function entryComparator(a, b) {
                    return a.getNormalizedId() - b.getNormalizedId();
                }
            }, options);
            get(ChatMessageScrollSection.prototype.__proto__ || Object.getPrototypeOf(ChatMessageScrollSection.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getTopMessage",
        value: function getTopMessage() {
            return this.children[1];
        }
    }]);
    return ChatMessageScrollSection;
}(InfiniteScrollable);

var ChatWidget = function ChatWidget(ChatMessageClass) {
    var _dec3, _class3;

    var ChatWidgetClass = (_dec3 = registerStyle(ChatStyle), _dec3(_class3 = function (_Pluginable) {
        inherits(ChatWidgetClass, _Pluginable);

        function ChatWidgetClass() {
            classCallCheck(this, ChatWidgetClass);
            return possibleConstructorReturn(this, (ChatWidgetClass.__proto__ || Object.getPrototypeOf(ChatWidgetClass)).apply(this, arguments));
        }

        createClass(ChatWidgetClass, [{
            key: "getDefaultOptions",
            value: function getDefaultOptions(options) {
                return {
                    dateTimestamps: true,
                    renderMessage: function renderMessage(messageInstance) {
                        return UI.createElement(ChatMessageClass, { key: messageInstance.getNormalizedId(), message: messageInstance });
                    }
                };
            }
        }, {
            key: "setOptions",
            value: function setOptions(options) {
                get(ChatWidgetClass.prototype.__proto__ || Object.getPrototypeOf(ChatWidgetClass.prototype), "setOptions", this).call(this, options);
                this.initializeShowLoadMoreButton();
            }
        }, {
            key: "extraNodeAttributes",
            value: function extraNodeAttributes(attr) {
                get(ChatWidgetClass.prototype.__proto__ || Object.getPrototypeOf(ChatWidgetClass.prototype), "extraNodeAttributes", this).call(this, attr);
                attr.setStyle({
                    display: "flex",
                    flexDirection: "column"
                });
            }
        }, {
            key: "canOverwrite",
            value: function canOverwrite() {
                return false;
            }
        }, {
            key: "initializeShowLoadMoreButton",
            value: function initializeShowLoadMoreButton() {
                // TODO: this is a shitty way of knowing if there are more messages!
                if (this.messageThread.getNumMessages() >= 20) {
                    this.showLoadMoreButton = true;
                }
            }
        }, {
            key: "createVirtualMessage",
            value: function createVirtualMessage(request, message) {
                var virtualId = this.messageThread.getMaxMessageId() + "-" + MessageInstanceStore.generateVirtualId() + "-" + Math.random();
                var virtualMessageInstance = MessageInstanceStore.createVirtualMessageInstance(message, this.messageThread, virtualId);
                request.virtualId = virtualId;
                return virtualMessageInstance;
            }
        }, {
            key: "sendMessage",
            value: function sendMessage(message) {
                if (!USER.isAuthenticated) {
                    LoginModal.show();
                    return;
                }
                var request = Object.assign({}, this.options.baseRequest || {});

                message = message || this.chatInput.getValue();
                message = message.trim();

                if (!message) {
                    return;
                }
                request.message = message;

                // Create a virtual message to be drawn temporarily
                var virtualMessageInstance = this.createVirtualMessage(request, message);

                var onSuccess = function onSuccess(data) {
                    if (data.error) {
                        virtualMessageInstance.setPostError(data.error);
                        return;
                    }
                    if (virtualMessageInstance && virtualMessageInstance.hasTemporaryId()) {
                        MessageInstanceStore.applyUpdateObjectId(virtualMessageInstance, data.messageId);
                        GlobalState.importState(data.state);
                    }
                };

                var onError = function onError(error) {
                    if (virtualMessageInstance) {
                        virtualMessageInstance.setPostError(42);
                    }
                    console.log("Error in sending chat message:\n" + error.message);
                    console.log(error.stack);
                };

                this.messageWindow.scrollToBottom();

                this.chatInput.setValue("");
                this.chatInput.dispatch("messageSent");

                Ajax.postJSON(this.getPostURL(), request, { disableStateImport: true }).then(onSuccess, onError);
            }
        }, {
            key: "saveScrollPosition",
            value: function saveScrollPosition() {
                this.scrollPosition = this.messageWindow.node.scrollTop;
                this.scrollPercent = this.scrollPosition / (this.messageWindow.node.scrollHeight - this.messageWindow.node.clientHeight);
            }
        }, {
            key: "applyScrollPosition",
            value: function applyScrollPosition() {
                this.messageWindow.node.scrollTop = this.scrollPosition || this.messageWindow.node.scrollHeight;
                this.chatInput.node.focus();
            }
        }, {
            key: "addResizeListeners",
            value: function addResizeListeners() {
                var _this14 = this;

                this.messageWindow.addNodeListener("scroll", function () {
                    var scrollTop = _this14.messageWindow.node.scrollTop;
                    if (scrollTop < 20) {
                        _this14.loadMoreMessages();
                    }
                });

                this.addListener("hide", function () {
                    _this14.saveScrollPosition();
                });
                this.addListener("show", function () {
                    _this14.applyScrollPosition();
                });

                window.addEventListener("resize", function () {
                    _this14.saveScrollPosition();
                    _this14.setAdaptiveHeight();
                });

                this.addListener("resize", function () {
                    _this14.setAdaptiveHeight();
                    _this14.messageWindow.node.scrollTop = _this14.scrollPercent * (_this14.messageWindow.node.scrollHeight - _this14.messageWindow.node.clientHeight);
                });
            }
        }, {
            key: "getDesiredHeight",
            value: function getDesiredHeight() {
                if (this.options.style && this.options.style.height) {
                    return this.options.style.height;
                }
                var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
                var navbarHeight = document.getElementById("navbar").offsetHeight; // use offsetHeight to accommodate padding and margin

                var availableHeight = viewportHeight - navbarHeight - (this.options.extraHeightOffset || 25);
                return Math.max(availableHeight || 0, 100) + "px"; // it needs at least 100px
            }
        }, {
            key: "setAdaptiveHeight",
            value: function setAdaptiveHeight() {
                this.setStyle("height", this.getDesiredHeight());
            }
        }, {
            key: "setHeight",
            value: function setHeight(height) {
                this.setStyle("height", height);
            }
        }, {
            key: "renderMessageView",
            value: function renderMessageView() {
                var _this15 = this;

                var loadMoreButton = void 0;

                if (this.showLoadMoreButton) {
                    loadMoreButton = UI.createElement(
                        "div",
                        { className: "text-center" },
                        UI.createElement(AjaxButton, { ref: this.refLink("loadMoreButton"), level: Level.DEFAULT, onClick: function onClick() {
                                _this15.loadMoreMessages();
                            },
                            style: this.styleSheet.loadMoreButton, statusOptions: ["Load more messages", { faIcon: "spinner fa-spin", label: " loading messages..." }, "Load more messages", "Failed"]
                        })
                    );
                }

                return [UI.createElement(ChatMessageScrollSection, { className: this.styleSheet.renderMessageView,
                    ref: "messageWindow",
                    entryRenderer: this.options.renderMessage,
                    entries: this.messageThread.getMessages(),
                    staticTop: loadMoreButton })];
            }
        }, {
            key: "getGetType",
            value: function getGetType() {
                return "GET";
            }
        }, {
            key: "loadMoreMessages",
            value: function loadMoreMessages() {
                var _this16 = this;

                // TODO: wrap this in something
                if (this.outstandingRequest) {
                    return;
                }
                this.outstandingRequest = true;

                var topMessage = this.messageWindow.getTopMessage();

                var messageInstances = this.messageThread.getMessages();
                var lastMessageId = 999999999;
                if (messageInstances.length) {
                    lastMessageId = messageInstances[0].id;
                }

                var request = Object.assign({
                    lastMessageId: lastMessageId
                }, this.options.baseRequest || {});

                var oldScrollHeight = this.messageWindow.node.scrollHeight;

                if (this.loadMoreButton) {
                    this.loadMoreButton.ajaxCall({
                        url: this.getGetURL(),
                        type: this.getGetType(),
                        dataType: "json",
                        data: request,
                        complete: function complete() {
                            //TODO(@Rocky): find out why this doesn't work
                            _this16.outstandingRequest = false;
                        }
                    }).then(function (data) {
                        var emptyData = !data.state || !data.state.MessageInstance;
                        if (emptyData || data.state.MessageInstance.length < 20) {
                            if (_this16.loadMoreButton) {
                                _this16.loadMoreButton.hide();
                            }
                            _this16.showLoadMoreButton = false;

                            if (emptyData) {
                                return;
                            }
                        }

                        var scrollDelta = 0;
                        if (!topMessage.shouldShowDayTimestamp()) {
                            scrollDelta += topMessage.dayTimestamp.getHeight();
                            topMessage.dayTimestamp.addClass("hidden");
                        }
                        _this16.messageWindow.scrollToHeight(_this16.messageWindow.node.scrollHeight - oldScrollHeight - scrollDelta);

                        _this16.outstandingRequest = false;
                    });
                }
            }
        }, {
            key: "renderMessageBox",
            value: function renderMessageBox() {
                var _this17 = this;

                return UI.createElement(
                    "div",
                    { ref: "writingSection", className: this.styleSheet.renderMessage },
                    UI.createElement(TextArea, { readOnly: this.messageThread.muted,
                        ref: "chatInput",
                        placeholder: "Type a message...",
                        className: this.styleSheet.chatInput }),
                    UI.createElement(
                        "div",
                        { style: { display: "flex", flexDirection: "column", height: "100%", position: "absolute", right: "0px", width: "50px" } },
                        UI.createElement(Button, { ref: "sendMessageButton",
                            faIcon: "paper-plane",
                            disabled: this.messageThread.muted,
                            onClick: function onClick() {
                                return _this17.sendMessage();
                            },
                            className: this.styleSheet.messageBoxButton }),
                        UI.createElement(PreviewMarkupButton, { ref: "previewMessageButton",
                            getValue: function getValue() {
                                return _this17.chatInput.getValue();
                            },
                            setValue: function setValue(value) {
                                _this17.chatInput.setValue(value);_this17.chatInput.node.focus();
                            },
                            className: this.styleSheet.messageBoxButton,
                            faIcon: "eye" })
                    )
                );
            }
        }, {
            key: "renderStatus",
            value: function renderStatus() {
                if (this.messageThread.muted) {
                    return [UI.createElement(
                        "h4",
                        { style: { color: "red", textAlign: "center" } },
                        "This chat is currently turned off."
                    )];
                } else {
                    if (USER.isSuperUser) {
                        var userData = [];
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = this.messageThread.online[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var userId = _step.value;

                                userData.push([UI.createElement(UserHandle, { id: parseInt(userId) })]);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        return userData;
                    }
                }
            }
        }, {
            key: "render",
            value: function render() {
                return [this.renderMessageView(), this.renderMessageBox()];
            }
        }, {
            key: "getDefaultPlugins",
            value: function getDefaultPlugins() {
                return ChatWidget.defaultPlugins || [];
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this18 = this;

                get(ChatWidgetClass.prototype.__proto__ || Object.getPrototypeOf(ChatWidgetClass.prototype), "onMount", this).call(this);

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = (this.options.plugins || this.getDefaultPlugins())[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var plugin = _step2.value;

                        this.registerPlugin(plugin);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                this.attachUpdateListener(this.messageThread, function (event) {
                    if (event.type === "muted") {
                        _this18.redraw();
                    }
                });

                this.attachListener(this.messageThread, "newMessage", function (event) {
                    //console.log("Received chat message: ", event);
                    var messageInstance = MessageInstanceStore.get(event.data.id);

                    // We calculate before adding new message
                    var messageWindowScrollTop = _this18.messageWindow.node.scrollTop;
                    var messageWindowscrollMax = _this18.messageWindow.node.scrollHeight - _this18.messageWindow.node.offsetHeight;
                    _this18.messageWindow.insertEntry(messageInstance);

                    // If we were at the bottom before message was appended, scroll automatically
                    if (messageWindowScrollTop + 20 > messageWindowscrollMax) {
                        setTimeout(function () {
                            _this18.messageWindow.scrollToBottom();
                        }, 0);
                    }
                });

                this.addResizeListeners();
            }
        }, {
            key: "messageThread",
            get: function get$$1() {
                return this.options.messageThread;
            }
        }]);
        return ChatWidgetClass;
    }(Pluginable(Panel))) || _class3);

    return ChatWidgetClass;
};

var GroupChatWidget = function (_ChatWidget) {
    inherits(GroupChatWidget, _ChatWidget);

    function GroupChatWidget() {
        classCallCheck(this, GroupChatWidget);
        return possibleConstructorReturn(this, (GroupChatWidget.__proto__ || Object.getPrototypeOf(GroupChatWidget)).apply(this, arguments));
    }

    createClass(GroupChatWidget, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(GroupChatWidget.prototype.__proto__ || Object.getPrototypeOf(GroupChatWidget.prototype), "setOptions", this).call(this, options);
            this.options.baseRequest = {
                chatId: this.options.chatId
            };
        }
    }, {
        key: "getPostURL",
        value: function getPostURL() {
            return "/chat/group_chat_post/";
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(GroupChatWidget.prototype.__proto__ || Object.getPrototypeOf(GroupChatWidget.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                display: "flex",
                flexDirection: "column",
                overflowY: "hidden"
            });
        }
    }, {
        key: "getGetURL",
        value: function getGetURL() {
            return "/chat/group_chat_state/";
        }
    }, {
        key: "renderMessageView",
        value: function renderMessageView() {
            var _this20 = this;

            var loadMoreButton = void 0;

            if (this.showLoadMoreButton) {
                loadMoreButton = UI.createElement(
                    "div",
                    { className: "text-center" },
                    UI.createElement(AjaxButton, { ref: this.refLink("loadMoreButton"), level: Level.DEFAULT, onClick: function onClick() {
                            _this20.loadMoreMessages();
                        },
                        style: this.styleSheet.loadMoreButton, statusOptions: ["Load more messages", { faIcon: "spinner fa-spin", label: " loading messages..." }, "Load more messages", "Failed"]
                    })
                );
            }

            return [UI.createElement(ChatMessageScrollSection, { className: this.styleSheet.renderMessageView,
                ref: "messageWindow",
                entryRenderer: this.options.renderMessage,
                entries: this.messageThread.getMessages(),
                staticTop: loadMoreButton })];
        }
    }]);
    return GroupChatWidget;
}(ChatWidget(GroupChatMessage));

var PrivateChatWidget = function (_ChatWidget2) {
    inherits(PrivateChatWidget, _ChatWidget2);

    function PrivateChatWidget() {
        classCallCheck(this, PrivateChatWidget);
        return possibleConstructorReturn(this, (PrivateChatWidget.__proto__ || Object.getPrototypeOf(PrivateChatWidget)).apply(this, arguments));
    }

    createClass(PrivateChatWidget, [{
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign({
                messageThread: options.privateChat.getMessageThread(),
                baseRequest: {
                    userId: options.privateChat.getOtherUserId(),
                    privateChatId: options.privateChat.id
                }
            }, options);
            get(PrivateChatWidget.prototype.__proto__ || Object.getPrototypeOf(PrivateChatWidget.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "setPrivateChat",
        value: function setPrivateChat(privateChat) {
            this.options.privateChat = privateChat;
            this.setOptions(this.options);
        }
    }, {
        key: "getPostURL",
        value: function getPostURL() {
            return "/chat/private_chat_post/";
        }
    }, {
        key: "getGetType",
        value: function getGetType() {
            return "POST"; // It might create a chat if it doesn't have one
        }
    }, {
        key: "getGetURL",
        value: function getGetURL() {
            return "/chat/private_chat_state/";
        }
    }]);
    return PrivateChatWidget;
}(ChatWidget(PrivateChatMessage));

var VotableChatMessage = function (_GroupChatMessage) {
    inherits(VotableChatMessage, _GroupChatMessage);

    function VotableChatMessage() {
        classCallCheck(this, VotableChatMessage);
        return possibleConstructorReturn(this, (VotableChatMessage.__proto__ || Object.getPrototypeOf(VotableChatMessage)).apply(this, arguments));
    }

    createClass(VotableChatMessage, [{
        key: "render",
        value: function render() {
            var result = get(VotableChatMessage.prototype.__proto__ || Object.getPrototypeOf(VotableChatMessage.prototype), "render", this).call(this);
            result[1].options.children.push(UI.createElement(CommentVotingWidgetWithThumbs, { style: { display: "inline-block" }, message: this.options.message }));
            return result;
        }
    }]);
    return VotableChatMessage;
}(GroupChatMessage);

var VotableGroupChatWidget = function (_ChatWidget3) {
    inherits(VotableGroupChatWidget, _ChatWidget3);

    function VotableGroupChatWidget() {
        classCallCheck(this, VotableGroupChatWidget);
        return possibleConstructorReturn(this, (VotableGroupChatWidget.__proto__ || Object.getPrototypeOf(VotableGroupChatWidget)).apply(this, arguments));
    }

    createClass(VotableGroupChatWidget, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.messageThread = options.messageThread || MessageThreadStore.get(GroupChatStore.get(options.chatId).messageThreadId);
            get(VotableGroupChatWidget.prototype.__proto__ || Object.getPrototypeOf(VotableGroupChatWidget.prototype), "setOptions", this).call(this, options);
            this.options.baseRequest = {
                chatId: this.options.chatId
            };
        }
    }, {
        key: "getPostURL",
        value: function getPostURL() {
            return "/chat/group_chat_post/";
        }
    }, {
        key: "getGetURL",
        value: function getGetURL() {
            return "/chat/group_chat_state/";
        }
    }]);
    return VotableGroupChatWidget;
}(ChatWidget(VotableChatMessage));

var DelayedElement = function DelayedElement(BaseClass) {
    return function (_BaseClass) {
        inherits(DelayedElement, _BaseClass);

        function DelayedElement() {
            classCallCheck(this, DelayedElement);
            return possibleConstructorReturn(this, (DelayedElement.__proto__ || Object.getPrototypeOf(DelayedElement)).apply(this, arguments));
        }

        createClass(DelayedElement, [{
            key: "applyNodeAttributesNotLoaded",
            value: function applyNodeAttributesNotLoaded() {
                get(DelayedElement.prototype.__proto__ || Object.getPrototypeOf(DelayedElement.prototype), "applyNodeAttributes", this).call(this);
            }
        }, {
            key: "applyNodeAttributesLoaded",
            value: function applyNodeAttributesLoaded() {
                get(DelayedElement.prototype.__proto__ || Object.getPrototypeOf(DelayedElement.prototype), "applyNodeAttributes", this).call(this);
            }
        }, {
            key: "applyNodeAttributes",
            value: function applyNodeAttributes() {
                if (!this._loaded) {
                    return this.applyNodeAttributesNotLoaded();
                } else {
                    return this.applyNodeAttributesLoaded();
                }
            }
        }, {
            key: "renderNotLoaded",
            value: function renderNotLoaded() {
                return "Loading component...";
            }
        }, {
            key: "renderLoaded",
            value: function renderLoaded() {
                return get(DelayedElement.prototype.__proto__ || Object.getPrototypeOf(DelayedElement.prototype), "render", this).call(this);
            }
        }, {
            key: "render",
            value: function render() {
                if (!this._loaded) {
                    return this.renderNotLoaded();
                } else {
                    return this.renderLoaded();
                }
            }
        }, {
            key: "setLoaded",
            value: function setLoaded() {
                if (this._loaded) {
                    return;
                }
                this._loaded = true;
                if (!this.node) {
                    return;
                }
                get(DelayedElement.prototype.__proto__ || Object.getPrototypeOf(DelayedElement.prototype), "redraw", this).call(this);
                if (!this._executedMount) {
                    this._executedMount = true;
                    this.onDelayedMount();
                }
            }
        }, {
            key: "beforeRedrawNotLoaded",
            value: function beforeRedrawNotLoaded() {
                // Implement here anything you might need
            }
        }, {
            key: "redrawNotLoaded",
            value: function redrawNotLoaded() {
                this.beforeRedrawNotLoaded();
                // The previous code might have triggered a redraw, skip if that was the case
                if (!this._loaded) {
                    get(DelayedElement.prototype.__proto__ || Object.getPrototypeOf(DelayedElement.prototype), "redraw", this).call(this);
                }
            }
        }, {
            key: "redrawLoaded",
            value: function redrawLoaded() {
                get(DelayedElement.prototype.__proto__ || Object.getPrototypeOf(DelayedElement.prototype), "redraw", this).call(this);
            }
        }, {
            key: "redraw",
            value: function redraw() {
                if (!this._loaded) {
                    return this.redrawNotLoaded();
                }
                return this.redrawLoaded();
            }
        }, {
            key: "onMount",
            value: function onMount() {
                // Nothing to be done here
            }
        }, {
            key: "onDelayedMount",
            value: function onDelayedMount() {
                get(DelayedElement.prototype.__proto__ || Object.getPrototypeOf(DelayedElement.prototype), "onMount", this).call(this);
            }
        }]);
        return DelayedElement;
    }(BaseClass);
};

var LoadingPoints = function (_UI$Primitive) {
    inherits(LoadingPoints, _UI$Primitive);

    function LoadingPoints() {
        classCallCheck(this, LoadingPoints);
        return possibleConstructorReturn(this, (LoadingPoints.__proto__ || Object.getPrototypeOf(LoadingPoints)).apply(this, arguments));
    }

    createClass(LoadingPoints, [{
        key: "getContent",
        value: function getContent() {
            var content = "";
            for (var i = 0; i < this.points; i += 1) {
                content += ".";
            }
            return content;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.points = 1;
            this.node.textContent = this.getContent();
            this.intervalId = setInterval(function () {
                _this2.points = _this2.points % 4 + 1;
                _this2.node.textContent = _this2.getContent();
            }, 350);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            clearInterval(this.intervalId);
        }
    }]);
    return LoadingPoints;
}(UI.Primitive("span"));

var NavGroupChatWidget = function (_GroupChatWidget) {
    inherits(NavGroupChatWidget, _GroupChatWidget);

    function NavGroupChatWidget() {
        classCallCheck(this, NavGroupChatWidget);
        return possibleConstructorReturn(this, (NavGroupChatWidget.__proto__ || Object.getPrototypeOf(NavGroupChatWidget)).apply(this, arguments));
    }

    createClass(NavGroupChatWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { ref: "messageContainer", style: { flex: "5", overflowY: "auto" } },
                this.renderMessageView()
            ), this.renderMessageBox()];
        }
    }, {
        key: "renderMessageBox",
        value: function renderMessageBox() {
            var messageBox = get(NavGroupChatWidget.prototype.__proto__ || Object.getPrototypeOf(NavGroupChatWidget.prototype), "renderMessageBox", this).call(this);
            messageBox.setStyle({
                flex: "1",
                minHeight: "50px",
                maxHeight: "100px",
                height: ""
            });
            return messageBox;
        }
    }, {
        key: "observeMutations",
        value: function observeMutations() {
            var _this4 = this;

            var node = this.messageContainer.node;
            var observer = new MutationObserver(function (mutations) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = mutations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var mutation = _step.value;

                        if (mutation.addedNodes.length) {
                            if (node.scrollHeight - node.scrollTop - _this4.messageContainer.getHeight() < 100) {
                                setTimeout(function () {
                                    node.scrollTop = node.scrollHeight;
                                }, 10);
                                return;
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            });
            observer.observe(node, {
                subtree: true,
                childList: true
            });
        }
    }, {
        key: "handleResize",
        value: function handleResize() {
            var scroll = false;
            if (this.messageContainer.node.scrollHeight - this.messageContainer.node.scrollTop - this.messageContainer.getHeight() < 100) {
                scroll = true;
            }
            if (scroll) {
                this.messageContainer.node.scrollTop = this.messageContainer.node.scrollHeight;
            }
        }
    }, {
        key: "addResizeListeners",
        value: function addResizeListeners() {
            var _this5 = this;

            this.handleResize();
            NavManager.Global.addListener("changedAccordion", function () {
                _this5.handleResize();
            });
            window.addEventListener("resize", function () {
                _this5.handleResize();
            });
            this.observeMutations();
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(NavGroupChatWidget.prototype.__proto__ || Object.getPrototypeOf(NavGroupChatWidget.prototype), "onMount", this).call(this);
            this.chatInput.setStyle("height", "100%");
            this.applyScrollPosition();
        }
    }]);
    return NavGroupChatWidget;
}(GroupChatWidget);

var NavGlobalChat = function (_DelayedElement) {
    inherits(NavGlobalChat, _DelayedElement);

    function NavGlobalChat() {
        classCallCheck(this, NavGlobalChat);
        return possibleConstructorReturn(this, (NavGlobalChat.__proto__ || Object.getPrototypeOf(NavGlobalChat)).apply(this, arguments));
    }

    createClass(NavGlobalChat, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(NavGlobalChat.prototype.__proto__ || Object.getPrototypeOf(NavGlobalChat.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle("position", "relative");
        }
    }, {
        key: "beforeRedrawNotLoaded",
        value: function beforeRedrawNotLoaded() {
            var _this7 = this;

            Dispatcher.Global.addListener("initNavManagerDone", function () {
                if (NavManager.Global.rightSidePanel.visible) {
                    _this7.setLoaded();
                }
                NavManager.Global.addListener("toggledRightSide", function (visible) {
                    if (visible) {
                        _this7.setLoaded();
                    }
                });
            });
        }
    }, {
        key: "renderNotLoaded",
        value: function renderNotLoaded() {
            return [UI.createElement(
                "div",
                { style: {
                        height: "100%",
                        width: "100%",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        textTransform: "uppercase"
                    } },
                UI.createElement(LoadingPoints, { style: { opacity: 0 } }),
                " Loading ",
                UI.createElement(LoadingPoints, null)
            )];
        }
    }, {
        key: "renderLoaded",
        value: function renderLoaded() {
            var messageThread = GroupChatStore.get(FRONT_PAGE_CHAT_ID).getMessageThread();
            var groupChatStyle = {
                marginLeft: "0px",
                marginRight: "0px",
                width: "100%",
                height: "100%",
                overflow: "hidden",
                position: "absolute"
            };
            return [UI.createElement(NavGroupChatWidget, { style: groupChatStyle,
                extraHeightOffset: 75,
                ref: "chat",
                chatId: FRONT_PAGE_CHAT_ID,
                messageThread: messageThread })];
        }
    }, {
        key: "setLoaded",
        value: function setLoaded() {
            var _this8 = this;

            if (this._loaded) {
                return;
            }
            GroupChatStore.fetch(FRONT_PAGE_CHAT_ID, function () {
                get(NavGlobalChat.prototype.__proto__ || Object.getPrototypeOf(NavGlobalChat.prototype), "setLoaded", _this8).call(_this8);
            });
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {
            var _this9 = this;

            this.chat.messageContainer.node.scrollTop = this.chat.messageContainer.node.scrollHeight;
            this.onlineUsers = this.chat.messageThread.online || new Set();
            this.dispatch("updateOnlineUsers");
            this.attachUpdateListener(this.chat.messageThread, function () {
                _this9.onlineUsers = _this9.chat.messageThread.online;
                _this9.dispatch("updateOnlineUsers");
            });
        }
    }]);
    return NavGlobalChat;
}(DelayedElement(UI.Element));

var _class$54, _descriptor$22, _descriptor2$19, _dec$24, _class3$14;

function _initDefineProp$23(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$23(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

function getCircleStyle(size, borderSize, color, animationName, animationDuration) {
    return {
        position: "absolute",

        height: size + "px",
        width: size + "px",

        border: borderSize + "px solid " + color,
        borderRadius: size + "px",
        borderRight: borderSize + "px transparent",
        borderBottom: borderSize + "px transparent",

        rotate: "0deg",
        transform: "rotate(45deg)",

        animationName: animationName,
        animationDuration: animationDuration,
        animationIterationCount: "infinite",
        animationTimingFunction: "linear"
    };
}

function createCircle(size, borderSize, color, animationName, animationDuration) {
    return UI.createElement("div", { style: getCircleStyle(size, borderSize, color, animationName, animationDuration) });
}

var RotatingHelperStyle = (_class$54 = function (_StyleSheet) {
    inherits(RotatingHelperStyle, _StyleSheet);

    function RotatingHelperStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, RotatingHelperStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = RotatingHelperStyle.__proto__ || Object.getPrototypeOf(RotatingHelperStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$23(_this, "rotateClockwise", _descriptor$22, _this), _initDefineProp$23(_this, "rotateCounterclockwise", _descriptor2$19, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return RotatingHelperStyle;
}(StyleSheet), _descriptor$22 = _applyDecoratedDescriptor$23(_class$54.prototype, "rotateClockwise", [keyframesRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            "0%": {
                transform: "rotate(0deg)"
            },
            "100%": {
                transform: "rotate(360deg)"
            }
        };
    }
}), _descriptor2$19 = _applyDecoratedDescriptor$23(_class$54.prototype, "rotateCounterclockwise", [keyframesRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            "0%": {
                transform: "rotate(0deg)"
            },
            "100%": {
                transform: "rotate(-360deg)"
            }
        };
    }
}), _class$54);
var ConcentricCirclesLoadingScreen = (_dec$24 = registerStyle(RotatingHelperStyle), _dec$24(_class3$14 = function (_UI$Element) {
    inherits(ConcentricCirclesLoadingScreen, _UI$Element);

    function ConcentricCirclesLoadingScreen() {
        classCallCheck(this, ConcentricCirclesLoadingScreen);
        return possibleConstructorReturn(this, (ConcentricCirclesLoadingScreen.__proto__ || Object.getPrototypeOf(ConcentricCirclesLoadingScreen)).apply(this, arguments));
    }

    createClass(ConcentricCirclesLoadingScreen, [{
        key: "render",
        value: function render() {
            var centerConstant = 100;
            return UI.createElement(
                "div",
                { style: {
                        height: "100%",
                        width: "100%",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        marginTop: "200px"
                    } },
                createCircle(225 - centerConstant, 5, "#3a4859", this.styleSheet.rotateClockwise, "2.25s"),
                createCircle(200 - centerConstant, 4, "#666666", this.styleSheet.rotateCounterclockwise, "1.5s"),
                createCircle(175 - centerConstant, 3, "#aaaaaa", this.styleSheet.rotateClockwise, "1s"),
                createCircle(150 - centerConstant, 2, "#20232d", this.styleSheet.rotateCounterclockwise, "3s")
            );
        }
    }]);
    return ConcentricCirclesLoadingScreen;
}(UI.Element)) || _class3$14);

var Article = function (_StoreObject) {
    inherits(Article, _StoreObject);

    function Article(obj) {
        classCallCheck(this, Article);

        var _this = possibleConstructorReturn(this, (Article.__proto__ || Object.getPrototypeOf(Article)).call(this, obj));

        _this.edits = new Map();
        return _this;
    }

    createClass(Article, [{
        key: "canBeEditedByUser",
        value: function canBeEditedByUser() {
            var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : USER;

            return user.isSuperUser || this.userCreatedId == user.id;
        }
    }, {
        key: "addEdit",
        value: function addEdit(articleEdit) {
            this.edits.set(articleEdit.id, articleEdit);
        }
    }, {
        key: "getEdits",
        value: function getEdits() {
            return Array.from(this.edits.values());
        }
    }, {
        key: "getTranslation",
        value: function getTranslation() {
            var language = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Language.Locale;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = ArticleStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var article = _step.value;

                    if (article.baseArticleId === this.id && article.languageId === language.id) {
                        return article;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return this;
        }
    }, {
        key: "getBaseArticle",
        value: function getBaseArticle() {
            return ArticleStore.get(this.baseArticleId) || this;
        }
    }]);
    return Article;
}(StoreObject);

var ArticleEdit = function (_StoreObject2) {
    inherits(ArticleEdit, _StoreObject2);

    function ArticleEdit() {
        classCallCheck(this, ArticleEdit);
        return possibleConstructorReturn(this, (ArticleEdit.__proto__ || Object.getPrototypeOf(ArticleEdit)).apply(this, arguments));
    }

    createClass(ArticleEdit, [{
        key: "getArticle",
        value: function getArticle() {
            return ArticleStore.get(this.articleId);
        }
    }]);
    return ArticleEdit;
}(StoreObject);

var ArticleStoreClass = function (_AjaxFetchMixin) {
    inherits(ArticleStoreClass, _AjaxFetchMixin);

    function ArticleStoreClass() {
        classCallCheck(this, ArticleStoreClass);
        return possibleConstructorReturn(this, (ArticleStoreClass.__proto__ || Object.getPrototypeOf(ArticleStoreClass)).apply(this, arguments));
    }

    createClass(ArticleStoreClass, [{
        key: "getTranslation",
        value: function getTranslation(id) {
            var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Language.Locale;

            var baseArticle = this.get(id);
            if (baseArticle) {
                baseArticle = baseArticle.getTranslation(language);
            }
            return baseArticle;
        }
    }]);
    return ArticleStoreClass;
}(AjaxFetchMixin(GenericObjectStore));

var ArticleStore = new ArticleStoreClass("article", Article, {
    fetchURL: "/fetch_article/",
    maxFetchObjectCount: 32
});

var ArticleEditStore = new GenericObjectStore("articleedit", ArticleEdit, {
    dependencies: ["article"]
});

ArticleEditStore.addCreateListener(function (articleEdit) {
    var article = articleEdit.getArticle();
    article.addEdit(articleEdit);
});

var BlogEntry = function (_StoreObject) {
    inherits(BlogEntry, _StoreObject);

    function BlogEntry() {
        classCallCheck(this, BlogEntry);
        return possibleConstructorReturn(this, (BlogEntry.__proto__ || Object.getPrototypeOf(BlogEntry)).apply(this, arguments));
    }

    createClass(BlogEntry, [{
        key: "getArticle",
        value: function getArticle() {
            return ArticleStore.get(this.articleId);
        }
    }]);
    return BlogEntry;
}(StoreObject);

var BlogEntryStoreClass = function (_GenericObjectStore) {
    inherits(BlogEntryStoreClass, _GenericObjectStore);

    function BlogEntryStoreClass() {
        var objectType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "BlogEntry";
        var ObjectWrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BlogEntry;
        classCallCheck(this, BlogEntryStoreClass);
        return possibleConstructorReturn(this, (BlogEntryStoreClass.__proto__ || Object.getPrototypeOf(BlogEntryStoreClass)).call(this, objectType, ObjectWrapper, {
            dependencies: ["Article"]
        }));
    }

    createClass(BlogEntryStoreClass, [{
        key: "getEntryForURL",
        value: function getEntryForURL(urlName) {
            return this.all().find(function (blogEntry) {
                return blogEntry.urlName === urlName;
            });
        }
    }]);
    return BlogEntryStoreClass;
}(GenericObjectStore);

var BlogEntryStore = new BlogEntryStoreClass();

var UserGroup = function (_StoreObject) {
    inherits(UserGroup, _StoreObject);

    function UserGroup() {
        var _ref;

        classCallCheck(this, UserGroup);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = possibleConstructorReturn(this, (_ref = UserGroup.__proto__ || Object.getPrototypeOf(UserGroup)).call.apply(_ref, [this].concat(args)));

        _this.members = new Map();
        _this.membersByUserId = new Map();
        return _this;
    }

    createClass(UserGroup, [{
        key: "addMember",
        value: function addMember(groupMember) {
            this.members.set(groupMember.id, groupMember);
            this.membersByUserId.set(groupMember.userId, groupMember);
        }
    }, {
        key: "getMember",
        value: function getMember(groupMemberId) {
            return this.members.get(groupMemberId);
        }
    }, {
        key: "getMemberById",
        value: function getMemberById(groupMemberId) {
            return this.getMember(groupMemberId);
        }
    }, {
        key: "getMemberByUserId",
        value: function getMemberByUserId(userId) {
            return this.membersByUserId.get(userId);
        }
    }, {
        key: "removeMemberByUserId",
        value: function removeMemberByUserId(userId) {
            var member = this.getMemberByUserId(userId);
            if (member) {
                this.members.delete(member.id);
                this.membersByUserId.delete(member.userId);
                UserGroupMemberStore.applyDeleteEvent({
                    objectId: member.id
                });
            }
        }
    }, {
        key: "getMembers",
        value: function getMembers() {
            return [].concat(toConsumableArray(this.members.values()));
        }
    }]);
    return UserGroup;
}(StoreObject);

var UserGroupStoreClass = function (_GenericObjectStore) {
    inherits(UserGroupStoreClass, _GenericObjectStore);

    function UserGroupStoreClass() {
        classCallCheck(this, UserGroupStoreClass);
        return possibleConstructorReturn(this, (UserGroupStoreClass.__proto__ || Object.getPrototypeOf(UserGroupStoreClass)).call(this, "UserGroup", UserGroup));
    }

    createClass(UserGroupStoreClass, [{
        key: "getByName",
        value: function getByName(name) {
            return this.all().find(function (group) {
                return group.name === name;
            });
        }
    }]);
    return UserGroupStoreClass;
}(GenericObjectStore);

var UserGroupStore = new UserGroupStoreClass();

var UserGroupMember = function (_StoreObject2) {
    inherits(UserGroupMember, _StoreObject2);

    function UserGroupMember() {
        var _ref2;

        classCallCheck(this, UserGroupMember);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var _this3 = possibleConstructorReturn(this, (_ref2 = UserGroupMember.__proto__ || Object.getPrototypeOf(UserGroupMember)).call.apply(_ref2, [this].concat(args)));

        _this3.getGroup().addMember(_this3);
        return _this3;
    }

    createClass(UserGroupMember, [{
        key: "delete",
        value: function _delete() {
            this.getGroup().removeMemberByUserId(this.userId);
        }
    }, {
        key: "getGroup",
        value: function getGroup() {
            return UserGroupStore.get(this.groupId);
        }
    }, {
        key: "getPublicUser",
        value: function getPublicUser() {
            return PublicUserStore.get(this.userId);
        }
    }]);
    return UserGroupMember;
}(StoreObject);

var UserGroupMemberStore = new GenericObjectStore("UserGroupMember", UserGroupMember, {
    dependencies: ["UserGroup"]
});

var EvalTaskStatistics = function (_StoreObject) {
    inherits(EvalTaskStatistics, _StoreObject);

    function EvalTaskStatistics() {
        classCallCheck(this, EvalTaskStatistics);
        return possibleConstructorReturn(this, (EvalTaskStatistics.__proto__ || Object.getPrototypeOf(EvalTaskStatistics)).apply(this, arguments));
    }

    createClass(EvalTaskStatistics, [{
        key: "getEvalTask",
        value: function getEvalTask() {
            return EvalTaskStore.get(this.evalTaskId);
        }
    }]);
    return EvalTaskStatistics;
}(StoreObject);

var EvalTaskStatisticsStoreClass = function (_GenericObjectStore) {
    inherits(EvalTaskStatisticsStoreClass, _GenericObjectStore);

    function EvalTaskStatisticsStoreClass() {
        classCallCheck(this, EvalTaskStatisticsStoreClass);

        var _this2 = possibleConstructorReturn(this, (EvalTaskStatisticsStoreClass.__proto__ || Object.getPrototypeOf(EvalTaskStatisticsStoreClass)).call(this, "EvalTaskStatistics", EvalTaskStatistics, { dependencies: ["evaltask"] }));

        _this2.evalTaskMap = new Map();
        _this2.addCreateListener(function (evalTaskStatistics) {
            _this2.evalTaskMap.set(evalTaskStatistics.evalTaskId, evalTaskStatistics);
        });
        return _this2;
    }

    createClass(EvalTaskStatisticsStoreClass, [{
        key: "getByEvalTaskId",
        value: function getByEvalTaskId(evalTaskId) {
            return this.evalTaskMap.get(evalTaskId);
        }
    }]);
    return EvalTaskStatisticsStoreClass;
}(GenericObjectStore);

var EvalTaskStatisticsStore = new EvalTaskStatisticsStoreClass();

var ContestTask = function (_StoreObject) {
    inherits(ContestTask, _StoreObject);

    function ContestTask(obj) {
        classCallCheck(this, ContestTask);

        var _this = possibleConstructorReturn(this, (ContestTask.__proto__ || Object.getPrototypeOf(ContestTask)).call(this, obj));

        if (_this.getContest()) {
            _this.getContest().addContestTask(_this);
        } else {
            console.warn("Contest task with id =", _this.id, "does not have a contest.");
        }
        return _this;
    }

    createClass(ContestTask, [{
        key: "getFullURL",
        value: function getFullURL() {
            // TODO: should have URLHelper.join(paths)
            return this.getContest().getFullURL() + "task/" + this.name + "/";
        }
    }, {
        key: "getEvalTask",
        value: function getEvalTask() {
            return EvalTaskStore.get(this.evalTaskId);
        }
    }, {
        key: "hasStateLoaded",
        value: function hasStateLoaded() {
            return this.getContest() && this.getEvalTask() && this.getStatementArticle();
        }
    }, {
        key: "getDifficulty",
        value: function getDifficulty() {
            if (this.hasOwnProperty("difficulty")) {
                return this.difficulty;
            }
            var statistics = EvalTaskStatisticsStore.getByEvalTaskId(this.evalTaskId);
            if (statistics) {
                return statistics.difficulty;
            }
            return 0;
        }
    }, {
        key: "getOriginalContest",
        value: function getOriginalContest() {
            return ContestStore.get(this.originalContestId);
        }
    }, {
        key: "getStatementArticle",
        value: function getStatementArticle() {
            if (this.statementArticleId) {
                return ArticleStore.get(this.statementArticleId);
            }
            return this.getEvalTask().getStatementArticle();
        }
    }, {
        key: "getContest",
        value: function getContest() {
            return ContestStore.get(this.contestId);
        }
    }, {
        key: "getTimeAvailable",
        value: function getTimeAvailable() {
            var time = StemDate(this.getContest().getStartTime());
            if (this.broadcastDelay) {
                time.addUnit(TimeUnit.SECOND, this.broadcastDelay);
            }
            return time;
        }
    }, {
        key: "getBroadcastDelay",
        value: function getBroadcastDelay() {
            if (this.broadcastDelay) {
                // broadcast delay is in seconds, and the argument needs to be passed in milliseconds.
                return new Duration(this.broadcastDelay * 1000);
            } else {
                return new Duration(0);
            }
        }
    }, {
        key: "getBaseTask",
        value: function getBaseTask() {
            var contest = this.getContest().getBaseContest();
            return contest.getMatchingContestTask(this);
        }
    }, {
        key: "getVirtualTask",
        value: function getVirtualTask() {
            var contest = this.getContest();
            if (contest.isVirtual()) {
                return this;
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = contest.getVirtualContest().getContestTasks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestTask = _step.value;

                    if (contestTask.evalTaskId === this.evalTaskId) {
                        return contestTask;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return null;
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            get(ContestTask.prototype.__proto__ || Object.getPrototypeOf(ContestTask.prototype), "applyEvent", this).call(this, event);
            var contest = this.getContest();
            if (contest) {
                contest.applyEvent({
                    type: "contestTaskUpdate",
                    contestTaskId: this.id,
                    contestTaskEvent: event,
                    data: {}
                });
            }
        }
    }, {
        key: "hasPartialScore",
        value: function hasPartialScore() {
            return this.getContest() && this.getContest().getScoring().hasPartialScoring;
        }
    }, {
        key: "hasPenalty",
        value: function hasPenalty() {
            return this.getContest() && this.getContest().hasPenalty();
        }
    }, {
        key: "hasScore",
        value: function hasScore() {
            return this.hasOwnProperty("pointsWorth") && this.pointsWorth != 1;
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.longName;
        }
    }, {
        key: "canShowStatistics",
        value: function canShowStatistics() {
            return this.getContest() && this.getContest().canShowPublicSources();
        }
    }]);
    return ContestTask;
}(StoreObject);
ContestTask.ScoreType = {
    ACM: 0, // to AC or not AC
    PARTIAL: 1, // tests or groups of tests
    OPTIMIZATION: 2, // % out of best score, for optimizing NP-complete tasks for instance
    SPECIAL_JUDGE: 3
};

var ContestTaskStoreClass = function (_GenericObjectStore) {
    inherits(ContestTaskStoreClass, _GenericObjectStore);

    function ContestTaskStoreClass() {
        classCallCheck(this, ContestTaskStoreClass);
        return possibleConstructorReturn(this, (ContestTaskStoreClass.__proto__ || Object.getPrototypeOf(ContestTaskStoreClass)).call(this, "contesttask", ContestTask, { dependencies: ["contest"] }));
    }

    createClass(ContestTaskStoreClass, [{
        key: "getByEvalTaskId",
        value: function getByEvalTaskId(evalTaskId) {
            return this.all().find(function (contestTask) {
                return contestTask.evalTaskId === evalTaskId;
            });
        }
    }, {
        key: "getByContestIdAndUrlName",
        value: function getByContestIdAndUrlName(contestId, urlName) {
            // TODO: Keep a map here
            return this.all().find(function (contestTask) {
                return contestTask.name === urlName && contestTask.contestId === contestId;
            });
        }
    }]);
    return ContestTaskStoreClass;
}(GenericObjectStore);

var ContestTaskStore = new ContestTaskStoreClass();

var ContestUser = function (_StoreObject) {
    inherits(ContestUser, _StoreObject);

    function ContestUser(obj) {
        classCallCheck(this, ContestUser);

        var _this = possibleConstructorReturn(this, (ContestUser.__proto__ || Object.getPrototypeOf(ContestUser)).call(this, obj));

        if (_this.getContest()) {
            _this.getContest().addContestUser(_this);
            _this.getContest().dispatch("contestUserUpdate", {
                contestUser: _this
            });
        }
        return _this;
    }

    createClass(ContestUser, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            get(ContestUser.prototype.__proto__ || Object.getPrototypeOf(ContestUser.prototype), "applyEvent", this).call(this, event);
            this.getContest() && this.getContest().dispatch("contestUserUpdate", {
                contestUser: this,
                event: event
            });
        }
    }, {
        key: "getPublicUser",
        value: function getPublicUser() {
            return PublicUserStore.get(this.userId);
        }
    }, {
        key: "getContest",
        value: function getContest() {
            return ContestStore.get(this.contestId);
        }
    }, {
        key: "getOriginalRating",
        value: function getOriginalRating() {
            if (this.hasOwnProperty("oldRating")) {
                return this.oldRating;
            }
            var publicUser = this.getPublicUser();
            if (publicUser) {
                return publicUser.getRating();
            }
            return 1500;
        }
    }, {
        key: "isOfficial",
        value: function isOfficial() {
            if (this.getContest().isVirtual()) {
                return false;
            }
            var rating = this.getOriginalRating();
            if (!rating) {
                return true;
            }
            var minRating = this.getContest().minRating || -Infinity;
            var maxRating = this.getContest().maxRating || Infinity;
            return minRating <= rating && rating < maxRating;
        }
    }, {
        key: "getBaseContest",
        value: function getBaseContest() {
            return this.getContest().getBaseContest();
        }
    }, {
        key: "getContestStartTime",
        value: function getContestStartTime() {
            return this.getContest().getStartTime(this);
        }
    }, {
        key: "getContestEndTime",
        value: function getContestEndTime() {
            return this.getContest().getEndTime(this);
        }
    }, {
        key: "recalculateTotalScore",
        value: function recalculateTotalScore() {
            this.totalScore = 0;
            var lastGoodSubmissionTime = this.getContestStartTime();
            for (var contestTaskId in this.scores) {
                var contestTask = ContestTaskStore.get(parseInt(contestTaskId));
                var contestTaskScore = this.scores[contestTaskId];
                if (contestTaskScore.score > 0) {
                    if (contestTaskScore.scoreTime > lastGoodSubmissionTime) {
                        lastGoodSubmissionTime = contestTaskScore.scoreTime;
                    }
                    if (contestTask) {
                        this.totalScore += contestTask.getBaseTask().pointsWorth * contestTaskScore.score;
                    }
                }
            }
        }
    }, {
        key: "solvedTask",
        value: function solvedTask(contestTask) {
            return this.scores[contestTask.id] && this.scores[contestTask.id].score == 1;
        }
    }, {
        key: "triedTask",
        value: function triedTask(contestTask) {
            return this.scores[contestTask.id] && this.scores[contestTask.id].score != 1;
        }
    }, {
        key: "resetScore",
        value: function resetScore() {
            this.scoresBackup = this.scores;
            this.scores = {};
            this.numSubmissions = 0;
            this.penalty = 0;
        }
    }, {
        key: "haveSubmitted",
        value: function haveSubmitted() {
            return this.numSubmissions > 0;
        }
    }], [{
        key: "compare",
        value: function compare(a, b) {
            if (a.totalScore === b.totalScore) {
                return (a.penalty || Infinity) - (b.penalty || Infinity);
            }
            return (b.totalScore || -Infinity) - (a.totalScore || -Infinity);
        }
    }, {
        key: "compareScoreboard",
        value: function compareScoreboard(a, b) {
            if (a.haveSubmitted() !== b.haveSubmitted()) {
                return b.numSubmissions - a.numSubmissions;
            } else {
                return ContestUser.compare(a, b);
            }
        }
    }]);
    return ContestUser;
}(StoreObject);

var ContestUserStoreClass = function (_GenericObjectStore) {
    inherits(ContestUserStoreClass, _GenericObjectStore);

    function ContestUserStoreClass() {
        classCallCheck(this, ContestUserStoreClass);
        return possibleConstructorReturn(this, (ContestUserStoreClass.__proto__ || Object.getPrototypeOf(ContestUserStoreClass)).call(this, "ContestUser", ContestUser, { dependencies: ["contest", "publicuser"] }));
    }

    createClass(ContestUserStoreClass, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            var obj = this.get(event.objectId);
            if (!obj) {
                obj = event.data;
                obj.id = event.objectId;
                var user = this.fakeCreate(obj);
                user.applyEvent(event);
                if (event.user) {
                    PublicUserStore.fakeCreate(event.user);
                }
            } else {
                get(ContestUserStoreClass.prototype.__proto__ || Object.getPrototypeOf(ContestUserStoreClass.prototype), "applyEvent", this).call(this, event);
            }
        }
    }]);
    return ContestUserStoreClass;
}(GenericObjectStore);

var ContestUserStore = new ContestUserStoreClass();

var ContestAnnouncement = function (_StoreObject) {
    inherits(ContestAnnouncement, _StoreObject);

    function ContestAnnouncement() {
        classCallCheck(this, ContestAnnouncement);
        return possibleConstructorReturn(this, (ContestAnnouncement.__proto__ || Object.getPrototypeOf(ContestAnnouncement)).apply(this, arguments));
    }

    createClass(ContestAnnouncement, [{
        key: "getContest",
        value: function getContest() {
            return ContestStore.get(this.contestId);
        }
    }, {
        key: "getDate",
        value: function getDate() {
            return StemDate(this.date);
        }
    }, {
        key: "getContestTask",
        value: function getContestTask() {
            var contestTask = ContestTaskStore.get(this.taskId);
            if (!contestTask) {
                var contest = this.getContest();
                return contest && contest.getContestTaskById(this.taskId);
            }
            return contestTask;
        }
    }, {
        key: "getTarget",
        value: function getTarget() {
            if (this.taskId) {
                return "Task " + this.getContestTask().longName;
            }
            return "General";
        }
    }, {
        key: "isTaskBroadcast",
        value: function isTaskBroadcast() {
            return !!this.taskBroadcast;
        }
    }, {
        key: "getMessage",
        value: function getMessage() {
            if (this.isTaskBroadcast()) {
                return 'Task "' + this.getContestTask().longName + '" is now available!';
            }
            return this.message;
        }
    }]);
    return ContestAnnouncement;
}(StoreObject);

var ContestAnnouncementStore = new GenericObjectStore("ContestAnnouncement", ContestAnnouncement, { dependencies: ["contest"] });

var ContestQuestion = function (_StoreObject2) {
    inherits(ContestQuestion, _StoreObject2);

    function ContestQuestion() {
        classCallCheck(this, ContestQuestion);
        return possibleConstructorReturn(this, (ContestQuestion.__proto__ || Object.getPrototypeOf(ContestQuestion)).apply(this, arguments));
    }

    createClass(ContestQuestion, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            get(ContestQuestion.prototype.__proto__ || Object.getPrototypeOf(ContestQuestion.prototype), "applyEvent", this).call(this, event);
            if (event.type !== "typingStateChange" && event.type !== "createReactionCollection") {
                this.getContest().dispatch("updateQuestion", this);
            }
        }
    }, {
        key: "isAskedByCurrentUser",
        value: function isAskedByCurrentUser() {
            return USER.id === this.userAskedId;
        }
    }, {
        key: "getContestTask",
        value: function getContestTask() {
            return ContestTaskStore.get(this.contestTaskId);
        }
    }, {
        key: "isAnswered",
        value: function isAnswered() {
            return this.replyTime;
        }
    }, {
        key: "shouldAppear",
        value: function shouldAppear() {
            return USER.id === this.userAskedId || this.isPublic;
        }
    }, {
        key: "getContest",
        value: function getContest() {
            return ContestStore.get(this.contestId);
        }
    }, {
        key: "getReactionCollection",
        value: function getReactionCollection() {
            var fakeIfMissing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var reactionCollection = UserReactionCollectionStore.get(this.reactionCollectionId);
            if (fakeIfMissing && !reactionCollection) {
                return {
                    upvotesCount: 0,
                    downvotesCount: 0,
                    getCurrentUserReactionType: function getCurrentUserReactionType() {}
                };
            }
            return reactionCollection;
        }
    }, {
        key: "getNumLikes",
        value: function getNumLikes() {
            return this.getReactionCollection(true).upvotesCount;
        }
    }, {
        key: "getNumDislikes",
        value: function getNumDislikes() {
            return this.getReactionCollection(true).downvotesCount;
        }
    }, {
        key: "getVotesBalance",
        value: function getVotesBalance() {
            return this.getNumLikes() - this.getNumDislikes();
        }
    }, {
        key: "getUserVote",
        value: function getUserVote() {
            return this.getReactionCollection(true).getCurrentUserReactionType();
        }
    }, {
        key: "react",
        value: function react(reaction) {
            var onSuccess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NOOP_FUNCTION;
            var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOOP_FUNCTION;

            Ajax.postJSON("/contest/question_reaction/", {
                contestQuestionId: this.id,
                reaction: reaction
            }).then(onSuccess, onError);
        }
    }, {
        key: "like",
        value: function like(onSuccess, onError) {
            this.react("like", onSuccess, onError);
        }
    }, {
        key: "dislike",
        value: function dislike(onSuccess, onError) {
            this.react("dislike", onSuccess, onError);
        }
    }, {
        key: "resetReaction",
        value: function resetReaction(onSuccess, onError) {
            this.react("resetReaction", onSuccess, onError);
        }
    }]);
    return ContestQuestion;
}(StoreObject);

var ContestQuestionStore = new GenericObjectStore("ContestQuestion", ContestQuestion, { dependencies: ["contest"] });

var _class$55, _temp$12;

var Contest = (_temp$12 = _class$55 = function (_StoreObject) {
    inherits(Contest, _StoreObject);

    function Contest(obj) {
        classCallCheck(this, Contest);

        var _this = possibleConstructorReturn(this, (Contest.__proto__ || Object.getPrototypeOf(Contest)).call(this, obj));

        _this.contestTasks = new Map();
        _this.contestUsers = new Map();
        _this.addListener("contestUserUpdate", function () {
            return _this.enqueueRecalculateUserRanks();
        });
        return _this;
    }

    createClass(Contest, [{
        key: "getScoring",
        value: function getScoring() {
            return ContestScoringStore.get(this.scoringId);
        }
    }, {
        key: "addPermission",
        value: function addPermission(userId, permissionName, callback) {
            return Ajax.postJSON("/contest/change_permission/", {
                contestId: this.id,
                userId: userId,
                permissionName: permissionName,
                action: "give"
            }).then(callback);
        }
    }, {
        key: "removePermission",
        value: function removePermission(userId, permissionName, callback) {
            var _this2 = this;

            return Ajax.postJSON("/contest/change_permission/", {
                contestId: this.id,
                userId: userId,
                permissionName: permissionName,
                action: "remove"
            }).then(function () {
                _this2.getPermissionGroup(permissionName).removeMemberByUserId(userId);
                callback();
            });
        }
    }, {
        key: "getPermissionGroup",
        value: function getPermissionGroup(permName) {
            return UserGroupStore.getByName("contest-" + this.id + "-perm-" + permName);
        }
    }, {
        key: "getUserPermission",
        value: function getUserPermission(userId, permName) {
            return !!this.getPermissionGroup(permName).getMemberByUserId(userId);
        }
    }, {
        key: "canReceiveQuestions",
        value: function canReceiveQuestions() {
            return !this.systemGenerated && this.hasStarted() && !this.isInfinite();
        }
    }, {
        key: "getAnnouncements",
        value: function getAnnouncements() {
            var _this3 = this;

            return ContestAnnouncementStore.all().filter(function (announcement) {
                return announcement.contestId === _this3.id;
            }).sort(function (a, b) {
                return b.id - a.id;
            });
        }
    }, {
        key: "getQuestions",
        value: function getQuestions() {
            var _this4 = this;

            return ContestQuestionStore.all().filter(function (question) {
                return question.contestId === _this4.id;
            }).sort(function (a, b) {
                return b.id - a.id;
            });
        }
    }, {
        key: "getFullURL",
        value: function getFullURL() {
            // TODO: should be a setting, if the contest url is top level or not
            var prefix = this.name.startsWith("ieeextreme") ? "/" : "/contest/";
            return prefix + this.name + "/";
        }
    }, {
        key: "addContestUser",
        value: function addContestUser(contestUser) {
            this.contestUsers.set(contestUser.id, contestUser);
        }
    }, {
        key: "addContestTask",
        value: function addContestTask(contestTask) {
            if (this.contestTasks.has(contestTask.id)) {
                return false;
            }
            this.contestTasks.set(contestTask.id, contestTask);
            this.dispatch("addTask", contestTask);
            return true;
        }
    }, {
        key: "getContestTaskById",
        value: function getContestTaskById(contestTaskId) {
            return this.contestTasks.get(contestTaskId);
        }
    }, {
        key: "hasAnyTask",
        value: function hasAnyTask() {
            return this.getContestTasks().length > 0;
        }
    }, {
        key: "enqueueRecalculateUserRanks",
        value: function enqueueRecalculateUserRanks() {
            // TODO: should add a setTimeout(0, if none is scheduled
            this.recalculateUsers();
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            var questionData = void 0;
            if (event.data.hasOwnProperty("questions")) {
                for (var questionId in event.data.questions) {
                    this.questions[questionId] = event.data.questions[questionId];
                }

                questionData = event.data.questions;
                delete event.data.questions;
            }

            get(Contest.prototype.__proto__ || Object.getPrototypeOf(Contest.prototype), "applyEvent", this).call(this, event);

            if (event.type === "contestTaskUpdate") {
                this.recalculateUsers();
            }

            if (event.numUsersOnline) {
                this.numUsersOnline = event.numUsersOnline;
            }
        }
    }, {
        key: "isVirtual",
        value: function isVirtual() {
            return !!this.baseContestId;
        }
    }, {
        key: "getBaseContest",
        value: function getBaseContest() {
            if (this.baseContestId) {
                return ContestStore.get(this.baseContestId);
            } else {
                return this;
            }
        }
    }, {
        key: "getVirtualContest",
        value: function getVirtualContest() {
            if (this.virtualContestId) {
                return ContestStore.get(this.virtualContestId);
            } else {
                return this;
            }
        }
    }, {
        key: "getUser",
        value: function getUser(userId) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.contestUsers.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestUser = _step.value;

                    if (contestUser.userId === userId) {
                        return contestUser;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return null;
        }
    }, {
        key: "getUsers",
        value: function getUsers() {
            return Array.from(this.contestUsers.values());
        }
    }, {
        key: "getNumUsers",
        value: function getNumUsers() {
            var numUsers = this.getBaseContest().numRegistered;
            // TODO: fix this to only count virtual users if showVirtualUsers=true
            if ((this.isVirtual() || this.virtualContestId) && this.getVirtualContest()) {
                //numUsers += !!this.getVirtualContest().getUser(USER.id);
                numUsers += this.getVirtualContest().numRegistered;
            }
            return numUsers;
        }

        // TODO: this should return a Date directly

    }, {
        key: "getStartTime",
        value: function getStartTime(contestUser) {
            contestUser = contestUser || this.getUser(USER.id);
            if (!this.isVirtual() || !contestUser) {
                return this.startTime;
            }
            return parseInt(contestUser.timeRegistered) || this.startTime;
        }
    }, {
        key: "getEndTime",
        value: function getEndTime(contestUser) {
            contestUser = contestUser || this.getUser(USER.id);
            if (!this.isVirtual() || !contestUser) {
                return this.endTime;
            }
            return parseInt(contestUser.timeRegistered + this.endTime - this.startTime) || this.endTime;
        }
    }, {
        key: "getName",
        value: function getName() {
            if (this.isVirtual()) {
                return "Virtual " + this.getBaseContest().longName;
            } else {
                return this.longName;
            }
        }
    }, {
        key: "recalculateUsers",
        value: function recalculateUsers() {
            var _this5 = this;

            if (this.recalculatingUserInProgress) {
                return;
            }
            this.recalculatingUserInProgress = true;
            setTimeout(function () {
                var users = _this5.getBaseContest().getUsers();
                if ((_this5.isVirtual() || _this5.virtualContestId) && _this5.getVirtualContest()) {
                    //let user = this.getVirtualContest().getUser(USER.id);
                    //if (user) {
                    //    users.push(user);
                    //}
                    users = [].concat(toConsumableArray(users), toConsumableArray(_this5.getVirtualContest().getUsers()));
                }

                _this5.constructor.calculateRanks(users);

                _this5.dispatch("rankingsChange");
                _this5.recalculatingUserInProgress = false;
            }, 500);
        }
    }, {
        key: "getChat",
        value: function getChat() {
            return GroupChatStore.get(this.chatId);
        }
    }, {
        key: "getContestTasks",
        value: function getContestTasks() {
            var contestTasks = Array.from(this.contestTasks.values());
            contestTasks.sort(function (a, b) {
                if (a.contestIndex === b.contestIndex) {
                    return a.id - b.id;
                }
                if (a.contestIndex === 0) {
                    a.contestIndex = Infinity;
                }
                if (b.contestIndex === 0) {
                    b.contestIndex = Infinity;
                }
                return a.contestIndex - b.contestIndex;
            });
            return contestTasks;
        }
    }, {
        key: "getAnalysisArticle",
        value: function getAnalysisArticle() {
            return ArticleStore.getTranslation(this.analysisArticleId);
        }
    }, {
        key: "getDescriptionArticle",
        value: function getDescriptionArticle() {
            if (!this.descriptionArticleId) {
                return null;
            }
            return ArticleStore.get(this.descriptionArticleId);
        }
    }, {
        key: "getMatchingContestTask",
        value: function getMatchingContestTask(contestTask) {
            if (contestTask.contestId === this.id) {
                return contestTask;
            }
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getContestTasks()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var myContestTask = _step2.value;

                    if (myContestTask.evalTaskId === contestTask.evalTaskId) {
                        return myContestTask;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return null;
        }
    }, {
        key: "hasPenalty",
        value: function hasPenalty() {
            return this.getScoring().hasPenalty;
        }
    }, {
        key: "hasDynamicPoints",
        value: function hasDynamicPoints() {
            return this.getScoring().hasDynamicPoints;
        }
    }, {
        key: "hasStarted",
        value: function hasStarted() {
            return !this.getStartTime() || ServerTime.now().unix() > this.getStartTime();
        }
    }, {
        key: "hasFinished",
        value: function hasFinished() {
            return this.getEndTime() && ServerTime.now().unix() > this.getEndTime();
        }
    }, {
        key: "isRunning",
        value: function isRunning() {
            return this.hasStarted() && !this.hasFinished();
        }
    }, {
        key: "isInfinite",
        value: function isInfinite() {
            return !this.getEndTime();
        }
    }, {
        key: "canShowScoreboard",
        value: function canShowScoreboard() {
            return this.liveResults || this.hasFinished();
        }
    }, {
        key: "canShowPublicSources",
        value: function canShowPublicSources() {
            return this.publicSources && (this.hasFinished() || this.isInfinite());
        }
    }, {
        key: "getFormattedTime",
        value: function getFormattedTime(time) {
            var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "dddd, MMMM Do, H:mm";

            var timeFormat = time.format(format);
            var utcTimeFormat = void 0;
            if (time.getDate() === time.utc().getDate()) {
                utcTimeFormat = time.utc().format("H:mm");
            } else {
                utcTimeFormat = time.utc().format(format);
            }

            return timeFormat + " local time (" + utcTimeFormat + " UTC)";
        }
    }, {
        key: "getFormattedStartTime",
        value: function getFormattedStartTime() {
            var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "dddd, MMMM Do, H:mm:ss";

            var startTime = StemDate.unix(this.getStartTime());
            return this.getFormattedTime(startTime, format);
        }
    }, {
        key: "getFormattedEndTime",
        value: function getFormattedEndTime() {
            var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "dddd, MMMM Do, H:mm:ss";

            var endTime = StemDate.unix(this.getEndTime());
            return this.getFormattedTime(endTime, format);
        }
    }, {
        key: "getFormattedDuration",
        value: function getFormattedDuration() {
            var startTime = StemDate(this.getStartTime());
            var duration = StemDate(this.getEndTime()).diff(startTime);
            var durationFormat = Formatter.duration(duration, {
                days: true,
                hours: true,
                minutes: true,
                separator: ", ",
                lastSeparator: " and "
            });
            return durationFormat;
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.longName;
        }
    }, {
        key: "getCountries",
        value: function getCountries() {
            var countryIds = new Set();
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.getUsers()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var contestUser = _step3.value;

                    var user = contestUser.getPublicUser();
                    if (user && user.countryId && !countryIds.has(user.countryId)) {
                        countryIds.add(user.countryId);
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return CountryStore.getCountriesFromIds(countryIds);
        }
    }, {
        key: "getStatistics",
        value: function getStatistics() {
            var fields = ["numUsersOnline", "numSubmissions", "numExampleRuns", "numCompiles", "numCustomRuns"];
            var stats = {};
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = fields[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var field = _step4.value;

                    if (this.hasOwnProperty(field)) {
                        stats[field] = this[field].toString();
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return stats;
        }
    }, {
        key: "getNextTaskTimestamp",
        value: function getNextTaskTimestamp() {
            if (!this.nextBroadcastTask) {
                return null;
            }
            return StemDate(this.nextBroadcastTask).unix();
        }
    }], [{
        key: "calculateRanks",
        value: function calculateRanks(users) {
            for (var i = 0; i < users.length; i += 1) {
                users[i].recalculateTotalScore();
            }

            users.sort(ContestUser.compareScoreboard);

            //Recalculate ranks
            for (var _i = 0; _i < users.length; _i += 1) {
                // TODO: In a contest with no penalty system, contest users have penalty equal to 0, and virtual
                // contest users don't have the field, so that is why the checking of penalty equality is made like this.
                if (_i > 0 && users[_i].totalScore === users[_i - 1].totalScore && (users[_i].penalty || 0) === (users[_i - 1].penalty || 0)) {
                    users[_i].rank = users[_i - 1].rank;
                } else {
                    users[_i].rank = _i + 1;
                }
            }
        }
    }]);
    return Contest;
}(StoreObject), _class$55.scoreboardType = {
    TASK_NAME: 0,
    TASK_LETTER: 1,
    TOTAL_SCORE_ONLY: 2
}, _class$55.ModeratedAction = {
    VIEW: "view",
    EDIT_TASKS: "edit-tasks",
    EDIT_SETTINGS: "edit-settings",
    ANSWER_QUESTIONS: "answer-question",
    BROADCAST_ANNOUNCEMENTS: "broadcast-announcement"
}, _class$55.VerboseModeratedAction = {
    VIEW: "View",
    EDIT_TASKS: "Edit tasks",
    EDIT_SETTINGS: "Edit settings",
    ANSWER_QUESTIONS: "Answer questions",
    BROADCAST_ANNOUNCEMENTS: "Broadcast announcements"
}, _temp$12);

var ContestStore = new GenericObjectStore("contest", Contest);

var ContestEvent = function (_StoreObject2) {
    inherits(ContestEvent, _StoreObject2);

    function ContestEvent() {
        classCallCheck(this, ContestEvent);
        return possibleConstructorReturn(this, (ContestEvent.__proto__ || Object.getPrototypeOf(ContestEvent)).apply(this, arguments));
    }

    return ContestEvent;
}(StoreObject);

var ContestEventStore = new GenericObjectStore("contestevent", ContestEvent, { dependencies: ["contest", "contestuser"] });

var WorkspaceFile = function (_VirtualStoreObjectMi) {
    inherits(WorkspaceFile, _VirtualStoreObjectMi);

    function WorkspaceFile() {
        classCallCheck(this, WorkspaceFile);
        return possibleConstructorReturn(this, (WorkspaceFile.__proto__ || Object.getPrototypeOf(WorkspaceFile)).apply(this, arguments));
    }

    createClass(WorkspaceFile, [{
        key: "getWorkspace",
        value: function getWorkspace() {
            return WorkspaceStore.get(this.workspaceId);
        }
    }, {
        key: "getName",
        value: function getName() {
            return this.name;
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.getName();
        }
    }, {
        key: "isSaved",
        value: function isSaved() {
            return !this.isUnsaved;
        }
    }, {
        key: "getBrowserStorageMaps",
        value: function getBrowserStorageMaps() {
            return this.getWorkspace().getBrowserStorageMaps();
        }
    }, {
        key: "saveBrowserVersion",
        value: function saveBrowserVersion() {
            var savedLocally = false;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getBrowserStorageMaps()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var storage = _step.value;

                    savedLocally = savedLocally || storage.set(this.getName(), {
                        // TODO: this should include the current server version
                        serverTime: ServerTime.now().toUnix(),
                        localTime: StemDate.now().toUnix(),
                        value: this.content
                    });
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return savedLocally;
        }
    }, {
        key: "getBrowserVersion",
        value: function getBrowserVersion() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getBrowserStorageMaps()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var storage = _step2.value;

                    var version = storage.get(this.getName());
                    if (version) {
                        return version;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return null;
        }
    }, {
        key: "deleteBrowserVersion",
        value: function deleteBrowserVersion() {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.getBrowserStorageMaps()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var storage = _step3.value;

                    storage.delete(this.getName());
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }, {
        key: "isSavedInBrowser",
        value: function isSavedInBrowser() {
            var browserVersion = this.getBrowserVersion();
            return browserVersion && browserVersion.value == this.getValue();
        }
    }, {
        key: "setValue",
        value: function setValue(newValue) {
            this.isUnsaved = true;
            this.content = newValue;
            this.saveBrowserVersion();
            this.dispatch("unsaved", {});
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.content;
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.sessionId == this.getWorkspace().sessionId) {
                this.updateFromCurrentSession(event);
            } else {
                this.updateFromDifferentSession(event);
            }
        }
    }, {
        key: "updateFromCurrentSession",
        value: function updateFromCurrentSession(event) {
            //This gets called when the server confirms our events, don't need to do anything
        }
    }, {
        key: "updateFromDifferentSession",
        value: function updateFromDifferentSession(event) {
            console.log("Update from another session: ", event);
            get(WorkspaceFile.prototype.__proto__ || Object.getPrototypeOf(WorkspaceFile.prototype), "applyEvent", this).call(this, event);
            this.dispatch("updateExternal", event);
        }
    }, {
        key: "updateId",
        value: function updateId(newId) {
            if (this.id == newId) {
                return;
            }
            var oldId = this.id;
            get(WorkspaceFile.prototype.__proto__ || Object.getPrototypeOf(WorkspaceFile.prototype), "updateId", this).call(this, newId);
            var workspace = this.getWorkspace();
            workspace.files.delete(oldId);
            workspace.files.set(this.id, this);
        }
    }, {
        key: "save",
        value: function save() {
            var _this2 = this;

            //TODO: should this method be implemented here?
            if (!this.isUnsaved) {
                return;
            }

            if (!USER.isAuthenticated) {
                //TODO: save to local storage instead
                return;
            }

            var request = this.getWorkspace().getBaseRequest();

            request.fileName = this.getName();
            request.fileContent = this.getValue();

            if (this.hasTemporaryId()) {
                request.virtualId = this.id;
            } else {
                request.fileId = this.id;
            }

            this.isSaving = true;
            this.dispatch("saving", {});

            var timeSaveSent = StemDate.now();

            Ajax.postJSON("/workspace/save_workspace_file/", request).then(function (data) {
                _this2.isUnsaved = false;
                _this2.dispatch("saved", Object.assign({
                    timeSaveSent: timeSaveSent
                }, data));

                if (timeSaveSent >= _this2.getBrowserVersion().localTime) {
                    _this2.deleteBrowserVersion();
                }
                if (_this2.id != data.id) {
                    _this2.updateId(data.id);
                }
                _this2.serverLastSaved = data.serverLastSaved;
                _this2.isSaving = false;
            }, function (error) {
                //TODO: in case we have modification between the time we sent this req and now, take this into account
                _this2.isSaving = false;
            });
        }
    }]);
    return WorkspaceFile;
}(VirtualStoreObjectMixin(StoreObject));

var WorkspaceObject = function (_StoreObject) {
    inherits(WorkspaceObject, _StoreObject);

    function WorkspaceObject(obj) {
        classCallCheck(this, WorkspaceObject);

        var _this3 = possibleConstructorReturn(this, (WorkspaceObject.__proto__ || Object.getPrototypeOf(WorkspaceObject)).call(this, obj));

        _this3.files = new Map();
        setInterval(function () {
            _this3.saveAllFiles();
        }, 20000 + 12000 * Math.random());
        return _this3;
    }

    createClass(WorkspaceObject, [{
        key: "getStorageName",
        value: function getStorageName() {
            return "WorkspaceStoredFiles-" + this.id;
        }
    }, {
        key: "getSessionStorageMap",
        value: function getSessionStorageMap() {
            return new SessionStorageMap(this.getStorageName());
        }
    }, {
        key: "getLocalStorageMap",
        value: function getLocalStorageMap() {
            return new LocalStorageMap(this.getStorageName());
        }
    }, {
        key: "getBrowserStorageMaps",
        value: function getBrowserStorageMaps() {
            return [this.getSessionStorageMap(), this.getLocalStorageMap()];
        }
    }, {
        key: "getBaseRequest",
        value: function getBaseRequest() {
            return {
                workspaceId: this.getNormalizedId(),
                sessionId: this.sessionId
            };
        }
    }, {
        key: "getNormalizedId",
        value: function getNormalizedId() {
            var workspaceId = this.id + "";
            if (workspaceId.startsWith("temp-")) {
                // Remove "temp-"
                workspaceId = workspaceId.substr(5);
            }
            return parseInt(workspaceId);
        }
    }, {
        key: "getLastUpdate",
        value: function getLastUpdate() {
            var lastUpdate = parseFloat(this.lastModified);
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.files.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var file = _step4.value;

                    lastUpdate = Math.max(lastUpdate, parseFloat(file.serverLastSaved));
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return lastUpdate;
        }
    }, {
        key: "addFile",
        value: function addFile(workspaceFile, createEvent) {
            this.files.set(workspaceFile.id, workspaceFile);
            this.dispatch("newFile", workspaceFile);
        }
    }, {
        key: "removeFile",
        value: function removeFile(workspaceFile, deleteEvent) {
            if (this.files.has(workspaceFile.id)) {
                this.files.delete(workspaceFile.id);
                this.dispatch("deletedFile", workspaceFile);
            }
        }
    }, {
        key: "getOrCreateFile",
        value: function getOrCreateFile(fileName, defaultContent) {
            var workspaceFile = this.getFileByName(fileName);
            if (workspaceFile) {
                return workspaceFile;
            }
            return this.createFile(fileName, defaultContent || "");
        }
    }, {
        key: "getFiles",
        value: function getFiles() {
            return Array.from(this.files.values());
        }

        // TODO: if you ever just need a getFileForLanguage, just implement it here

    }, {
        key: "getOrCreateFileForLanguage",
        value: function getOrCreateFileForLanguage(programmingLanguage, defaultCode) {
            // TODO: this needs to be fixed to support languages with the same extension (py2 vs py3)
            var fileName = "Main" + programmingLanguage.id + "." + programmingLanguage.extension;
            return this.getOrCreateFile(fileName, defaultCode || programmingLanguage.getDefaultSource());
        }
    }, {
        key: "saveAllFiles",
        value: function saveAllFiles() {
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.files.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var workspaceFile = _step5.value;

                    workspaceFile.save();
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }
        }
    }, {
        key: "streamName",
        value: function streamName() {
            return "workspace-" + this.userId + "-" + this.getNormalizedId();
        }
    }, {
        key: "getFileByName",
        value: function getFileByName(fileName) {
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.files.values()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var workspaceFile = _step6.value;

                    if (workspaceFile.name === fileName) {
                        return workspaceFile;
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            return null;
        }
    }, {
        key: "renameFile",
        value: function renameFile(fileName, newFileName) {
            throw Exception("Implement me!");
        }
    }, {
        key: "createFile",
        value: function createFile(fileName, fileContent) {
            if (this.getFileByName(fileName)) {
                console.error("Trying to create a file that exists already!");
                return;
            }
            // create a virtual file
            return WorkspaceFileStore.createVirtualFile(fileName, fileContent, this);
        }
    }]);
    return WorkspaceObject;
}(StoreObject);

var WorkspaceStoreClass = function (_GenericObjectStore) {
    inherits(WorkspaceStoreClass, _GenericObjectStore);

    function WorkspaceStoreClass() {
        classCallCheck(this, WorkspaceStoreClass);
        return possibleConstructorReturn(this, (WorkspaceStoreClass.__proto__ || Object.getPrototypeOf(WorkspaceStoreClass)).call(this, "workspace", WorkspaceObject));
    }

    createClass(WorkspaceStoreClass, [{
        key: "get",
        value: function get$$1(id) {
            return this.objects.get(id);
        }
    }, {
        key: "getUserWorkspaces",
        value: function getUserWorkspaces() {
            var userId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : USER.id;

            var workspaces = [];
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.all()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var workspace = _step7.value;

                    if (workspace.userId === userId && workspace.systemCreated === false) {
                        workspaces.push(workspace);
                    }
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            return workspaces;
        }
    }, {
        key: "createVirtualWorkspace",
        value: function createVirtualWorkspace() {
            //let virtualId = WorkspaceStore.generateVirtualId() + "-" + Math.random();
            var virtualId = Math.random().toString().substr(2);
            var virtualWorkspace = {
                id: "temp-" + virtualId,
                userId: 0,
                files: []
            };
            return this.fakeCreate(virtualWorkspace, "virtualWorkspace");
        }
    }]);
    return WorkspaceStoreClass;
}(GenericObjectStore);

var WorkspaceStore = new WorkspaceStoreClass();

var WorkspaceFileStoreClass = function (_VirtualStoreMixin) {
    inherits(WorkspaceFileStoreClass, _VirtualStoreMixin);

    function WorkspaceFileStoreClass() {
        classCallCheck(this, WorkspaceFileStoreClass);
        return possibleConstructorReturn(this, (WorkspaceFileStoreClass.__proto__ || Object.getPrototypeOf(WorkspaceFileStoreClass)).call(this, "workspacefile", WorkspaceFile, { dependencies: ["workspace"] }));
    }

    createClass(WorkspaceFileStoreClass, [{
        key: "createVirtualFile",
        value: function createVirtualFile(fileName, fileContent, workspace) {
            //let virtualId = WorkspaceFileStore.generateVirtualId() + "-" + Math.random();
            var virtualId = Math.random().toString().substr(2);
            var virtualWorkspaceFile = {
                id: "temp-" + virtualId,
                name: fileName,
                content: fileContent,
                workspaceId: workspace.id,
                systemCreated: false,
                lastModified: StemDate.now() / 1000
            };
            return this.fakeCreate(virtualWorkspaceFile, "virtualWorkspaceFile");
        }
    }, {
        key: "getVirtualObject",
        value: function getVirtualObject(event) {
            return this.objects.get("temp-" + event.virtualId) || WorkspaceStore.get(event.data.workspaceId).getFileByName(event.data.name);
        }
    }]);
    return WorkspaceFileStoreClass;
}(VirtualStoreMixin(GenericObjectStore));

var WorkspaceFileStore = new WorkspaceFileStoreClass();

WorkspaceFileStore.addCreateListener(function (workspaceFile, createEvent) {
    workspaceFile.getWorkspace().addFile(workspaceFile, createEvent);
});
WorkspaceFileStore.addDeleteListener(function (workspaceFile, deleteEvent) {
    workspaceFile.getWorkspace().removeFile(workspaceFile, deleteEvent);
});

var EvalTaskUserSummary = function (_StoreObject) {
    inherits(EvalTaskUserSummary, _StoreObject);

    function EvalTaskUserSummary(obj) {
        classCallCheck(this, EvalTaskUserSummary);

        var _this = possibleConstructorReturn(this, (EvalTaskUserSummary.__proto__ || Object.getPrototypeOf(EvalTaskUserSummary)).call(this, obj));

        var user = _this.getUser();
        if (user) {
            user.taskSummaries.set(_this.evalTaskId, _this);
        }
        return _this;
    }

    createClass(EvalTaskUserSummary, [{
        key: "getEvalTask",
        value: function getEvalTask() {
            return EvalTaskStore.get(this.evalTaskId);
        }
    }, {
        key: "getUser",
        value: function getUser() {
            return UserStore.get(this.userId);
        }
    }, {
        key: "getWorkspace",
        value: function getWorkspace() {
            return WorkspaceStore.get(this.workspaceId);
        }
    }, {
        key: "getUserAndEvalTaskKey",
        value: function getUserAndEvalTaskKey() {
            return String(this.evalTaskId) + "-" + String(this.userId);
        }
    }]);
    return EvalTaskUserSummary;
}(StoreObject);

var EvalTaskUserSummaryStoreClass = function (_GenericObjectStore) {
    inherits(EvalTaskUserSummaryStoreClass, _GenericObjectStore);

    function EvalTaskUserSummaryStoreClass() {
        classCallCheck(this, EvalTaskUserSummaryStoreClass);

        var _this2 = possibleConstructorReturn(this, (EvalTaskUserSummaryStoreClass.__proto__ || Object.getPrototypeOf(EvalTaskUserSummaryStoreClass)).call(this, "evaltaskusersummary", EvalTaskUserSummary, { dependencies: ["user", "evaltask", "contesttask"] }));

        _this2.fetchedEvalTasks = new Set();
        _this2.userAndEvalTaskMap = new Map();
        _this2.addCreateListener(function (userSummary) {
            _this2.userAndEvalTaskMap.set(userSummary.getUserAndEvalTaskKey(), userSummary);
        });
        return _this2;
    }

    createClass(EvalTaskUserSummaryStoreClass, [{
        key: "fetchEvalTask",
        value: function fetchEvalTask(evalTaskId) {
            var _this3 = this;

            var successCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NOOP_FUNCTION;
            var errorCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOOP_FUNCTION;

            if (this.fetchedEvalTasks.has(evalTaskId)) {
                successCallback(this.getByEvalTaskId(evalTaskId));
                return;
            }
            Ajax.getJSON("/eval/fetch_task_summaries/", {
                evalTaskId: evalTaskId
            }).then(function (data) {
                _this3.fetchedEvalTasks.add(evalTaskId);
                successCallback(data);
            }, errorCallback);
        }
    }, {
        key: "getByEvalTaskId",
        value: function getByEvalTaskId(evalTaskId) {
            var answer = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var summary = _step.value;

                    if (summary.evalTaskId === evalTaskId) {
                        answer.push(summary);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return answer;
        }
    }, {
        key: "getMapKey",
        value: function getMapKey(evalTaskId, userId) {
            return String(evalTaskId) + "-" + String(userId);
        }
    }, {
        key: "getByEvalTaskAndUserId",
        value: function getByEvalTaskAndUserId(evalTaskId, userId) {
            return this.userAndEvalTaskMap.get(this.getMapKey(evalTaskId, userId)) || null;
        }
    }]);
    return EvalTaskUserSummaryStoreClass;
}(GenericObjectStore);

var EvalTaskUserSummaryStore = new EvalTaskUserSummaryStoreClass();

var EvalTask = function (_StoreObject) {
    inherits(EvalTask, _StoreObject);

    function EvalTask() {
        classCallCheck(this, EvalTask);
        return possibleConstructorReturn(this, (EvalTask.__proto__ || Object.getPrototypeOf(EvalTask)).apply(this, arguments));
    }

    createClass(EvalTask, [{
        key: "toString",
        value: function toString() {
            return this.longName;
        }
    }, {
        key: "canBeEditedByUser",
        value: function canBeEditedByUser() {
            var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : USER;

            return user.isSuperUser || this.ownerId === user.id;
        }
    }, {
        key: "getStatementArticle",
        value: function getStatementArticle() {
            return ArticleStore.get(this.statementArticleId);
        }
    }, {
        key: "getTimeLimit",
        value: function getTimeLimit() {
            var languageId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            var programmingLanguage = ProgrammingLanguage.get(languageId);
            var extraTime = programmingLanguage.extraTime || 0;
            var timeRatio = programmingLanguage.timeRatio || 1.0;
            var ownLimits = this.programmingLanguageLimits[languageId];
            if (ownLimits) {
                extraTime = ownLimits.extraTime || extraTime;
                timeRatio = ownLimits.timeRatio || timeRatio;
            }
            return this.timeLimit * timeRatio + extraTime;
        }
    }, {
        key: "getMemoryLimit",
        value: function getMemoryLimit() {
            var languageId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            var programmingLanguage = ProgrammingLanguage.get(languageId);
            var extraMemory = programmingLanguage.extraMemory || 0;
            var ownLimits = this.programmingLanguageLimits[languageId];
            if (ownLimits) {
                extraMemory = ownLimits.extraMemory || extraMemory;
            }
            return this.memoryLimit + extraMemory;
        }
    }, {
        key: "getSolutionArticle",
        value: function getSolutionArticle() {
            return ArticleStore.get(this.solutionArticleId);
        }
    }, {
        key: "getHiddenSolutionArticle",
        value: function getHiddenSolutionArticle() {
            return ArticleStore.get(this.hiddenSolutionArticleId);
        }
    }, {
        key: "getWorkspace",
        value: function getWorkspace() {
            var userId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : USER.id;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = EvalTaskUserSummaryStore.getByEvalTaskId(this.id)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var evalTaskUserSummary = _step.value;

                    if (evalTaskUserSummary.userId === userId) {
                        return evalTaskUserSummary.getWorkspace();
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "getType",
        value: function getType() {
            return this.type;
        }
    }, {
        key: "isInteractive",
        value: function isInteractive() {
            return this.getType() === 1;
        }
    }, {
        key: "getDefaultContest",
        value: function getDefaultContest() {
            return ContestStore.get(this.defaultContestId);
        }
    }, {
        key: "getTemplate",
        value: function getTemplate(language) {
            if (this.enforcedTemplates && this.enforcedTemplates[language.id]) {
                var template = "";
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = this.enforcedTemplates[language.id][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var block = _step2.value;

                        template += block.lines.join("\n") + "\n";
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                return template;
            }
            return null;
        }
    }, {
        key: "getAvailableLanguages",
        value: function getAvailableLanguages() {
            if (!this.hasEnforcedTemplates()) {
                return ProgrammingLanguage.all();
            }
            var languages = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = ProgrammingLanguage.all()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var language = _step3.value;

                    if (this.enforcedTemplates[language.id] && this.enforcedTemplates[language.id].length > 0) {
                        languages.push(language);
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return languages;
        }
    }, {
        key: "hasEnforcedTemplates",
        value: function hasEnforcedTemplates() {
            return !!this.enforcedTemplates;
        }
    }]);
    return EvalTask;
}(StoreObject);

var EvalTaskStoreClass = function (_AjaxFetchMixin) {
    inherits(EvalTaskStoreClass, _AjaxFetchMixin);

    function EvalTaskStoreClass() {
        classCallCheck(this, EvalTaskStoreClass);
        return possibleConstructorReturn(this, (EvalTaskStoreClass.__proto__ || Object.getPrototypeOf(EvalTaskStoreClass)).call(this, "evaltask", EvalTask, {
            dependencies: ["article"],
            maxFetchObjectCount: 32,
            fetchURL: "/eval/fetch_eval_task/"
        }));
    }

    createClass(EvalTaskStoreClass, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            if (this.get(event.objectId)) {
                get(EvalTaskStoreClass.prototype.__proto__ || Object.getPrototypeOf(EvalTaskStoreClass.prototype), "applyEvent", this).call(this, event);
            }
        }
    }]);
    return EvalTaskStoreClass;
}(AjaxFetchMixin(GenericObjectStore));

var EvalTaskStore = new EvalTaskStoreClass();

var Forum = function (_StoreObject) {
    inherits(Forum, _StoreObject);

    function Forum() {
        classCallCheck(this, Forum);

        var _this = possibleConstructorReturn(this, (Forum.__proto__ || Object.getPrototypeOf(Forum)).apply(this, arguments));

        _this.forumThreads = new Map();
        // TODO: not appropriate to register to streams here
        _this.registerToStream();
        ForumThreadStore.addDeleteListener(function (forumThread) {
            if (forumThread.parentId === _this.id && _this.forumThreads.has(forumThread.id)) {
                _this.deleteForumThread(forumThread);
            }
        });
        return _this;
    }

    createClass(Forum, [{
        key: "getStreamName",
        value: function getStreamName() {
            return "forum-" + this.id;
        }
    }, {
        key: "getForumThreads",
        value: function getForumThreads() {
            var forumThreads = Array.from(this.forumThreads.values());
            // Filter out hidden forum threads
            forumThreads = forumThreads.filter(function (forumThread) {
                return forumThread.isVisible();
            });
            forumThreads.sort(function (a, b) {
                return b.id - a.id;
            });
            return forumThreads;
        }
    }, {
        key: "addForumThread",
        value: function addForumThread(forumThread, event) {
            this.forumThreads.set(forumThread.id, forumThread);
            this.dispatch("newForumThread", event);
        }
    }, {
        key: "deleteForumThread",
        value: function deleteForumThread(forumThread) {
            this.forumThreads.delete(forumThread.id);
            this.dispatch("deleteForumThread", forumThread);
        }
    }]);
    return Forum;
}(StoreObject);

var ForumStore = new GenericObjectStore("forum", Forum);

var ForumThread = function (_StoreObject2) {
    inherits(ForumThread, _StoreObject2);

    function ForumThread(obj) {
        classCallCheck(this, ForumThread);

        var _this2 = possibleConstructorReturn(this, (ForumThread.__proto__ || Object.getPrototypeOf(ForumThread)).call(this, obj));

        var parent = _this2.getParent();
        parent && parent.addForumThread(_this2);
        return _this2;
    }

    createClass(ForumThread, [{
        key: "getAuthor",
        value: function getAuthor() {
            return PublicUserStore.get(this.authorId);
        }
    }, {
        key: "isPinned",
        value: function isPinned() {
            return this.pinnedIndex != null;
        }
    }, {
        key: "getPinIndex",
        value: function getPinIndex() {
            return this.pinnedIndex;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return this.title;
        }
    }, {
        key: "getContentMessage",
        value: function getContentMessage() {
            return MessageInstanceStore.get(this.contentMessageId);
        }
    }, {
        key: "getVotesBalance",
        value: function getVotesBalance() {
            var message = this.getContentMessage();
            if (message) {
                return message.getVotesBalance();
            }
            return this.votesBalance;
        }
    }, {
        key: "getParent",
        value: function getParent() {
            return ForumStore.get(this.parentId);
        }
    }, {
        key: "getMessageThread",
        value: function getMessageThread() {
            return MessageThreadStore.get(this.messageThreadId);
        }
    }, {
        key: "getTimeAdded",
        value: function getTimeAdded() {
            // TODO: maybe return formatted time
            return this.timeAdded;
        }
    }, {
        key: "getLastActive",
        value: function getLastActive() {
            return this.lastActive;
        }
    }, {
        key: "getNumReplies",
        value: function getNumReplies() {
            return this.getNumMessages() - 1;
        }
    }, {
        key: "deleteThread",
        value: function deleteThread() {
            var onSuccess = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NOOP_FUNCTION;
            var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NOOP_FUNCTION;

            Ajax.postJSON("/forum/edit_forum_thread/", {
                forumThreadId: this.id,
                hidden: true
            }).then(onSuccess, onError);
        }
    }, {
        key: "getNumMessages",
        value: function getNumMessages() {
            return this.numMessages;
        }
    }, {
        key: "isVisible",
        value: function isVisible() {
            return !this.hidden;
        }
    }, {
        key: "isLoaded",
        value: function isLoaded() {
            // TODO: this needs to be fixed to support dynamic loading
            // console.warn(this.getNumReplies(), this.getMessageThread().getNumMessages());
            return this.getMessageThread() != null && this.getNumReplies() === this.getMessageThread().getNumMessages() - 1;
        }
    }]);
    return ForumThread;
}(StoreObject);

var ForumThreadStore = new GenericObjectStore("forumthread", ForumThread, {
    dependencies: ["forum", "messageinstance"]
});

var Lesson = function (_StoreObject) {
    inherits(Lesson, _StoreObject);

    function Lesson() {
        classCallCheck(this, Lesson);
        return possibleConstructorReturn(this, (Lesson.__proto__ || Object.getPrototypeOf(Lesson)).apply(this, arguments));
    }

    createClass(Lesson, [{
        key: "getArticle",
        value: function getArticle() {
            var baseArticle = ArticleStore.get(this.articleId);
            return baseArticle.getTranslation();
        }
    }]);
    return Lesson;
}(StoreObject);

var LessonStore = new GenericObjectStore("lesson", Lesson, { dependencies: ["article", "lessonSection"] });

var LessonSection = function (_StoreObject2) {
    inherits(LessonSection, _StoreObject2);

    function LessonSection() {
        classCallCheck(this, LessonSection);
        return possibleConstructorReturn(this, (LessonSection.__proto__ || Object.getPrototypeOf(LessonSection)).apply(this, arguments));
    }

    createClass(LessonSection, [{
        key: "getLessons",
        value: function getLessons() {
            var _this3 = this;

            return LessonStore.all().filter(function (lesson) {
                return lesson.sectionId === _this3.id;
            });
        }
    }]);
    return LessonSection;
}(StoreObject);

var LessonSectionStore = new GenericObjectStore("lessonSection", LessonSection);

var _class$56, _descriptor$23, _descriptor2$20, _descriptor3$19, _descriptor4$17, _descriptor5$15, _descriptor6$12, _descriptor7$10;

function _initDefineProp$24(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$24(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var NavRecentActivityStyle = (_class$56 = function (_StyleSheet) {
    inherits(NavRecentActivityStyle, _StyleSheet);

    function NavRecentActivityStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, NavRecentActivityStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NavRecentActivityStyle.__proto__ || Object.getPrototypeOf(NavRecentActivityStyle)).call.apply(_ref, [this].concat(args))), _this), _this.sectionHeight = "20px", _this.fontFamily = "lato, open sans", _this.defaultFontSize = ".9em", _this.pinnedIconFontSize = "1em", _this.titleFontSize = "1.2em", _this.activityFontSize = ".9em", _this.hoverBackgroundColor = "#f8f8f8", _initDefineProp$24(_this, "panel", _descriptor$23, _this), _initDefineProp$24(_this, "pinnedIcon", _descriptor2$20, _this), _initDefineProp$24(_this, "title", _descriptor3$19, _this), _initDefineProp$24(_this, "type", _descriptor4$17, _this), _initDefineProp$24(_this, "bottomSection", _descriptor5$15, _this), _initDefineProp$24(_this, "timeStamp", _descriptor6$12, _this), _initDefineProp$24(_this, "bottomRightSection", _descriptor7$10, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return NavRecentActivityStyle;
}(StyleSheet), _descriptor$23 = _applyDecoratedDescriptor$24(_class$56.prototype, "panel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            border: "1px solid #ddd",
            borderTop: "0px",
            borderLeft: "0",
            borderRight: "0",
            backgroundColor: "#fff",
            fontFamily: this.fontFamily,
            fontSize: this.defaultFontSize,
            display: "block",
            ":hover": {
                backgroundColor: this.hoverBackgroundColor
            }
        };
    }
}), _descriptor2$20 = _applyDecoratedDescriptor$24(_class$56.prototype, "pinnedIcon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            textAlign: "center",
            display: "inline-block",
            float: "left",
            height: "60px",
            paddingTop: "28px",
            paddingRight: "8px",
            fontSize: this.pinnedIconFontSize
        };
    }
}), _descriptor3$19 = _applyDecoratedDescriptor$24(_class$56.prototype, "title", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "12px",
            paddingBottom: "0",
            display: "flex",
            justifyContent: "flex-start",
            alignItems: "center",
            fontSize: this.titleFontSize
        };
    }
}), _descriptor4$17 = _applyDecoratedDescriptor$24(_class$56.prototype, "type", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "block"
        };
    }
}), _descriptor5$15 = _applyDecoratedDescriptor$24(_class$56.prototype, "bottomSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">*": {
                display: "inline-block !important"
            },
            ">:first-child": {
                marginRight: "4px"
            },
            position: "relative",
            marginTop: "8px",
            marginBottom: "8px",
            padding: "0px 14px"
        };
    }
}), _descriptor6$12 = _applyDecoratedDescriptor$24(_class$56.prototype, "timeStamp", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: this.activityFontSize,
            height: this.sectionHeight,
            color: "#aaa !important",
            textStyle: "italic",
            marginRight: "6px"
        };
    }
}), _descriptor7$10 = _applyDecoratedDescriptor$24(_class$56.prototype, "bottomRightSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            float: "right"
        };
    }
}), _class$56);

var _dec$25, _class$57, _dec2$10, _class2$10;

var ActivityEntry = (_dec$25 = registerStyle(NavRecentActivityStyle), _dec$25(_class$57 = function (_UI$Element) {
    inherits(ActivityEntry, _UI$Element);

    function ActivityEntry() {
        classCallCheck(this, ActivityEntry);
        return possibleConstructorReturn(this, (ActivityEntry.__proto__ || Object.getPrototypeOf(ActivityEntry)).apply(this, arguments));
    }

    createClass(ActivityEntry, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.panel);
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return this.options.title;
        }
    }, {
        key: "getPreview",
        value: function getPreview() {
            return this.options.preview;
        }
    }, {
        key: "getAuthorId",
        value: function getAuthorId() {
            return this.options.authorId;
        }
    }, {
        key: "getTimeStamp",
        value: function getTimeStamp() {
            return this.options.timeStamp;
        }
    }, {
        key: "getType",
        value: function getType() {
            return this.options.type;
        }
    }, {
        key: "render",
        value: function render() {
            var author = this.getAuthorId() ? UI.createElement(UserHandle, { userId: this.getAuthorId() }) : null;
            return [UI.createElement(
                "div",
                { className: this.styleSheet.title, ref: "title" },
                this.getTitle()
            ), this.getPreview(), UI.createElement(
                "div",
                { className: this.styleSheet.bottomSection },
                UI.createElement(
                    "span",
                    { className: this.styleSheet.type },
                    this.getType()
                ),
                author,
                UI.createElement(
                    "span",
                    { className: this.styleSheet.bottomRightSection },
                    UI.createElement(TimePassedSpan, { timeStamp: this.getTimeStamp(), className: this.styleSheet.timeStamp })
                )
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var navManagerInstance = NavManager.Global;
            this.title.addClickListener(function () {
                if (navManagerInstance.rightSidePanel && navManagerInstance.rightSidePanel.visible) {
                    navManagerInstance.toggleRightSidePanel();
                }
            });
        }
    }]);
    return ActivityEntry;
}(UI.Element)) || _class$57);
var MiniForumThread = (_dec2$10 = registerStyle(NavRecentActivityStyle), _dec2$10(_class2$10 = function (_ActivityEntry) {
    inherits(MiniForumThread, _ActivityEntry);

    function MiniForumThread() {
        classCallCheck(this, MiniForumThread);
        return possibleConstructorReturn(this, (MiniForumThread.__proto__ || Object.getPrototypeOf(MiniForumThread)).apply(this, arguments));
    }

    createClass(MiniForumThread, [{
        key: "getThread",
        value: function getThread() {
            return this.options.thread;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            var pinned = void 0;
            if (this.getThread().isPinned()) {
                pinned = UI.createElement("span", { className: "fa fa-thumb-tack " + this.styleSheet.pinnedIcon,
                    "aria-hidden": "true", style: { paddingTop: "0", lineHeight: "20px", height: "20px" } });
            }
            return [pinned, UI.createElement(Link, { href: "/forum/" + this.getThread().id + "/" + slugify(this.getThread().title), value: this.getThread().title })];
        }
    }, {
        key: "getAuthorId",
        value: function getAuthorId() {
            return this.getThread().authorId;
        }
    }, {
        key: "getTimeStamp",
        value: function getTimeStamp() {
            return this.getThread().getLastActive();
        }
    }, {
        key: "getType",
        value: function getType() {
            return UI.createElement(Label, { level: Level.SUCCESS, label: "Forum" });
        }
    }]);
    return MiniForumThread;
}(ActivityEntry)) || _class2$10);

var MiniBlogEntry = function (_ActivityEntry2) {
    inherits(MiniBlogEntry, _ActivityEntry2);

    function MiniBlogEntry() {
        classCallCheck(this, MiniBlogEntry);
        return possibleConstructorReturn(this, (MiniBlogEntry.__proto__ || Object.getPrototypeOf(MiniBlogEntry)).apply(this, arguments));
    }

    createClass(MiniBlogEntry, [{
        key: "getEntry",
        value: function getEntry() {
            return this.options.entry;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return UI.createElement(Link, { href: "/blog/" + this.getEntry().urlName + "/", value: this.getEntry().getArticle().name });
        }
    }, {
        key: "getAuthorId",
        value: function getAuthorId() {
            return this.getEntry().getArticle().userCreatedId;
        }
    }, {
        key: "getTimeStamp",
        value: function getTimeStamp() {
            return this.getEntry().lastActive;
        }
    }, {
        key: "getType",
        value: function getType() {
            return UI.createElement(Label, { level: Level.PRIMARY, label: "Blog" });
        }
    }]);
    return MiniBlogEntry;
}(ActivityEntry);

var MiniEvalTask = function (_ActivityEntry3) {
    inherits(MiniEvalTask, _ActivityEntry3);

    function MiniEvalTask() {
        classCallCheck(this, MiniEvalTask);
        return possibleConstructorReturn(this, (MiniEvalTask.__proto__ || Object.getPrototypeOf(MiniEvalTask)).apply(this, arguments));
    }

    createClass(MiniEvalTask, [{
        key: "getTask",
        value: function getTask() {
            return this.options.task;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return UI.createElement(Link, { href: "/contest/" + this.getTask().archiveName + "/task/" + this.getTask().urlName + "/discussion/",
                value: this.getTask().toString() });
        }
    }, {
        key: "getTimeStamp",
        value: function getTimeStamp() {
            return this.getTask().lastActive;
        }
    }, {
        key: "getType",
        value: function getType() {
            return UI.createElement(Label, { level: Level.WARNING, label: "Task" });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(MiniEvalTask.prototype.__proto__ || Object.getPrototypeOf(MiniEvalTask.prototype), "onMount", this).call(this);
            this.title.addClickListener(function () {
                window.taskView = true;
            });
        }
    }]);
    return MiniEvalTask;
}(ActivityEntry);

var MiniLesson = function (_ActivityEntry4) {
    inherits(MiniLesson, _ActivityEntry4);

    function MiniLesson() {
        classCallCheck(this, MiniLesson);
        return possibleConstructorReturn(this, (MiniLesson.__proto__ || Object.getPrototypeOf(MiniLesson)).apply(this, arguments));
    }

    createClass(MiniLesson, [{
        key: "getLesson",
        value: function getLesson() {
            return this.options.lesson;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return UI.createElement(Link, { href: "/lesson/" + this.getLesson().urlName + "/", value: this.getLesson().name });
        }
    }, {
        key: "getTimeStamp",
        value: function getTimeStamp() {
            return this.getLesson().lastActive;
        }
    }, {
        key: "getType",
        value: function getType() {
            return UI.createElement(Label, { level: Level.PRIMARY, label: "Lesson" });
        }
    }]);
    return MiniLesson;
}(ActivityEntry);

var NavRecentActivity = function (_DelayedElement) {
    inherits(NavRecentActivity, _DelayedElement);

    function NavRecentActivity() {
        classCallCheck(this, NavRecentActivity);
        return possibleConstructorReturn(this, (NavRecentActivity.__proto__ || Object.getPrototypeOf(NavRecentActivity)).apply(this, arguments));
    }

    createClass(NavRecentActivity, [{
        key: "getActivityPosts",
        value: function getActivityPosts() {
            var recentForumActivity = ForumThreadStore.all().filter(function (thread) {
                return thread.getLastActive() > 0;
            }).sort(function (thread1, thread2) {
                return -thread1.getLastActive() + thread2.getLastActive();
            }).slice(0, 5).map(function (thread) {
                return { uiElement: UI.createElement(MiniForumThread, { thread: thread }), time: thread.getLastActive() };
            });

            var recentBlogActivity = BlogEntryStore.all().filter(function (entry) {
                return entry.lastActive > 0;
            }).sort(function (entry1, entry2) {
                return -entry1.lastActive + entry2.lastActive;
            }).slice(0, 5).map(function (entry) {
                return { uiElement: UI.createElement(MiniBlogEntry, { entry: entry }), time: entry.lastActive };
            });

            var recentEvalTasksActivity = EvalTaskStore.all().filter(function (task) {
                return task.lastActive > 0;
            }).sort(function (task1, task2) {
                return -task1.lastActive + task2.lastActive;
            }).slice(0, 5).map(function (task) {
                return { uiElement: UI.createElement(MiniEvalTask, { task: task }), time: task.lastActive };
            });

            var recentLessonsActivity = LessonStore.all().filter(function (lesson) {
                return lesson.lastActive > 0;
            }).sort(function (lesson1, lesson2) {
                return -lesson1.lastActive + lesson2.lastActive;
            }).slice(0, 5).map(function (lesson) {
                return { uiElement: UI.createElement(MiniLesson, { lesson: lesson }), time: lesson.lastActive };
            });

            return recentForumActivity.concat(recentBlogActivity).concat(recentEvalTasksActivity).concat(recentLessonsActivity).sort(function (element1, element2) {
                return -element1.time + element2.time;
            }).map(function (element) {
                return element.uiElement;
            });
        }
    }, {
        key: "beforeRedrawNotLoaded",
        value: function beforeRedrawNotLoaded() {
            var _this7 = this;

            Dispatcher.Global.addListener("initNavManagerDone", function () {
                if (NavManager.Global.rightSidePanel.visible) {
                    _this7.setLoaded();
                }
                NavManager.Global.addListener("toggledRightSide", function (visible) {
                    if (visible) {
                        _this7.setLoaded();
                    }
                });
            });
        }
    }, {
        key: "renderLoaded",
        value: function renderLoaded() {
            return this.getActivityPosts();
        }
    }, {
        key: "renderNotLoaded",
        value: function renderNotLoaded() {
            return UI.createElement(ConcentricCirclesLoadingScreen, null);
        }
    }, {
        key: "setLoaded",
        value: function setLoaded() {
            var _this8 = this;

            if (this._loaded) {
                return;
            }

            Ajax.getJSON("/recent_activity/", {}).then(function () {
                return get(NavRecentActivity.prototype.__proto__ || Object.getPrototypeOf(NavRecentActivity.prototype), "setLoaded", _this8).call(_this8);
            }, function () {
                return get(NavRecentActivity.prototype.__proto__ || Object.getPrototypeOf(NavRecentActivity.prototype), "setLoaded", _this8).call(_this8);
            });
        }
    }]);
    return NavRecentActivity;
}(DelayedElement(UI.Element));

var ArticleRenderer = function (_MarkupRenderer) {
    inherits(ArticleRenderer, _MarkupRenderer);

    function ArticleRenderer() {
        classCallCheck(this, ArticleRenderer);
        return possibleConstructorReturn(this, (ArticleRenderer.__proto__ || Object.getPrototypeOf(ArticleRenderer)).apply(this, arguments));
    }

    createClass(ArticleRenderer, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.classMap = options.classMap || this.constructor.markupClassMap;
            get(ArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(ArticleRenderer.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getEditButton",
        value: function getEditButton() {
            if (this.options.showEditButton && this.options.article.canBeEditedByUser()) {
                var url = this.options.editButtonUrl || "/article/" + this.options.article.id + "/edit/";
                return UI.createElement(
                    "div",
                    { className: "text-left" },
                    UI.createElement(
                        "a",
                        { href: url, target: "_blank" },
                        UI.createElement(Button, { label: UI.T("Edit"),
                            style: { "margin": "10px" } })
                    )
                );
            }
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getEditButton(), get(ArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(ArticleRenderer.prototype), "render", this).call(this)];
        }
    }, {
        key: "setArticle",
        value: function setArticle(article) {
            this.updateOptions({ article: article });
        }
    }, {
        key: "getValue",
        value: function getValue() {
            get(ArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(ArticleRenderer.prototype), "setValue", this).call(this, this.getArticleToRender().markup);
            return get(ArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(ArticleRenderer.prototype), "getValue", this).call(this);
        }
    }, {
        key: "getArticleToRender",
        value: function getArticleToRender() {
            return this.options.article.getTranslation();
        }
    }, {
        key: "getArticleDependencies",
        value: function getArticleDependencies() {
            var dependencies = this.options.article.dependency;
            return dependencies && dependencies.split(",");
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var _this2 = this;

            var dependencies = this.getArticleDependencies();
            if (!dependencies) {
                get(ArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(ArticleRenderer.prototype), "redraw", this).call(this);
                return;
            }

            // Not using require directly to fool webpack
            window["require"](dependencies, function () {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                _this2.registerDependencies(args);
                get(ArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(ArticleRenderer.prototype), "redraw", _this2).call(_this2);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            if (this.options.liveLanguage) {
                this.attachListener(Language, "localeChange", function () {
                    return _this3.redraw();
                });
            }
        }
    }]);
    return ArticleRenderer;
}(MarkupRenderer);

var RecursiveArticleRenderer = function (_ArticleRenderer) {
    inherits(RecursiveArticleRenderer, _ArticleRenderer);

    function RecursiveArticleRenderer() {
        classCallCheck(this, RecursiveArticleRenderer);
        return possibleConstructorReturn(this, (RecursiveArticleRenderer.__proto__ || Object.getPrototypeOf(RecursiveArticleRenderer)).apply(this, arguments));
    }

    createClass(RecursiveArticleRenderer, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(RecursiveArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(RecursiveArticleRenderer.prototype), "setOptions", this).call(this, options);
            this.options.articleId = this.options.articleId || this.options.id;
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var _this5 = this;

            if (this.options.article) {
                return get(RecursiveArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(RecursiveArticleRenderer.prototype), "redraw", this).call(this);
            } else {
                ArticleStore.fetch(this.options.articleId, function (article) {
                    return _this5.updateOptions({ article: article });
                });
            }
        }
    }]);
    return RecursiveArticleRenderer;
}(ArticleRenderer);

var ArticleSwitcher = function (_Switcher) {
    inherits(ArticleSwitcher, _Switcher);
    createClass(ArticleSwitcher, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ArticleSwitcher.prototype.__proto__ || Object.getPrototypeOf(ArticleSwitcher.prototype), "getDefaultOptions", this).call(this), {
                fullHeight: true
            });
        }
    }]);

    function ArticleSwitcher() {
        classCallCheck(this, ArticleSwitcher);

        var _this6 = possibleConstructorReturn(this, (ArticleSwitcher.__proto__ || Object.getPrototypeOf(ArticleSwitcher)).apply(this, arguments));

        _this6.articleChildMap = new WeakMap();
        return _this6;
    }

    createClass(ArticleSwitcher, [{
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign({
                lazyRender: true
            }, options);
            get(ArticleSwitcher.prototype.__proto__ || Object.getPrototypeOf(ArticleSwitcher.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getPageForArticle",
        value: function getPageForArticle(article) {
            if (!this.articleChildMap.has(article)) {
                this.articleChildMap.set(article, UI.createElement(ArticleRenderer, { article: article, showEditButton: this.options.showEditButton }));
            }
            return this.articleChildMap.get(article);
        }
    }, {
        key: "setActive",
        value: function setActive(article) {
            if (!(article instanceof Article)) {
                get(ArticleSwitcher.prototype.__proto__ || Object.getPrototypeOf(ArticleSwitcher.prototype), "setActive", this).call(this, article);
                return;
            }
            get(ArticleSwitcher.prototype.__proto__ || Object.getPrototypeOf(ArticleSwitcher.prototype), "setActive", this).call(this, this.getPageForArticle(article));
        }
    }, {
        key: "setActiveArticleId",
        value: function setActiveArticleId(articleId) {
            var _this7 = this;

            ArticleStore.fetch(articleId, function (article) {
                _this7.setActive(article);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(ArticleSwitcher.prototype.__proto__ || Object.getPrototypeOf(ArticleSwitcher.prototype), "onMount", this).call(this);
            if (this.options.initialArticle) {
                this.setActive(this.options.initialArticle);
            }
            if (this.options.initialArticleId) {
                this.setActiveArticleId(this.options.initialArticleId);
            }
        }
    }]);
    return ArticleSwitcher;
}(Switcher);

ArticleRenderer.markupClassMap = new MarkupClassMap(MarkupClassMap.GLOBAL, [["Article", RecursiveArticleRenderer], ["RawSVG", SVG.RawSVG]]);

var ArticleTabArea = function (_TabArea) {
    inherits(ArticleTabArea, _TabArea);

    function ArticleTabArea() {
        classCallCheck(this, ArticleTabArea);
        return possibleConstructorReturn(this, (ArticleTabArea.__proto__ || Object.getPrototypeOf(ArticleTabArea)).apply(this, arguments));
    }

    createClass(ArticleTabArea, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                autoActive: false,
                path: "/"
            };
        }
    }, {
        key: "getArticleUrl",
        value: function getArticleUrl(articleEntry) {
            var url = this.options.path;
            if (!url.endsWith("/")) {
                url += "/";
            }
            return url + articleEntry.url + "/";
        }
    }, {
        key: "onSetActive",
        value: function onSetActive(articleEntry) {
            this.switcherArea.setActiveArticleId(articleEntry.articleId);
            Router.changeURL(this.getArticleUrl(articleEntry));
        }
    }, {
        key: "getInitialPanel",
        value: function getInitialPanel() {
            return UI.createElement(
                "h3",
                null,
                "Welcome to the \"About\" page. Click on any of the above tabs to find more information on the desired topic."
            );
        }
    }, {
        key: "getSwitcher",
        value: function getSwitcher(tabPanels) {
            return UI.createElement(
                ArticleSwitcher,
                { ref: "switcherArea", lazyRender: this.options.lazyRender,
                    style: { margin: "1em" } },
                this.getInitialPanel()
            );
        }
    }, {
        key: "createTabPanel",
        value: function createTabPanel(articleEntry) {
            var tab = UI.createElement(BasicTabTitle, { panel: articleEntry, title: articleEntry.title,
                activeTabDispatcher: this.activeTabDispatcher,
                href: this.getArticleUrl(articleEntry), styleSheet: this.styleSheet });

            return [tab, articleEntry];
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(ArticleTabArea.prototype.__proto__ || Object.getPrototypeOf(ArticleTabArea.prototype), "setOptions", this).call(this, options);
            this.options.children = this.options.children.map(function (x) {
                return Object.assign(new Dispatchable(), x);
            });
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var articleEntry = _step.value;

                    if (articleEntry.url === urlParts[0]) {
                        articleEntry.dispatch("show"); // so that the tab title also known to set itself active
                        return;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);
    return ArticleTabArea;
}(TabArea);

var _class$58, _descriptor$24, _descriptor2$21, _descriptor3$20, _descriptor4$18, _descriptor5$16, _descriptor6$13, _class3$15, _descriptor7$11, _descriptor8$8;

function _initDefineProp$25(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$25(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var color = {
    BLUE: "#20232d",
    HOVER_BLUE: "#364251",
    BLACK: "#181a22",
    HOVER_BLACK: "#323539",
    WHITE: "#eee"
};

var CSAStyle = {
    color: color
};

var BlogStyle = (_class$58 = function (_StyleSheet) {
    inherits(BlogStyle, _StyleSheet);

    function BlogStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, BlogStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BlogStyle.__proto__ || Object.getPrototypeOf(BlogStyle)).call.apply(_ref, [this].concat(args))), _this), _this.titleFontSize = "2em", _initDefineProp$25(_this, "commentsTitle", _descriptor$24, _this), _initDefineProp$25(_this, "bottomSection", _descriptor2$21, _this), _initDefineProp$25(_this, "blogEntryView", _descriptor3$20, _this), _this.title = {
            "font-size": _this.titleFontSize,
            "padding-top": "20px",
            "padding-bottom": "10px",
            "text-decoration": "italic",
            "width": "100%",
            "text-align": "center",
            "word-wrap": "normal",
            "line-height": "60px"
        }, _this.writtenBy = {
            "width": "100%",
            "text-align": "left",
            "padding-top": "20px",
            "font-size": "1em",
            "color": "#666"
        }, _this.article = {
            "text-align": "justify",
            "font-size": "17px"
        }, _this.link = {
            textDecoration: "none",
            textAlign: "center",
            marginTop: "-15pt",
            fontSize: "1.1em"
        }, _this.blogArticleRenderer = {
            overflow: "hidden",
            position: "relative",
            maxHeight: "180px",
            "text-align": "justify",
            "font-size": "17px",
            marginBottom: "25px"
        }, _initDefineProp$25(_this, "whiteOverlay", _descriptor4$18, _this), _initDefineProp$25(_this, "loadMoreButton", _descriptor5$16, _this), _initDefineProp$25(_this, "sendMessageButtonStyle", _descriptor6$13, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return BlogStyle;
}(StyleSheet), _descriptor$24 = _applyDecoratedDescriptor$25(_class$58.prototype, "commentsTitle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "20px",
            color: "#333",
            marginTop: "10px",
            fontSize: "1em",
            textTransform: "uppercase"
        };
    }
}), _descriptor2$21 = _applyDecoratedDescriptor$25(_class$58.prototype, "bottomSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "5px",
            height: "50px",
            width: "100%"
        };
    }
}), _descriptor3$20 = _applyDecoratedDescriptor$25(_class$58.prototype, "blogEntryView", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            "margin": "0 auto",
            "width": "900px",
            "max-width": "100%"
            // "padding-top": "50px",
            // "padding-bottom": "50px",
        };
    }
}), _descriptor4$18 = _applyDecoratedDescriptor$25(_class$58.prototype, "whiteOverlay", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "100px",
            background: "linear-gradient(rgba(255,255,255,0), #fff)",
            position: "absolute",
            marginTop: "-120px",
            pointerEvents: "none",
            width: "92%"
        };
    }
}), _descriptor5$16 = _applyDecoratedDescriptor$25(_class$58.prototype, "loadMoreButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "16px",
            color: "#fff",
            height: "40px",
            marginTop: "10px",
            marginBottom: "20px",
            width: "auto",
            borderRadius: "0px",
            backgroundColor: CSAStyle.color.BLUE,
            border: "0",
            padding: "5px 10px",
            borderColor: CSAStyle.color.BLUE,
            fontSize: "1em",
            transition: ".2s",
            textTransform: "uppercase",
            opacity: "1",
            ":hover": {
                backgroundColor: CSAStyle.color.HOVER_BLUE,
                borderColor: CSAStyle.color.HOVER_BLUE,
                transition: ".2s"
            },
            ":active": {
                backgroundColor: CSAStyle.color.HOVER_BLUE,
                borderColor: CSAStyle.color.HOVER_BLUE,
                transition: ".2s"
            },
            ":focus": {
                backgroundColor: CSAStyle.color.HOVER_BLUE,
                borderColor: CSAStyle.color.HOVER_BLUE,
                transition: ".2s"
            },
            ":active:focus": {
                backgroundColor: CSAStyle.color.HOVER_BLUE,
                borderColor: CSAStyle.color.HOVER_BLUE,
                transition: ".2s"
            }
        };
    }
}), _descriptor6$13 = _applyDecoratedDescriptor$25(_class$58.prototype, "sendMessageButtonStyle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "30px",
            marginTop: "10px",
            marginBottom: "20px",
            width: "auto",
            borderRadius: "0px",
            backgroundColor: CSAStyle.color.BLUE,
            borderColor: "#333",
            fontSize: "13px",
            transition: ".2s",
            ":hover": {
                backgroundColor: CSAStyle.color.HOVER_BLUE,
                borderColor: CSAStyle.color.HOVER_BLUE,
                transition: ".2s"
            },
            ":active": {
                backgroundColor: CSAStyle.color.HOVER_BLUE,
                borderColor: CSAStyle.color.HOVER_BLUE,
                transition: ".2s"
            },
            ":focus": {
                backgroundColor: CSAStyle.color.HOVER_BLUE,
                borderColor: CSAStyle.color.HOVER_BLUE,
                transition: ".2s"
            },
            ":focus:active": {
                backgroundColor: CSAStyle.color.HOVER_BLUE,
                borderColor: CSAStyle.color.HOVER_BLUE,
                transition: ".2s"
            }
        };
    }
}), _class$58);
var BlogArticleRendererStyle = (_class3$15 = function (_StyleSheet2) {
    inherits(BlogArticleRendererStyle, _StyleSheet2);

    function BlogArticleRendererStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, BlogArticleRendererStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = BlogArticleRendererStyle.__proto__ || Object.getPrototypeOf(BlogArticleRendererStyle)).call.apply(_ref2, [this].concat(args))), _this2), _this2.hStyle = {
            "text-align": "center",
            "margin-top": "30px",
            "margin-bottom": "30px",
            "width": "100%"
        }, _initDefineProp$25(_this2, "blogArticleRenderer", _descriptor7$11, _this2), _initDefineProp$25(_this2, "quote", _descriptor8$8, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return BlogArticleRendererStyle;
}(StyleSheet), _descriptor7$11 = _applyDecoratedDescriptor$25(_class3$15.prototype, "blogArticleRenderer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            " h1": this.hStyle,
            " h2": this.hStyle,
            " h3": this.hStyle,
            " h4": this.hStyle,
            " h5": this.hStyle,
            " h6": this.hStyle
        };
    }
}), _descriptor8$8 = _applyDecoratedDescriptor$25(_class3$15.prototype, "quote", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            "font-style": "italic",
            "margin-top": "20px",
            "margin-bottom": "20px",
            "color": "#707070",
            "float": "right",
            "display": "flex",
            "width": "100%"
        };
    }
}), _class3$15);

var _dec$26, _class$59, _dec2$11, _class2$11;

var BlogArticleRenderer = (_dec$26 = registerStyle(BlogArticleRendererStyle), _dec$26(_class$59 = function (_ArticleRenderer) {
    inherits(BlogArticleRenderer, _ArticleRenderer);

    function BlogArticleRenderer() {
        classCallCheck(this, BlogArticleRenderer);
        return possibleConstructorReturn(this, (BlogArticleRenderer.__proto__ || Object.getPrototypeOf(BlogArticleRenderer)).apply(this, arguments));
    }

    createClass(BlogArticleRenderer, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(BlogArticleRenderer.prototype.__proto__ || Object.getPrototypeOf(BlogArticleRenderer.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.blogArticleRenderer);
        }
    }]);
    return BlogArticleRenderer;
}(ArticleRenderer)) || _class$59);
var BlogQuote = (_dec2$11 = registerStyle(BlogArticleRendererStyle), _dec2$11(_class2$11 = function (_UI$Primitive) {
    inherits(BlogQuote, _UI$Primitive);

    function BlogQuote() {
        classCallCheck(this, BlogQuote);
        return possibleConstructorReturn(this, (BlogQuote.__proto__ || Object.getPrototypeOf(BlogQuote)).apply(this, arguments));
    }

    createClass(BlogQuote, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.quote);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement("div", { style: {
                    "flex-grow": "1000000",
                    "min-width": "10%",
                    "display": "inline-block"
                } }), UI.createElement(
                "div",
                { style: {
                        "flex-grow": "1",
                        "display": "inline-block"
                    } },
                this.options.value
            )];
        }
    }]);
    return BlogQuote;
}(UI.Primitive("div"))) || _class2$11);


BlogArticleRenderer.markupClassMap = new MarkupClassMap(ArticleRenderer.markupClassMap);
BlogArticleRenderer.markupClassMap.addClass("Quote", BlogQuote);

var LogoElectron = function (_SVG$Circle) {
    inherits(LogoElectron, _SVG$Circle);

    function LogoElectron() {
        classCallCheck(this, LogoElectron);
        return possibleConstructorReturn(this, (LogoElectron.__proto__ || Object.getPrototypeOf(LogoElectron)).apply(this, arguments));
    }

    createClass(LogoElectron, [{
        key: "updateCenter",
        value: function updateCenter(baseAngle) {
            var angle = baseAngle + this.options.angleOffset;
            var x = this.options.nucleusCenter.x + Math.sin(angle) * this.options.outerRadius;
            var y = this.options.nucleusCenter.y + Math.cos(angle) * this.options.outerRadius;
            this.setCenter(x, y);
        }
    }]);
    return LogoElectron;
}(SVG.Circle);

var OuterLayer = function (_SVG$Group) {
    inherits(OuterLayer, _SVG$Group);

    function OuterLayer() {
        classCallCheck(this, OuterLayer);
        return possibleConstructorReturn(this, (OuterLayer.__proto__ || Object.getPrototypeOf(OuterLayer)).apply(this, arguments));
    }

    createClass(OuterLayer, [{
        key: "getElectrons",
        value: function getElectrons() {
            var electrons = [];
            for (var i = 0; i < this.options.electronCount; i += 1) {
                electrons.push(UI.createElement(LogoElectron, { ref: this.refLinkArray("electrons", i),
                    radius: this.options.electronRadius,
                    angleOffset: i * Math.PI * 2 / this.options.electronCount,
                    outerRadius: this.options.radius, nucleusCenter: this.options.center, fill: "black" }));
            }
            return electrons;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(SVG.Circle, { radius: this.options.radius, center: this.options.center, fill: "transparent",
                stroke: "black", strokeWidth: this.options.strokeWidth }), this.getElectrons()];
        }
    }, {
        key: "recalcElectrons",
        value: function recalcElectrons(seed) {
            var angleOffset = this.options.radius * Math.PI % 1; //randomish
            var baseAngle = -(seed * this.options.electronSpeed) / 2000 + angleOffset;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.electrons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var electron = _step.value;

                    electron.updateCenter(baseAngle);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);
    return OuterLayer;
}(SVG.Group);

var CSAAtomLogo = function (_SVG$SVGRoot) {
    inherits(CSAAtomLogo, _SVG$SVGRoot);

    function CSAAtomLogo() {
        classCallCheck(this, CSAAtomLogo);
        return possibleConstructorReturn(this, (CSAAtomLogo.__proto__ || Object.getPrototypeOf(CSAAtomLogo)).apply(this, arguments));
    }

    createClass(CSAAtomLogo, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(CSAAtomLogo.prototype.__proto__ || Object.getPrototypeOf(CSAAtomLogo.prototype), "setOptions", this).call(this, options);
            this.options = Object.assign({
                version: 5,
                electronSpeed: [1, 0.8, 0.5, 0.24, 0.1]
            }, this.options);

            var LAYER_MAX_SIZE = [2, 8, 18, 18, 18];
            var electronCount = [],
                numElectrons = this.options.version;
            var ringCount = 0;

            for (; ringCount < LAYER_MAX_SIZE.length && numElectrons; ringCount += 1) {
                var numElectronsOnLayer = Math.min(numElectrons, LAYER_MAX_SIZE[ringCount]);
                electronCount.push(numElectronsOnLayer);
                numElectrons -= numElectronsOnLayer;
            }

            this.options.ringCount = ringCount;
            this.options.electronCount = electronCount;
            this.setSize(this.options.size);
        }
    }, {
        key: "setSize",
        value: function setSize(size, doRedraw) {
            if (!size) {
                console.error("You need to specify a size for the logo!");
            }
            this.size = size;
            this.nucleusCenter = {
                x: size / 2,
                y: size / 2
            };

            var scalingFactor = Math.log2(this.options.ringCount + 1);

            this.nucleusRadius = 0.08 * size / scalingFactor;
            this.electronRadius = 0.034 * size / scalingFactor;
            this.electronRingStrokeWidth = 0.01 * size / scalingFactor;
            this.maxRadius = 0.4 * size;

            if (doRedraw) {
                this.redraw();
            }
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(CSAAtomLogo.prototype.__proto__ || Object.getPrototypeOf(CSAAtomLogo.prototype), "getNodeAttributes", this).call(this);

            attr.setStyle("height", this.size + "px");
            attr.setStyle("width", this.size + "px");

            return attr;
        }
    }, {
        key: "calculateElectronCenter",
        value: function calculateElectronCenter(angleOffset) {
            var angle = -Date.now() / 2000 + angleOffset;

            return {
                x: this.nucleusCenter.x + Math.sin(angle) * this.outerRadius,
                y: this.nucleusCenter.y + Math.cos(angle) * this.outerRadius
            };
        }
    }, {
        key: "getRings",
        value: function getRings() {
            var rings = [];
            for (var i = 0; i < this.options.ringCount; i += 1) {
                rings.push(UI.createElement(OuterLayer, { ref: this.refLinkArray("rings", i),
                    center: this.nucleusCenter, radius: (i + 1) * this.maxRadius / this.options.ringCount,
                    strokeWidth: this.electronRingStrokeWidth, electronRadius: this.electronRadius,
                    electronCount: this.options.electronCount[i],
                    electronSpeed: this.options.electronSpeed[i] }));
            }
            return rings;
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getRings(), UI.createElement(SVG.Circle, { ref: "nucleusCircle", center: this.nucleusCenter, radius: this.nucleusRadius, fill: "black" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.redrawOrbitAnimation = function () {
                var seed = Date.now();
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = _this4.rings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var ring = _step2.value;

                        ring.recalcElectrons(seed);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                requestAnimationFrame(_this4.redrawOrbitAnimation);
            };

            requestAnimationFrame(this.redrawOrbitAnimation);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            cancelAnimationFrame(this.redrawOrbitAnimation);
        }
    }]);
    return CSAAtomLogo;
}(SVG.SVGRoot);

var CSALogoSwarm = function (_SVG$SVGRoot2) {
    inherits(CSALogoSwarm, _SVG$SVGRoot2);

    function CSALogoSwarm(options) {
        classCallCheck(this, CSALogoSwarm);

        var _this5 = possibleConstructorReturn(this, (CSALogoSwarm.__proto__ || Object.getPrototypeOf(CSALogoSwarm)).call(this, options));

        _this5.extraAngles = new Array(250);
        _this5.outerRadius = [];
        _this5.electrons = [];
        for (var i = 0; i < _this5.extraAngles.length; i++) {
            _this5.extraAngles[i] = Math.random() * 2.0 * Math.PI;
            _this5.outerRadius[i] = 160 * Math.random();
        }
        _this5.size = _this5.options.size || 400;
        return _this5;
    }

    createClass(CSALogoSwarm, [{
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(CSALogoSwarm.prototype.__proto__ || Object.getPrototypeOf(CSALogoSwarm.prototype), "getNodeAttributes", this).call(this);

            attr.setStyle("height", this.size + "px");
            attr.setStyle("width", this.size + "px");

            return attr;
        }
    }, {
        key: "render",
        value: function render() {
            var angle = -Date.now() / 1000;
            var nucleusCenter = { x: 200, y: 200 };

            var electrons = [];
            for (var i = 0; i < this.extraAngles.length; i++) {
                angle += this.extraAngles[i];
                var electronCenter = {
                    x: nucleusCenter.x + Math.sin(angle) * this.outerRadius[i],
                    y: nucleusCenter.y + Math.cos(angle) * this.outerRadius[i]
                };
                var fillColor = "#" + ((1 << 24) * Math.random() | 0).toString(16);

                electrons.push(UI.createElement(SVG.Circle, { key: i + 1, center: electronCenter, radius: 1,
                    fill: fillColor }));
            }
            this.electrons = electrons;

            return electrons;
        }
    }, {
        key: "updateCircles",
        value: function updateCircles() {
            var nucleusCenter = { x: 200, y: 200 };
            var angle = -Date.now() / 1000;

            var extraAngles = this.extraAngles;
            var nrAngles = extraAngles.length;

            for (var i = 0; i < nrAngles; i += 1) {
                angle += extraAngles[i];
                this.electrons[i].setCenter(nucleusCenter.x + Math.sin(angle) * this.outerRadius[i], nucleusCenter.y + Math.cos(angle) * this.outerRadius[i]);
                this.electrons[i].setRadius(Math.abs(angle % 1) * 5);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            var totalDuration = 0;
            var lastTime = performance.now();

            var redrawOrbit = function redrawOrbit() {
                var startTime = window.performance.now();
                _this6.updateCircles();
                totalDuration += window.performance.now() - startTime;
                //console.log("Redraw avg duration: ", totalDuration / timesCounted);
                lastTime = performance.now();
                requestAnimationFrame(redrawOrbit);
            };

            requestAnimationFrame(redrawOrbit);
        }
    }]);
    return CSALogoSwarm;
}(SVG.SVGRoot);

var CSALogo = function (_SVG$SVGRoot3) {
    inherits(CSALogo, _SVG$SVGRoot3);

    function CSALogo() {
        classCallCheck(this, CSALogo);
        return possibleConstructorReturn(this, (CSALogo.__proto__ || Object.getPrototypeOf(CSALogo)).apply(this, arguments));
    }

    createClass(CSALogo, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                size: 500,
                color: Theme.Global.getProperty("COLOR_PRIMARY", "black"),
                background: "transparent"
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(CSALogo.prototype.__proto__ || Object.getPrototypeOf(CSALogo.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setAttribute("height", this.options.size + "px");
            attr.setAttribute("width", this.options.size + "px");
            attr.setAttribute("preserveAspectRatio", "none");
            attr.setAttribute("viewBox", "0 0 500 500");
        }
    }, {
        key: "render",
        value: function render() {
            var scale = 50;
            var center = 250;
            return [UI.createElement(
                SVG.Group,
                { ref: "circlesGroup" },
                UI.createElement(SVG.Circle, { radius: 1.15 * scale, center: { x: 5 * scale, y: 1.25 * scale }, strokeWidth: "0",
                    stroke: this.options.color, fill: this.options.color }),
                UI.createElement(SVG.Circle, { radius: 1.15 * scale, center: { x: 5 * scale, y: 1.25 * scale }, strokeWidth: "0",
                    stroke: this.options.color, fill: this.options.color,
                    transform: "rotate(240," + center + "," + center + ")" }),
                UI.createElement(SVG.Circle, { radius: 1.15 * scale, center: { x: 5 * scale, y: 1.25 * scale }, strokeWidth: "0",
                    stroke: this.options.color, fill: this.options.color,
                    transform: "rotate(120," + center + "," + center + ")" })
            ), UI.createElement(
                SVG.Group,
                { ref: "triangleGroup" },
                UI.createElement(SVG.Path, { stroke: this.options.color, strokeWidth: scale,
                    d: "M" + 5 * scale + "," + (5 - 1.6 * Math.sqrt(3) * 2 / 3) * scale + "L" + (5 - 1.6 * 1) * scale + "," + (5 + 1.6 * Math.sqrt(3) / 3) * scale + "L" + (5 + 1.6) * scale + "," + (5 + 1.6 * Math.sqrt(3) / 3) * scale + "z",
                    fill: this.options.background })
            ), UI.createElement(
                SVG.Group,
                { ref: "linesGroup" },
                UI.createElement(SVG.Rect, { stroke: this.options.color, strokeWidth: "0", x: 4.5 * scale, y: 1 * scale,
                    width: 1 * scale, height: 3 * scale, fill: this.options.color }),
                UI.createElement(SVG.Rect, { stroke: this.options.color, strokeWidth: "0", x: 4.5 * scale, y: 1 * scale,
                    width: 1 * scale, height: 3 * scale, fill: this.options.color,
                    transform: "rotate(240," + center + "," + center + ")" }),
                UI.createElement(SVG.Rect, { stroke: this.options.color, strokeWidth: "0", x: 4.5 * scale, y: 1 * scale,
                    width: 1 * scale, height: 3 * scale, fill: this.options.color,
                    transform: "rotate(120," + center + "," + center + ")" })
            )];
        }
    }]);
    return CSALogo;
}(SVG.SVGRoot);

var CSALoadingLogo = function (_CSALogo) {
    inherits(CSALoadingLogo, _CSALogo);

    function CSALoadingLogo() {
        classCallCheck(this, CSALoadingLogo);
        return possibleConstructorReturn(this, (CSALoadingLogo.__proto__ || Object.getPrototypeOf(CSALoadingLogo)).apply(this, arguments));
    }

    createClass(CSALoadingLogo, [{
        key: "easeFunction",
        value: function easeFunction(t) {
            if (t < 0) {
                t = 0;
            }
            if (t > 1) {
                t = 1;
            }
            t *= 2.0;
            if (t < 1) return 0.5 * t * t + 0;
            t--;
            return -0.5 * (t * (t - 2) - 1) + 0;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            var speed = 0.05;
            var totalRotation = 0;
            var totalEase = 0;
            var change = false;
            var animateRotation = function animateRotation() {
                totalRotation += speed;
                if (totalRotation >= 1) {
                    totalRotation = 0;
                    totalEase += 60;
                    // change = true;
                }
                var currentEase = _this9.easeFunction(totalRotation) * 60;
                var center = 250;
                _this9.circlesGroup.setAttribute("transform", "rotate(" + (totalEase + currentEase) + "," + center + "," + center + ")");
                _this9.triangleGroup.setAttribute("transform", "rotate(" + -(totalEase + currentEase) + "," + center + "," + center + ")");
                _this9.linesGroup.setAttribute("transform", "rotate(" + (totalEase + currentEase) + "," + center + "," + center + ")");
                if (change) {
                    change = false;
                    // requestAnimationFrame(animateOpacity);
                } else {
                    _this9.animationFrame = requestAnimationFrame(animateRotation);
                }
            };

            this.animationFrame = requestAnimationFrame(animateRotation);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            cancelAnimationFrame(this.animationFrame);
        }
    }]);
    return CSALoadingLogo;
}(CSALogo);

var CSAAboutPage = function (_UI$Element) {
    inherits(CSAAboutPage, _UI$Element);

    function CSAAboutPage() {
        classCallCheck(this, CSAAboutPage);
        return possibleConstructorReturn(this, (CSAAboutPage.__proto__ || Object.getPrototypeOf(CSAAboutPage)).apply(this, arguments));
    }

    createClass(CSAAboutPage, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(CSAAboutPage.prototype.__proto__ || Object.getPrototypeOf(CSAAboutPage.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.EXTRA_SMALL);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                ArticleTabArea,
                { variableHeightPanels: true, ref: "articleTabArea", path: "/about" },
                ABOUT_ARTICLES
            ), UI.createElement("hr", null), UI.createElement(
                "div",
                { style: { "text-align": "center" } },
                UI.createElement(
                    "h2",
                    null,
                    "CS Academy version ",
                    UI.createElement(
                        "strong",
                        null,
                        "Carbon"
                    )
                ),
                UI.createElement(CSAAtomLogo, { size: 300, version: 6 })
            )];
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            this.articleTabArea.setURL(urlParts);
        }
    }]);
    return CSAAboutPage;
}(UI.Element);

var BlogAtomLogo = function (_UI$Element2) {
    inherits(BlogAtomLogo, _UI$Element2);

    function BlogAtomLogo() {
        classCallCheck(this, BlogAtomLogo);
        return possibleConstructorReturn(this, (BlogAtomLogo.__proto__ || Object.getPrototypeOf(BlogAtomLogo)).apply(this, arguments));
    }

    createClass(BlogAtomLogo, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                textAlign: "center"
            });
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(CSAAtomLogo, this.options);
        }
    }]);
    return BlogAtomLogo;
}(UI.Element);

BlogArticleRenderer.markupClassMap.addClass("CSAAtomLogo", BlogAtomLogo);

var EmojiModifier = function (_MarkupModifier) {
    inherits(EmojiModifier, _MarkupModifier);

    function EmojiModifier(options) {
        classCallCheck(this, EmojiModifier);

        var _this = possibleConstructorReturn(this, (EmojiModifier.__proto__ || Object.getPrototypeOf(EmojiModifier)).call(this, options));

        _this.emojiMap = new Map();
        _this.unicodeToEmojiMap = new Map();
        for (var emoji in EmojiMini$1.Emoji.EMOJI) {
            _this.emojiMap.set(EmojiMini$1.Emoji.EMOJI[emoji].key, emoji);
            _this.unicodeToEmojiMap.set(EmojiMini$1.Emoji.EMOJI[emoji].unicode, emoji);
        }
        for (var emoticon in EmojiMini$1.Emoji.EMOTICONS) {
            var _emoji = _this.unicodeToEmojiMap.get(EmojiMini$1.Emoji.EMOTICONS[emoticon]);
            _this.emojiMap.set(emoticon, _emoji);
        }
        for (var twitchEmoticon in EmojiMini$1.Emoji.TWITCH_EMOTICONS) {
            _this.emojiMap.set(twitchEmoticon, twitchEmoticon);
        }
        return _this;
    }

    createClass(EmojiModifier, [{
        key: "modify",
        value: function modify(currentArray, originalString) {
            var _this2 = this;

            var newArray = [];
            var arrayLocation = 0;
            var currentElement = currentArray[arrayLocation];
            var lineStart = 0;

            var checkAndAddEmoji = function checkAndAddEmoji(start, end) {
                var substr = originalString.substring(start, end);
                if (_this2.emojiMap.has(substr)) {
                    if (currentElement.start < start) {
                        newArray.push({
                            isString: true,
                            start: currentElement.start,
                            end: start
                        });
                    }

                    newArray.push({
                        content: {
                            tag: "Emoji",
                            value: _this2.emojiMap.get(substr)
                        },
                        start: start,
                        end: end
                    });

                    currentElement = {
                        isString: true,
                        start: end,
                        end: currentElement.end
                    };
                }
            };

            for (var i = 0; i < originalString.length; i += 1) {
                if (i >= currentElement.end) {
                    newArray.push(currentElement);
                    arrayLocation += 1;
                    currentElement = currentArray[arrayLocation];
                }

                if (currentElement.isJSX) {
                    continue;
                }

                if (/\s/.test(originalString[i])) {
                    checkAndAddEmoji(lineStart, i);
                    lineStart = i + 1;
                }
            }
            if (lineStart < originalString.length) {
                checkAndAddEmoji(lineStart, originalString.length);
            }
            if (currentElement.start < originalString.length) {
                newArray.push(currentElement);
            }
            return newArray;
        }
    }]);
    return EmojiModifier;
}(MarkupModifier);

MarkupParser.modifiers.push(new EmojiModifier());

var Emoji = null;

UI.Emoji = function (_UI$Element) {
    inherits(UIEmoji, _UI$Element);

    function UIEmoji() {
        classCallCheck(this, UIEmoji);
        return possibleConstructorReturn(this, (UIEmoji.__proto__ || Object.getPrototypeOf(UIEmoji)).apply(this, arguments));
    }

    createClass(UIEmoji, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.height = options.height || "1.25em";
            options.width = options.width || "1.25em";
            get(UIEmoji.prototype.__proto__ || Object.getPrototypeOf(UIEmoji.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getNodeType",
        value: function getNodeType() {
            return "span";
        }
    }, {
        key: "render",
        value: function render() {
            if (!Emoji) {
                return [];
            }
            if (Emoji.EMOJI[this.options.value]) {
                return UI.createElement(SVG.SVGRoot, { ref: "svg", height: this.options.height, width: this.options.width,
                    style: {
                        "display": "inline-block",
                        "margin": "-.2ex .15em .2ex",
                        "line-height": "normal",
                        "vertical-align": "middle"
                    } });
            } else if (Emoji.TWITCH_EMOTICONS[this.options.value]) {
                return UI.createElement("img", { src: "https://static-cdn.jtvnw.net/emoticons/v1/" + Emoji.TWITCH_EMOTICONS[this.options.value].imageId + "/1.0",
                    alt: this.options.value,
                    style: {
                        "display": "inline-block",
                        "margin": "-.2ex .15em .2ex",
                        "line-height": "normal",
                        "vertical-align": "middle"
                    } });
            } else {
                return [];
            }
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(UIEmoji.prototype.__proto__ || Object.getPrototypeOf(UIEmoji.prototype), "getNodeAttributes", this).call(this);
            if (!Emoji) {
                return attr;
            }
            if (Emoji.EMOJI[this.options.value]) {
                attr.setAttribute("title", ":" + this.options.value + ":");
            } else if (Emoji.TWITCH_EMOTICONS[this.options.value]) {
                attr.setAttribute("title", this.options.value);
            }
            if (this.options.title) {
                attr.setAttribute("title", this.options.title);
            }
            return attr;
        }
    }, {
        key: "updateEmojiContent",
        value: function updateEmojiContent() {
            if (Emoji.EMOJI[this.options.value]) {
                this.svg.node.innerHTML = Emoji.EMOJI[this.options.value].svgData;
                this.svg.node.setAttribute("viewBox", "0 0 64 64");
            } else if (Emoji.TWITCH_EMOTICONS[this.options.value]) {} else {
                console.error("Invalid emoji value", this.options.value);
            }
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var _this4 = this;

            // TODO: this is a double redraw, should know if global Emoji map is loaded
            if (Emoji) {
                get(UIEmoji.prototype.__proto__ || Object.getPrototypeOf(UIEmoji.prototype), "redraw", this).call(this);
                this.updateEmojiContent();
                return;
            }
            window["require"](["Emoji"], function (_Emoji) {
                Emoji = _Emoji.Emoji || {};
                if (!_this4.node) {
                    _this4.createNode();
                }
                _this4.redraw();
            });
        }
    }]);
    return UIEmoji;
}(UI.Element);

var Notification = function (_UI$Element) {
    inherits(Notification, _UI$Element);

    function Notification() {
        classCallCheck(this, Notification);
        return possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).apply(this, arguments));
    }

    createClass(Notification, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "li";
        }
    }, {
        key: "getNotificationClass",
        value: function getNotificationClass() {
            return "";
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(Notification.prototype.__proto__ || Object.getPrototypeOf(Notification.prototype), "getNodeAttributes", this).call(this);
            attr.setStyle("padding", "10px");
            attr.setStyle("borderBottom", "1px solid #ddd");
            attr.setStyle("textAlign", "right");
            attr.addClass(this.getNotificationClass());
            return attr;
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            return [UI.createElement(
                "div",
                { style: { textAlign: "initial" } },
                this.render()
            ), UI.createElement(TimePassedSpan, { timeStamp: this.options.notification.dateCreated })];
        }
    }]);
    return Notification;
}(UI.Element);

var RatingNotification = function (_Notification) {
    inherits(RatingNotification, _Notification);

    function RatingNotification() {
        classCallCheck(this, RatingNotification);
        return possibleConstructorReturn(this, (RatingNotification.__proto__ || Object.getPrototypeOf(RatingNotification)).apply(this, arguments));
    }

    createClass(RatingNotification, [{
        key: "getNotificationClass",
        value: function getNotificationClass() {
            return "ratingNotification";
        }
    }, {
        key: "render",
        value: function render() {
            var oldRating = this.options.notification.data.oldRating;
            var newRating = this.options.notification.data.newRating;
            if (oldRating < newRating) {
                return ["Congratulations! Your rating has increased by ", UI.createElement(
                    "span",
                    { style: { color: "green" } },
                    newRating - oldRating
                ), " points ", UI.createElement(UI.Emoji, { value: "smile" }), ". Keep it up!"];
            } else {
                return ["Your rating has decreased by ", UI.createElement(
                    "span",
                    { style: { color: "red" } },
                    oldRating - newRating
                ), " points ", UI.createElement(UI.Emoji, { value: "disappointed" }), ". Better luck next time!", UI.createElement(UI.Emoji, { value: "smiley" })];
            }
        }
    }]);
    return RatingNotification;
}(Notification);

var AnnouncementNotification = function (_Notification2) {
    inherits(AnnouncementNotification, _Notification2);

    function AnnouncementNotification() {
        classCallCheck(this, AnnouncementNotification);
        return possibleConstructorReturn(this, (AnnouncementNotification.__proto__ || Object.getPrototypeOf(AnnouncementNotification)).apply(this, arguments));
    }

    createClass(AnnouncementNotification, [{
        key: "getNotificationClass",
        value: function getNotificationClass() {
            return "announcementNotification";
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(MarkupRenderer, { value: this.options.notification.data.value });
        }
    }]);
    return AnnouncementNotification;
}(Notification);

var NotificationsList = function (_UI$Element2) {
    inherits(NotificationsList, _UI$Element2);
    createClass(NotificationsList, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                height: "100%",
                width: "100%",
                lineHeight: "normal",
                overflow: "auto",
                backgroundColor: "#fff",
                // padding: "8px",
                color: "#262626"
            });
        }
    }]);

    function NotificationsList(options) {
        classCallCheck(this, NotificationsList);

        var _this4 = possibleConstructorReturn(this, (NotificationsList.__proto__ || Object.getPrototypeOf(NotificationsList)).call(this, options));

        _this4.unreadNotificationsCount = 0;
        _this4.notificationsCount = 0;
        _this4.displayedNotifications = new Set();
        return _this4;
    }

    createClass(NotificationsList, [{
        key: "render",
        value: function render() {
            if (this.options.children.length == 0) {
                this.options.children.push(UI.createElement(
                    "div",
                    { style: {
                            cursor: "default",
                            textAlign: "center",
                            fontSize: "1.05em",
                            height: "30px",
                            lineHeight: "30px"
                        } },
                    "You don't have any notifications."
                ));
            }
            return this.options.children;
        }
    }, {
        key: "getStoredNotifications",
        value: function getStoredNotifications() {
            Ajax.getJSON("/accounts/get_user_notifications/", {});
        }
    }, {
        key: "insertChild",
        value: function insertChild(child, position) {
            position = position || 0;

            this.options.children.splice(position, 0, child);

            child.mount(this, position + 1 < this.options.children.length ? this.children[position + 1].node : null);

            return child;
        }
    }, {
        key: "handleNewNotification",
        value: function handleNewNotification(notification) {
            if (this.displayedNotifications.has(notification)) {
                return;
            }
            if (!notification.isRead()) {
                this.options.icon.increaseUnreadNotificationsCount();
            }
            var NotificationClass = this.constructor.NotificationClassMap.get(notification.type);
            if (!NotificationClass) {
                console.error("There is no notification class for ", notification.type);
                return;
            }
            var notificationElement = UI.createElement(NotificationClass, { notification: notification });
            this.notificationsCount += 1;
            if (this.notificationsCount === 1) {
                this.options.children = [notificationElement];
                this.redraw();
            } else {
                this.insertChild(notificationElement, 0);
            }
            this.displayedNotifications.add(notification);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.getStoredNotifications();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = UserNotificationStore.all().sort(function (x, y) {
                    return x.dateCreated - y.dateCreated;
                })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var notification = _step.value;

                    this.handleNewNotification(notification);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.attachCreateListener(UserNotificationStore, function (notification) {
                _this5.handleNewNotification(notification);
            });
        }
    }]);
    return NotificationsList;
}(UI.Element);

NotificationsList.NotificationClassMap = new Map([["ratingsChange", RatingNotification], ["announcement", AnnouncementNotification]]);

var _class$60, _descriptor$25, _descriptor2$22;

function _initDefineProp$26(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$26(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var MessagesPanelListStyle = (_class$60 = function (_StyleSheet) {
    inherits(MessagesPanelListStyle, _StyleSheet);

    function MessagesPanelListStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, MessagesPanelListStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = MessagesPanelListStyle.__proto__ || Object.getPrototypeOf(MessagesPanelListStyle)).call.apply(_ref, [this].concat(args))), _this), _this.descriptionFontSize = "1.05em", _initDefineProp$26(_this, "messagesPanelList", _descriptor$25, _this), _initDefineProp$26(_this, "textInputStyle", _descriptor2$22, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return MessagesPanelListStyle;
}(StyleSheet), _descriptor$25 = _applyDecoratedDescriptor$26(_class$60.prototype, "messagesPanelList", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "#fff",
            display: "flex",
            flexDirection: "column"
        };
    }
}), _descriptor2$22 = _applyDecoratedDescriptor$26(_class$60.prototype, "textInputStyle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "#eee",
            border: "0",
            width: "85%",
            height: "30px",
            lineHeight: "30px",
            display: "inline-block",
            float: "left",
            outline: "none"
        };
    }
}), _class$60);

var _dec$27, _class$61;

var formatMiniMessageLastTime = function formatMiniMessageLastTime(timeStamp) {
    var presentTimeStamp = StemDate.now();
    var fullDateFormat = "DD/MM/YYYY";
    if (presentTimeStamp.format(fullDateFormat) === timeStamp.format(fullDateFormat)) {
        return timeStamp.format("HH:mm");
    } else if (presentTimeStamp.getYear() === timeStamp.getYear()) {
        if (presentTimeStamp.getWeekInYear() === timeStamp.getWeekInYear()) {
            return timeStamp.format("ddd");
        } else {
            return timeStamp.format("MMM Do");
        }
    } else {
        return timeStamp.format(fullDateFormat);
    }
};

function getUserMessagesUrl(userId) {
    return "/messages/" + userId + "/";
}

var MiniMessage = function (_UI$Element) {
    inherits(MiniMessage, _UI$Element);

    function MiniMessage() {
        classCallCheck(this, MiniMessage);
        return possibleConstructorReturn(this, (MiniMessage.__proto__ || Object.getPrototypeOf(MiniMessage)).apply(this, arguments));
    }

    createClass(MiniMessage, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                hoverColor: "rgba(0, 0, 0, .05)",
                backgroundColorActive: "#3373b7"
            };
        }
    }, {
        key: "getPrivateChat",
        value: function getPrivateChat() {
            return PrivateChatStore.get(this.options.privateChatId);
        }
    }, {
        key: "getMessageThread",
        value: function getMessageThread() {
            return this.getPrivateChat().getMessageThread();
        }
    }, {
        key: "getLastMessage",
        value: function getLastMessage() {
            return this.getMessageThread().getLastMessage() || { content: "", timeAdded: 0, id: "0" };
        }
    }, {
        key: "getUserId",
        value: function getUserId() {
            return this.getPrivateChat().getOtherUserId();
        }
    }, {
        key: "isLastMessageRead",
        value: function isLastMessageRead() {
            return !this.getPrivateChat().firstUnreadMessage[USER.id];
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                padding: "10px",
                borderBottom: "1px solid #ddd",
                whiteSpace: "nowrap",
                color: this.isLastMessageRead() ? this.options.active ? "white" : "black" : this.options.active ? "white" : "red",
                backgroundColor: this.options.active ? this.options.backgroundColorActive : ""
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(UserHandle, { ref: "userHandle", id: this.getUserId(), noPopup: true, color: this.options.active ? "white" : null }), UI.createElement(
                "div",
                { ref: "timeAttribute", className: "pull-right", style: { color: this.options.active ? "white" : "#888" } },
                this.getLastMessage().timeAdded !== 0 ? formatMiniMessageLastTime(StemDate(this.getLastMessage().timeAdded)) : ""
            ), UI.createElement(
                "div",
                { style: { whiteSpace: "nowrap", overflow: "hidden", textOverflow: "ellipsis", paddingTop: "8px" } },
                this.getLastMessage().content
            )];
        }
    }, {
        key: "setActive",
        value: function setActive() {
            var active$$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (this.options.active === active$$1) {
                return;
            }
            this.updateOptions({ active: active$$1 });
        }
    }, {
        key: "setAsRead",
        value: function setAsRead() {
            var forceAjax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (!forceAjax && this.isLastMessageRead()) {
                return;
            }
            Ajax.postJSON("/chat/private_chat_mark_read/", {
                privateChatId: this.options.privateChatId
            }).then(function () {}, function () {});
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.addClickListener(function () {
                _this2.setAsRead();
                _this2.options.list.dispatch("messageSelected", _this2.getUserId());
            });

            this.attachListener(this.getMessageThread(), "newMessage", function () {
                _this2.redraw();
                _this2.options.list.redraw();
                if (_this2.options.active) {
                    _this2.setAsRead(true);
                } else {
                    _this2.options.list.recalculateTotalUnread();
                }
            });
            this.attachEventListener(this.getPrivateChat(), "updateFirstUnreadMessage", function () {
                _this2.redraw();
                _this2.options.list.recalculateTotalUnread();
            });
        }
    }]);
    return MiniMessage;
}(UI.Element);

var UserSearchInput = function (_UI$Element2) {
    inherits(UserSearchInput, _UI$Element2);

    function UserSearchInput() {
        classCallCheck(this, UserSearchInput);
        return possibleConstructorReturn(this, (UserSearchInput.__proto__ || Object.getPrototypeOf(UserSearchInput)).apply(this, arguments));
    }

    createClass(UserSearchInput, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    width: "100%"
                }
            };
        }
    }, {
        key: "render",
        value: function render() {
            var _windowStyle,
                _this4 = this;

            var windowStyle = (_windowStyle = {
                marginTop: "0.9px",
                position: "absolute",
                maxWidth: "300px",
                maxHeight: "300px",
                overflow: "auto"
            }, defineProperty(_windowStyle, "marginTop", "30px"), defineProperty(_windowStyle, "backgroundColor", "#eee"), _windowStyle);

            return [UI.createElement(FAIcon, { icon: "search", style: {
                    display: "inline-block",
                    backgroundColor: "#eee",
                    color: "#999",
                    width: "15%",
                    height: "30px",
                    textAlign: "center",
                    float: "left",
                    lineHeight: "30px",
                    cursor: "pointer"
                }, onClick: function onClick() {
                    _this4.input.node.focus();
                    _this4.input.node.select();
                } }), UI.createElement(TextInput, { ref: "input", className: this.options.textInputStyle || "", placeholder: this.options.placeholder || "" }), UI.createElement(VolatileFloatingWindow, { className: "searchList", style: windowStyle, ref: "window" })];
        }
    }, {
        key: "updateList",
        value: function updateList(listItems) {
            var _this5 = this;

            if (!listItems) {
                this.window.options.children = "";
                this.window.redraw();
                return;
            }
            var divStyle = {
                paddingLeft: "7px",
                paddingRight: "7px",
                paddingTop: "2px",
                paddingBottom: "2px"
            };
            var list = [];

            var _loop = function _loop(i) {
                var chooseUser = function chooseUser() {
                    _this5.input.setValue(listItems[i].username);
                    _this5.window.hide();
                    _this5.dispatch("userChosen", listItems[i].id);
                };
                list.push(UI.createElement(
                    "div",
                    { style: divStyle, onClick: chooseUser },
                    listItems[i].username
                ));
            };

            for (var i = 0; i < listItems.length; i += 1) {
                _loop(i);
            }
            this.window.options.children = list;
            this.window.redraw();
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.input.addNodeListener("keyup", function () {
                _this6.window.show();
                if (_this6.input.getValue()) {
                    Ajax.getJSON(PublicUserStore.options.fetchURL, {
                        usernamePrefix: _this6.input.getValue()
                    }).then(function (data) {
                        return _this6.updateList(data.state.publicuser);
                    }, function () {});
                } else {
                    _this6.updateList();
                }
            });
        }
    }]);
    return UserSearchInput;
}(UI.Element);

var MessagesList = function (_UI$Element3) {
    inherits(MessagesList, _UI$Element3);

    function MessagesList(options) {
        classCallCheck(this, MessagesList);

        var _this7 = possibleConstructorReturn(this, (MessagesList.__proto__ || Object.getPrototypeOf(MessagesList)).call(this, options));

        _this7.miniMessages = [];
        _this7.unreadMessages = 0;
        return _this7;
    }

    createClass(MessagesList, [{
        key: "getMiniMessages",
        value: function getMiniMessages() {
            this.miniMessages = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = PrivateChatStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var privateChat = _step.value;

                    var userId = privateChat.getOtherUserId();
                    var miniMessage = UI.createElement(MiniMessage, { active: userId === this.activeUserId,
                        list: this, privateChatId: privateChat.id });
                    this.miniMessages.push(miniMessage);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.miniMessages.sort(function (a, b) {
                return -parseInt(a.getLastMessage().timeAdded) + parseInt(b.getLastMessage().timeAdded);
            });
            return this.miniMessages;
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(
                "div",
                { style: { width: "100%", height: "100%", position: "relative" } },
                UI.createElement(
                    "div",
                    { ref: "miniMessagesList", style: { position: "absolute", top: 0, bottom: 0, left: 0, right: 0 } },
                    this.getMiniMessages()
                )
            );
        }
    }, {
        key: "setActiveMiniMessage",
        value: function setActiveMiniMessage(userId) {
            this.activeUserId = userId;
            this.redraw();
        }
    }, {
        key: "recalculateTotalUnread",
        value: function recalculateTotalUnread() {
            this.unreadMessages = 0;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.miniMessages[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var miniMessage = _step2.value;

                    if (!miniMessage.isLastMessageRead()) {
                        this.unreadMessages += 1;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.dispatch("unreadCountChanged", this.unreadMessages);
        }
    }, {
        key: "refreshList",
        value: function refreshList() {
            var _this8 = this;

            Ajax.getJSON("/chat/private_chat_list/", {}).then(function () {
                _this8.redraw();
                _this8.recalculateTotalUnread();
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.refreshList();
        }
    }]);
    return MessagesList;
}(UI.Element);

var IconMessagesList = function (_UI$Element4) {
    inherits(IconMessagesList, _UI$Element4);

    function IconMessagesList() {
        classCallCheck(this, IconMessagesList);
        return possibleConstructorReturn(this, (IconMessagesList.__proto__ || Object.getPrototypeOf(IconMessagesList)).apply(this, arguments));
    }

    createClass(IconMessagesList, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                lineHeight: "normal",
                backgroundColor: "#fff",
                width: "100%",
                height: "100%",
                overflow: "auto",
                maxWidth: "100%",
                position: "absolute",
                right: "0px",
                display: "flex",
                flexDirection: "column"
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(MessagesList, { ref: "messagesList", style: { flex: "1", overflow: "auto" } }), UI.createElement(
                "div",
                { style: { textAlign: "center", width: "100%", padding: "0.5em", borderTop: "1px solid #ddd" } },
                UI.createElement(Link, { href: "/messages/", newTab: false, value: "View all messages" })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this10 = this;

            this.attachListener(this.messagesList, "unreadCountChanged", function (value) {
                _this10.dispatch("unreadCountChanged", value);
            });
            this.attachListener(this.messagesList, "messageSelected", function (userId) {
                window.open(getUserMessagesUrl(userId));
            });
        }
    }]);
    return IconMessagesList;
}(UI.Element);

var MessagesPanelList = (_dec$27 = registerStyle(MessagesPanelListStyle), _dec$27(_class$61 = function (_UI$Element5) {
    inherits(MessagesPanelList, _UI$Element5);

    function MessagesPanelList() {
        classCallCheck(this, MessagesPanelList);
        return possibleConstructorReturn(this, (MessagesPanelList.__proto__ || Object.getPrototypeOf(MessagesPanelList)).apply(this, arguments));
    }

    createClass(MessagesPanelList, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.messagesPanelList);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { style: { padding: "16px", paddingRight: "50px", height: "62px", borderBottom: "1px solid #ddd" } },
                UI.createElement(UserSearchInput, { ref: "userSearchInput", textInputStyle: this.styleSheet.textInputStyle, placeholder: "Search for user" })
            ), UI.createElement(MessagesList, { ref: "messagesList", style: { flex: "1", overflow: "auto" } })];
        }
    }, {
        key: "setActiveMiniMessage",
        value: function setActiveMiniMessage(userId) {
            this.messagesList.setActiveMiniMessage(userId);
        }
    }, {
        key: "routeToUser",
        value: function routeToUser(userId) {
            Router.changeURL(getUserMessagesUrl(userId));
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            this.attachListener(this.userSearchInput, "userChosen", function (userId) {
                _this12.routeToUser(userId);
                _this12.messagesList.refreshList();
            });
            this.attachListener(this.messagesList, "messageSelected", function (userId) {
                _this12.setActiveMiniMessage(userId);
                _this12.dispatch("userChanged", userId);
                _this12.routeToUser(userId);
            });
        }
    }]);
    return MessagesPanelList;
}(UI.Element)) || _class$61);

var PrivateChatWidgetWrapper = function (_UI$Element6) {
    inherits(PrivateChatWidgetWrapper, _UI$Element6);

    function PrivateChatWidgetWrapper() {
        classCallCheck(this, PrivateChatWidgetWrapper);
        return possibleConstructorReturn(this, (PrivateChatWidgetWrapper.__proto__ || Object.getPrototypeOf(PrivateChatWidgetWrapper)).apply(this, arguments));
    }

    createClass(PrivateChatWidgetWrapper, [{
        key: "render",
        value: function render() {
            var _this14 = this;

            var privateChat = PrivateChatStore.getChatWithUser(parseInt(this.options.userId));
            if (privateChat) {
                var widgetStyle = {
                    marginLeft: "0px",
                    marginRight: "0px",
                    width: "100%",
                    paddingLeft: "0px !important",
                    paddingRight: "0px !important",
                    height: "100%"
                };
                if (this.options.style && this.options.style.height) {
                    widgetStyle.height = this.options.style.height;
                }
                return UI.createElement(PrivateChatWidget, { ref: "chat", style: widgetStyle, extraHeightOffset: 75,
                    privateChat: privateChat });
            }
            PrivateChatStore.fetchForUser(this.options.userId, function (privateChat) {
                _this14.updateOptions({ privateChat: privateChat });
                _this14.chat.messageWindow.scrollToBottom();
            });
            return [UI.createElement(
                "h3",
                null,
                "Chat loading..."
            ), UI.createElement("span", { className: "fa fa-spinner fa-spin" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this15 = this;

            this.addListener("hide", function () {
                _this15.chat && _this15.chat.dispatch("hide");
            });
            this.addListener("show", function () {
                _this15.chat && _this15.chat.dispatch("show");
            });
        }
    }]);
    return PrivateChatWidgetWrapper;
}(UI.Element);

var DelayedPrivateChat = function (_Router) {
    inherits(DelayedPrivateChat, _Router);

    function DelayedPrivateChat() {
        classCallCheck(this, DelayedPrivateChat);
        return possibleConstructorReturn(this, (DelayedPrivateChat.__proto__ || Object.getPrototypeOf(DelayedPrivateChat)).apply(this, arguments));
    }

    createClass(DelayedPrivateChat, [{
        key: "getNoChat",
        value: function getNoChat() {
            return UI.createElement(
                "h3",
                { style: { marginTop: "40px", textAlign: "center" } },
                "Click on a chat box to start a conversation."
            );
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            var _this17 = this;

            this.routes = this.routes || new Route(null, function () {
                return _this17.getNoChat();
            }, [new Route("%s", function (options) {
                return UI.createElement(PrivateChatWidgetWrapper, { userId: parseInt(options.args[0]), style: { height: "100%" } });
            })]);
            return this.routes;
        }
    }]);
    return DelayedPrivateChat;
}(Router);

var MessagesPanel = function (_UI$Element7) {
    inherits(MessagesPanel, _UI$Element7);

    function MessagesPanel() {
        classCallCheck(this, MessagesPanel);
        return possibleConstructorReturn(this, (MessagesPanel.__proto__ || Object.getPrototypeOf(MessagesPanel)).apply(this, arguments));
    }

    createClass(MessagesPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(MessagesPanel.prototype.__proto__ || Object.getPrototypeOf(MessagesPanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                border: "1px solid #ddd",
                height: "100%",
                maxWidth: "1280px",
                margin: "0 auto",
                position: "relative"
            });
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            this.messagesPanelList.setActiveMiniMessage(parseInt(urlParts[0]));
            this.chatWidget.setURL(urlParts);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { style: { display: "inline-flex", height: "100%", overflow: "hidden", position: "relative" } },
                UI.createElement(MessagesPanelList, { ref: "messagesPanelList",
                    style: { height: "100%", overflow: "auto", width: "250px",
                        borderRight: "1px solid #ddd", transition: "margin .7s ease" } })
            ), UI.createElement(Button, { ref: "collapseButton", size: Size.SMALL, faIcon: "chevron-left", level: Level.PRIMARY,
                style: { position: "absolute", top: "15px", left: "208px", zIndex: "2017", transition: "all .7s ease" } }), UI.createElement(DelayedPrivateChat, { style: { display: "inline-block", flex: "1", width: "calc(100% - 250px)", height: "100%",
                    transition: "width .7s ease", verticalAlign: "top" }, ref: "chatWidget" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this19 = this;

            //TODO: use classes here
            this.collapseButton.addClickListener(function () {
                if (!_this19.collapsed) {
                    _this19.messagesPanelList.setStyle("marginLeft", "-250px");
                    _this19.collapseButton.setFaIcon("chevron-right");
                    _this19.collapseButton.setStyle("left", "8px");
                    _this19.collapseButton.setStyle("opacity", ".3");
                    _this19.chatWidget.setWidth("100%");
                    _this19.collapsed = true;
                } else {
                    _this19.messagesPanelList.setStyle("marginLeft", "0");
                    _this19.collapseButton.setFaIcon("chevron-left");
                    _this19.collapseButton.setStyle("left", "208px");
                    _this19.collapseButton.setStyle("opacity", "1");
                    _this19.chatWidget.setWidth("calc(100% - 250px)");
                    _this19.collapsed = false;
                }
            });
        }
    }]);
    return MessagesPanel;
}(UI.Element);

var MessagesIcon = function (_NavIcon) {
    inherits(MessagesIcon, _NavIcon);

    function MessagesIcon() {
        classCallCheck(this, MessagesIcon);
        return possibleConstructorReturn(this, (MessagesIcon.__proto__ || Object.getPrototypeOf(MessagesIcon)).apply(this, arguments));
    }

    createClass(MessagesIcon, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(MessagesIcon.prototype.__proto__ || Object.getPrototypeOf(MessagesIcon.prototype), "setOptions", this).call(this, options);
            this.count = 0;
        }
    }, {
        key: "render",
        value: function render() {
            this.iconMessagesList = this.iconMessagesList || UI.createElement(IconMessagesList, null);
            return [this.iconMessagesList];
        }
    }, {
        key: "getIcon",
        value: function getIcon() {
            return UI.createElement(FAIcon, { icon: "envelope", size: Size.LARGE });
        }
    }, {
        key: "getContent",
        value: function getContent() {
            return UI.createElement(Badge, { ref: this.refLink("messagesCount"), style: { backgroundColor: "crimson", bottom: "5px",
                    marginLeft: "-9px", marginTop: "15px", position: "absolute" }, className: "hidden" });
        }
    }, {
        key: "updateUnreadCount",
        value: function updateUnreadCount(count) {
            if (!this.messagesCount) {
                return;
            }
            this.count = count;
            this.messagesCount.options.children = count;
            this.messagesCount.options.className = count ? "" : "hidden";
            this.messagesCount.redraw();
            this.dispatch("changeTabCount");
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(MessagesIcon.prototype.__proto__ || Object.getPrototypeOf(MessagesIcon.prototype), "onMount", this).call(this);

            this.iconMessagesList.addListener("unreadCountChanged", function (value) {
                _this2.updateUnreadCount(value);
            });

            this.addClickListener(function () {
                _this2.parent.dispatch("changeSwitcher", _this2.iconMessagesList || UI.createElement(IconMessagesList, null), _this2);
            });
        }
    }]);
    return MessagesIcon;
}(NavIcon);

var NotificationsIcon = function (_NavIcon2) {
    inherits(NotificationsIcon, _NavIcon2);

    function NotificationsIcon() {
        classCallCheck(this, NotificationsIcon);
        return possibleConstructorReturn(this, (NotificationsIcon.__proto__ || Object.getPrototypeOf(NotificationsIcon)).apply(this, arguments));
    }

    createClass(NotificationsIcon, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(NotificationsIcon.prototype.__proto__ || Object.getPrototypeOf(NotificationsIcon.prototype), "setOptions", this).call(this, options);
            this.unreadNotificationsCount = 0;
            this.count = 0;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(NotificationsList, { icon: this })];
        }
    }, {
        key: "getIcon",
        value: function getIcon() {
            return UI.createElement(FAIcon, { icon: "bell", size: Size.LARGE });
        }
    }, {
        key: "getContent",
        value: function getContent() {
            return UI.createElement(Badge, { ref: this.refLink("notificationsCount"), style: { backgroundColor: "crimson", bottom: "5px",
                    marginLeft: "-9px", marginTop: "15px", position: "absolute" }, className: "hidden" });
        }
    }, {
        key: "setUnreadNotificationsCount",
        value: function setUnreadNotificationsCount(count) {
            if (!this.notificationsCount) {
                return;
            }
            this.count = count;
            this.notificationsCount.options.children = count;
            this.notificationsCount.options.className = count ? "" : "hidden";
            this.notificationsCount.redraw();
            this.dispatch("changeTabCount");
        }
    }, {
        key: "setNotificationsAsRead",
        value: function setNotificationsAsRead() {
            var _this4 = this;

            Ajax.postJSON("/accounts/set_user_notifications_read/", {}).then(function () {
                return _this4.setUnreadNotificationsCount(0);
            }, function () {});
        }
    }, {
        key: "increaseUnreadNotificationsCount",
        value: function increaseUnreadNotificationsCount() {
            if (this.isToggled) {
                this.setNotificationsAsRead();
            } else {
                this.unreadNotificationsCount += 1;
                this.setUnreadNotificationsCount(this.unreadNotificationsCount);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            get(NotificationsIcon.prototype.__proto__ || Object.getPrototypeOf(NotificationsIcon.prototype), "onMount", this).call(this);
            UserStore.getCurrentUser().addUpdateListener(function (event) {
                if (event.type === "lastReadNotification") {
                    _this5.unreadNotificationsCount = 0;
                    _this5.setUnreadNotificationsCount(_this5.unreadNotificationsCount);
                }
            });
            this.addClickListener(function () {
                _this5.notificationsList = _this5.notificationsList || UI.createElement(NotificationsList, { icon: _this5 });
                _this5.isToggled = !_this5.isToggled;
                _this5.parent.dispatch("changeSwitcher", _this5.notificationsList, _this5);

                if (_this5.isToggled) {
                    _this5.setNotificationsAsRead();
                }
            });
        }
    }]);
    return NotificationsIcon;
}(NavIcon);

var LanguagesIcon = function (_NavElement) {
    inherits(LanguagesIcon, _NavElement);

    function LanguagesIcon() {
        classCallCheck(this, LanguagesIcon);
        return possibleConstructorReturn(this, (LanguagesIcon.__proto__ || Object.getPrototypeOf(LanguagesIcon)).apply(this, arguments));
    }

    createClass(LanguagesIcon, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(LanguagesIcon.prototype.__proto__ || Object.getPrototypeOf(LanguagesIcon.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle("white-space", "nowrap");
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                value: UI.createElement(UI.Emoji, { height: "1.8em", width: "1.8em", value: Language.Locale.flagEmoji })
            };
        }
    }, {
        key: "render",
        value: function render() {
            var _this7 = this;

            var languagesList = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                var _loop = function _loop() {
                    var language = _step.value;

                    var onLanguageSelect = function onLanguageSelect() {
                        _this7.setLanguage(language);
                        _this7.options.value = UI.createElement(UI.Emoji, { height: "1.8em", width: "1.8em", value: language.flagEmoji });
                        _this7.redraw();
                    };
                    languagesList.push(UI.createElement(NavElement, { onClick: onLanguageSelect,
                        value: [UI.createElement(UI.Emoji, { height: "1.8em", width: "1.8em",
                            value: language.flagEmoji }), language.toString()] }));
                };

                for (var _iterator = this.constructor.Languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return languagesList;
        }
    }, {
        key: "setLanguage",
        value: function setLanguage(language) {
            Language.setLocale(language);

            var request = {
                localeLanguageId: language.id
            };

            Ajax.postJSON("/accounts/profile_changed/", request).then(function () {}, function () {});
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            get(LanguagesIcon.prototype.__proto__ || Object.getPrototypeOf(LanguagesIcon.prototype), "onMount", this).call(this);
            setTimeout(function () {
                _this8.options.value = UI.createElement(UI.Emoji, { height: "1.8em", width: "1.8em", value: Language.Locale.flagEmoji });
                _this8.redraw();
            });
        }
    }], [{
        key: "addLanguage",
        value: function addLanguage(language, flagEmoji) {
            if (language) {
                language.flagEmoji = flagEmoji;
                this.Languages.push(language);
            }
        }
    }]);
    return LanguagesIcon;
}(NavElement);

LanguagesIcon.Languages = [];

setTimeout(function () {
    LanguagesIcon.addLanguage(Language.ENGLISH, "flag_gb");
    LanguagesIcon.addLanguage(Language.ROMANIAN, "flag_ro");
    LanguagesIcon.addLanguage(Language.RUSSIAN, "flag_ru");
    LanguagesIcon.addLanguage(Language.ARABIC, "flag_ara");
});

var WebsocketStatusIcon = function (_NavElement2) {
    inherits(WebsocketStatusIcon, _NavElement2);

    function WebsocketStatusIcon() {
        classCallCheck(this, WebsocketStatusIcon);
        return possibleConstructorReturn(this, (WebsocketStatusIcon.__proto__ || Object.getPrototypeOf(WebsocketStatusIcon)).apply(this, arguments));
    }

    createClass(WebsocketStatusIcon, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.value = [UI.createElement(FAIcon, { icon: "circle", style: { color: "#d99a01", marginRight: "10px" } }), UI.T("Connecting")];
            get(WebsocketStatusIcon.prototype.__proto__ || Object.getPrototypeOf(WebsocketStatusIcon.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(WebsocketStatusIcon.prototype.__proto__ || Object.getPrototypeOf(WebsocketStatusIcon.prototype), "getNodeAttributes", this).call(this);
            attr.setStyle("cursor", "default");
            return attr;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this10 = this;

            var setIconStatus = function setIconStatus() {
                var connectionStatus = WebsocketSubscriber.Global.connectionStatus;
                var statusTypes = WebsocketSubscriber.ConnectionStatus;
                switch (connectionStatus) {
                    case statusTypes.CONNECTED:
                        {
                            _this10.options.value[0].setStyle("color", "#417a5a");
                            _this10.options.value[1] = UI.T("Connected");
                            break;
                        }
                    case statusTypes.CONNECTING:
                        {
                            _this10.options.value[0].setStyle("color", "#d99a01");
                            _this10.options.value[1] = UI.T("Connecting");
                            break;
                        }
                    case statusTypes.DISCONNECTED:
                        {
                            _this10.options.value[0].setStyle("color", "#d64144");
                            _this10.options.value[1] = UI.T("Disconnected");
                        }
                }
                _this10.redraw();
            };
            WebsocketSubscriber.Global.addListener("connectionStatus", function () {
                setIconStatus();
            });
            setIconStatus();
        }
    }]);
    return WebsocketStatusIcon;
}(NavElement);

var _class$62, _descriptor$26, _dec$28, _class3$16, _class5$5, _descriptor2$23;

function _initDefineProp$27(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$27(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var PersistentAccordionStyle = (_class$62 = function (_AccordionStyle) {
    inherits(PersistentAccordionStyle, _AccordionStyle);

    function PersistentAccordionStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, PersistentAccordionStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = PersistentAccordionStyle.__proto__ || Object.getPrototypeOf(PersistentAccordionStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$27(_this, "accordion", _descriptor$26, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return PersistentAccordionStyle;
}(AccordionStyle), _descriptor$26 = _applyDecoratedDescriptor$27(_class$62.prototype, "accordion", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">:nth-of-type(odd)": {
                color: NavStyle.getInstance().colors.text,
                transition: "background-color " + NavStyle.getInstance().dimensions.backgroundTransitionDuration,
                ":hover": {
                    backgroundColor: NavStyle.getInstance().colors.sidepanelHover
                }
            }
        };
    }
}), _class$62);
var PersistentAccordion = (_dec$28 = registerStyle(PersistentAccordionStyle), _dec$28(_class3$16 = function (_Accordion) {
    inherits(PersistentAccordion, _Accordion);

    function PersistentAccordion() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, PersistentAccordion);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = PersistentAccordion.__proto__ || Object.getPrototypeOf(PersistentAccordion)).call.apply(_ref2, [this].concat(args))), _this2), _this2.sessionManager = navSessionManager, _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    createClass(PersistentAccordion, [{
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            get(PersistentAccordion.prototype.__proto__ || Object.getPrototypeOf(PersistentAccordion.prototype), "onMount", this).call(this);

            var childrenStatus = this.sessionManager.get(this.options.sessionKey);
            if (childrenStatus) {
                this.setChildrenStatus(childrenStatus);
            } else {
                this.setChildrenStatus(this.getDefaultChildrenStatus());
            }

            this.addListener("childrenStatusChange", function () {
                _this3.sessionManager.set(_this3.options.sessionKey, _this3.getChildrenStatus());
                NavManager.Global.dispatch("changedAccordion");
            });
            this.addListener("dragging", function () {
                NavManager.Global.dispatch("changedAccordion");
            });
        }
    }]);
    return PersistentAccordion;
}(Accordion$$1)) || _class3$16);
var OnlineButtonStyle = (_class5$5 = function (_StyleSheet) {
    inherits(OnlineButtonStyle, _StyleSheet);

    function OnlineButtonStyle() {
        var _ref3;

        var _temp3, _this4, _ret3;

        classCallCheck(this, OnlineButtonStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this4 = possibleConstructorReturn(this, (_ref3 = OnlineButtonStyle.__proto__ || Object.getPrototypeOf(OnlineButtonStyle)).call.apply(_ref3, [this].concat(args))), _this4), _initDefineProp$27(_this4, "online", _descriptor2$23, _this4), _temp3), possibleConstructorReturn(_this4, _ret3);
    }

    return OnlineButtonStyle;
}(StyleSheet), _descriptor2$23 = _applyDecoratedDescriptor$27(_class5$5.prototype, "online", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            height: "calc(1em + 16px)",
            padding: "8px",
            top: 0,
            position: "absolute",
            right: 0,
            color: enhance(this.themeProperties.COLOR_PRIMARY, 1),
            cursor: "pointer",
            backgroundColor: enhance(this.themeProperties.COLOR_PRIMARY, .2),
            ":hover": {
                backgroundColor: enhance(this.themeProperties.COLOR_PRIMARY, .3)
            }
        };
    }
}), _class5$5);

var CSANavManager = function (_NavManager) {
    inherits(CSANavManager, _NavManager);

    function CSANavManager() {
        classCallCheck(this, CSANavManager);
        return possibleConstructorReturn(this, (CSANavManager.__proto__ || Object.getPrototypeOf(CSANavManager)).apply(this, arguments));
    }

    createClass(CSANavManager, [{
        key: "getRightFixed",
        value: function getRightFixed() {
            if (USER.isAuthenticated) {
                return [UI.createElement(
                    NavAnchoredNotifications,
                    { anchor: Direction.RIGHT },
                    UI.createElement(LanguagesIcon, null),
                    UI.createElement(MessagesIcon, null),
                    UI.createElement(NotificationsIcon, null)
                )];
            } else {
                return [UI.createElement(
                    NavSection,
                    { anchor: Direction.RIGHT },
                    UI.createElement(LanguagesIcon, null),
                    UI.createElement(NavElement, { value: [UI.createElement(FAIcon, { icon: "sign-in", style: Object.assign({}, { fontSize: "170%", paddingRight: "6px", width: "auto", verticalAlign: "middle" }) }), UI.T("Sign in")], style: { textTransform: "uppercase" }, onClick: function onClick() {
                            return LoginModal.show();
                        } })
                )];
            }
        }
    }, {
        key: "getSuperUserArea",
        value: function getSuperUserArea() {
            if (!USER.isSuperUser && !USER.isProblemsetter) {
                return [];
            }
            var problemsetterLinks = [UI.createElement(NavLinkElement, { value: [UI.T("Eval Tasks")], href: "/eval/manager/" }), UI.createElement(NavLinkElement, { value: [UI.T("My Contests")], href: "/contest/manager/" })];
            if (USER.isSuperUser) {
                return [UI.createElement("hr", { className: this.styleSheet.hrStyle }), UI.createElement(
                    NavSection,
                    null,
                    UI.createElement(
                        NavElement,
                        { value: UI.T("Server (Admin)"), persistent: true, sessionKey: "server" },
                        UI.createElement(NavLinkElement, { value: [UI.T("Machines")], href: "/manage/icarus/" }),
                        UI.createElement(NavLinkElement, { value: [UI.T("Analytics")], href: "/analytics/" }),
                        UI.createElement(NavLinkElement, { value: [UI.T("Users")], href: "/manage/users/" }),
                        UI.createElement(NavLinkElement, { value: [UI.T("Commands")], href: "/baseconfig/command/manager/" }),
                        UI.createElement(NavLinkElement, { value: [UI.T("Testing")], href: "/testing/" })
                    ),
                    UI.createElement(
                        NavElement,
                        { value: UI.T("Content (Admin)"), persistent: true, sessionKey: "content" },
                        [].concat(problemsetterLinks, [UI.createElement(NavLinkElement, { value: [UI.T("Checkers")], href: "/eval/checkers/" }), UI.createElement(NavLinkElement, { value: [UI.T("Private Archives")], href: "/private-archives/" }), UI.createElement(NavLinkElement, { value: [UI.T("Eval Jobs")], href: "/eval/global/" }), UI.createElement(NavLinkElement, { value: [UI.T("Articles")], href: "/article/manager/" }), UI.createElement(NavLinkElement, { value: [UI.T("Real Ratings")], href: "/real_ratings/" }), UI.createElement(NavLinkElement, { value: [UI.T("Reputation")], href: "/reputations/" })])
                    )
                )];
            }
            return [UI.createElement("hr", { className: this.styleSheet.hrStyle }), UI.createElement(
                NavElement,
                { value: UI.T("Content (Admin)"), persistent: true, sessionKey: "content" },
                problemsetterLinks
            )];
        }
    }, {
        key: "getLeftSidePanelFixedChildren",
        value: function getLeftSidePanelFixedChildren() {
            return [];
        }
    }, {
        key: "getLeftSidePanelChildren",
        value: function getLeftSidePanelChildren() {
            var userArea = [];
            if (USER.isAuthenticated) {
                var currentUser = UserStore.getCurrentUser();
                var myProfileLink = USER.username ? "/user/" + USER.username : "/userid/" + USER.id;
                var currentUserDisplay = currentUser.displayName ? currentUser.firstName + " " + currentUser.lastName : currentUser.username;
                currentUserDisplay = currentUserDisplay || UI.createElement(
                    "em",
                    { style: { color: "red" } },
                    UI.createElement(
                        "strong",
                        null,
                        "no username set"
                    )
                );
                userArea.push(UI.createElement(
                    NavElement,
                    { value: ["Profile (", currentUserDisplay, ")"], persistent: true, sessionKey: "user", defaultToggled: true },
                    UI.createElement(NavLinkElement, { value: [UI.T("My Profile")], href: myProfileLink }),
                    UI.createElement(NavLinkElement, { value: [UI.T("Account Settings")], href: "/accounts/settings/" }),
                    UI.createElement(NavLinkElement, { value: [UI.T("Workspace Settings")], href: "/accounts/workspace_settings/" }),
                    UI.createElement(NavLinkElement, { value: [UI.T("Messages")], href: "/messages/" })
                ));
                userArea.push(UI.createElement(NavElement, { value: [UI.T("Logout")], onClick: function onClick() {
                        return Logout.logout();
                    } }));
            }
            userArea.push(UI.createElement(WebsocketStatusIcon, null));
            return [UI.createElement(
                NavSection,
                null,
                UI.createElement(NavLinkElement, { value: [UI.createElement(CSALogo, { style: { marginRight: "6px", verticalAlign: "middle" },
                        size: "14", color: getTextColor(Theme.Global.properties.COLOR_PRIMARY), background: "transparent" }), UI.T("Home")], href: "/" }),
                UI.createElement(
                    NavElement,
                    { value: UI.T("Interviews"), persistent: true, sessionKey: "interviews", defaultToggled: true },
                    UI.createElement(NavLinkElement, { value: UI.T("Tasks"), href: "/contest/interview-archive/" }),
                    UI.createElement(NavLinkElement, { value: UI.T("My Interviews"), href: "/interview/" })
                ),
                UI.createElement(
                    NavElement,
                    { value: UI.T("Algorithms"), persistent: true, sessionKey: "algorithms", defaultToggled: true },
                    UI.createElement(NavLinkElement, { value: UI.T("Tasks"), href: "/contest/archive/" }),
                    UI.createElement(NavLinkElement, { value: UI.T("Lessons"), href: "/lessons/" }),
                    UI.createElement(NavLinkElement, { value: UI.T("Contests"), href: "/contests/" }),
                    UI.createElement(NavLinkElement, { value: UI.T("Leaderboard"), href: "/ratings/" })
                ),
                UI.createElement(
                    NavElement,
                    { value: UI.T("Apps"), persistent: true, sessionKey: "apps" },
                    UI.createElement(NavLinkElement, { value: UI.T("Graph Editor"), href: "/app/graph_editor/" }),
                    UI.createElement(NavLinkElement, { value: UI.T("Geometry Widget"), href: "/app/geometry_widget/" }),
                    UI.createElement(NavLinkElement, { value: UI.T("Diff Tool"), href: "/app/diffing_tool/" })
                ),
                UI.createElement(NavLinkElement, { value: UI.T("Workspace"), href: "/workspace/" })
            ), UI.createElement("hr", { className: this.styleSheet.hrStyle }), UI.createElement(
                NavSection,
                null,
                UI.createElement(NavLinkElement, { value: UI.T("Forum"), href: "/forum/" }),
                UI.createElement(NavLinkElement, { value: UI.T("Blog"), href: "/blog/" }),
                UI.createElement(NavLinkElement, { value: UI.T("About"), href: "/about/" })
            ), UI.createElement("hr", { className: this.styleSheet.hrStyle }), UI.createElement(
                NavSection,
                null,
                userArea
            )].concat(toConsumableArray(this.getSuperUserArea()));
        }
    }, {
        key: "getRightSidePanelChildren",
        value: function getRightSidePanelChildren() {
            var onlineButton = UI.createElement("div", { ref: this.refLink("onlineButton"), className: OnlineButtonStyle.getInstance().online });

            return [UI.createElement(
                NavSection,
                { style: { height: "100%", position: "relative" } },
                UI.createElement(
                    PersistentAccordion,
                    { ref: this.refLink("accordion"),
                        style: { height: "100%", bottom: "0" }, sessionKey: "accordion" },
                    UI.createElement(NavGlobalChat, { ref: this.refLink("navChat"), style: { backgroundColor: "#fafafa" },
                        title: [UI.T("Chat"), onlineButton] }),
                    UI.createElement(NavRecentActivity, { title: UI.T("Activity"), style: { backgroundColor: "#fafafa" } })
                ),
                onlineButton
            )];
        }
    }, {
        key: "initGlobalRouterListener",
        value: function initGlobalRouterListener() {
            var _this6 = this;

            Router.Global.addListener("change", function () {
                // TODO: This needs rethinking
                setTimeout(function () {
                    _this6.checkForWrap();
                }, 0);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            get(CSANavManager.prototype.__proto__ || Object.getPrototypeOf(CSANavManager.prototype), "onMount", this).call(this);

            // This is also dispatched on url change
            document.body.addEventListener("click", function () {
                if (_this7.leftSidePanel && _this7.leftSidePanel.visible) {
                    _this7.toggleLeftSidePanel();
                }
            });

            this.attachListener(this.navChat, "updateOnlineUsers", function () {
                return _this7.onlineButton.setChildren([UI.createElement(FAIcon, { icon: "users", style: { marginRight: "5px" } }), _this7.navChat.onlineUsers.size + " online"]);
            });

            this.onlineButton.addClickListener(function () {
                return _this7.togglePopup(_this7.navChat.onlineUsers);
            });
        }
    }, {
        key: "togglePopup",
        value: function togglePopup(onlineUsers) {
            if (this.onlineUsersPopup && this.onlineUsersPopup.isInDocument()) {
                this.onlineUsersPopup.hide();
                delete this.onlineUsersPopup;
                return;
            }
            if (onlineUsers.size) {
                this.onlineUsersPopup = BasePopup.create(document.body, {
                    target: this.onlineButton,
                    children: Array.from(onlineUsers).map(function (userId) {
                        return UI.createElement(
                            "div",
                            { style: { width: "100%" } },
                            UI.createElement(UserHandle, {
                                userId: userId })
                        );
                    }),
                    arrowDirection: Direction.UP,
                    bodyPlaced: true,
                    style: {
                        zIndex: 3000
                    }
                });
            }
        }
    }]);
    return CSANavManager;
}(NavManager);

// You can configure the loading/error states by defining the "renderLoading" and "renderError" attributes of the
// function somewhere globally in your app.
// Example:
// StateDependentElement.renderLoading = "Loading...";
// or
// StateDependentElement.renderLoading = () => <MyCustomLoadingAnimation />
// StateDependentElement.renderError = (error) => <MyCustomErrorMessageClass error={error} />

var StateDependentElement = function StateDependentElement(BaseClass) {
    return function (_DelayedElement) {
        inherits(StateDependentElementClass, _DelayedElement);

        function StateDependentElementClass() {
            classCallCheck(this, StateDependentElementClass);
            return possibleConstructorReturn(this, (StateDependentElementClass.__proto__ || Object.getPrototypeOf(StateDependentElementClass)).apply(this, arguments));
        }

        createClass(StateDependentElementClass, [{
            key: "importState",
            value: function importState(data) {
                GlobalState.importState(data.state || {});
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Object.keys(data)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var key = _step.value;

                        if (key !== "state") {
                            this.options[key] = data[key];
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        }, {
            key: "getAjaxUrl",
            value: function getAjaxUrl() {
                var url = location.pathname;
                if (!url.endsWith("/")) {
                    url += "/";
                }
                return url;
            }
        }, {
            key: "getAjaxRequest",
            value: function getAjaxRequest() {
                return {};
            }
        }, {
            key: "renderNotLoaded",
            value: function renderNotLoaded() {
                var renderLoading = StateDependentElement.renderLoading;
                if (typeof renderLoading === "function") {
                    renderLoading = renderLoading();
                }
                return renderLoading;
            }
        }, {
            key: "setError",
            value: function setError(error) {
                this.options.error = error;
            }
        }, {
            key: "renderError",
            value: function renderError() {
                var renderError = StateDependentElement.renderError;
                if (typeof renderError === "function") {
                    renderError = renderError(this.options.error);
                }
                return renderError;
            }
        }, {
            key: "renderLoaded",
            value: function renderLoaded() {
                if (this.options.error) {
                    return this.renderError();
                }
                return get(StateDependentElementClass.prototype.__proto__ || Object.getPrototypeOf(StateDependentElementClass.prototype), "renderLoaded", this).call(this);
            }
        }, {
            key: "onDelayedMount",
            value: function onDelayedMount() {
                if (!this.options.error) {
                    get(StateDependentElementClass.prototype.__proto__ || Object.getPrototypeOf(StateDependentElementClass.prototype), "onDelayedMount", this).call(this);
                }
            }
        }, {
            key: "beforeRedrawNotLoaded",
            value: function beforeRedrawNotLoaded() {
                var _this2 = this;

                Ajax.getJSON(this.getAjaxUrl(), this.getAjaxRequest()).then(function (data) {
                    _this2.importState(data);
                    _this2.setLoaded();
                }, function (error) {
                    _this2.setError(error);
                    _this2.setLoaded();
                });
            }
        }]);
        return StateDependentElementClass;
    }(DelayedElement(BaseClass));
};

StateDependentElement.renderLoading = function () {
    return UI.createElement(ConcentricCirclesLoadingScreen, null);
};

StateDependentElement.renderError = function (error, message) {
    return UI.createElement(
        "div",
        { style: { maxWidth: "300px", margin: "0 auto", marginTop: "30px" } },
        UI.createElement(
            CardPanel,
            { title: UI.T("Error in opening the URL"), level: Level.ERROR },
            UI.createElement(
                "h3",
                null,
                message || error.message
            )
        )
    );
};

var PopupSpan = function (_UI$Primitive) {
    inherits(PopupSpan, _UI$Primitive);

    function PopupSpan() {
        classCallCheck(this, PopupSpan);
        return possibleConstructorReturn(this, (PopupSpan.__proto__ || Object.getPrototypeOf(PopupSpan)).apply(this, arguments));
    }

    createClass(PopupSpan, [{
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            return [UI.createElement(
                "div",
                { ref: "content" },
                this.render()
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.content.addNodeListener("mouseover", function () {
                var content = _this2.options.popupContent;
                if (typeof content === "function") {
                    content = content();
                }
                _this2.popup = BasePopup.create(_this2.content, Object.assign({
                    target: _this2.content,
                    children: content,
                    transitionTime: 300,
                    titleFontSize: "10pt",
                    contentStyle: {
                        padding: "0 0 0 5px",
                        textAlign: "left"
                    },
                    style: {
                        minWidth: "100px",
                        maxWidth: "300px"
                    }
                }, _this2.options.popupOptions || {}));
            });
            this.content.addNodeListener("mouseout", function () {
                if (_this2.popup) {
                    _this2.popup.hide();
                }
            });
        }
    }]);
    return PopupSpan;
}(UI.Primitive("span"));

var TransferOwnershipModal = function (_ActionModal) {
    inherits(TransferOwnershipModal, _ActionModal);

    function TransferOwnershipModal() {
        classCallCheck(this, TransferOwnershipModal);
        return possibleConstructorReturn(this, (TransferOwnershipModal.__proto__ || Object.getPrototypeOf(TransferOwnershipModal)).apply(this, arguments));
    }

    createClass(TransferOwnershipModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Transfer ownership";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getArticle",
        value: function getArticle() {
            return this.options.article;
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(UI.TextElement, { ref: "text", value: "Set owner for " + this.getArticle().name + ":" }), UI.createElement(
                Form,
                { style: { marginTop: "10px" } },
                UI.createElement(
                    FormField,
                    { ref: "ownerFormField", label: "Author ID" },
                    UI.createElement(TextInput, { ref: "ownerFormInput", value: this.getArticle().userCreatedId })
                )
            )];
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this2 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this2.hide();
                    } }),
                UI.createElement(AjaxButton, { ref: "transferOwnershipButton", level: this.getActionLevel(), onClick: function onClick() {
                        return _this2.action();
                    },
                    statusOptions: [this.getActionName(), { faIcon: "spinner fa-spin", label: " transfering ownership ..." }, this.getActionName(), "Failed"] })
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this3 = this;

            var newOwner = this.ownerFormInput.getValue();
            var request = {
                newOwner: newOwner
            };

            this.messageArea.showMessage("Saving...", "black", null);

            this.transferOwnershipButton.postJSON("/article/" + this.getArticle().id + "/set_owner/", request).then(function () {
                return _this3.hide();
            }, function (error) {
                return _this3.messageArea.showMessage("Error in changing owner " + error.message, "red");
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(TransferOwnershipModal.prototype.__proto__ || Object.getPrototypeOf(TransferOwnershipModal.prototype), "hide", this).call(this);
        }
    }]);
    return TransferOwnershipModal;
}(ActionModal);

var DeleteArticleModal = function (_ActionModal2) {
    inherits(DeleteArticleModal, _ActionModal2);

    function DeleteArticleModal() {
        classCallCheck(this, DeleteArticleModal);
        return possibleConstructorReturn(this, (DeleteArticleModal.__proto__ || Object.getPrototypeOf(DeleteArticleModal)).apply(this, arguments));
    }

    createClass(DeleteArticleModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Delete article";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(UI.TextElement, { ref: "text", value: "Delete " + this.getArticle().name + "?" });
        }
    }, {
        key: "getArticle",
        value: function getArticle() {
            return this.options.article;
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this5 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this5.hide();
                    } }),
                UI.createElement(AjaxButton, { ref: "deleteArticleButton", level: Level.DANGER, onClick: function onClick() {
                        _this5.deleteArticle();
                    },
                    statusOptions: ["Delete article", { faIcon: "spinner fa-spin", label: " deleting article ..." }, "Delete article", "Failed"] })
            )];
        }
    }, {
        key: "deleteArticle",
        value: function deleteArticle() {
            var _this6 = this;

            this.deleteArticleButton.postJSON("/article/" + this.getArticle().id + "/delete/", {}).then(function () {
                var table = _this6.options.parent.table;
                table.options.articles.splice(table.getArticleIndex(_this6.getArticle().id), 1);
                table.redraw();
                _this6.hide();
            }, function (error) {
                return _this6.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(DeleteArticleModal.prototype.__proto__ || Object.getPrototypeOf(DeleteArticleModal.prototype), "hide", this).call(this);
        }
    }]);
    return DeleteArticleModal;
}(ActionModal);

var CreateArticleModal = function (_ActionModal3) {
    inherits(CreateArticleModal, _ActionModal3);

    function CreateArticleModal() {
        classCallCheck(this, CreateArticleModal);
        return possibleConstructorReturn(this, (CreateArticleModal.__proto__ || Object.getPrototypeOf(CreateArticleModal)).apply(this, arguments));
    }

    createClass(CreateArticleModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Create article";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                Form,
                { style: { marginTop: "10px" } },
                UI.createElement(
                    FormField,
                    { ref: "articleNameFormField", label: "Article name" },
                    UI.createElement(TextInput, { ref: "articleNameInput", value: "" })
                ),
                UI.createElement(
                    FormField,
                    { ref: "dependencyFormField", label: "Dependencies" },
                    UI.createElement(TextInput, { ref: "dependencyInput", value: "" })
                ),
                UI.createElement(
                    FormField,
                    { ref: "languageFormField", label: "Language" },
                    UI.createElement(Select, { ref: "languageSelect", options: Language.all() })
                ),
                UI.createElement(
                    FormField,
                    { ref: "publicFormField", label: "Public" },
                    UI.createElement(CheckboxInput, { ref: "publicCheckbox", checked: false })
                )
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this8 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this8.hide();
                    } }),
                UI.createElement(AjaxButton, { ref: "createArticleButton", level: Level.PRIMARY, onClick: function onClick() {
                        _this8.createArticle();
                    },
                    statusOptions: ["Create article", { faIcon: "spinner fa-spin", label: " creating article ..." }, "Create article", "Failed"] })
            )];
        }
    }, {
        key: "createArticle",
        value: function createArticle(options) {
            var _this9 = this;

            var name = this.articleNameInput.getValue();
            var dependency = this.dependencyInput.getValue();
            var languageId = this.languageSelect.get().id;
            var isPublic = this.publicCheckbox.getValue();
            var request = {
                name: name,
                dependency: dependency,
                languageId: languageId,
                isPublic: isPublic
            };
            if (options) {
                Object.assign(request, options);
            }
            this.createArticleButton.postJSON("/create_article/", request).then(function (data) {
                _this9.options.parent.table.addArticle(ArticleStore.get(data.article.id));
                _this9.hide();
            }, function (error) {
                _this9.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(CreateArticleModal.prototype.__proto__ || Object.getPrototypeOf(CreateArticleModal.prototype), "hide", this).call(this);
        }
    }]);
    return CreateArticleModal;
}(ActionModal);

var AddTranslationModal = function (_CreateArticleModal) {
    inherits(AddTranslationModal, _CreateArticleModal);

    function AddTranslationModal() {
        classCallCheck(this, AddTranslationModal);
        return possibleConstructorReturn(this, (AddTranslationModal.__proto__ || Object.getPrototypeOf(AddTranslationModal)).apply(this, arguments));
    }

    createClass(AddTranslationModal, [{
        key: "getActioName",
        value: function getActioName() {
            return "Add translation";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            var baseArticle = this.options.baseArticle;
            return UI.createElement(
                Form,
                { style: { marginTop: "10px" } },
                UI.createElement(
                    FormField,
                    { ref: "articleNameFormField", label: "Article name" },
                    UI.createElement(TextInput, { ref: "articleNameInput", value: "Translation for " + baseArticle.name })
                ),
                UI.createElement(
                    FormField,
                    { ref: "dependencyFormField", label: "Dependencies" },
                    UI.createElement(TextInput, { ref: "dependencyInput", value: baseArticle.dependency })
                ),
                UI.createElement(
                    FormField,
                    { ref: "languageFormField", label: "Language" },
                    UI.createElement(Select, { ref: "languageSelect", options: Language.all() })
                ),
                UI.createElement(
                    FormField,
                    { ref: "publicFormField", label: "Public" },
                    UI.createElement(CheckboxInput, { ref: "publicCheckbox", checked: baseArticle.isPublic })
                )
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this11 = this;

            var baseArticle = this.options.baseArticle;
            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this11.hide();
                    } }),
                UI.createElement(AjaxButton, { ref: "createArticleButton", level: Level.PRIMARY,
                    onClick: function onClick() {
                        return _this11.createArticle({
                            baseArticleId: baseArticle.id,
                            markup: baseArticle.markup
                        });
                    },
                    statusOptions: ["Add translation", { faIcon: "spinner fa-spin", label: " creating translation article ..." }, "Success", "Failed"] })
            )];
        }
    }]);
    return AddTranslationModal;
}(CreateArticleModal);

var ArticleOwnerSpan = function (_UI$Primitive) {
    inherits(ArticleOwnerSpan, _UI$Primitive);

    function ArticleOwnerSpan() {
        classCallCheck(this, ArticleOwnerSpan);
        return possibleConstructorReturn(this, (ArticleOwnerSpan.__proto__ || Object.getPrototypeOf(ArticleOwnerSpan)).apply(this, arguments));
    }

    createClass(ArticleOwnerSpan, [{
        key: "getArticle",
        value: function getArticle() {
            return this.options.article;
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(UserHandle, { id: this.getArticle().userCreatedId });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this13 = this;

            this.attachUpdateListener(this.getArticle(), function () {
                return _this13.redraw();
            });
        }
    }]);
    return ArticleOwnerSpan;
}(UI.Primitive("span"));

var ArticlePublicSpan = function (_FAIcon) {
    inherits(ArticlePublicSpan, _FAIcon);

    function ArticlePublicSpan() {
        classCallCheck(this, ArticlePublicSpan);
        return possibleConstructorReturn(this, (ArticlePublicSpan.__proto__ || Object.getPrototypeOf(ArticlePublicSpan)).apply(this, arguments));
    }

    createClass(ArticlePublicSpan, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                size: "lg"
            };
        }
    }, {
        key: "getArticle",
        value: function getArticle() {
            return this.options.article;
        }
    }, {
        key: "isPublic",
        value: function isPublic() {
            return this.options.article.isPublic;
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(ArticlePublicSpan.prototype.__proto__ || Object.getPrototypeOf(ArticlePublicSpan.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle("color", this.isPublic() ? "green" : "red");
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(ArticlePublicSpan.prototype.__proto__ || Object.getPrototypeOf(ArticlePublicSpan.prototype), "setOptions", this).call(this, options);
            this.options.icon = this.isPublic() ? "check" : "times";
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this15 = this;

            this.attachUpdateListener(this.getArticle(), function () {
                return _this15.updateOptions({ icon: _this15.isPublic() ? "check" : "times" });
            });
        }
    }]);
    return ArticlePublicSpan;
}(FAIcon);

var ArticleTable = function (_SortableTable) {
    inherits(ArticleTable, _SortableTable);

    function ArticleTable() {
        classCallCheck(this, ArticleTable);
        return possibleConstructorReturn(this, (ArticleTable.__proto__ || Object.getPrototypeOf(ArticleTable)).apply(this, arguments));
    }

    createClass(ArticleTable, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(ArticleTable.prototype.__proto__ || Object.getPrototypeOf(ArticleTable.prototype), "setOptions", this).call(this, options);
            this.resetColumnSortingOrder();
        }
    }, {
        key: "resetColumnSortingOrder",
        value: function resetColumnSortingOrder() {
            this.columnSortingOrder = [this.columns[4], this.columns[5], this.columns[0], this.columns[3], this.columns[2], this.columns[1]];
        }
    }, {
        key: "getArticleIndex",
        value: function getArticleIndex(articleId) {
            for (var i = 0; i < this.options.articles.length; i += 1) {
                if (this.options.articles[i].id === articleId) return i;
            }
            return -1;
        }
    }, {
        key: "addArticle",
        value: function addArticle(article) {
            this.options.articles.push(article);
            this.redraw();
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var _this17 = this;

            var cellStyle = {
                textAlign: "left",
                verticalAlign: "middle"
            };
            var headerStyle = {
                textAlign: "left",
                verticalAlign: "middle"
            };
            var columns = [{
                value: function value(article) {
                    return UI.createElement(Link, { href: "/article/" + article.id + "/edit/", value: article.name });
                },
                rawValue: function rawValue(article) {
                    return article.name;
                },
                headerName: "Article",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(article) {
                    return UI.createElement(ArticleOwnerSpan, { article: article });
                },
                rawValue: function rawValue(article) {
                    return PublicUserStore.get(article.userCreatedId).username;
                },
                headerName: "Author",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(article) {
                    return UI.createElement(ArticlePublicSpan, { article: article });
                },
                rawValue: function rawValue(article) {
                    return article.isPublic ? "Yes" : "No";
                },
                headerName: "Public",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(article) {
                    return Language.get(article.languageId).name;
                },
                rawValue: function rawValue(article) {
                    return Language.get(article.languageId).name;
                },
                headerName: "Language",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(article) {
                    return StemDate.unix(article.dateCreated).locale("en").format("DD/MM/YYYY HH:mm:ss");
                },
                rawValue: function rawValue(article) {
                    return article.dateCreated;
                },
                sortDescending: true,
                headerName: "Date created",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(article) {
                    return StemDate.unix(article.dateModified).locale("en").format("DD/MM/YYYY HH:mm:ss");
                },
                rawValue: function rawValue(article) {
                    return article.dateModified;
                },
                sortDescending: true,
                headerName: "Date modified",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }];
            if (!this.options.parent.options.readOnly) {
                if (USER.isSuperUser) {
                    columns.push({
                        value: function value(article) {
                            return UI.createElement(Button, { level: Level.PRIMARY, label: "Set owner",
                                onClick: function onClick() {
                                    return TransferOwnershipModal.show({ article: article });
                                } });
                        },
                        headerName: "Set owner",
                        headerStyle: headerStyle,
                        cellStyle: cellStyle
                    });
                }
                columns.push({
                    value: function value(article) {
                        return UI.createElement(Button, { level: Level.DANGER, label: "Delete",
                            onClick: function onClick() {
                                DeleteArticleModal.show({
                                    article: article,
                                    parent: _this17.options.parent
                                });
                            } });
                    },
                    headerName: "Delete",
                    headerStyle: headerStyle,
                    cellStyle: cellStyle
                });
            }
            get(ArticleTable.prototype.__proto__ || Object.getPrototypeOf(ArticleTable.prototype), "setColumns", this).call(this, columns);
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.sortEntries(this.options.articles);
        }
    }]);
    return ArticleTable;
}(SortableTable);

var ArticleManager = function (_Panel) {
    inherits(ArticleManager, _Panel);

    function ArticleManager() {
        classCallCheck(this, ArticleManager);
        return possibleConstructorReturn(this, (ArticleManager.__proto__ || Object.getPrototypeOf(ArticleManager)).apply(this, arguments));
    }

    createClass(ArticleManager, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                title: "Article manager",
                articles: []
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(ArticleManager.prototype.__proto__ || Object.getPrototypeOf(ArticleManager.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.SMALL);
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign(this.getDefaultOptions(), options);
            get(ArticleManager.prototype.__proto__ || Object.getPrototypeOf(ArticleManager.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "render",
        value: function render() {
            var _this19 = this;

            var addButton = null;
            if (!this.options.readOnly) {
                addButton = UI.createElement(
                    "div",
                    { className: "pull-right" },
                    UI.createElement(Button, { level: Level.PRIMARY, label: "Create article",
                        onClick: function onClick() {
                            return CreateArticleModal.show({ parent: _this19 });
                        },
                        style: { marginTop: "5px", marginBottom: "5px" } })
                );
            }

            return [UI.createElement(
                "div",
                { className: "pull-left" },
                UI.createElement(
                    "h4",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        this.options.title
                    )
                )
            ), addButton, UI.createElement(ArticleTable, { ref: "table", articles: this.options.articles, parent: this })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this20 = this;

            if (this.options.articles && this.options.articles.length > 0) {
                return;
            }
            Ajax.getJSON("/get_available_articles/", {}).then(function () {
                return _this20.table.updateOptions({ articles: ArticleStore.all() });
            });
        }
    }]);
    return ArticleManager;
}(Panel);

var ArticleTranslationManager = function (_Panel2) {
    inherits(ArticleTranslationManager, _Panel2);

    function ArticleTranslationManager() {
        classCallCheck(this, ArticleTranslationManager);
        return possibleConstructorReturn(this, (ArticleTranslationManager.__proto__ || Object.getPrototypeOf(ArticleTranslationManager)).apply(this, arguments));
    }

    createClass(ArticleTranslationManager, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                title: "Translation manager"
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign(this.getDefaultOptions(), options);
            get(ArticleTranslationManager.prototype.__proto__ || Object.getPrototypeOf(ArticleTranslationManager.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "render",
        value: function render() {
            var _this22 = this;

            this.table = UI.createElement(ArticleTable, { articles: [], parent: this });
            var addButton = null;
            if (!this.options.readOnly) {
                addButton = UI.createElement(
                    "div",
                    { className: "pull-right" },
                    UI.createElement(Button, { level: Level.PRIMARY, label: "Add translation",
                        onClick: function onClick() {
                            return AddTranslationModal.show({
                                parent: _this22,
                                baseArticle: _this22.options.baseArticle
                            });
                        },
                        style: { marginTop: "5px", marginBottom: "5px" } })
                );
            }
            return [UI.createElement(
                "div",
                { className: "pull-left" },
                UI.createElement(
                    "h4",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        this.options.title
                    )
                )
            ), addButton, this.table];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this23 = this;

            if (!this.options.baseArticle) {
                return;
            }

            Ajax.getJSON("/article/" + this.options.baseArticle.id + "/get_translations/", {}).then(function () {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = ArticleStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var article = _step.value;

                        if (article.baseArticleId === _this23.options.baseArticle.id) {
                            _this23.table.options.articles.push(article);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                _this23.table.redraw();
            });
        }
    }]);
    return ArticleTranslationManager;
}(Panel);

var deleteRedirectLink = "/";

var ArticleMarkupEditor = function (_MarkupEditor) {
    inherits(ArticleMarkupEditor, _MarkupEditor);

    function ArticleMarkupEditor() {
        classCallCheck(this, ArticleMarkupEditor);
        return possibleConstructorReturn(this, (ArticleMarkupEditor.__proto__ || Object.getPrototypeOf(ArticleMarkupEditor)).apply(this, arguments));
    }

    createClass(ArticleMarkupEditor, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(ArticleMarkupEditor.prototype.__proto__ || Object.getPrototypeOf(ArticleMarkupEditor.prototype), "setOptions", this).call(this, options);
            this.options.value = this.options.article.markup;
        }
    }, {
        key: "getMarkupRenderer",
        value: function getMarkupRenderer() {
            return UI.createElement(ArticleRenderer, { ref: this.refLink("markupRenderer"), article: this.options.article, style: { flex: "1", height: "100%", overflow: "auto" } });
        }
    }, {
        key: "updateValue",
        value: function updateValue(markup) {
            this.options.article.markup = markup;
            get(ArticleMarkupEditor.prototype.__proto__ || Object.getPrototypeOf(ArticleMarkupEditor.prototype), "updateValue", this).call(this, markup);
        }
    }]);
    return ArticleMarkupEditor;
}(MarkupEditor);

var DeleteArticleModal$1 = function (_ActionModal) {
    inherits(DeleteArticleModal, _ActionModal);

    function DeleteArticleModal() {
        classCallCheck(this, DeleteArticleModal);
        return possibleConstructorReturn(this, (DeleteArticleModal.__proto__ || Object.getPrototypeOf(DeleteArticleModal)).apply(this, arguments));
    }

    createClass(DeleteArticleModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Delete Article";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                "Delete ",
                this.options.article.name,
                "?"
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this3 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this3.hide();
                    } }),
                UI.createElement(AjaxButton, { ref: "deleteArticleButton", level: Level.DANGER, onClick: function onClick() {
                        _this3.deleteArticle();
                    },
                    statusOptions: ["Delete article", { faIcon: "spinner fa-spin", label: " deleting article ..." }, "Delete article", "Failed"] })
            )];
        }
    }, {
        key: "deleteArticle",
        value: function deleteArticle() {
            var _this4 = this;

            this.deleteArticleButton.postJSON("/article/" + this.options.article.id + "/delete/", {}).then(function () {
                if (_this4.options.article.baseArticleId) window.location.replace("/article/" + _this4.options.article.baseArticleId + "/edit/");else window.location.replace(deleteRedirectLink);
            }, function (error) {
                return _this4.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return DeleteArticleModal;
}(ActionModal);

var ArticleEditor = function (_Panel) {
    inherits(ArticleEditor, _Panel);

    function ArticleEditor() {
        classCallCheck(this, ArticleEditor);
        return possibleConstructorReturn(this, (ArticleEditor.__proto__ || Object.getPrototypeOf(ArticleEditor)).apply(this, arguments));
    }

    createClass(ArticleEditor, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(ArticleEditor.prototype.__proto__ || Object.getPrototypeOf(ArticleEditor.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getArticle",
        value: function getArticle() {
            return ArticleStore.get(this.options.articleId);
        }
    }, {
        key: "initializeVersioning",
        value: function initializeVersioning() {
            if (ArticleEditor.DiffWidgetClass) {
                this.versions = [];
                this.versionsLabels = [];
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.getArticle().getEdits()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var article = _step.value;

                        this.versions.push(article.content);
                        this.versionsLabels.push("Version " + article.id);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                this.versions.push(this.getArticle().markup);
                this.versionsLabels.push("Edit version");
                this.versions.reverse();
                this.versionsLabels.reverse();

                this.leftEditable = true;
                this.rightEditable = false;
            }
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(ArticleEditor.prototype.__proto__ || Object.getPrototypeOf(ArticleEditor.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                display: "flex",
                flexDirection: "column",
                height: "100%"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this6 = this;

            this.initializeVersioning();
            var translationsPanel = null;
            var baseArticleForm = null;
            if (this.getArticle().baseArticleId) {
                baseArticleForm = UI.createElement(
                    FormField,
                    { ref: "baseArticleFormField", label: "Base article" },
                    UI.createElement(Link, { href: "/article/" + this.getArticle().baseArticleId + "/edit/", value: "Go to base article" })
                );
            } else {
                translationsPanel = UI.createElement(
                    Panel,
                    { title: "Translations" },
                    UI.createElement(ArticleTranslationManager, { title: "Translations for " + this.getArticle().name,
                        baseArticle: this.getArticle() })
                );
            }
            var ownershipPanel = null;
            if (USER.isSuperUser) {
                ownershipPanel = UI.createElement(
                    Panel,
                    { title: "Ownership" },
                    UI.createElement(
                        Form,
                        { style: { marginTop: "10px" } },
                        UI.createElement(
                            FormField,
                            { ref: "ownerFormField", label: "Author ID" },
                            UI.createElement(TextInput, { ref: "ownerFormInput", value: this.getArticle().userCreatedId })
                        )
                    ),
                    UI.createElement(AjaxButton, { ref: "setOwnerButton", level: Level.INFO, onClick: function onClick() {
                            var newOwner = _this6.ownerFormInput.getValue();
                            _this6.setOwner(newOwner);
                        },
                        statusOptions: ["Transfer ownership", { faIcon: "spinner fa-spin", label: " transfering ownership ..." }, "Transfer ownership", "Failed"]
                    }),
                    UI.createElement(TemporaryMessageArea, { ref: "setOwnerMessageArea" })
                );
            }

            var revisionsPanel = void 0;
            if (ArticleEditor.DiffWidgetClass) {
                var DiffWidgetClass = ArticleEditor.DiffWidgetClass;
                revisionsPanel = UI.createElement(
                    Panel,
                    { title: "Revisions", style: { height: "100%", display: "flex", flexDirection: "column" } },
                    UI.createElement(
                        Panel,
                        null,
                        UI.createElement(Select, { ref: "leftTextSelector", options: this.versionsLabels }),
                        UI.createElement(Select, { style: { float: "right", marginRight: "25px" }, ref: "rightTextSelector", options: this.versionsLabels })
                    ),
                    UI.createElement(DiffWidgetClass, { ref: "diffWidget", leftEditable: this.leftEditable, rightEditable: this.rightEditable,
                        leftTextValue: this.versions[2], arrows: this.arrows, rightTextValue: this.versions[1],
                        style: { flex: "1", height: "calc(100% - 100px)", width: "calc(100% - 100px)" } })
                );
            }

            return [UI.createElement(
                "h3",
                null,
                this.getArticle().name + " Id=" + this.options.articleId
            ), UI.createElement(
                TabArea,
                { ref: "tabArea", variableHeightPanels: true, style: { flex: "1", height: "100%", display: "flex", flexDirection: "column" } },
                UI.createElement(
                    Panel,
                    { title: "Edit", active: true, style: { height: "100%", overflow: "hidden" } },
                    UI.createElement(AjaxButton, { ref: "saveMarkupButton", level: Level.INFO, onClick: function onClick() {
                            var content = _this6.markupEditor.getValue();
                            _this6.saveMarkup(content);
                        },
                        statusOptions: ["Save", { faIcon: "spinner fa-spin", label: " saveing ..." }, "Save", "Failed"]
                    }),
                    UI.createElement(TemporaryMessageArea, { ref: "saveMarkupMessageArea" }),
                    UI.createElement(ArticleMarkupEditor, { style: { height: "100%", marginTop: "-31px", display: "flex", flexDirection: "column" },
                        ref: "markupEditor", article: this.getArticle() })
                ),
                revisionsPanel,
                UI.createElement(
                    Panel,
                    { title: "Summary" },
                    UI.createElement(
                        Form,
                        { style: { marginTop: "10px" } },
                        UI.createElement(
                            FormField,
                            { ref: "articleNameFormField", label: "Article name" },
                            UI.createElement(TextInput, { ref: "articleNameFormInput", value: this.getArticle().name })
                        ),
                        UI.createElement(
                            FormField,
                            { ref: "dependencyFormField", label: "Dependencies" },
                            UI.createElement(TextInput, { ref: "dependencyFormInput", value: this.getArticle().dependency })
                        ),
                        baseArticleForm,
                        UI.createElement(
                            FormField,
                            { ref: "languageFormField", label: "Language" },
                            UI.createElement(Select, { ref: "languageSelect", options: Language.all(),
                                selected: Language.get(this.getArticle().languageId) })
                        ),
                        UI.createElement(
                            FormField,
                            { ref: "publicFormField", label: "Public" },
                            UI.createElement(CheckboxInput, { ref: "publicCheckbox", checked: this.getArticle().isPublic })
                        )
                    ),
                    UI.createElement(AjaxButton, { ref: "saveOptionsButton", level: Level.INFO, onClick: function onClick() {
                            var name = _this6.articleNameFormInput.getValue();
                            var dependency = _this6.dependencyFormInput.getValue();
                            var languageId = _this6.languageSelect.get().id;
                            var isPublic = _this6.publicCheckbox.getValue();
                            var options = {
                                name: name,
                                dependency: dependency,
                                languageId: languageId,
                                isPublic: isPublic
                            };
                            _this6.saveOptions(options);
                        },
                        statusOptions: ["Save", { faIcon: "spinner fa-spin", label: " saveing ..." }, "Save", "Failed"]
                    }),
                    UI.createElement(Button, { ref: "deleteArticleButton", level: Level.DANGER, label: "Delete article",
                        style: { marginLeft: "3px" },
                        onClick: function onClick() {
                            return _this6.deleteArticleModal.show();
                        } }),
                    UI.createElement(TemporaryMessageArea, { ref: "saveOptionsMessageArea" })
                ),
                translationsPanel,
                ownershipPanel
            )];
        }
    }, {
        key: "saveMarkup",
        value: function saveMarkup(content) {
            var _this7 = this;

            var request = {
                markup: content
            };

            this.saveMarkupMessageArea.showMessage("Saving...", "black", null);

            this.saveMarkupButton.postJSON("/article/" + this.options.articleId + "/edit/", request).then(function () {
                // Add a new version in the dropdown if the save is a success
                if (ArticleEditor.DiffWidgetClass) {
                    _this7.addNewVersion(content);
                }
                _this7.saveMarkupMessageArea.showMessage("Saved article");
            }, function (error) {
                return _this7.saveMarkupMessageArea.showMessage("Error in saving the article: " + error.message, "red");
            });
        }
    }, {
        key: "saveOptions",
        value: function saveOptions(options) {
            var _this8 = this;

            var request = {};
            Object.assign(request, options);

            this.saveOptionsMessageArea.showMessage("Saving...", "black", null);

            this.saveOptionsButton.postJSON("/article/" + this.options.articleId + "/edit/", request).then(function () {
                return window.location.replace("/article/" + _this8.options.articleId + "/edit/");
            }, function (error) {
                return _this8.saveOptionsMessageArea.showMessage("Error in saving the article: " + error.message, "red");
            });
        }
    }, {
        key: "setOwner",
        value: function setOwner(newOwner) {
            var _this9 = this;

            this.setOwnerMessageArea.showMessage("Saving...", "black", null);
            this.setOwnerButton.postJSON("/article/" + this.options.articleId + "/set_owner/", {
                newOwner: newOwner
            }).then(function () {
                return _this9.setOwnerMessageArea.showMessage("Author successfully changed");
            }, function (error) {
                return _this9.setOwnerMessageArea.showMessage("Error in changing owner " + error.message, "red");
            });
        }
    }, {
        key: "addNewVersion",
        value: function addNewVersion(content) {
            this.versionsLabels[0] = "Version " + this.versionsLabels.length;
            this.versions[0] = content;

            this.versions.unshift(this.markupEditor.getValue());
            this.versionsLabels.unshift("Edit version");

            var leftIndex = this.leftTextSelector.getIndex();
            var rightIndex = this.rightTextSelector.getIndex();

            this.leftTextSelector.redraw();
            this.rightTextSelector.redraw();

            this.setLeftIndex(leftIndex);
            this.setRightIndex(rightIndex);
        }
    }, {
        key: "setLeftIndex",
        value: function setLeftIndex(index) {
            this.leftTextSelector.setIndex(index);
            this.diffWidget.setLeftText(this.versions[index]);
        }
    }, {
        key: "setRightIndex",
        value: function setRightIndex(index) {
            this.rightTextSelector.setIndex(index);
            this.diffWidget.setRightText(this.versions[index]);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this10 = this;

            this.deleteArticleModal = UI.createElement(DeleteArticleModal$1, { article: this.getArticle() });

            if (ArticleEditor.DiffWidgetClass) {
                this.tabArea.titleArea.children[1].addClickListener(function () {
                    _this10.versions[0] = _this10.markupEditor.getValue();
                    _this10.setLeftIndex(_this10.leftTextSelector.getIndex());
                    _this10.setRightIndex(_this10.rightTextSelector.getIndex());
                    //this.diffWidget.diffGutterPanel.scroll();
                });

                var updateEditable = function updateEditable() {
                    _this10.leftEditable = _this10.leftTextSelector.getIndex() === 0;
                    _this10.rightEditable = _this10.rightTextSelector.getIndex() === 0;
                    _this10.diffWidget.setLeftEditable(_this10.leftEditable);
                    _this10.diffWidget.setRightEditable(_this10.rightEditable);
                };

                this.leftTextSelector.addChangeListener(function () {
                    _this10.diffWidget.setLeftText(_this10.versions[_this10.leftTextSelector.getIndex()]);
                    updateEditable();
                });

                this.rightTextSelector.addChangeListener(function () {
                    _this10.diffWidget.setRightText(_this10.versions[_this10.rightTextSelector.getIndex()]);
                    updateEditable();
                });

                this.setLeftIndex(0);
                this.setRightIndex(1);

                //this.diffWidget.diffGutter.redraw();
            }

            window.onbeforeunload = function () {
                // Are you sure you want to close the page?
                return "";
            };
        }
    }]);
    return ArticleEditor;
}(Panel);

var _class$63, _descriptor$27, _descriptor2$24;

function _initDefineProp$28(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$28(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var CommentWidgetStyle = (_class$63 = function (_StyleSheet) {
    inherits(CommentWidgetStyle, _StyleSheet);

    function CommentWidgetStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, CommentWidgetStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = CommentWidgetStyle.__proto__ || Object.getPrototypeOf(CommentWidgetStyle)).call.apply(_ref, [this].concat(args))), _this), _this.loadMoreButton = {
            border: "0px",
            color: "#333",
            borderRadius: "0",
            borderBottom: "0",
            backgroundColor: "#eee",
            padding: "5px 10px"
        }, _this.writingSectionStyle = {
            height: "auto",
            marginTop: "10px"
        }, _initDefineProp$28(_this, "chatInputStyle", _descriptor$27, _this), _initDefineProp$28(_this, "chatInputMax", _descriptor2$24, _this), _this.previewButtonStyle = { // TODO: This is currently not restyled. We might not want to use it because previewButton is bad practice
            height: "30px",
            width: "auto",
            fontSize: "100%",
            marginLeft: "5px"
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    return CommentWidgetStyle;
}(StyleSheet), _descriptor$27 = _applyDecoratedDescriptor$28(_class$63.prototype, "chatInputStyle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "30px",
            width: "100%",
            paddingBottom: "0",
            fontSize: "14px",
            borderRadius: "0",
            outline: "none",
            paddingLeft: "8px",
            paddingTop: "5px",
            resize: "none",
            transition: ".2s",
            display: "block",
            border: "1px solid #aaa",
            ":focus": {
                height: "120px",
                transition: ".2s"
            },
            ":active": {
                height: "120px",
                transition: ".2s"
            }
        };
    }
}), _descriptor2$24 = _applyDecoratedDescriptor$28(_class$63.prototype, "chatInputMax", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "120px"
        };
    }
}), _class$63);

var _dec$29, _class$64, _dec2$12, _class2$12;

var ThreadMessage = function (_EditableMessage) {
    inherits(ThreadMessage, _EditableMessage);

    function ThreadMessage() {
        classCallCheck(this, ThreadMessage);
        return possibleConstructorReturn(this, (ThreadMessage.__proto__ || Object.getPrototypeOf(ThreadMessage)).apply(this, arguments));
    }

    createClass(ThreadMessage, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ThreadMessage.prototype.__proto__ || Object.getPrototypeOf(ThreadMessage.prototype), "getDefaultOptions", this).call(this), {
                deletable: false
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var messageDate = UI.createElement(TimePassedSpan, { timeStamp: this.message.getDate(), style: { color: "#666 !important", textTransform: "uppercase", fontSize: ".85em" } });

            var editButton = void 0;
            if (this.message.userId === USER.id || USER.isSuperUser) {
                editButton = UI.createElement(
                    "a",
                    { style: Object.assign({ "cursor": "pointer", padding: "0 10px", fontSize: "1.05em", lineHeight: "0px" }), onClick: function onClick() {
                            return _this2.toggleEditMode();
                        } },
                    "edit"
                );
            }

            if (!this.contentSwitcher) {
                this.contentSwitcher = UI.createElement(
                    Switcher,
                    null,
                    UI.createElement(
                        "div",
                        { ref: "contentContainer" },
                        UI.createElement(MarkupRenderer, { ref: "content", value: this.message.getContent() })
                    )
                );
            }

            var votes = UI.createElement(CommentVotingWidgetWithThumbs, { height: 40, style: { float: "left" }, message: this.message, ref: "commentVotingWidget" });

            return [UI.createElement(
                "span",
                { style: { float: "right", display: "inline-block", height: "40px", lineHeight: "40px" } },
                messageDate
            ), UI.createElement(
                "div",
                { style: {
                        height: "40px",
                        lineHeight: "40px"
                    } },
                UI.createElement(
                    "div",
                    { style: {
                            height: "40px",
                            lineHeight: "40px",
                            display: "inline-block",
                            float: "left",
                            fontSize: ".95em",
                            color: "#333"
                        } },
                    UI.createElement(UserHandle, { userId: this.message.userId, style: { fontSize: "1.1em" } })
                ),
                editButton
            ), UI.createElement(
                "div",
                { style: {
                        paddingTop: "5px",
                        fontSize: "16px"
                    } },
                this.contentSwitcher
            ), UI.createElement(
                "div",
                { style: {
                        height: "40px"
                    } },
                votes
            ), UI.createElement("div", { style: {
                    height: "1px",
                    width: "100%",
                    backgroundColor: "#ddd"
                } })];
        }
    }]);
    return ThreadMessage;
}(EditableMessage);

var ToggleLogin = function (_UI$Primitive) {
    inherits(ToggleLogin, _UI$Primitive);

    function ToggleLogin() {
        classCallCheck(this, ToggleLogin);
        return possibleConstructorReturn(this, (ToggleLogin.__proto__ || Object.getPrototypeOf(ToggleLogin)).apply(this, arguments));
    }

    createClass(ToggleLogin, [{
        key: "onMount",
        value: function onMount() {
            get(ToggleLogin.prototype.__proto__ || Object.getPrototypeOf(ToggleLogin.prototype), "onMount", this).call(this);
            this.addClickListener(function () {
                LoginModal.show();
                return;
            });
        }
    }]);
    return ToggleLogin;
}(UI.Primitive("span"));

var BlogCommentWidget = (_dec$29 = registerStyle(BlogStyle), _dec$29(_class$64 = function (_ChatWidget) {
    inherits(BlogCommentWidget, _ChatWidget);

    function BlogCommentWidget() {
        classCallCheck(this, BlogCommentWidget);
        return possibleConstructorReturn(this, (BlogCommentWidget.__proto__ || Object.getPrototypeOf(BlogCommentWidget)).apply(this, arguments));
    }

    createClass(BlogCommentWidget, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(BlogCommentWidget.prototype.__proto__ || Object.getPrototypeOf(BlogCommentWidget.prototype), "getDefaultOptions", this).call(this), {
                entryComparator: function entryComparator(a, b) {
                    return b.getNormalizedId() - a.getNormalizedId();
                }
            });
        }
    }, {
        key: "renderMessageView",
        value: function renderMessageView() {
            var _this5 = this;

            var loadMoreButton = void 0;

            if (this.showLoadMoreButton) {
                loadMoreButton = UI.createElement(
                    "div",
                    { className: "text-center" },
                    UI.createElement(AjaxButton, { ref: this.refLink("loadMoreButton"), level: Level.DEFAULT, onClick: function onClick() {
                            _this5.loadMoreMessages();
                        },
                        style: this.commentWidgetStyle.loadMoreButton, statusOptions: ["Load more messages", { faIcon: "spinner fa-spin", label: " loading messages..." }, "Load more messages", "Failed"]
                    })
                );
            }

            return [UI.createElement(ChatMessageScrollSection, { ref: "messageWindow",
                entryRenderer: this.options.renderMessage,
                entries: this.messageThread.getMessages(true),
                entryComparator: this.options.entryComparator,
                staticTop: loadMoreButton })];
        }
    }, {
        key: "renderMessageBox",
        value: function renderMessageBox() {
            var _this6 = this;

            return [UI.createElement(
                "div",
                { ref: "writingSection", style: this.commentWidgetStyle.writingSectionStyle },
                UI.createElement(TextArea, { readOnly: this.messageThread.muted,
                    ref: "chatInput",
                    onChange: function onChange() {
                        if (_this6.chatInput.getValue()) {
                            _this6.chatInput.addClass(_this6.commentWidgetStyle.chatInputMax);
                        } else {
                            _this6.chatInput.removeClass(_this6.commentWidgetStyle.chatInputMax);
                        }
                    },
                    className: this.commentWidgetStyle.chatInputStyle,
                    placeholder: "Leave a comment..." }),
                UI.createElement(Button, { disabled: this.messageThread.muted,
                    label: "SUBMIT",
                    ref: "sendMessageButton",
                    className: this.styleSheet.sendMessageButtonStyle,
                    level: Level.PRIMARY,
                    onClick: function onClick() {
                        return _this6.sendMessage();
                    } })
            )];
        }
    }, {
        key: "render",
        value: function render() {
            return [this.renderMessageBox(), this.renderMessageView()];
        }
    }, {
        key: "getDefaultPlugins",
        value: function getDefaultPlugins() {
            return CommentWidget.defaultPlugins || [];
        }
    }, {
        key: "createVirtualMessage",
        value: function createVirtualMessage(request, message) {
            return null;
        }
    }, {
        key: "commentWidgetStyle",
        get: function get$$1() {
            return CommentWidgetStyle.getInstance();
        }
    }]);
    return BlogCommentWidget;
}(ChatWidget(ThreadMessage))) || _class$64);
var CommentWidget = (_dec2$12 = registerStyle(BlogStyle), _dec2$12(_class2$12 = function (_BlogCommentWidget) {
    inherits(CommentWidget, _BlogCommentWidget);

    function CommentWidget() {
        classCallCheck(this, CommentWidget);
        return possibleConstructorReturn(this, (CommentWidget.__proto__ || Object.getPrototypeOf(CommentWidget)).apply(this, arguments));
    }

    createClass(CommentWidget, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(CommentWidget.prototype.__proto__ || Object.getPrototypeOf(CommentWidget.prototype), "setOptions", this).call(this, options);

            this.key = this.messageThread.id;

            this.options.baseRequest = {
                chatId: this.options.chatId
            };
            this.options.dateTimestamps = false;
        }
    }, {
        key: "getPostURL",
        value: function getPostURL() {
            return "/chat/group_chat_post/";
        }
    }, {
        key: "renderMessageBox",
        value: function renderMessageBox() {
            if (USER.isAuthenticated) {
                return get(CommentWidget.prototype.__proto__ || Object.getPrototypeOf(CommentWidget.prototype), "renderMessageBox", this).call(this);
            } else {
                return UI.createElement(
                    "div",
                    { style: {
                            color: "#333",
                            paddingTop: "5px",
                            paddingBottom: "5px"
                        } },
                    "You need to\xA0",
                    UI.createElement(
                        ToggleLogin,
                        { style: {
                                backgroundColor: "#eee",
                                cursor: "pointer",
                                padding: "5px 10px"
                            } },
                        "login"
                    ),
                    "\xA0to send a comment."
                );
            }
        }
    }, {
        key: "render",
        value: function render() {
            var commentsCount = this.messageThread.getMessages().length;
            var commentsTitle = void 0;

            commentsTitle = UI.createElement(
                "div",
                { className: this.styleSheet.commentsTitle },
                commentsCount,
                " ",
                commentsCount != 1 ? "comments" : "comment"
            );

            return [commentsTitle, get(CommentWidget.prototype.__proto__ || Object.getPrototypeOf(CommentWidget.prototype), "render", this).call(this)];
        }
    }]);
    return CommentWidget;
}(BlogCommentWidget)) || _class2$12);

var AsyncCommentThread = function (_UI$Element) {
    inherits(AsyncCommentThread, _UI$Element);

    function AsyncCommentThread() {
        classCallCheck(this, AsyncCommentThread);
        return possibleConstructorReturn(this, (AsyncCommentThread.__proto__ || Object.getPrototypeOf(AsyncCommentThread)).apply(this, arguments));
    }

    createClass(AsyncCommentThread, [{
        key: "getMessageThread",
        value: function getMessageThread() {
            var groupChat = GroupChatStore.get(this.options.chatId);
            return groupChat && groupChat.getMessageThread();
        }
    }, {
        key: "render",
        value: function render() {
            var _this9 = this;

            var messageThread = this.getMessageThread();
            var commentWidgetOptions = {
                marginBottom: "10px",
                paddingBottom: "10px",
                height: "auto",
                width: "100%",
                marginTop: "50px",
                marginLeft: "0px",
                marginRight: "0px",
                border: "0px",
                maxWidth: "900px"
            };

            if (messageThread) {
                return [UI.createElement(CommentWidget, { ref: "commentsSection", chatId: this.options.chatId, messageThread: messageThread,
                    style: commentWidgetOptions })];
            } else {
                GroupChatStore.fetch(this.options.chatId, function (groupChat) {
                    _this9.redraw();
                });
                return [UI.createElement(
                    "div",
                    { style: {
                            width: "100%",
                            height: "60px",
                            lineHeight: "60px",
                            fontSize: "1em",
                            textAlign: "center",
                            textTransform: "uppercase",
                            fontWeight: "bold"
                        } },
                    UI.createElement("span", { className: "fa fa-spinner fa-spin", style: {
                            padding: "0 8px"
                        } }),
                    "Comments loading..."
                )];
            }
        }
    }]);
    return AsyncCommentThread;
}(UI.Element);

var BlogEntryEditModal = function (_Modal) {
    inherits(BlogEntryEditModal, _Modal);

    function BlogEntryEditModal() {
        classCallCheck(this, BlogEntryEditModal);
        return possibleConstructorReturn(this, (BlogEntryEditModal.__proto__ || Object.getPrototypeOf(BlogEntryEditModal)).apply(this, arguments));
    }

    createClass(BlogEntryEditModal, [{
        key: "getModalWindowStyle",
        value: function getModalWindowStyle() {
            return Object.assign({}, get(BlogEntryEditModal.prototype.__proto__ || Object.getPrototypeOf(BlogEntryEditModal.prototype), "getModalWindowStyle", this).call(this), {
                margin: "0 auto",
                maxHeight: "100%",
                overflow: "initial",
                display: "flex",
                flexDirection: "column",
                top: "1vh",
                height: "98vh"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var entry = BlogEntryStore.get(this.options.entryId);
            var article = entry.getArticle();

            var discussionButton = null;
            if (!entry.discussionId) {
                discussionButton = UI.createElement(Button, { level: Level.WARNING, label: "Create discussion",
                    onClick: function onClick() {
                        return _this2.createDiscussion();
                    }, style: { marginLeft: "5px" } });
            }

            return [UI.createElement(
                "h3",
                null,
                "Edit Entry"
            ), UI.createElement(
                Form,
                null,
                UI.createElement(
                    FormField,
                    { label: "Title" },
                    UI.createElement(TextInput, { ref: "titleInput", value: article.name })
                ),
                UI.createElement(
                    FormField,
                    { label: "URL Name" },
                    UI.createElement(TextInput, { ref: "urlInput", value: entry.urlName })
                ),
                UI.createElement(
                    FormField,
                    { label: "Visible" },
                    UI.createElement(CheckboxInput, { ref: "visibleCheckbox", value: entry.visible })
                ),
                UI.createElement(Button, { level: Level.PRIMARY, label: "Change settings", onClick: function onClick() {
                        return _this2.changeSettings();
                    } }),
                discussionButton,
                UI.createElement(TemporaryMessageArea, { ref: "messageArea" })
            ), UI.createElement(ArticleEditor, { ref: "contentEditor", articleId: article.id, style: { flex: "1" } })];
        }
    }, {
        key: "changeSettings",
        value: function changeSettings() {
            var _this3 = this;

            var title = this.titleInput.getValue();
            var urlName = this.urlInput.getValue();

            var request = {
                entryId: this.options.entryId,
                isVisible: this.visibleCheckbox.getValue()
            };

            if (title) {
                request.title = title;
            }

            if (urlName) {
                request.urlName = urlName;
            }

            Ajax.postJSON("/blog/change_entry_settings/", request).then(function (data) {
                if (data.urlName) {
                    Router.changeURL(["blog", data.urlName]);
                }
                _this3.hide();
            });
        }
    }, {
        key: "createDiscussion",
        value: function createDiscussion() {
            var _this4 = this;

            var request = {
                entryId: this.options.entryId
            };

            Ajax.postJSON("/blog/create_entry_discussion/", request).then(function () {
                return _this4.hide();
            });
        }
    }]);
    return BlogEntryEditModal;
}(Modal);

var NewBlogEntryModal = function (_Modal2) {
    inherits(NewBlogEntryModal, _Modal2);

    function NewBlogEntryModal() {
        classCallCheck(this, NewBlogEntryModal);
        return possibleConstructorReturn(this, (NewBlogEntryModal.__proto__ || Object.getPrototypeOf(NewBlogEntryModal)).apply(this, arguments));
    }

    createClass(NewBlogEntryModal, [{
        key: "render",
        value: function render() {
            var _this6 = this;

            return [UI.createElement(
                "h1",
                null,
                "New Entry"
            ), UI.createElement(
                FormGroup,
                null,
                UI.createElement(
                    FormField,
                    { label: "Title" },
                    UI.createElement(TextInput, { ref: "titleInput" })
                ),
                UI.createElement(
                    FormField,
                    { label: "URL Name" },
                    UI.createElement(TextInput, { ref: "urlInput" })
                ),
                UI.createElement(
                    FormField,
                    { label: "Visible" },
                    UI.createElement(CheckboxInput, { ref: "visibleCheckbox" })
                ),
                UI.createElement(Button, { label: "Add Entry", level: Level.PRIMARY, onClick: function onClick() {
                        _this6.addEntry();
                    } }),
                UI.createElement(MarkupEditor, { ref: "postContentMarkup", style: { height: "450px" } })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            get(NewBlogEntryModal.prototype.__proto__ || Object.getPrototypeOf(NewBlogEntryModal.prototype), "onMount", this).call(this);

            this.titleInput.onKeyUp(function () {
                _this7.urlInput.setValue(slugify(_this7.titleInput.getValue()));
            });
        }
    }, {
        key: "addEntry",
        value: function addEntry() {
            var _this8 = this;

            var data = {};

            var title = this.titleInput.getValue();
            if (title) {
                data.title = title;
            }

            var urlName = this.urlInput.getValue();
            if (urlName) {
                data.urlName = urlName;
            }

            data.isVisible = this.visibleCheckbox.getValue();

            var content = this.postContentMarkup.getValue();
            if (content) {
                data.content = content;
            }

            Ajax.postJSON("/blog/add_entry/", data).then(function (data) {
                var blogEntry = BlogEntryStore.get(data.blogEntryId);
                Router.changeURL(["blog", blogEntry.urlName]);
                _this8.hide();
            });
        }
    }]);
    return NewBlogEntryModal;
}(Modal);

var BlogEntryPreview = function (_UI$Element) {
    inherits(BlogEntryPreview, _UI$Element);

    function BlogEntryPreview() {
        classCallCheck(this, BlogEntryPreview);
        return possibleConstructorReturn(this, (BlogEntryPreview.__proto__ || Object.getPrototypeOf(BlogEntryPreview)).apply(this, arguments));
    }

    createClass(BlogEntryPreview, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                position: "relative",
                maxHeight: "420px",
                marginTop: "45px",
                marginBottom: "45px"
            });
        }
    }, {
        key: "canOverwrite",
        value: function canOverwrite(obj) {
            return get(BlogEntryPreview.prototype.__proto__ || Object.getPrototypeOf(BlogEntryPreview.prototype), "canOverwrite", this).call(this, obj) && this.options.entryId === obj.options.entryId;
        }
    }, {
        key: "getBlogEntry",
        value: function getBlogEntry() {
            return BlogEntryStore.get(this.options.entryId);
        }
    }, {
        key: "getBlogArticle",
        value: function getBlogArticle() {
            return this.getBlogEntry().getArticle();
        }
    }, {
        key: "getEntryURL",
        value: function getEntryURL() {
            return "/blog/" + this.getBlogEntry().urlName + "/";
        }
    }, {
        key: "render",
        value: function render() {
            var blogStyle = this.getStyleSheet();
            var article = this.getBlogArticle();

            // TODO: not actually the published date
            var publishedDate = article.dateCreated;
            var publishedFormat = StemDate.unix(publishedDate).format("LL");
            var modifiedFormat = void 0;

            var articleInfoStyle = {
                color: "#777",
                fontSize: "1em",
                margin: "0",
                fontStyle: "italic"
            };

            if (article.dateModified > article.dateCreated) {
                modifiedFormat = UI.createElement(
                    "p",
                    { style: articleInfoStyle },
                    UI.T("Last update on"),
                    " ",
                    StemDate.unix(article.dateModified).format("LL"),
                    "."
                );
            }

            return [UI.createElement(
                "div",
                { style: { height: "100%" } },
                UI.createElement(
                    "div",
                    { style: {
                            boxShadow: "0px 0px 10px rgb(160, 162, 168)",
                            "background-color": "#fff",
                            "padding": "1% 4% 10px 4%",
                            "margin": "0 auto",
                            "width": "900px",
                            "max-width": "100%",
                            position: "relative"
                        } },
                    UI.createElement(
                        "div",
                        { style: blogStyle.writtenBy },
                        UI.T("Written by"),
                        " ",
                        UI.createElement(UserHandle, {
                            userId: article.userCreatedId }),
                        ", ",
                        publishedFormat,
                        ".",
                        modifiedFormat
                    ),
                    UI.createElement(
                        "div",
                        { style: blogStyle.title },
                        UI.createElement(Link, { href: this.getEntryURL(), value: article.name,
                            style: { "text-decoration": "none", "color": "inherit" } })
                    ),
                    UI.createElement(BlogArticleRenderer, { article: article, style: blogStyle.blogArticleRenderer }),
                    UI.createElement("div", { className: blogStyle.whiteOverlay }),
                    UI.createElement(Link, { href: this.getEntryURL(), style: blogStyle.link, value: UI.T("Continue reading") })
                )
            )];
        }
    }]);
    return BlogEntryPreview;
}(UI.Element);

var BlogEntryView = function (_UI$Element2) {
    inherits(BlogEntryView, _UI$Element2);

    function BlogEntryView() {
        classCallCheck(this, BlogEntryView);
        return possibleConstructorReturn(this, (BlogEntryView.__proto__ || Object.getPrototypeOf(BlogEntryView)).apply(this, arguments));
    }

    createClass(BlogEntryView, [{
        key: "getBlogEntry",
        value: function getBlogEntry() {
            return BlogEntryStore.get(this.options.entryId);
        }
    }, {
        key: "getBlogArticle",
        value: function getBlogArticle() {
            return this.getBlogEntry().getArticle();
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.getStyleSheet().blogEntryView);
        }
    }, {
        key: "getComments",
        value: function getComments() {
            var chatId = this.getBlogEntry().discussionId;
            if (!chatId) {
                return null;
            }
            return UI.createElement(
                "div",
                { style: { marginBottom: "20px", marginTop: "20px" } },
                UI.createElement(AsyncCommentThread, { chatId: chatId })
            );
        }
    }, {
        key: "render",
        value: function render() {
            var _this11 = this;

            var article = this.getBlogArticle();
            var blogStyle = this.getStyleSheet();

            // TODO: not actually the published date
            var publishedDate = article.dateCreated;
            var publishedFormat = StemDate.unix(publishedDate).format("LL");
            var modifiedFormat = void 0;

            var articleInfoStyle = {
                margin: "3px",
                color: "#777",
                fontSize: "1em",
                fontStyle: "italic"
            };

            if (article.dateModified > article.dateCreated) {
                modifiedFormat = UI.createElement(
                    "p",
                    { style: articleInfoStyle },
                    "Last update on ",
                    StemDate.unix(article.dateModified).format("LL"),
                    "."
                );
            }

            var blogEntryEditButton = void 0;
            // TODO: should use proper rights
            if (USER.isSuperUser) {
                blogEntryEditButton = UI.createElement(Button, { level: Level.DEFAULT, label: "Edit", onClick: function onClick() {
                        BlogEntryEditModal.show({ entryId: _this11.getBlogEntry().id, fillScreen: true });
                    } });
            }

            return [UI.createElement(
                "div",
                { style: {
                        "background-color": "#fff",
                        "padding": "2% 5%",
                        "box-shadow": "rgb(160, 160, 160) 0px 3px 15px"
                    } },
                blogEntryEditButton,
                UI.createElement(
                    "div",
                    { style: blogStyle.writtenBy },
                    "Written by ",
                    UI.createElement(UserHandle, { userId: article.userCreatedId }),
                    " on ",
                    publishedFormat,
                    ".",
                    modifiedFormat
                ),
                UI.createElement(
                    "div",
                    { style: blogStyle.title },
                    article.name
                ),
                UI.createElement(BlogArticleRenderer, { style: blogStyle.article, article: article }),
                UI.createElement(
                    "div",
                    { style: {
                            "margin-top": "30px",
                            "margin-bottom": "10px"
                        } },
                    UI.createElement(Link, { href: "/blog/", style: blogStyle.link, value: "Back to the Main Blog" })
                ),
                this.getComments()
            ), UI.createElement("div", { className: blogStyle.bottomSection })];
        }
    }, {
        key: "pageTitle",
        get: function get$$1() {
            return this.getBlogArticle().name;
        }
    }]);
    return BlogEntryView;
}(UI.Element);

var BlogEntryList = function (_UI$Element3) {
    inherits(BlogEntryList, _UI$Element3);

    function BlogEntryList() {
        classCallCheck(this, BlogEntryList);
        return possibleConstructorReturn(this, (BlogEntryList.__proto__ || Object.getPrototypeOf(BlogEntryList)).apply(this, arguments));
    }

    createClass(BlogEntryList, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("paddingTop", "10px");
        }
    }, {
        key: "showNewBlogPostModal",
        value: function showNewBlogPostModal() {
            var modal = UI.createElement(NewBlogEntryModal, { fillScreen: true });
            modal.show();
        }
    }, {
        key: "render",
        value: function render() {
            var _this13 = this;

            var blogStyle = this.getStyleSheet();

            var entries = [];

            var blogEntries = BlogEntryStore.all().sort(function (a, b) {
                return b.getArticle().dateCreated - a.getArticle().dateCreated;
            });

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = blogEntries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var entry = _step.value;

                    entries.push(UI.createElement(BlogEntryPreview, { key: entry.id, entryId: entry.id }));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return [USER.isSuperUser ? UI.createElement(Button, { label: "New Entry",
                level: Level.DEFAULT,
                onClick: function onClick() {
                    return _this13.showNewBlogPostModal();
                }
            }) : null, UI.createElement(
                "div",
                { ref: "entriesList" },
                entries
            ), UI.createElement(Button, { label: this.options.finishedLoading ? UI.T("End of blog") : UI.T("Load More"),
                ref: "loadMoreButton",
                style: { margin: "0px auto", display: "block" },
                className: blogStyle.loadMoreButton,
                disabled: this.options.finishedLoading }), UI.createElement("div", { style: {
                    height: "45px",
                    width: "100%"
                } })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this14 = this;

            get(BlogEntryList.prototype.__proto__ || Object.getPrototypeOf(BlogEntryList.prototype), "onMount", this).call(this);

            this.loadMoreButton.addClickListener(function () {
                if (!_this14.options.finishedLoading) {
                    Ajax.getJSON("/blog/", {
                        lastDate: Math.min.apply(null, BlogEntryStore.all().map(function (x) {
                            return x.getArticle().dateCreated;
                        }))
                    }).then(function (data) {
                        _this14.options.finishedLoading = data.finishedLoading;
                        if (_this14.options.finishedLoading) {
                            _this14.loadMoreButton.options.label = UI.T("No more posts");
                            _this14.loadMoreButton.redraw();
                            _this14.loadMoreButton.disable();
                        }
                        _this14.redraw();
                    });
                }
            });

            this.attachCreateListener(BlogEntryStore, function () {
                _this14.redraw();
            });
        }
    }]);
    return BlogEntryList;
}(UI.Element);

Theme.register(BlogEntryView, BlogStyle);
Theme.register(BlogEntryPreview, BlogStyle);
Theme.register(BlogEntryList, BlogStyle);

var DelayedBlogEntryList = function (_StateDependentElemen) {
    inherits(DelayedBlogEntryList, _StateDependentElemen);

    function DelayedBlogEntryList() {
        classCallCheck(this, DelayedBlogEntryList);
        return possibleConstructorReturn(this, (DelayedBlogEntryList.__proto__ || Object.getPrototypeOf(DelayedBlogEntryList)).apply(this, arguments));
    }

    return DelayedBlogEntryList;
}(StateDependentElement(BlogEntryList));

var DelayedBlogEntryView = function (_StateDependentElemen2) {
    inherits(DelayedBlogEntryView, _StateDependentElemen2);

    function DelayedBlogEntryView() {
        classCallCheck(this, DelayedBlogEntryView);
        return possibleConstructorReturn(this, (DelayedBlogEntryView.__proto__ || Object.getPrototypeOf(DelayedBlogEntryView)).apply(this, arguments));
    }

    createClass(DelayedBlogEntryView, [{
        key: "getBlogEntry",
        value: function getBlogEntry() {
            return BlogEntryStore.getEntryForURL(this.options.entryURL);
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {
            get(DelayedBlogEntryView.prototype.__proto__ || Object.getPrototypeOf(DelayedBlogEntryView.prototype), "onDelayedMount", this).call(this);
            Router.updateURL();
        }
    }, {
        key: "getAjaxUrl",
        value: function getAjaxUrl() {
            return "/blog/get_blog_post/";
        }
    }, {
        key: "getAjaxRequest",
        value: function getAjaxRequest() {
            return {
                entryUrlName: this.options.entryURL
            };
        }
    }, {
        key: "pageTitle",
        get: function get$$1() {
            if (this.getBlogEntry()) {
                return get(DelayedBlogEntryView.prototype.__proto__ || Object.getPrototypeOf(DelayedBlogEntryView.prototype), "pageTitle", this);
            } else {
                return null;
            }
        },
        set: function set$$1(value) {}
    }]);
    return DelayedBlogEntryView;
}(StateDependentElement(BlogEntryView));

var BlogRoute = function (_Route) {
    inherits(BlogRoute, _Route);
    createClass(BlogRoute, [{
        key: "getSubroutes",
        value: function getSubroutes() {
            return [new Route("%s", function (options) {
                var entryURL = options.args[options.args.length - 1];

                var blogEntry = BlogEntryStore.getEntryForURL(entryURL);

                if (blogEntry) {
                    return UI.createElement(BlogEntryView, { entryId: blogEntry.id });
                } else {
                    return UI.createElement(DelayedBlogEntryView, { entryURL: entryURL });
                }
            })];
        }
    }]);

    function BlogRoute() {
        var expr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "blog";
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, BlogRoute);

        options.title = options.title || "Blog";

        var _this17 = possibleConstructorReturn(this, (BlogRoute.__proto__ || Object.getPrototypeOf(BlogRoute)).call(this, expr, DelayedBlogEntryList, [], options));

        _this17.subroutes = _this17.getSubroutes();
        return _this17;
    }

    return BlogRoute;
}(Route);

var CompilationStatusPanel = function (_Panel) {
    inherits(CompilationStatusPanel, _Panel);

    function CompilationStatusPanel() {
        classCallCheck(this, CompilationStatusPanel);
        return possibleConstructorReturn(this, (CompilationStatusPanel.__proto__ || Object.getPrototypeOf(CompilationStatusPanel)).apply(this, arguments));
    }

    createClass(CompilationStatusPanel, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(CompilationStatusPanel.prototype.__proto__ || Object.getPrototypeOf(CompilationStatusPanel.prototype), "setOptions", this).call(this, options);
            if (this.options.customRun) {
                this.customRun = this.options.customRun;
            }
        }
    }, {
        key: "render",
        value: function render() {
            if (!this.customRun) {
                return null;
            }
            var compilationMessage = this.customRun.compilerMessage ? UI.createElement(
                "pre",
                { className: "compilerOutputMessage" },
                this.customRun.compilerMessage
            ) : null;
            return [UI.createElement(
                "strong",
                { style: { padding: "5px", lineHeight: "2em" } },
                this.customRun.getCompilationStatusMessage()
            ), compilationMessage];
        }
    }, {
        key: "setCustomRun",
        value: function setCustomRun(customRun) {
            var _this2 = this;

            this.customRun = customRun;
            this.customRun.addUpdateListener(function (event) {
                if (event.type === "compile_status") {
                    _this2.redraw();
                }
            });
        }
    }]);
    return CompilationStatusPanel;
}(Panel);

var ExecutionStatusPanel = function (_UI$Element) {
    inherits(ExecutionStatusPanel, _UI$Element);

    function ExecutionStatusPanel() {
        classCallCheck(this, ExecutionStatusPanel);
        return possibleConstructorReturn(this, (ExecutionStatusPanel.__proto__ || Object.getPrototypeOf(ExecutionStatusPanel)).apply(this, arguments));
    }

    createClass(ExecutionStatusPanel, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(ExecutionStatusPanel.prototype.__proto__ || Object.getPrototypeOf(ExecutionStatusPanel.prototype), "setOptions", this).call(this, options);
            if (this.options.customRun) {
                this.customRun = this.options.customRun;
            }
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(GlobalStyle.FlexContainer.HORIZONTAL);
            attr.setStyle({
                paddingLeft: "5px",
                paddingRight: "5px"
            });
        }
    }, {
        key: "render",
        value: function render() {
            if (!this.customRun) {
                return null;
            }
            var content = [UI.createElement(
                "div",
                { style: { marginTop: "30px" } },
                UI.createElement(
                    CardPanel,
                    { title: UI.T("CPU Time"),
                        level: this.customRun.results.internalStatus === "TO" ? Level.DANGER : Level.PRIMARY,
                        bodyCentered: true },
                    UI.createElement(
                        "div",
                        { style: { padding: "8px" } },
                        Formatter.cpuTime(this.customRun.results.cpuTime)
                    )
                )
            ), UI.createElement(
                "div",
                { style: { marginTop: "30px" } },
                UI.createElement(
                    CardPanel,
                    { title: UI.T("Memory Usage"),
                        level: parseInt(this.customRun.results.signalCode) === 9 ? Level.DANGER : Level.PRIMARY,
                        bodyCentered: true },
                    UI.createElement(
                        "div",
                        { style: { padding: "8px" } },
                        Formatter.memory(this.customRun.results.memUsage)
                    )
                )
            ), UI.createElement(
                "div",
                { style: { marginTop: "30px" } },
                UI.createElement(
                    CardPanel,
                    { title: UI.T("Exit Code"),
                        level: parseInt(this.customRun.results.exitCode || 0) !== 0 ? Level.DANGER : Level.PRIMARY,
                        bodyCentered: true },
                    UI.createElement(
                        "div",
                        { style: { padding: "8px" } },
                        this.customRun.results.exitCode || "-"
                    )
                )
            )];

            if (this.customRun.results.signalCode) {
                content.push(UI.createElement(
                    "div",
                    { style: { marginTop: "30px" } },
                    UI.createElement(
                        CardPanel,
                        { title: UI.T("Killed by signal"),
                            level: Level.DANGER,
                            bodyCentered: true },
                        UI.createElement(
                            "div",
                            { style: { padding: "8px" } },
                            this.customRun.results.signalCode
                        )
                    )
                ));
            }
            return content;
        }
    }, {
        key: "setCustomRun",
        value: function setCustomRun(customRun) {
            var _this4 = this;

            this.customRun = customRun;
            this.customRun.addUpdateListener(function (event) {
                _this4.redraw();
            });
        }
    }]);
    return ExecutionStatusPanel;
}(UI.Element);

var PrivateArchiveUser = function () {
    function PrivateArchiveUser(userId, contestUsers) {
        classCallCheck(this, PrivateArchiveUser);

        this.userId = userId;
        this.contestUsers = contestUsers;
    }

    createClass(PrivateArchiveUser, [{
        key: "getContestUser",
        value: function getContestUser(contestTask) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.contestUsers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestUser = _step.value;

                    if (contestUser.getContest() === contestTask.getEvalTask().getDefaultContest()) {
                        return contestUser;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return null;
        }
    }]);
    return PrivateArchiveUser;
}();

var PrivateArchive = function (_StoreObject) {
    inherits(PrivateArchive, _StoreObject);

    function PrivateArchive() {
        classCallCheck(this, PrivateArchive);
        return possibleConstructorReturn(this, (PrivateArchive.__proto__ || Object.getPrototypeOf(PrivateArchive)).apply(this, arguments));
    }

    createClass(PrivateArchive, [{
        key: "getName",
        value: function getName() {
            return this.longName;
        }
    }, {
        key: "getEvalTasks",
        value: function getEvalTasks() {
            var evalTasks = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.evalTaskIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var evalTaskId = _step2.value;

                    var evalTask = EvalTaskStore.get(evalTaskId);
                    if (evalTask) {
                        evalTasks.push(evalTask);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return evalTasks;
        }
    }, {
        key: "getContestTasks",
        value: function getContestTasks() {
            var contestTasks = [];
            var evalTasks = this.getEvalTasks();
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = evalTasks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var evalTask = _step3.value;

                    var contestTask = ContestTaskStore.get(evalTask.defaultContestTaskId);
                    if (contestTask) {
                        contestTasks.push(contestTask);
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return contestTasks;
        }
    }, {
        key: "getContests",
        value: function getContests() {
            var contests = [];
            var evalTasks = this.getEvalTasks();
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = evalTasks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var evalTask = _step4.value;

                    contests.push(evalTask.getDefaultContest());
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return contests;
        }
    }, {
        key: "getUsers",
        value: function getUsers() {
            var contestUsers = new Map();
            var contests = this.getContests();
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = contests[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var contest = _step5.value;
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;

                    try {
                        for (var _iterator7 = contest.getUsers()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var contestUser = _step7.value;

                            if (!contestUsers.has(contestUser.userId)) {
                                contestUsers.set(contestUser.userId, []);
                            }
                            contestUsers.get(contestUser.userId).push(contestUser);
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var privateArchiveUsers = [];
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = contestUsers.entries()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var _step6$value = slicedToArray(_step6.value, 2),
                        userId = _step6$value[0],
                        _contestUsers = _step6$value[1];

                    privateArchiveUsers.push(new PrivateArchiveUser(userId, _contestUsers));
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            return privateArchiveUsers;
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.longName;
        }
    }]);
    return PrivateArchive;
}(StoreObject);

var PrivateArchiveStore = new GenericObjectStore("PrivateArchive", PrivateArchive);

var BaseUserSubmission = function (_StoreObject) {
    inherits(BaseUserSubmission, _StoreObject);

    function BaseUserSubmission() {
        classCallCheck(this, BaseUserSubmission);
        return possibleConstructorReturn(this, (BaseUserSubmission.__proto__ || Object.getPrototypeOf(BaseUserSubmission)).apply(this, arguments));
    }

    createClass(BaseUserSubmission, [{
        key: "getProgrammingLanguage",
        value: function getProgrammingLanguage() {
            return ProgrammingLanguage.get(this.programmingLanguageId);
        }
    }, {
        key: "getSize",
        value: function getSize() {
            return this.sourceText.length;
        }
    }, {
        key: "getSourceText",
        value: function getSourceText() {
            return this.sourceText;
        }
    }, {
        key: "hasCompileError",
        value: function hasCompileError() {
            return !this.compileOK;
        }
    }, {
        key: "getDuration",
        value: function getDuration() {
            return this.duration;
        }
    }, {
        key: "getCompilationStatusMessage",
        value: function getCompilationStatusMessage() {
            var duration = this.getDuration();
            if (this.hasCompileError()) {
                var durationMessage = duration ? " (" + duration + " seconds)." : ".";
                return "Compilation failed" + durationMessage;
            } else {
                var _durationMessage = duration ? " in " + duration + " seconds." : ".";
                return "Compilation done" + _durationMessage;
            }
        }
    }]);
    return BaseUserSubmission;
}(StoreObject);

var _class$65, _temp$13;

var EvalJob = (_temp$13 = _class$65 = function (_BaseUserSubmission) {
    inherits(EvalJob, _BaseUserSubmission);

    function EvalJob(obj) {
        classCallCheck(this, EvalJob);

        var _this = possibleConstructorReturn(this, (EvalJob.__proto__ || Object.getPrototypeOf(EvalJob)).call(this, obj));

        _this.tests = [];
        _this.exampleTests = [];
        _this.loadTests(obj);
        return _this;
    }

    createClass(EvalJob, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.type === "test_results") {
                this.loadTests(event.data);
            } else {
                get(EvalJob.prototype.__proto__ || Object.getPrototypeOf(EvalJob.prototype), "applyEvent", this).call(this, event);
                if (event.type === "started") {
                    this.exampleTests = [];
                    this.tests = [];
                } else {
                    this.reloadTests();
                }
            }
        }
    }, {
        key: "updateTests",
        value: function updateTests(exampleTests, tests) {
            var addTestToArray = function addTestToArray(test, array) {
                var existingTest = array.find(function (existingTest) {
                    return existingTest.id === test.id;
                });
                if (!existingTest) {
                    array.push(test);
                } else {
                    array[array.indexOf(existingTest)] = test;
                }
            };

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = tests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var test = _step.value;

                    addTestToArray(test, this.tests);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = exampleTests[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var exampleTest = _step2.value;

                    addTestToArray(exampleTest, this.exampleTests);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: "loadTests",
        value: function loadTests(obj) {
            var tests = [];
            var exampleTests = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.keys(obj.tests)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var testId = _step3.value;

                    var test = obj.tests[testId];
                    if (this.getExampleTest(test.id)) {
                        exampleTests.push(test);
                    } else {
                        tests.push(test);
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.updateTests(exampleTests, tests);
        }
    }, {
        key: "reloadTests",
        value: function reloadTests() {
            var _this2 = this;

            this.tests = this.tests.concat(this.exampleTests || []);
            var tests = this.tests.filter(function (test) {
                return !_this2.getExampleTest(test.id);
            });
            var exampleTests = this.tests.filter(function (test) {
                return !!_this2.getExampleTest(test.id);
            });
            this.exampleTests = [];
            this.tests = [];
            this.updateTests(exampleTests, tests);
        }
    }, {
        key: "getExampleTests",
        value: function getExampleTests() {
            return Array.from(this.exampleTests);
        }
    }, {
        key: "getAllTests",
        value: function getAllTests() {
            return this.exampleTests.concat(this.tests);
        }
    }, {
        key: "getContestTask",
        value: function getContestTask() {
            return ContestTaskStore.get(this.contestTaskId);
        }
    }, {
        key: "getEvalTask",
        value: function getEvalTask() {
            return EvalTaskStore.get(this.evalTaskId);
        }
    }, {
        key: "hasPartialScoring",
        value: function hasPartialScoring() {
            var contestTask = this.getContestTask();
            return contestTask && contestTask.hasPartialScore();
        }
    }, {
        key: "getLastTest",
        value: function getLastTest() {
            if (this.tests.length > 0) {
                return this.tests[this.tests.length - 1];
            }

            if (this.exampleTests.length > 0) {
                return this.exampleTests[this.exampleTests.length - 1];
            }
            return null;
        }
    }, {
        key: "getStatus",
        value: function getStatus() {
            if (!this.compileStarted && !this.compileOK && (!this.tests || !this.tests.length)) {
                return EvalJob.Status.WAITING;
            }

            if (!this.hasOwnProperty("compileOK")) {
                return EvalJob.Status.COMPILING;
            }

            if (!this.isDone) {
                return EvalJob.Status.RUNNING;
            }

            return EvalJob.Status.DONE;
        }
    }, {
        key: "getResultStatus",
        value: function getResultStatus() {
            if (this.getStatus() !== EvalJob.Status.DONE) {
                return EvalJob.ResultStatus.UNKNOWN;
            }

            if (this.hasCompileError()) {
                return EvalJob.ResultStatus.COMPILE_ERROR;
            }

            if (this.hasInternalJudgeError()) {
                return EvalJob.ResultStatus.INTERNAL_JUDGE_ERROR;
            }

            var lastTest = this.getLastTest();
            if (!lastTest) {
                return EvalJob.ResultStatus.UNKNOWN;
            }

            if (lastTest.internalStatus === "TO") {
                return EvalJob.ResultStatus.TIME_LIMIT_EXCEEDED;
            }

            if (lastTest.internalStatus === "RE") {
                return EvalJob.ResultStatus.RUNTIME_ERROR;
            }

            if (lastTest.internalStatus === "SG") {
                if (parseInt(lastTest.signalCode) === 9) {
                    return EvalJob.ResultStatus.MEMORY_LIMIT_EXCEEDED;
                }
                return EvalJob.ResultStatus.KILLED_BY_SIGNAL;
            }

            // TODO: we need to re-run all the old jobs(<=26000) to be able to remove this hack
            if (lastTest.message === "Wrong answer" || lastTest.hasOwnProperty("checkerPassed") && !lastTest.checkerPassed) {
                return EvalJob.ResultStatus.WRONG_ANSWER;
            }

            return EvalJob.ResultStatus.ACCEPTED;
        }
    }, {
        key: "getNumTestsPassed",
        value: function getNumTestsPassed() {
            var testsPassed = 0;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.tests.concat(this.exampleTests)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var test = _step4.value;

                    if (test.checkerPassed) {
                        testsPassed += 1;
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return testsPassed;
        }
    }, {
        key: "hasInternalJudgeError",
        value: function hasInternalJudgeError() {
            var lastTest = this.getLastTest();
            return lastTest && lastTest.internalStatus === "XX";
        }
    }, {
        key: "getExampleTest",
        value: function getExampleTest(testId) {
            var evalTask = this.getEvalTask();
            if (!evalTask) {
                return null;
            }

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = (evalTask.exampleTests || [])[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var exampleTest = _step5.value;

                    if (exampleTest.id === parseInt(testId)) {
                        return exampleTest;
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            return null;
        }
    }]);
    return EvalJob;
}(BaseUserSubmission), _class$65.Status = {
    WAITING: 1,
    COMPILING: 2,
    RUNNING: 3,
    DONE: 4
}, _class$65.ResultStatus = {
    COMPILE_ERROR: 1,
    INTERNAL_JUDGE_ERROR: 2,
    TIME_LIMIT_EXCEEDED: 3,
    MEMORY_LIMIT_EXCEEDED: 4,
    RUNTIME_ERROR: 5,
    KILLED_BY_SIGNAL: 6,
    WRONG_ANSWER: 7,
    PASSED: 8, // Both of these are the same
    ACCEPTED: 8, // It depends on ContestTask type
    UNKNOWN: 9
}, _temp$13);

var EvalJobStoreClass = function (_AjaxFetchMixin) {
    inherits(EvalJobStoreClass, _AjaxFetchMixin);

    function EvalJobStoreClass() {
        classCallCheck(this, EvalJobStoreClass);
        return possibleConstructorReturn(this, (EvalJobStoreClass.__proto__ || Object.getPrototypeOf(EvalJobStoreClass)).call(this, "evaljob", EvalJob, {
            fetchURL: "/eval/get_eval_jobs/",
            maxFetchObjectCount: 64,
            dependencies: ["evaltask", "publicuser"]
        }));
    }

    createClass(EvalJobStoreClass, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.type === "reevalDone") {
                return this.dispatch("reevalDone", event);
            }
            return get(EvalJobStoreClass.prototype.__proto__ || Object.getPrototypeOf(EvalJobStoreClass.prototype), "applyEvent", this).call(this, event);
        }
    }, {
        key: "getFetchRequestData",
        value: function getFetchRequestData(ids, fetchJobs) {
            var requestData = get(EvalJobStoreClass.prototype.__proto__ || Object.getPrototypeOf(EvalJobStoreClass.prototype), "getFetchRequestData", this).call(this, ids, fetchJobs);
            var contestRequests = [];
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = fetchJobs[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var fetchJob = _step6.value;

                    if (fetchJob.requestContest) {
                        contestRequests.push(fetchJob.id);
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            if (contestRequests.length > 0) {
                requestData.contestRequests = contestRequests;
            }
            return requestData;
        }
    }, {
        key: "fetchWithContest",
        value: function fetchWithContest(id, successCallback, errorCallback) {
            var forceFetch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            this.fetch(id, successCallback, errorCallback, forceFetch);
            var fetchJob = this.fetchJobs[this.fetchJobs.length - 1];
            fetchJob.requestContest = true;
        }
    }]);
    return EvalJobStoreClass;
}(AjaxFetchMixin(GenericObjectStore));

var EvalJobStore = new EvalJobStoreClass();

var _class$66, _descriptor$28, _descriptor2$25, _descriptor3$21, _dec$30, _class3$17;

function _initDefineProp$29(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$29(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var InteractiveExampleBubbleStyle = (_class$66 = function (_StyleSheet) {
    inherits(InteractiveExampleBubbleStyle, _StyleSheet);

    function InteractiveExampleBubbleStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, InteractiveExampleBubbleStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = InteractiveExampleBubbleStyle.__proto__ || Object.getPrototypeOf(InteractiveExampleBubbleStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$29(_this, "taskLog", _descriptor$28, _this), _initDefineProp$29(_this, "inputMessage", _descriptor2$25, _this), _initDefineProp$29(_this, "outputMessage", _descriptor3$21, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return InteractiveExampleBubbleStyle;
}(StyleSheet), _descriptor$28 = _applyDecoratedDescriptor$29(_class$66.prototype, "taskLog", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%"
        };
    }
}), _descriptor2$25 = _applyDecoratedDescriptor$29(_class$66.prototype, "inputMessage", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            float: "left",
            maxWidth: "45%",
            marginRight: "50%",
            minWidth: "20%"
        };
    }
}), _descriptor3$21 = _applyDecoratedDescriptor$29(_class$66.prototype, "outputMessage", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            float: "right",
            maxWidth: "45%",
            marginLeft: "50%",
            minWidth: "20%"
        };
    }
}), _class$66);
var InteractiveTaskLog = (_dec$30 = registerStyle(InteractiveExampleBubbleStyle), _dec$30(_class3$17 = function (_UI$Element) {
    inherits(InteractiveTaskLog, _UI$Element);

    function InteractiveTaskLog() {
        classCallCheck(this, InteractiveTaskLog);
        return possibleConstructorReturn(this, (InteractiveTaskLog.__proto__ || Object.getPrototypeOf(InteractiveTaskLog)).apply(this, arguments));
    }

    createClass(InteractiveTaskLog, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setAttribute("extra", this.options.extra);
            attr.setAttribute("align", this.options.align);
            attr.addClass(this.styleSheet.taskLog);
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            return this.options.extra.map(function (message) {
                return UI.createElement(
                    "pre",
                    { className: message.type == 1 ? _this3.styleSheet.inputMessage : _this3.styleSheet.outputMessage },
                    message.message.trim()
                );
            });
        }
    }]);
    return InteractiveTaskLog;
}(UI.Element)) || _class3$17);

var EvalTaskPublicTestRow = function (_DelayedCollapsibleTa) {
    inherits(EvalTaskPublicTestRow, _DelayedCollapsibleTa);

    function EvalTaskPublicTestRow() {
        classCallCheck(this, EvalTaskPublicTestRow);
        return possibleConstructorReturn(this, (EvalTaskPublicTestRow.__proto__ || Object.getPrototypeOf(EvalTaskPublicTestRow)).apply(this, arguments));
    }

    createClass(EvalTaskPublicTestRow, [{
        key: "getLoadButton",
        value: function getLoadButton() {
            throw Error("Unimplemented. This method should be implemented by subclasses.");
        }
    }, {
        key: "render",
        value: function render() {
            var rowCells = [];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var column = _step.value;

                    rowCells.push(this.renderEntryCell(column));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var loadButton = this.getLoadButton();
            if (loadButton) {
                rowCells.push(UI.createElement(
                    "td",
                    null,
                    loadButton
                ));
            }
            return [UI.createElement(
                "tr",
                { className: collapsibleTableStyle.heading },
                rowCells
            ), UI.createElement(
                "tr",
                null,
                UI.createElement(
                    "td",
                    { style: { overflow: "hidden", padding: "0px" }, colspan: rowCells.length },
                    UI.createElement("div", { ref: "contentArea", className: collapsibleTableStyle.collapsed + " hidden" })
                )
            )];
        }
    }, {
        key: "getEvalTask",
        value: function getEvalTask() {
            return this.options.evalJob.getEvalTask();
        }
    }, {
        key: "getTest",
        value: function getTest() {
            // TODO: Should return TestCaseStore.get(this.options.entry.id)
            throw Error("Unimplemented. This method should be implemented by subclasses.");
        }
    }, {
        key: "filePanel",
        value: function filePanel(title, content, key, panelStyle) {
            return UI.createElement(
                Panel,
                { key: key, style: panelStyle },
                UI.createElement(
                    "div",
                    { style: { height: "20px", paddingLeft: "10px", boxSizing: "border-box", backgroundColor: "white" } },
                    title
                ),
                UI.createElement(StaticCodeHighlighter, { style: { width: "100%", height: "150px" }, value: content })
            );
        }
    }, {
        key: "renderCollapsible",
        value: function renderCollapsible() {
            var entry = this.options.entry;
            var test = this.getTest();
            var panelStyle = { height: "170px", width: "49%", display: "inline-block" };

            if (!test) {
                // return <Panel className={"section" + entry.testNumber} key={entry.testNumber} orientation={Orientation.HORIZONTAL}
                //                  style={{height: panelStyle.height, width: "100%", padding: "5px"}}>
                //     <ConcentricCirclesLoadingScreen />
                // </Panel>;
                return [UI.createElement(
                    "h3",
                    null,
                    "Test loading..."
                ), UI.createElement("span", { className: "fa fa-spinner fa-spin" })];
            }

            var inputName = " Input " + Formatter.memory(test.inputSize);
            if (test.inputSize > test.input.length) {
                inputName = inputName + " (truncated to 1 MB)";
            }
            var outputName = " Judge output " + Formatter.memory(test.outputSize);
            if (test.outputSize > test.output.length) {
                outputName = outputName + " (truncated to 1 MB)";
            }
            var panels = [this.filePanel(inputName, test.input, Math.random(), panelStyle), this.filePanel(outputName, test.output, Math.random(), panelStyle)];

            if (entry.hasOwnProperty("stdout")) {
                // The key must be random, else the content of the ace editor is not updated correctly
                panels.push(this.filePanel(" Your output", entry.stdout, Math.random(), panelStyle));
                panelStyle.width = "32%";
            }

            return UI.createElement(
                Panel,
                { className: "section" + entry.testNumber, key: entry.testNumber, orientation: Orientation.HORIZONTAL,
                    style: { height: panelStyle.height, width: "100%", padding: "5px" } },
                UI.createElement(
                    SectionDivider$$1,
                    { style: { height: "100%" }, orientation: Orientation.HORIZONTAL },
                    panels
                )
            );
        }
    }]);
    return EvalTaskPublicTestRow;
}(DelayedCollapsibleTableRow);

var EvalTaskDownloadableTestRow = function (_EvalTaskPublicTestRo) {
    inherits(EvalTaskDownloadableTestRow, _EvalTaskPublicTestRo);

    function EvalTaskDownloadableTestRow() {
        classCallCheck(this, EvalTaskDownloadableTestRow);
        return possibleConstructorReturn(this, (EvalTaskDownloadableTestRow.__proto__ || Object.getPrototypeOf(EvalTaskDownloadableTestRow)).apply(this, arguments));
    }

    createClass(EvalTaskDownloadableTestRow, [{
        key: "getLoadButton",
        value: function getLoadButton() {
            var _this3 = this;

            if (this.getEvalTask().isPublic) {
                var onSuccess = function onSuccess(test) {
                    if (test.inputSize > test.input.length) {
                        _this3.expand();
                    } else {
                        Dispatcher.Global.dispatch("loadWorkspaceInput", test.input);
                    }
                };
                return UI.createElement(AjaxButton, { ref: "loadTestButton", level: Level.INFO, size: Size.SMALL,
                    onClick: function onClick() {
                        return _this3.loadTest(_this3.options.entry.id, onSuccess);
                    },
                    statusOptions: ["Load", { faIcon: "spinner fa-spin", label: "" }, "Load", "Failed"] });
            }
        }
    }, {
        key: "getTest",
        value: function getTest() {
            return this.getEvalTask().systemTests[this.options.entry.id];
        }
    }, {
        key: "expand",
        value: function expand() {
            if (!this.getTest()) {
                this.loadTest(this.options.entry.id);
            }
            get(EvalTaskDownloadableTestRow.prototype.__proto__ || Object.getPrototypeOf(EvalTaskDownloadableTestRow.prototype), "expand", this).call(this);
        }
    }, {
        key: "loadTest",
        value: function loadTest(testId, onSuccess) {
            var _this4 = this;

            var evalTask = this.getEvalTask();

            if (evalTask.systemTests[testId]) {
                if (onSuccess) {
                    onSuccess(evalTask.systemTests[testId]);
                }
                return;
            }

            this.loadTestButton.getJSON("/eval/download_test/", {
                evalTaskId: evalTask.id,
                testId: testId
            }).then(function (data) {
                evalTask.systemTests[testId] = data;
                _this4.redrawCollapsible();
                if (onSuccess) {
                    onSuccess(data);
                }
            });
        }
    }]);
    return EvalTaskDownloadableTestRow;
}(EvalTaskPublicTestRow);

var EvalTaskExampleRow = function (_EvalTaskPublicTestRo2) {
    inherits(EvalTaskExampleRow, _EvalTaskPublicTestRo2);

    function EvalTaskExampleRow() {
        classCallCheck(this, EvalTaskExampleRow);
        return possibleConstructorReturn(this, (EvalTaskExampleRow.__proto__ || Object.getPrototypeOf(EvalTaskExampleRow)).apply(this, arguments));
    }

    createClass(EvalTaskExampleRow, [{
        key: "getLoadButton",
        value: function getLoadButton() {
            var _this6 = this;

            return UI.createElement(Button, { ref: "loadTestButton", label: "Load", level: Level.INFO, size: Size.SMALL,
                onClick: function onClick() {
                    Dispatcher.Global.dispatch("loadWorkspaceInput", _this6.getTest().input);
                } });
        }
    }, {
        key: "getTest",
        value: function getTest() {
            return this.options.evalJob.getExampleTest(this.options.entry.id);
        }
    }]);
    return EvalTaskExampleRow;
}(EvalTaskPublicTestRow);

var InteractiveEvalTaskExampleRow = function (_DelayedCollapsibleTa2) {
    inherits(InteractiveEvalTaskExampleRow, _DelayedCollapsibleTa2);

    function InteractiveEvalTaskExampleRow() {
        classCallCheck(this, InteractiveEvalTaskExampleRow);
        return possibleConstructorReturn(this, (InteractiveEvalTaskExampleRow.__proto__ || Object.getPrototypeOf(InteractiveEvalTaskExampleRow)).apply(this, arguments));
    }

    createClass(InteractiveEvalTaskExampleRow, [{
        key: "renderCollapsible",
        value: function renderCollapsible() {
            var entry = this.options.entry;
            var exampleTest = this.options.evalJob.getExampleTest(entry.id);
            var panelStyle = { height: "170px", width: "49%", display: "inline-block" };

            var result = UI.createElement(InteractiveTaskLog, { extra: entry.extra });

            return UI.createElement(
                Panel,
                { className: "section" + entry.testNumber, key: entry.testNumber, orientation: Orientation.HORIZONTAL,
                    style: { height: panelStyle.height, width: "100%", padding: "5px" } },
                result
            );
        }
    }]);
    return InteractiveEvalTaskExampleRow;
}(DelayedCollapsibleTableRow);

var TestResultsColumns = function TestResultsColumns() {
    var numberStyle = {
        textAlign: "right"
    };

    return [{
        value: function value(entry) {
            return entry.testNumber;
        },
        headerName: "Test Number",
        sortDescending: true,
        cellStyle: numberStyle,
        headerStyle: numberStyle
    }, {
        value: function value(entry) {
            if (entry.hasOwnProperty("cpuTime")) {
                return Formatter.cpuTime(entry.cpuTime);
            } else {
                return "-";
            }
        },
        rawValue: function rawValue(entry) {
            return entry.cpuTime;
        },
        headerName: "CPU Usage",
        cellStyle: numberStyle,
        headerStyle: numberStyle
    }, {
        value: function value(entry) {
            if (entry.hasOwnProperty("memUsage")) {
                return Formatter.memory(entry.memUsage);
            } else {
                return "-";
            }
        },
        rawValue: function rawValue(entry) {
            return entry.memUsage;
        },
        headerName: "Memory Usage",
        cellStyle: numberStyle,
        headerStyle: numberStyle
    }, {
        value: function value(entry) {
            if (entry.hasOwnProperty("message")) {
                return entry.message;
            } else {
                return "-";
            }
        },
        headerName: "Result",
        cellStyle: numberStyle,
        headerStyle: numberStyle
    }];
};

var EvalJobResultsTable = function (_CollapsibleTableInte) {
    inherits(EvalJobResultsTable, _CollapsibleTableInte);

    function EvalJobResultsTable(options) {
        classCallCheck(this, EvalJobResultsTable);

        // sort by test number by default(column 0)
        var _this8 = possibleConstructorReturn(this, (EvalJobResultsTable.__proto__ || Object.getPrototypeOf(EvalJobResultsTable)).call(this, options));

        _this8.columnSortingOrder = [_this8.columns[0]];
        return _this8;
    }

    createClass(EvalJobResultsTable, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(EvalJobResultsTable.prototype.__proto__ || Object.getPrototypeOf(EvalJobResultsTable.prototype), "setOptions", this).call(this, options);

            this.evalJob = options.evalJob;
        }
    }, {
        key: "getRowClass",
        value: function getRowClass(entry) {
            var evalTask = this.evalJob.getEvalTask();
            if (this.evalJob.getExampleTest(entry.id)) {
                if (evalTask.getType() == 0) {
                    return EvalTaskExampleRow;
                } else {
                    return InteractiveEvalTaskExampleRow;
                }
            }
            if (evalTask && evalTask.isPublic && evalTask.getType() == 0) {
                evalTask.systemTests = evalTask.systemTests || {};
                return EvalTaskDownloadableTestRow;
            }
            return TableRowInCollapsibleTable;
        }
    }, {
        key: "getRowOptions",
        value: function getRowOptions(entry) {
            var rowOptions = get(EvalJobResultsTable.prototype.__proto__ || Object.getPrototypeOf(EvalJobResultsTable.prototype), "getRowOptions", this).call(this, entry);
            rowOptions.evalJob = this.evalJob;
            return rowOptions;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            if (!this.evalJob) {
                return [];
            }

            var entries = this.evalJob.getAllTests();

            for (var i = 0; i < entries.length; i += 1) {
                entries[i].testNumber = i;
            }

            entries.reverse();

            return entries;
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            get(EvalJobResultsTable.prototype.__proto__ || Object.getPrototypeOf(EvalJobResultsTable.prototype), "setColumns", this).call(this, TestResultsColumns());
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            this.attachUpdateListener(this.evalJob, function () {
                if (_this9.options.examplesOnly && _this9.evalJob.tests.length > 0) {
                    return;
                }
                if (_this9.evalJob.getStatus() === EvalJob.Status.DONE) {
                    return;
                }
                _this9.redraw();
            });
        }
    }]);
    return EvalJobResultsTable;
}(CollapsibleTableInterface(SortableTable));

var _class$67, _descriptor$29, _dec$31, _class3$18;

function _initDefineProp$30(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$30(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var SubmissionModal = function (_Modal) {
    inherits(SubmissionModal, _Modal);

    function SubmissionModal() {
        classCallCheck(this, SubmissionModal);
        return possibleConstructorReturn(this, (SubmissionModal.__proto__ || Object.getPrototypeOf(SubmissionModal)).apply(this, arguments));
    }

    createClass(SubmissionModal, [{
        key: "hide",
        value: function hide() {
            get(SubmissionModal.prototype.__proto__ || Object.getPrototypeOf(SubmissionModal.prototype), "hide", this).call(this);
            // Refocus the submission once the modal is hid, so that user will know what submission the modal came from.
            this.options.submissionSummary.node.focus();
        }
    }]);
    return SubmissionModal;
}(Modal);

var SubmissionPointsLabel = function (_UI$TextElement) {
    inherits(SubmissionPointsLabel, _UI$TextElement);

    function SubmissionPointsLabel() {
        classCallCheck(this, SubmissionPointsLabel);
        return possibleConstructorReturn(this, (SubmissionPointsLabel.__proto__ || Object.getPrototypeOf(SubmissionPointsLabel)).apply(this, arguments));
    }

    createClass(SubmissionPointsLabel, [{
        key: "getContestTask",
        value: function getContestTask() {
            return this.options.contestTask;
        }
    }, {
        key: "getValue",
        value: function getValue() {
            var score = this.options.score;
            var contestTask = this.getContestTask();
            var pointsWorth = contestTask && contestTask.pointsWorth || 1;

            var value = Formatter.truncate(score * pointsWorth, 2) + " points";
            if (pointsWorth != 100) {
                value += " (" + Formatter.truncate(score * 100) + "%)";
            }

            return value;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            if (this.options.contestTask) {
                this.attachUpdateListener(this.options.contestTask, function () {
                    return _this3.redraw();
                });
            }
        }
    }]);
    return SubmissionPointsLabel;
}(UI.TextElement);

var EvalJobUIHandler = function () {
    function EvalJobUIHandler(evalJob) {
        classCallCheck(this, EvalJobUIHandler);

        this.evalJob = evalJob;
    }

    createClass(EvalJobUIHandler, [{
        key: "getSummary",
        value: function getSummary() {
            var cpuTime = 0,
                memoryUsage = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.evalJob.tests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var test = _step.value;

                    cpuTime = Math.max(cpuTime, test.cpuTime || 0);
                    memoryUsage = Math.max(memoryUsage, test.memUsage);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return UI.createElement(
                "div",
                null,
                UI.createElement(
                    "p",
                    null,
                    UI.T("User:"),
                    " ",
                    this.getUserHandle()
                ),
                UI.createElement(
                    "p",
                    null,
                    UI.T("Verdict:"),
                    " ",
                    this.getStatus()
                ),
                UI.createElement(
                    "p",
                    null,
                    UI.T(""),
                    " "
                ),
                UI.createElement(
                    "p",
                    null,
                    UI.T("Language:"),
                    " ",
                    this.evalJob.getProgrammingLanguage().name
                ),
                UI.createElement(
                    "p",
                    null,
                    UI.T("CPU Time usage:"),
                    " ",
                    Formatter.cpuTime(cpuTime)
                ),
                UI.createElement(
                    "p",
                    null,
                    UI.T("Memory usage:"),
                    " ",
                    Formatter.memory(memoryUsage),
                    " "
                ),
                UI.createElement(
                    "p",
                    null,
                    UI.T("Source code:"),
                    " ",
                    Formatter.memory(this.evalJob.sourceText.length),
                    " "
                )
            );
        }
    }, {
        key: "getResultsTable",
        value: function getResultsTable() {
            return UI.createElement(EvalJobResultsTable, { ref: "evalJobResultsTable", evalJob: this.evalJob });
        }
    }, {
        key: "getCompilationMessage",
        value: function getCompilationMessage() {
            return UI.createElement(CompilationStatusPanel, { customRun: this.evalJob });
        }
    }, {
        key: "getJobId",
        value: function getJobId() {
            return "Job #" + this.evalJob.id;
        }
    }, {
        key: "getJobIdWithExternalLink",
        value: function getJobIdWithExternalLink() {
            return ["Job ", UI.createElement(
                "span",
                { onClick: function onClick() {
                        window.event.stopPropagation();
                    } },
                UI.createElement(Link, { href: "/submission/" + this.evalJob.id,
                    newTab: true,
                    value: ["#" + this.evalJob.id + " ", UI.createElement(FAIcon, { icon: "external-link" })] }),
                " "
            )];
        }
    }, {
        key: "getTimeSubmitted",
        value: function getTimeSubmitted() {
            var timeSubmitted = StemDate();
            if (this.evalJob.timeSubmitted) {
                timeSubmitted = StemDate.unix(this.evalJob.timeSubmitted);
            }
            timeSubmitted = timeSubmitted.format("DD MMM YYYY HH:mm:ss");
            return timeSubmitted;
        }
    }, {
        key: "getUserHandle",
        value: function getUserHandle() {
            return UI.createElement(UserHandle, { userId: this.evalJob.userId });
        }
    }, {
        key: "getTask",
        value: function getTask() {
            var contestTask = ContestTaskStore.getByEvalTaskId(this.evalJob.evalTaskId);

            if (contestTask) {
                return "Task " + contestTask.longName;
            }
            return "Task id #" + this.evalJob.evalTaskId;
        }
    }, {
        key: "getContest",
        value: function getContest() {
            var contest = ContestStore.get(this.evalJob.contestId);

            if (contest) {
                return contest.longName;
            }
            return "Contest #" + this.evalJob.contestId;
        }
    }, {
        key: "getStatus",
        value: function getStatus() {
            var evalJob = this.evalJob;

            var statusLabel = "";

            var status = evalJob.getStatus();

            var statusMessage = new Map([[EvalJob.Status.WAITING, "Waiting"], [EvalJob.Status.COMPILING, "Compiling"], [EvalJob.Status.RUNNING, "Running"]]);

            if (status === EvalJob.Status.DONE) {
                // TODO: This is not the only partial scoring case
                var hasPartialScoring = evalJob.hasPartialScoring();

                if (evalJob.hasCompileError()) {
                    statusLabel = "Compilation Error";
                } else if (evalJob.hasInternalJudgeError()) {
                    statusLabel = "Internal Judge Error!";
                } else if (!evalJob.onlyExamples) {
                    if (hasPartialScoring) {
                        var score = evalJob.score;
                        var contestTask = evalJob.getContestTask();
                        return UI.createElement(SubmissionPointsLabel, { score: score, contestTask: contestTask, value: "" });
                    } else if (evalJob.getNumTestsPassed() < evalJob.exampleTests.length) {
                        statusLabel = "Passed " + evalJob.getNumTestsPassed() + "/" + evalJob.exampleTests.length + " examples";
                    } else {
                        var resultStatus = evalJob.getResultStatus();
                        var lastTest = evalJob.getLastTest();

                        var resultStatusMessage = new Map([[EvalJob.ResultStatus.TIME_LIMIT_EXCEEDED, "Time Limit Exceeded"], [EvalJob.ResultStatus.MEMORY_LIMIT_EXCEEDED, "Memory Limit Exceeded"], [EvalJob.ResultStatus.RUNTIME_ERROR, "Runtime Error"], [EvalJob.ResultStatus.KILLED_BY_SIGNAL, lastTest ? lastTest.message : ""], [EvalJob.ResultStatus.WRONG_ANSWER, lastTest ? lastTest.message : ""], [EvalJob.ResultStatus.ACCEPTED, "Accepted"], [EvalJob.ResultStatus.UNKNOWN, "Internal Judge Error!"]]);
                        statusLabel = resultStatusMessage.get(resultStatus);
                    }
                } else {
                    statusLabel = evalJob.getNumTestsPassed() + "/" + evalJob.exampleTests.length;
                }
            } else {
                statusLabel = statusMessage.get(status);
            }

            return statusLabel;
        }
    }]);
    return EvalJobUIHandler;
}();

var SubmissionSummaryTabArea = function (_UI$Element) {
    inherits(SubmissionSummaryTabArea, _UI$Element);

    function SubmissionSummaryTabArea() {
        classCallCheck(this, SubmissionSummaryTabArea);
        return possibleConstructorReturn(this, (SubmissionSummaryTabArea.__proto__ || Object.getPrototypeOf(SubmissionSummaryTabArea)).apply(this, arguments));
    }

    createClass(SubmissionSummaryTabArea, [{
        key: "getEvalJob",
        value: function getEvalJob() {
            return this.options.evalJob;
        }
    }, {
        key: "render",
        value: function render() {
            var evalJob = this.getEvalJob();
            var evalJobUIHandler = new EvalJobUIHandler(evalJob);

            var codeHighlighterOptions = {};
            var panelStyle = { padding: "1em" };
            var buttonStyle = { margin: "0.3em" };

            var programmingLanguage = evalJob.getProgrammingLanguage();

            if (programmingLanguage) {
                codeHighlighterOptions.aceMode = programmingLanguage.aceMode;
            }

            this.options.style = { padding: "0px", margin: "0px" };

            return UI.createElement(
                TabArea,
                { keepActiveTab: true },
                UI.createElement(
                    Panel,
                    { ref: "sourceCodeTabPanel", title: UI.T("Source"), style: panelStyle },
                    UI.createElement(
                        "div",
                        { key: "optionButtons", className: "row", style: { padding: "10px" } },
                        UI.createElement(Button, { ref: "downloadSourceButton",
                            label: UI.T("Download Source"),
                            level: Level.INFO, faIcon: "download", style: buttonStyle }),
                        UI.createElement(Button, { ref: "loadInWorkspaceButton",
                            label: UI.T("Load in Workspace"),
                            level: Level.INFO, style: buttonStyle })
                    ),
                    UI.createElement(StaticCodeHighlighter, _extends({ ref: "sourceCodeHighlighter",
                        value: evalJob.sourceText,
                        maxLines: this.options.maxCodeLines || 32
                    }, codeHighlighterOptions))
                ),
                UI.createElement(
                    Panel,
                    { ref: "summaryTabPanel",
                        title: UI.T("Summary"),
                        style: panelStyle },
                    evalJobUIHandler.getSummary()
                ),
                UI.createElement(
                    Panel,
                    { ref: "resultsTabPanel",
                        title: UI.T("Results"),
                        style: panelStyle },
                    evalJobUIHandler.getResultsTable()
                ),
                UI.createElement(
                    Panel,
                    { ref: "compilationTabPanel",
                        title: UI.T("Compilation messages"),
                        style: panelStyle },
                    evalJobUIHandler.getCompilationMessage()
                )
            );
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.downloadSourceButton.addClickListener(function () {
                var fileContentBlob = new Blob([_this5.getEvalJob().sourceText], { type: "text/plain;charset=utf-8" });
                var programmingLanguage = _this5.getEvalJob().getProgrammingLanguage();
                var fileName = _this5.getEvalJob().id;

                if (programmingLanguage) {
                    fileName += "." + programmingLanguage.getExtension();
                }

                FileSaver.saveAs(fileContentBlob, fileName);
            });

            this.loadInWorkspaceButton.addClickListener(function () {
                Dispatcher.Global.dispatch("loadEvalJobSource", { evalJob: _this5.getEvalJob() });
            });

            this.attachUpdateListener(this.getEvalJob(), function () {
                _this5.redraw();
            });
        }
    }]);
    return SubmissionSummaryTabArea;
}(UI.Element);

var SubmissionSummaryStyle = (_class$67 = function (_StyleSheet) {
    inherits(SubmissionSummaryStyle, _StyleSheet);

    function SubmissionSummaryStyle() {
        var _ref;

        var _temp, _this6, _ret;

        classCallCheck(this, SubmissionSummaryStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this6 = possibleConstructorReturn(this, (_ref = SubmissionSummaryStyle.__proto__ || Object.getPrototypeOf(SubmissionSummaryStyle)).call.apply(_ref, [this].concat(args))), _this6), _initDefineProp$30(_this6, "submissionSummary", _descriptor$29, _this6), _temp), possibleConstructorReturn(_this6, _ret);
    }

    return SubmissionSummaryStyle;
}(StyleSheet), _descriptor$29 = _applyDecoratedDescriptor$30(_class$67.prototype, "submissionSummary", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "white",
            cursor: "pointer",
            margin: "10px 0",
            padding: "10px 15px",
            boxShadow: "0 1px 3px " + enhance(Theme.Global.properties.COLOR_BACKGROUND, 0.3),
            transition: "0.2s",
            ":hover": {
                boxShadow: "0 1px 5px " + enhance(Theme.Global.properties.COLOR_BACKGROUND, 0.5),
                transition: "0.2s"
            }
        };
    }
}), _class$67);
var SubmissionSummary = (_dec$31 = registerStyle(SubmissionSummaryStyle), _dec$31(_class3$18 = function (_UI$Element2) {
    inherits(SubmissionSummary, _UI$Element2);

    function SubmissionSummary() {
        classCallCheck(this, SubmissionSummary);
        return possibleConstructorReturn(this, (SubmissionSummary.__proto__ || Object.getPrototypeOf(SubmissionSummary)).apply(this, arguments));
    }

    createClass(SubmissionSummary, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.submissionSummary);
            // Element needs a tab index so that focus works.
            attr.setAttribute("tabindex", "0");
        }
    }, {
        key: "getEvalJob",
        value: function getEvalJob() {
            return this.options.evalJob;
        }
    }, {
        key: "render",
        value: function render() {
            var evalJobUIHandler = new EvalJobUIHandler(this.getEvalJob());

            return UI.createElement(
                "div",
                null,
                [evalJobUIHandler.getJobIdWithExternalLink(), " ", evalJobUIHandler.getTimeSubmitted(), " ", evalJobUIHandler.getUserHandle(), " -- ", evalJobUIHandler.getTask(), ", ", evalJobUIHandler.getContest(), " -- ", evalJobUIHandler.getStatus()]
            );
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.addClickListener(function () {
                SubmissionModal.show({
                    fillScreen: true,
                    children: [UI.createElement(SubmissionSummaryTabArea, { evalJob: _this8.getEvalJob() })],
                    submissionSummary: _this8
                });
            });

            this.attachUpdateListener(this.getEvalJob(), function () {
                _this8.redraw();
            });
        }
    }]);
    return SubmissionSummary;
}(UI.Element)) || _class3$18);

var SubmissionSummaryPanel = function (_Panel) {
    inherits(SubmissionSummaryPanel, _Panel);

    function SubmissionSummaryPanel(options) {
        classCallCheck(this, SubmissionSummaryPanel);

        var _this9 = possibleConstructorReturn(this, (SubmissionSummaryPanel.__proto__ || Object.getPrototypeOf(SubmissionSummaryPanel)).call(this, options));

        _this9.submissionSummaryMap = new Map();
        return _this9;
    }

    createClass(SubmissionSummaryPanel, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(SubmissionSummaryPanel.prototype.__proto__ || Object.getPrototypeOf(SubmissionSummaryPanel.prototype), "setOptions", this).call(this, options);

            this.fetchEvalJobs();
        }
    }, {
        key: "render",
        value: function render() {
            var _this10 = this;

            var evalJobs = EvalJobStore.all().filter(function (evalJob) {
                return _this10.filterEvalJob(evalJob);
            }).sort(function (a, b) {
                return b.id - a.id;
            });

            this.options.children = evalJobs.map(function (evalJob) {
                return _this10.getSubmissionSummary(evalJob);
            });
            return this.options.children;
        }
    }, {
        key: "getSubmissionSummary",
        value: function getSubmissionSummary(evalJob) {
            return UI.createElement(SubmissionSummary, { evalJob: evalJob, key: evalJob.id });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            get(SubmissionSummaryPanel.prototype.__proto__ || Object.getPrototypeOf(SubmissionSummaryPanel.prototype), "onMount", this).call(this);

            this.attachCreateListener(EvalJobStore, function (evalJob) {
                if (_this11.filterEvalJob(evalJob)) {
                    var submissionSummary = _this11.getSubmissionSummary(evalJob);

                    var numChildren = _this11.options.children.length;

                    if (numChildren === 0) {
                        _this11.appendChild(submissionSummary);
                        return;
                    }

                    var maxId = _this11.options.children[0].options.evalJob.id;
                    var minId = _this11.options.children[numChildren - 1].options.evalJob.id;

                    if (evalJob.id > maxId) {
                        _this11.insertChild(submissionSummary);
                    } else if (evalJob.id < minId) {
                        _this11.appendChild(submissionSummary);
                    } else {
                        var checkPosition = function checkPosition(position) {
                            if (position >= numChildren) {
                                return false;
                            }

                            var positionId = _this11.options.children[position].options.evalJob.id;
                            return positionId > evalJob.id;
                        };

                        var position = -1;
                        for (var bit = 1 << 20; bit > 0; bit >>= 1) {
                            if (checkPosition(position + bit)) {
                                position += bit;
                            }
                        }
                        position += 1;

                        if (_this11.options.children[position].options.evalJob.id < evalJob.id) {
                            _this11.insertChild(submissionSummary, position);
                        }
                    }
                }
            });
        }
    }, {
        key: "getFilters",
        value: function getFilters() {
            return this.options.filters;
        }
    }, {
        key: "filterEvalJob",
        value: function filterEvalJob(evalJob) {
            var filters = Object.assign({
                examplesPassed: true,
                onlyExamples: false
            }, this.getFilters());

            if (filters.startTime && evalJob.timeSubmitted < filters.startTime) {
                return false;
            }

            if (filters.endTime && evalJob.timeSubmitted > filters.endTime) {
                return false;
            }

            if (filters.status && evalJob.getStatus() !== filters.status) {
                return false;
            }

            if (filters.resultStatus && (evalJob.getStatus() !== EvalJob.Status.DONE || evalJob.getResultStatus() !== filters.resultStatus)) {
                return false;
            }

            var strictFilters = ["userId", "contestId", "contestTaskId", "evalTaskId", "score", "programmingLanguageId", "onlyExamples"];

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = strictFilters[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var filter = _step2.value;

                    if (filters.hasOwnProperty(filter) && evalJob[filter] !== filters[filter]) {
                        return false;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return true;
        }
    }, {
        key: "fetchEvalJobs",
        value: function fetchEvalJobs() {
            var requestCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var request = this.getEvalJobRequest(requestCount);

            Ajax.getJSON("/eval/get_eval_jobs/", request).then(function (data) {
                if (data.jobCount) {
                    EvalJobStore.jobCount = data.jobCount;
                }
            }, function () {});
        }
    }, {
        key: "getEvalJobRequest",
        value: function getEvalJobRequest(requestCount) {
            var numJobs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;

            var request = {
                numJobs: numJobs || 200,
                requestCount: requestCount
            };

            Object.assign(request, this.getFilters());

            return request;
        }
    }]);
    return SubmissionSummaryPanel;
}(Panel);

var SubmissionSummaryMarkup = function (_UI$Element3) {
    inherits(SubmissionSummaryMarkup, _UI$Element3);

    function SubmissionSummaryMarkup() {
        classCallCheck(this, SubmissionSummaryMarkup);
        return possibleConstructorReturn(this, (SubmissionSummaryMarkup.__proto__ || Object.getPrototypeOf(SubmissionSummaryMarkup)).apply(this, arguments));
    }

    createClass(SubmissionSummaryMarkup, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(SubmissionSummaryMarkup.prototype.__proto__ || Object.getPrototypeOf(SubmissionSummaryMarkup.prototype), "setOptions", this).call(this, options);
            this.options.evalJobId = this.options.evalJobId || this.options.id;
            this.options.evalJob = EvalJobStore.get(this.options.evalJobId);
        }
    }, {
        key: "render",
        value: function render() {
            var _this13 = this;

            if (this.options.error) {
                return [UI.createElement("span", { className: "fa fa-warning" }), UI.createElement(
                    "strong",
                    null,
                    "Failed to open submission with id ",
                    this.options.evalJobId
                )];
            }
            if (this.options.evalJob) {
                return [UI.createElement(SubmissionSummary, { evalJob: this.options.evalJob, maxCodeLines: 32 })];
            } else {
                var onSuccess = function onSuccess(evalJob) {
                    _this13.options.evalJob = evalJob;
                    if (!_this13.node) {
                        _this13.createNode();
                    }
                    _this13.redraw();
                };

                var onError = function onError(error) {
                    _this13.options.error = error || "Error";
                    _this13.redraw();
                };

                // TODO: handle failure to fetch
                EvalJobStore.fetch(this.options.evalJobId, onSuccess, onError);
                return [];
            }
        }
    }]);
    return SubmissionSummaryMarkup;
}(UI.Element);

function GetProgrammingLanguageOptions() {
    var noSelectedOptionName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

    return [{ toString: function toString() {
            return noSelectedOptionName;
        } }].concat(toConsumableArray(ProgrammingLanguage.all()));
}

function GetStatusOptions() {
    return [{ toString: function toString() {
            return "";
        } }, { value: EvalJob.Status.WAITING, toString: function toString() {
            return "Waiting";
        } }, { value: EvalJob.Status.COMPILING, toString: function toString() {
            return "Compiling";
        } }, { value: EvalJob.Status.RUNNING, toString: function toString() {
            return "Running";
        } }, { value: EvalJob.Status.DONE, toString: function toString() {
            return "Done";
        } }];
}

function GetResultStatusOptions() {
    return [{ toString: function toString() {
            return "";
        } }, { value: EvalJob.ResultStatus.TIME_LIMIT_EXCEEDED, toString: function toString() {
            return "Time Limit Exceeded";
        } }, { value: EvalJob.ResultStatus.MEMORY_LIMIT_EXCEEDED, toString: function toString() {
            return "Memory Limit Exceeded";
        } }, { value: EvalJob.ResultStatus.RUNTIME_ERROR, toString: function toString() {
            return "Runtime Error";
        } }, { value: EvalJob.ResultStatus.KILLED_BY_SIGNAL, toString: function toString() {
            return "Killed by signal";
        } }, { value: EvalJob.ResultStatus.WRONG_ANSWER, toString: function toString() {
            return "Wrong answer";
        } }, { value: EvalJob.ResultStatus.ACCEPTED, toString: function toString() {
            return "Accepted";
        } }, { value: EvalJob.ResultStatus.UNKNOWN, toString: function toString() {
            return "Internal Judge Error!";
        } }];
}

var SubmissionSummaryGlobalFilter = function (_UI$Element4) {
    inherits(SubmissionSummaryGlobalFilter, _UI$Element4);

    function SubmissionSummaryGlobalFilter() {
        classCallCheck(this, SubmissionSummaryGlobalFilter);
        return possibleConstructorReturn(this, (SubmissionSummaryGlobalFilter.__proto__ || Object.getPrototypeOf(SubmissionSummaryGlobalFilter)).apply(this, arguments));
    }

    createClass(SubmissionSummaryGlobalFilter, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(GlobalStyle.SMALL);
            attr.setStyle({
                width: 900,
                maxWidth: "calc(100% - 30px)",
                margin: "0 auto",
                padding: 15
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this15 = this;

            var statusOptions = GetStatusOptions();
            var resultStatusOptions = GetResultStatusOptions();
            var programmingLanguageOptions = GetProgrammingLanguageOptions();

            return [UI.createElement(
                "h2",
                null,
                "Filter jobs"
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    FormField,
                    { label: "After:", inline: true },
                    UI.createElement(DateTimePicker$$1, { ref: "startTimePicker" })
                ),
                UI.createElement(
                    FormField,
                    { label: "Before:", inline: true },
                    UI.createElement(DateTimePicker$$1, { ref: "endTimePicker" })
                ),
                UI.createElement(
                    FormField,
                    { label: "Status:", inline: true },
                    UI.createElement(Select, { options: statusOptions, ref: "statusSelect" })
                ),
                UI.createElement(
                    FormField,
                    { label: "Result status:", inline: true },
                    UI.createElement(Select, { options: resultStatusOptions, ref: "resultStatusSelect" })
                ),
                UI.createElement(
                    FormField,
                    { label: "User id:", inline: true },
                    UI.createElement(NumberInput, { ref: "userIdInput" })
                ),
                UI.createElement(
                    FormField,
                    { label: "Language:" },
                    UI.createElement(Select, { options: programmingLanguageOptions, ref: "programmingLanguageSelect" })
                ),
                UI.createElement(
                    FormField,
                    { label: " " },
                    UI.createElement(
                        "div",
                        null,
                        UI.createElement(Button, { level: Level.PRIMARY, label: UI.T("Set filter"), onClick: function onClick() {
                                return _this15.setFilters();
                            } })
                    )
                )
            ), UI.createElement("br", null), UI.createElement(SubmissionSummaryPanel, { ref: "submissionSummaryPanel" })];
        }
    }, {
        key: "setFilters",
        value: function setFilters() {
            var filters = {};

            var startTime = this.startTimePicker.getDate();
            if (startTime) {
                if (!startTime.isValid()) {
                    alert("Invalid time");
                    return;
                }
                filters.startTime = startTime.unix();
            }

            var endTime = this.endTimePicker.getDate();
            if (endTime) {
                if (!endTime.isValid()) {
                    alert("Invalid time");
                    return;
                }
                filters.endTime = endTime.unix();
            }

            var status = this.statusSelect.get().value;
            if (status) {
                filters.status = status;
            }

            var resultStatus = this.resultStatusSelect.get().value;
            if (resultStatus) {
                filters.resultStatus = resultStatus;
            }

            var programmingLanguageId = this.programmingLanguageSelect.get().id;
            if (programmingLanguageId) {
                filters.programmingLanguageId = programmingLanguageId;
            }

            var userId = this.userIdInput.getValue();
            if (userId) {
                filters.userId = userId;
            }

            this.submissionSummaryPanel.updateOptions({ filters: filters });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            GlobalState.registerStream("evaljobs");
        }
    }]);
    return SubmissionSummaryGlobalFilter;
}(UI.Element);

var SubmissionSummaryContestFilter = function (_UI$Element5) {
    inherits(SubmissionSummaryContestFilter, _UI$Element5);

    function SubmissionSummaryContestFilter() {
        classCallCheck(this, SubmissionSummaryContestFilter);
        return possibleConstructorReturn(this, (SubmissionSummaryContestFilter.__proto__ || Object.getPrototypeOf(SubmissionSummaryContestFilter)).apply(this, arguments));
    }

    createClass(SubmissionSummaryContestFilter, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(SubmissionSummaryContestFilter.prototype.__proto__ || Object.getPrototypeOf(SubmissionSummaryContestFilter.prototype), "setOptions", this).call(this, options);

            this.contest = ContestStore.get(options.contestId);
        }
    }, {
        key: "render",
        value: function render() {
            var _this17 = this;

            var filterView = void 0;
            if (this.contest.canShowPublicSources()) {
                var statusOptions = GetStatusOptions();
                var resultStatusOptions = GetResultStatusOptions();
                var programmingLanguageOptions = GetProgrammingLanguageOptions("All");

                var contestTaskSelect = void 0;
                if (!this.options.contestTaskId) {
                    contestTaskSelect = UI.createElement(
                        FormField,
                        { label: "Contest task:" },
                        UI.createElement(Select, { options: [""].concat(this.contest.getContestTasks()),
                            ref: "contestTaskSelect"
                        })
                    );
                }

                filterView = [UI.createElement(
                    CollapsiblePanel,
                    { ref: "filterView", title: UI.T("Filter jobs") },
                    UI.createElement(
                        "div",
                        null,
                        UI.createElement(
                            FormField,
                            { label: "After:" },
                            UI.createElement(DateTimePicker$$1, { ref: "startTimePicker" })
                        ),
                        UI.createElement(
                            FormField,
                            { label: "Before:" },
                            UI.createElement(DateTimePicker$$1, { ref: "endTimePicker" })
                        ),
                        contestTaskSelect,
                        UI.createElement(
                            FormField,
                            { label: "Status:" },
                            UI.createElement(Select, { options: statusOptions, ref: "statusSelect" })
                        ),
                        UI.createElement(
                            FormField,
                            { label: "Result status:" },
                            UI.createElement(Select, { options: resultStatusOptions, ref: "resultStatusSelect" })
                        ),
                        UI.createElement(
                            FormField,
                            { label: "Language:" },
                            UI.createElement(Select, { options: programmingLanguageOptions, ref: "programmingLanguageSelect" })
                        ),
                        UI.createElement(
                            FormField,
                            { label: "Show my submissions:" },
                            UI.createElement(CheckboxInput, { ref: "userOnlyCheckbox", style: { display: "inline-block", width: "initial" } })
                        ),
                        UI.createElement(
                            FormField,
                            { label: " " },
                            UI.createElement(
                                "div",
                                null,
                                UI.createElement(Button, { level: Level.PRIMARY, label: UI.T("Set filter"), onClick: function onClick() {
                                        return _this17.setFilters();
                                    } })
                            )
                        )
                    )
                )];
            }

            return [filterView, UI.createElement(SubmissionSummaryPanel, { ref: "submissionSummaryPanel", filters: this.getFilters() })];
        }
    }, {
        key: "getFilters",
        value: function getFilters() {
            var filters = {};

            if (!this.options.allContests) {
                filters.contestId = this.contest.id;
            }

            if (this.options.contestTaskId) {
                filters.contestTaskId = this.options.contestTaskId;
            } else if (this.filterView) {
                var contestTask = this.contestTaskSelect.get();
                if (contestTask) {
                    if (!this.options.allContests) {
                        filters.contestTaskId = contestTask.id;
                    } else {
                        filters.evalTaskId = contestTask.evalTaskId;
                    }
                }
            } else {
                // by default we only show own sources
                filters.userId = USER.id;
            }

            if (!this.filterView) {
                return filters;
            }

            var startTime = this.startTimePicker.getDate();
            if (startTime) {
                if (!startTime.isValid()) {
                    alert("Invalid time");
                    return;
                }
                filters.startTime = startTime.unix();
            }

            var endTime = this.endTimePicker.getDate();
            if (endTime) {
                if (!endTime.isValid()) {
                    alert("Invalid time");
                    return;
                }
                filters.endTime = endTime.unix();
            }

            var status = this.statusSelect.get().value;
            if (status) {
                filters.status = status;
            }

            var resultStatus = this.resultStatusSelect.get().value;
            if (resultStatus) {
                filters.resultStatus = resultStatus;
            }

            var programmingLanguageId = this.programmingLanguageSelect.get().id;
            if (programmingLanguageId) {
                filters.programmingLanguageId = programmingLanguageId;
            }

            var userOnly = this.userOnlyCheckbox.getValue();
            if (userOnly) {
                filters.userId = USER.id;
            }

            return filters;
        }
    }, {
        key: "setFilters",
        value: function setFilters() {
            this.submissionSummaryPanel.updateOptions({ filters: this.getFilters() });
        }
    }]);
    return SubmissionSummaryContestFilter;
}(UI.Element);

var SubmissionSummaryInterviewFilter = function (_SubmissionSummaryPan) {
    inherits(SubmissionSummaryInterviewFilter, _SubmissionSummaryPan);

    function SubmissionSummaryInterviewFilter() {
        classCallCheck(this, SubmissionSummaryInterviewFilter);
        return possibleConstructorReturn(this, (SubmissionSummaryInterviewFilter.__proto__ || Object.getPrototypeOf(SubmissionSummaryInterviewFilter)).apply(this, arguments));
    }

    createClass(SubmissionSummaryInterviewFilter, [{
        key: "getFilters",
        value: function getFilters() {
            var filters = {};

            filters.contestId = this.options.contestTask.contestId;
            filters.contestTaskId = this.options.contestTask.id;
            if (!USER.isSuperUser) {
                filters.userId = USER.id;
            }

            return filters;
        }
    }]);
    return SubmissionSummaryInterviewFilter;
}(SubmissionSummaryPanel);

var SubmissionSummaryPrivateArchiveFilter = function (_UI$Element6) {
    inherits(SubmissionSummaryPrivateArchiveFilter, _UI$Element6);

    function SubmissionSummaryPrivateArchiveFilter() {
        classCallCheck(this, SubmissionSummaryPrivateArchiveFilter);
        return possibleConstructorReturn(this, (SubmissionSummaryPrivateArchiveFilter.__proto__ || Object.getPrototypeOf(SubmissionSummaryPrivateArchiveFilter)).apply(this, arguments));
    }

    createClass(SubmissionSummaryPrivateArchiveFilter, [{
        key: "render",
        value: function render() {
            return [UI.createElement(SubmissionSummaryPanel, { ref: "submissionSummaryPanel", filters: this.getFilters() })];
        }
    }, {
        key: "getFilters",
        value: function getFilters() {
            var filters = {};

            var privateArchive = PrivateArchiveStore.get(this.options.privateArchiveId);
            var contestTasks = privateArchive.getContestTasks();
            var contestTaskIds = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = contestTasks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var contestTask = _step3.value;

                    contestTaskIds.push(contestTask.id);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            filters.contestTaskIdList = contestTaskIds;

            return filters;
        }
    }]);
    return SubmissionSummaryPrivateArchiveFilter;
}(UI.Element);

var Archive = function (_StoreObject) {
    inherits(Archive, _StoreObject);

    function Archive(obj) {
        classCallCheck(this, Archive);

        var _this = possibleConstructorReturn(this, (Archive.__proto__ || Object.getPrototypeOf(Archive)).call(this, obj));

        _this.archiveUsers = new Map();
        _this.users = new Map();
        _this.addListener("archiveUserUpdate", function (event) {
            _this.dispatch("rankingsChange", event);
            _this.recalculateUsers();
        });
        return _this;
    }

    createClass(Archive, [{
        key: "getBaseContest",
        value: function getBaseContest() {
            return ContestStore.get(this.baseContestId);
        }
    }, {
        key: "addArchiveUser",
        value: function addArchiveUser(archiveUser) {
            this.archiveUsers.set(archiveUser.id, archiveUser);
            this.users.set(archiveUser.userId, archiveUser);
        }
    }, {
        key: "getUser",
        value: function getUser(userId) {
            return this.users.get(userId);
        }
    }, {
        key: "getUsers",
        value: function getUsers() {
            return Array.from(this.archiveUsers.values());
        }
    }, {
        key: "getContestTasks",
        value: function getContestTasks() {
            var result = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = ContestTaskStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestTask = _step.value;

                    if (contestTask.contestId === this.baseContestId) {
                        result.push(contestTask);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            result.sort(function (a, b) {
                if (a.contestIndex === b.contestIndex) {
                    return a.getBaseTask().id - b.getBaseTask().id;
                }
                return a.contestIndex - b.contestIndex;
            });
            return result;
        }
    }, {
        key: "getNumUsers",
        value: function getNumUsers() {
            return this.archiveUsers.size;
        }
    }, {
        key: "recalculateUsers",
        value: function recalculateUsers() {
            var _this2 = this;

            if (this.recalculatingUserInProgress) {
                return;
            }
            this.recalculatingUserInProgress = true;
            setTimeout(function () {
                var users = _this2.getUsers();
                _this2.constructor.calculateRanks(users);
                _this2.dispatch("rankingsChange");
                _this2.recalculatingUserInProgress = false;
            }, 500);
        }
    }, {
        key: "getChat",
        value: function getChat() {
            return GroupChatStore.get(this.chatId);
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.longName;
        }
    }, {
        key: "getCountries",
        value: function getCountries() {
            var countryIds = new Set();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getUsers()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var user = _step2.value;

                    if (user && user.countryId && !countryIds.has(user.countryId)) {
                        countryIds.add(user.countryId);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return CountryStore.getCountriesFromIds(countryIds);
        }
    }], [{
        key: "calculateRanks",
        value: function calculateRanks(users) {
            users.sort(ArchiveUser.compareScoreboard);

            //Recalculate ranks
            for (var i = 0; i < users.length; i += 1) {
                if (i > 0 && users[i].totalScore === users[i - 1].totalScore) {
                    users[i].rank = users[i - 1].rank;
                } else {
                    users[i].rank = i + 1;
                }
            }
        }
    }]);
    return Archive;
}(StoreObject);

var ArchiveStore = new GenericObjectStore("Archive", Archive);

var ArchiveUser = function (_StoreObject2) {
    inherits(ArchiveUser, _StoreObject2);

    function ArchiveUser(obj) {
        classCallCheck(this, ArchiveUser);

        var _this3 = possibleConstructorReturn(this, (ArchiveUser.__proto__ || Object.getPrototypeOf(ArchiveUser)).call(this, obj));

        _this3.metaContest = ArchiveStore.get(_this3.archiveId);
        if (_this3.metaContest) {
            _this3.metaContest.addArchiveUser(_this3);
        }
        return _this3;
    }

    createClass(ArchiveUser, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            get(ArchiveUser.prototype.__proto__ || Object.getPrototypeOf(ArchiveUser.prototype), "applyEvent", this).call(this, event);
            this.metaContest.dispatch("archiveUserUpdate", {
                metaContestUser: this,
                event: event
            });
            this.metaContest.dispatch("contestUserUpdate", {
                metaContestUser: this,
                event: event
            });
        }
    }, {
        key: "solvedTask",
        value: function solvedTask(task) {
            var user = UserStore.get(this.userId);
            if (user) {
                return user.taskSummaries.has(task.evalTaskId) && user.taskSummaries.get(task.evalTaskId).bestScore === 100.0;
            }
            return false;
        }
    }, {
        key: "triedTask",
        value: function triedTask(task) {
            var user = UserStore.get(this.userId);
            if (user) {
                return user.taskSummaries.has(task.evalTaskId);
            }
            return false;
        }
    }, {
        key: "getPublicUser",
        value: function getPublicUser() {
            return PublicUserStore.get(this.userId);
        }
    }], [{
        key: "compare",
        value: function compare(a, b) {
            if (a.totalScore === b.totalScore) {
                return (a.penalty || Infinity) - (b.penalty || Infinity);
            }
            return (b.totalScore || -Infinity) - (a.totalScore || -Infinity);
        }
    }, {
        key: "compareScoreboard",
        value: function compareScoreboard(a, b) {
            return ArchiveUser.compare(a, b);
        }
    }]);
    return ArchiveUser;
}(StoreObject);

var ArchiveUserStore = new GenericObjectStore("ArchiveUser", ArchiveUser, { dependencies: ["Archive", "PublicUser"] });

var ContestChat = function (_UI$Element) {
    inherits(ContestChat, _UI$Element);

    function ContestChat() {
        classCallCheck(this, ContestChat);
        return possibleConstructorReturn(this, (ContestChat.__proto__ || Object.getPrototypeOf(ContestChat)).apply(this, arguments));
    }

    createClass(ContestChat, [{
        key: "getMessageThread",
        value: function getMessageThread() {
            var groupChat = GroupChatStore.get(this.options.chatId);
            return groupChat && groupChat.getMessageThread();
        }
    }, {
        key: "render",
        value: function render() {
            var messageThread = this.getMessageThread();
            if (messageThread) {
                return [UI.createElement(GroupChatWidget, { className: GlobalStyle.Container.MEDIUM,
                    style: { height: window.innerHeight - 70 + "px" },
                    ref: "chatWidget", chatId: this.options.chatId, messageThread: messageThread })];
            } else if (this.options.error) {
                return StateDependentElement.renderError(this.options.error);
            }
            return [UI.createElement(
                "h3",
                null,
                "Chat loading..."
            ), UI.createElement("span", { className: "fa fa-spinner fa-spin" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.addListener("hide", function () {
                _this2.chatWidget && _this2.chatWidget.dispatch("hide");
            });
            this.addListener("show", function () {
                _this2.chatWidget && _this2.chatWidget.dispatch("show");
            });
        }
    }]);
    return ContestChat;
}(UI.Element);

var ContestRegisterer = function (_StoreObject) {
    inherits(ContestRegisterer, _StoreObject);

    function ContestRegisterer() {
        classCallCheck(this, ContestRegisterer);
        return possibleConstructorReturn(this, (ContestRegisterer.__proto__ || Object.getPrototypeOf(ContestRegisterer)).apply(this, arguments));
    }

    createClass(ContestRegisterer, [{
        key: "getContest",
        value: function getContest() {
            return ContestStore.get(this.contestId);
        }
    }, {
        key: "isOwned",
        value: function isOwned() {
            return USER.id === this.ownerId;
        }
    }, {
        key: "getCode",
        value: function getCode() {
            var contestName = this.getContest().name;
            return contestName.substr(contestName.length - 12);
        }
    }]);
    return ContestRegisterer;
}(StoreObject);

var ContestRegistererStoreClass = function (_GenericObjectStore) {
    inherits(ContestRegistererStoreClass, _GenericObjectStore);

    function ContestRegistererStoreClass() {
        classCallCheck(this, ContestRegistererStoreClass);
        return possibleConstructorReturn(this, (ContestRegistererStoreClass.__proto__ || Object.getPrototypeOf(ContestRegistererStoreClass)).apply(this, arguments));
    }

    createClass(ContestRegistererStoreClass, [{
        key: "getForContest",
        value: function getForContest(contestId) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var registerer = _step.value;

                    if (registerer.contestId === contestId) {
                        return registerer;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return null;
        }
    }]);
    return ContestRegistererStoreClass;
}(GenericObjectStore);

var ContestRegistererStore = new ContestRegistererStoreClass("contestregisterer", ContestRegisterer);

var USERS_FILTER = {
    ALL_PARTICIPANTS: 0,
    ONLY_OFFICIAL: 1,
    ONLY_UNOFFICIAL: 2
};

var ContestEntriesManager = function (_EntriesManager) {
    inherits(ContestEntriesManager, _EntriesManager);

    function ContestEntriesManager(contest, virtualContest, comparator) {
        classCallCheck(this, ContestEntriesManager);

        var _this = possibleConstructorReturn(this, (ContestEntriesManager.__proto__ || Object.getPrototypeOf(ContestEntriesManager)).call(this, [], { comparator: comparator }));

        _this.addContestListeners(contest);
        _this.addContestListeners(virtualContest);

        _this.contest = contest;
        _this.virtualContest = virtualContest;

        _this.cacheEntries();
        return _this;
    }

    createClass(ContestEntriesManager, [{
        key: "addContestListeners",
        value: function addContestListeners(contest) {
            var _this2 = this;

            if (!contest) {
                return;
            }

            this.attachUpdateListener(contest, function () {
                _this2.updateEntries();
            });
            this.attachListener(contest, "rankingsChange", function () {
                _this2.updateEntries();
            });
        }
    }, {
        key: "getRawEntries",
        value: function getRawEntries() {
            if (!this.contest) {
                return [];
            }
            var contestUsers = this.contest.getUsers();
            if (this.virtualContest) {
                contestUsers = [].concat(toConsumableArray(contestUsers), toConsumableArray(this.virtualContest.getUsers()));
            }
            return contestUsers;
        }
    }]);
    return ContestEntriesManager;
}(EntriesManager$$1);

var ContestUsersTableWithoutRangeInterface = function (_SortableTable) {
    inherits(ContestUsersTableWithoutRangeInterface, _SortableTable);

    function ContestUsersTableWithoutRangeInterface() {
        classCallCheck(this, ContestUsersTableWithoutRangeInterface);
        return possibleConstructorReturn(this, (ContestUsersTableWithoutRangeInterface.__proto__ || Object.getPrototypeOf(ContestUsersTableWithoutRangeInterface)).apply(this, arguments));
    }

    createClass(ContestUsersTableWithoutRangeInterface, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ContestUsersTableWithoutRangeInterface.prototype.__proto__ || Object.getPrototypeOf(ContestUsersTableWithoutRangeInterface.prototype), "getDefaultOptions", this), {
                columnWidths: {
                    rank: 0,
                    user: 80
                }
            });
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(ContestUsersTableWithoutRangeInterface.prototype.__proto__ || Object.getPrototypeOf(ContestUsersTableWithoutRangeInterface.prototype), "setOptions", this).call(this, options);

            this.resetColumnSortingOrder();
        }
    }, {
        key: "resetColumnSortingOrder",
        value: function resetColumnSortingOrder() {
            // First by rating, second by name
            this.columnSortingOrder = [this.columns[2], this.columns[1]];
        }
    }, {
        key: "getEntriesManager",
        value: function getEntriesManager() {
            if (!this.entriesManager) {
                this.entriesManager = new ContestEntriesManager(this.options.contest, this.options.virtualContest, this.getComparator());
            }
            return this.entriesManager;
        }
    }, {
        key: "applyFilter",
        value: function applyFilter(filter) {
            this.getEntriesManager().setFilter(filter);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(ContestUsersTableWithoutRangeInterface.prototype.__proto__ || Object.getPrototypeOf(ContestUsersTableWithoutRangeInterface.prototype), "onMount", this).call(this);

            // TODO: remove this when only using RangeTableInterface (move it to RangeTable)
            this.addListener("reorder", function () {
                _this4.getEntriesManager().setComparator(_this4.getComparator());
            });

            this.attachListener(this.getEntriesManager(), "update", function () {
                if (!document.body.contains(_this4.node)) {
                    _this4.parent.dispatch("shouldRedrawChild", { child: _this4 });
                } else {
                    _this4.redraw();
                }
            });
        }
    }, {
        key: "getRowClass",
        value: function getRowClass() {
            return ScoreboardEntryRow;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.getEntriesManager().getEntries();
        }
    }, {
        key: "getColumns",
        value: function getColumns() {
            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            var centerStyle = {
                textAlign: "center",
                margin: "auto",
                verticalAlign: "middle"
            };

            var columns = [{
                value: function value(contestUser, index) {
                    return index + 1;
                },
                headerName: "#",
                sortDescending: false,
                headerStyle: { verticalAlign: "middle" },
                cellStyle: numberStyle
            }, {
                value: function value(contestUser) {
                    var handle = UI.createElement(UserHandle, { userId: contestUser.userId, showCountry: true });
                    if (!contestUser.getContest().isVirtual()) {
                        return handle;
                    } else {
                        //TODO: refactor this to update every minute
                        return UI.createElement(
                            "span",
                            null,
                            handle,
                            " virtual ",
                            contestUser.getContestStartTime() < ServerTime.now().unix() && ServerTime.now().unix() < contestUser.getContestEndTime() ? new Duration((ServerTime.now().unix() - contestUser.getContestStartTime()) * 1000).format("HH:mm") : ""
                        );
                    }
                },
                rawValue: function rawValue(contestUser) {
                    var publicUser = PublicUserStore.get(contestUser.userId);
                    if (!publicUser) {
                        return "publicUser-" + contestUser.userId;
                    }
                    return publicUser.getDisplayHandle();
                },
                headerName: "User",
                sortDescending: false,
                headerStyle: { verticalAlign: "middle", width: this.options.columnWidths.user + "%" },
                cellStyle: { verticalAlign: "middle" }
            }, {
                value: function value(contestUser) {
                    //TODO: send publicUser when someone registers
                    var user = PublicUserStore.get(contestUser.userId);
                    if (!user) {
                        return "-";
                    }
                    return user.rating || "-";
                },
                rawValue: function rawValue(contestUser) {
                    var user = PublicUserStore.get(contestUser.userId);
                    if (!user) {
                        return 0;
                    }
                    return user.rating || 0;
                },
                headerName: "Rating",
                sortDescending: true,
                headerStyle: centerStyle,
                cellStyle: centerStyle
            }];

            return columns;
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            get(ContestUsersTableWithoutRangeInterface.prototype.__proto__ || Object.getPrototypeOf(ContestUsersTableWithoutRangeInterface.prototype), "setColumns", this).call(this, this.getColumns());
        }
    }]);
    return ContestUsersTableWithoutRangeInterface;
}(SortableTable);

var ContestUsersTable = function (_RangeTableInterface) {
    inherits(ContestUsersTable, _RangeTableInterface);

    function ContestUsersTable() {
        classCallCheck(this, ContestUsersTable);
        return possibleConstructorReturn(this, (ContestUsersTable.__proto__ || Object.getPrototypeOf(ContestUsersTable)).apply(this, arguments));
    }

    createClass(ContestUsersTable, [{
        key: "getEntriesManager",
        value: function getEntriesManager() {
            if (!this.entriesManager) {
                this.entriesManager = new ContestEntriesManager(this.options.contest, this.options.virtualContest, this.getComparator());
            }
            return this.entriesManager;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.getEntriesManager().getEntries();
        }
    }]);
    return ContestUsersTable;
}(RangeTableInterface$$1(ContestUsersTableWithoutRangeInterface));

var ScoreboardEntryRow = function (_TableRow) {
    inherits(ScoreboardEntryRow, _TableRow);

    function ScoreboardEntryRow() {
        classCallCheck(this, ScoreboardEntryRow);
        return possibleConstructorReturn(this, (ScoreboardEntryRow.__proto__ || Object.getPrototypeOf(ScoreboardEntryRow)).apply(this, arguments));
    }

    createClass(ScoreboardEntryRow, [{
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(ScoreboardEntryRow.prototype.__proto__ || Object.getPrototypeOf(ScoreboardEntryRow.prototype), "getNodeAttributes", this).call(this);
            if (this.options.entry.userId === USER.id) {
                attr.setAttribute("id", "currentUserRow");
                attr.setStyle("backgroundColor", enhance(Theme.Global.properties.COLOR_BACKGROUND, 0.15));
            }
            return attr;
        }
    }]);
    return ScoreboardEntryRow;
}(TableRow);

var ScoreboardEntriesManager = function (_ContestEntriesManage) {
    inherits(ScoreboardEntriesManager, _ContestEntriesManage);

    function ScoreboardEntriesManager() {
        classCallCheck(this, ScoreboardEntriesManager);
        return possibleConstructorReturn(this, (ScoreboardEntriesManager.__proto__ || Object.getPrototypeOf(ScoreboardEntriesManager)).apply(this, arguments));
    }

    createClass(ScoreboardEntriesManager, [{
        key: "cacheEntries",
        value: function cacheEntries() {
            var entries = this.getRawEntries();
            Contest.calculateRanks(entries);
            this.cachedEntries = this.sortEntries(this.filterEntries(entries));
            this.dispatch("update");
        }
    }]);
    return ScoreboardEntriesManager;
}(ContestEntriesManager);

var ScoreboardTableWithoutRangeInterface = function (_SortableTable2) {
    inherits(ScoreboardTableWithoutRangeInterface, _SortableTable2);

    function ScoreboardTableWithoutRangeInterface() {
        classCallCheck(this, ScoreboardTableWithoutRangeInterface);
        return possibleConstructorReturn(this, (ScoreboardTableWithoutRangeInterface.__proto__ || Object.getPrototypeOf(ScoreboardTableWithoutRangeInterface)).apply(this, arguments));
    }

    createClass(ScoreboardTableWithoutRangeInterface, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ScoreboardTableWithoutRangeInterface.prototype.__proto__ || Object.getPrototypeOf(ScoreboardTableWithoutRangeInterface.prototype), "getDefaultOptions", this), {
                columnWidths: {
                    rank: 1,
                    user: 29,
                    score: 10,
                    tasks: 60
                }
            });
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(ScoreboardTableWithoutRangeInterface.prototype.__proto__ || Object.getPrototypeOf(ScoreboardTableWithoutRangeInterface.prototype), "setOptions", this).call(this, options);

            this.resetColumnSortingOrder();
        }
    }, {
        key: "resetColumnSortingOrder",
        value: function resetColumnSortingOrder() {
            // First by score, second by name
            this.columnSortingOrder = [this.columns[2], this.columns[1]];
        }
    }, {
        key: "getRowClass",
        value: function getRowClass() {
            return ScoreboardEntryRow;
        }
    }, {
        key: "getEntriesManager",
        value: function getEntriesManager() {
            if (!this.entriesManager) {
                this.entriesManager = new ScoreboardEntriesManager(this.options.contest, this.options.virtualContest, this.getComparator());
            }
            return this.entriesManager;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.getEntriesManager().getEntries();
        }
    }, {
        key: "applyFilter",
        value: function applyFilter(filter) {
            this.getEntriesManager().setFilter(filter);
        }
    }, {
        key: "showSubmissions",
        value: function showSubmissions(contestUser, contestTask) {
            if (!USER.isSuperUser && !this.options.originalContest.canShowPublicSources()) {
                return;
            }

            var sourcesNotPublic = void 0;
            if (!this.options.originalContest.canShowPublicSources()) {
                sourcesNotPublic = UI.createElement(
                    "h3",
                    null,
                    "Sources are NOT public! You can only see this as an admin!"
                );
            }

            var filters = {
                contestId: contestUser.contestId,
                userId: contestUser.userId,
                contestTaskId: contestUser.getContest().getMatchingContestTask(contestTask).id
            };

            Modal.show({
                fillScreen: true,
                children: [sourcesNotPublic, UI.createElement(SubmissionSummaryPanel, { filters: filters, style: { paddingRight: "5%" } })]
            });
        }
    }, {
        key: "renderContestUserAndContestTaskCell",
        value: function renderContestUserAndContestTaskCell(contestUser, contestTask) {
            var _this9 = this;

            if (!contestUser.scores) {
                return "-";
            }

            var userTaskSummary = contestUser.scores[contestTask.id];
            if (this.options.virtualContest) {
                var virtualContestTask = contestTask.getVirtualTask();
                userTaskSummary = userTaskSummary || contestUser.scores[virtualContestTask.id];
            }
            if (!userTaskSummary) {
                return "-";
            }

            var userScore = userTaskSummary.score || 0;
            var score = void 0,
                penalty = void 0;
            if (contestTask.hasPartialScore()) {
                score = UI.createElement(
                    "span",
                    null,
                    Formatter.truncate(userScore * contestTask.pointsWorth, 2)
                );
            } else if (userScore == 1) {
                score = UI.createElement("span", { className: "fa fa-check fa-lg", style: { color: "green" } });
            } else {
                score = UI.createElement("span", { className: "fa fa-times fa-lg", style: { color: "red" } });
            }
            if (contestTask.hasPenalty()) {
                var numSubmissions = null;
                if (userScore == 1) {
                    if (userTaskSummary.scoreSubmissionNumber > 1) {
                        numSubmissions = UI.createElement(
                            "span",
                            { style: { fontSize: "0.8em" } },
                            "(",
                            userTaskSummary.scoreSubmissionNumber - 1,
                            ")"
                        );
                    }
                } else if (userTaskSummary.numSubmissions > 0) {
                    numSubmissions = UI.createElement(
                        "span",
                        { style: { fontSize: "0.8em" } },
                        "(",
                        userTaskSummary.numSubmissions,
                        ")"
                    );
                }
                score = [score, numSubmissions];
                var contestStartTime = StemDate(contestUser.getContestStartTime());
                var solutionTime = StemDate(userTaskSummary.scoreTime);
                var solutionTimeRelative = solutionTime.diffDuration(contestStartTime);
                if (contestTask.hasPartialScore() || userScore == 1) {
                    penalty = UI.createElement(
                        "div",
                        { style: { fontSize: "0.8em", color: "grey" } },
                        solutionTimeRelative.format("HH:mm")
                    );
                }
            }

            return UI.createElement(
                "div",
                { onClick: function onClick() {
                        return _this9.showSubmissions(contestUser, contestTask);
                    } },
                [score, penalty]
            );
        }
    }, {
        key: "getContestUserAndContestTaskCellRawValue",
        value: function getContestUserAndContestTaskCellRawValue(contestUser, contestTask) {
            if (!contestUser.scores) {
                return -1;
            }

            var userTaskSummary = contestUser.scores[contestTask.id];
            if (this.options.virtualContest) {
                var virtualContestTask = contestTask.getVirtualTask();
                userTaskSummary = userTaskSummary || contestUser.scores[virtualContestTask.id];
            }
            if (!userTaskSummary) {
                return -1;
            }

            if (contestTask.hasPartialScore()) {
                return userTaskSummary.score;
            }

            if (userTaskSummary.score) {
                return 1;
            }
            return 0;
        }
    }, {
        key: "renderContestTaskHeader",
        value: function renderContestTaskHeader(contestTask, index) {
            var taskName = void 0;
            if (this.options.contest.scoreboardType === Contest.scoreboardType.TASK_NAME) {
                taskName = UI.createElement(
                    "div",
                    null,
                    UI.T(contestTask.longName)
                );
            } else {
                taskName = UI.createElement(
                    PopupSpan,
                    { popupContent: UI.T(contestTask.longName) },
                    String.fromCharCode("A".charCodeAt(0) + index)
                );
            }
            var taskScore = null;
            if (contestTask.hasScore()) {
                taskScore = UI.createElement(
                    "div",
                    { style: { fontSize: "0.9em" } },
                    Formatter.truncate(contestTask.pointsWorth, 2)
                );
            }
            return [taskName, taskScore];
        }
    }, {
        key: "shouldShowTaskColumns",
        value: function shouldShowTaskColumns() {
            return this.options.contest.scoreboardType !== Contest.scoreboardType.TOTAL_SCORE_ONLY;
        }
    }, {
        key: "getColumns",
        value: function getColumns() {
            var _this10 = this;

            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            var centerStyle = {
                textAlign: "center",
                margin: "auto",
                verticalAlign: "middle"
            };

            var columns = [{
                value: function value(contestUser) {
                    return contestUser.rank;
                },
                headerName: UI.T("Rank"),
                sortDescending: false,
                headerStyle: { verticalAlign: "middle", width: this.options.columnWidths.rank + "%", maxWidth: "50px" },
                cellStyle: Object.assign({}, numberStyle, { width: this.options.columnWidths.rank + "%", maxWidth: "50px" })
            }, {
                value: function value(contestUser) {
                    var handle = UI.createElement(UserHandle, { userId: contestUser.userId, showCountry: true });
                    if (!contestUser.getContest().isVirtual() || ContestRegistererStore.getForContest(contestUser.getContest().getBaseContest().id)) {
                        return handle;
                    } else {
                        //TODO: refactor this to update every minute
                        return UI.createElement(
                            "span",
                            null,
                            handle,
                            " ",
                            UI.T("virtual"),
                            " ",
                            contestUser.getContestStartTime() < ServerTime.now().unix() && ServerTime.now().unix() < contestUser.getContestEndTime() ? new Duration((ServerTime.now().unix() - contestUser.getContestStartTime()) * 1000).format("HH:mm") : ""
                        );
                    }
                },
                rawValue: function rawValue(contestUser) {
                    var publicUser = PublicUserStore.get(contestUser.userId);
                    if (!publicUser) {
                        return "publicUser-" + contestUser.userId;
                    }
                    return publicUser.getDisplayHandle();
                },
                headerName: UI.T("User"),
                sortDescending: false,
                headerStyle: { verticalAlign: "middle", width: this.options.columnWidths.user + "%" },
                cellStyle: { verticalAlign: "middle", width: this.options.columnWidths.user + "%" }
            }, {
                value: function value(contestUser) {
                    var penalty = void 0;
                    if (contestUser.penalty && _this10.options.contest.hasPenalty()) {
                        penalty = UI.createElement(
                            "span",
                            { style: { fontSize: "0.8em" } },
                            " (",
                            Math.round(contestUser.penalty),
                            ")"
                        );
                    }
                    var score = contestUser.numSubmissions ? Formatter.truncate(contestUser.totalScore, 2) : "-";
                    return [UI.createElement(
                        "strong",
                        { style: { fontSize: "1.2em" } },
                        score
                    ), penalty];
                },
                headerName: [UI.createElement(
                    "span",
                    { style: { fontSize: "1.2em" } },
                    UI.T("Score")
                ), this.options.contest.hasPenalty() ? UI.createElement(
                    "span",
                    { style: { fontSize: "0.8em" } },
                    " (",
                    UI.T("Penalty"),
                    ")"
                ) : null],
                rawValue: function rawValue(entry) {
                    return entry;
                },
                cmp: ContestUser.compareScoreboard,
                headerStyle: Object.assign({}, centerStyle, { width: this.options.columnWidths.score + "%" }),
                cellStyle: Object.assign({}, centerStyle, { width: this.options.columnWidths.score + "%" })
            }];

            if (this.shouldShowTaskColumns()) {
                var contestTasks = this.options.contest.getContestTasks();

                var _loop = function _loop(i) {
                    var contestTask = contestTasks[i];
                    columns.push({
                        value: function value(contestUser) {
                            return _this10.renderContestUserAndContestTaskCell(contestUser, contestTask);
                        },
                        rawValue: function rawValue(contestUser) {
                            return _this10.getContestUserAndContestTaskCellRawValue(contestUser, contestTask);
                        },
                        headerName: function headerName() {
                            return _this10.renderContestTaskHeader(contestTask, i);
                        },
                        sortDescending: true,
                        headerStyle: Object.assign({}, centerStyle, { width: _this10.options.columnWidths.tasks / _this10.options.contest.getContestTasks().length + "%" }),
                        cellStyle: centerStyle
                    });
                };

                for (var i = 0; i < contestTasks.length; i += 1) {
                    _loop(i);
                }
            }

            return columns;
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            get(ScoreboardTableWithoutRangeInterface.prototype.__proto__ || Object.getPrototypeOf(ScoreboardTableWithoutRangeInterface.prototype), "setColumns", this).call(this, this.getColumns());
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            get(ScoreboardTableWithoutRangeInterface.prototype.__proto__ || Object.getPrototypeOf(ScoreboardTableWithoutRangeInterface.prototype), "onMount", this).call(this);

            this.addListener("reorder", function () {
                _this11.getEntriesManager().setComparator(_this11.getComparator());
            });
            this.attachListener(this.getEntriesManager(), "update", function () {
                _this11.redraw();
            });
        }
    }]);
    return ScoreboardTableWithoutRangeInterface;
}(SortableTable);

var ScoreboardTable = function (_RangeTableInterface2) {
    inherits(ScoreboardTable, _RangeTableInterface2);

    function ScoreboardTable() {
        classCallCheck(this, ScoreboardTable);
        return possibleConstructorReturn(this, (ScoreboardTable.__proto__ || Object.getPrototypeOf(ScoreboardTable)).apply(this, arguments));
    }

    createClass(ScoreboardTable, [{
        key: "getEntriesManager",
        value: function getEntriesManager() {
            if (!this.entriesManager) {
                this.entriesManager = new ScoreboardEntriesManager(this.options.contest, this.options.virtualContest, this.getComparator());
            }
            return this.entriesManager;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.getEntriesManager().getEntries();
        }
    }]);
    return ScoreboardTable;
}(RangeTableInterface$$1(ScoreboardTableWithoutRangeInterface));

var PrivateArchiveUsersTable = function (_SortableTable3) {
    inherits(PrivateArchiveUsersTable, _SortableTable3);

    function PrivateArchiveUsersTable() {
        classCallCheck(this, PrivateArchiveUsersTable);
        return possibleConstructorReturn(this, (PrivateArchiveUsersTable.__proto__ || Object.getPrototypeOf(PrivateArchiveUsersTable)).apply(this, arguments));
    }

    createClass(PrivateArchiveUsersTable, [{
        key: "onMount",
        value: function onMount() {
            var _this14 = this;

            get(PrivateArchiveUsersTable.prototype.__proto__ || Object.getPrototypeOf(PrivateArchiveUsersTable.prototype), "onMount", this).call(this);

            // TODO: should be addListener("updateOrCreate")
            ContestUserStore.addCreateListener(function (data) {
                _this14.parent.dispatch("shouldRedrawChild", { child: _this14 });
            });
            ContestUserStore.addUpdateListener(function (data) {
                _this14.parent.dispatch("shouldRedrawChild", { child: _this14 });
            });
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            if (!this.options.privateArchive) {
                return [];
            }
            return this.options.privateArchive.getUsers();
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            var centerStyle = {
                textAlign: "center",
                margin: "auto",
                verticalAlign: "middle"
            };

            var columns = [{
                value: function value(privateArchiveUser, index) {
                    return index + 1;
                },
                headerName: "#",
                sortDescending: false,
                headerStyle: { verticalAlign: "middle" },
                cellStyle: numberStyle
            }, {
                value: function value(privateArchiveUser) {
                    return UI.createElement(UserHandle, { userId: privateArchiveUser.userId, showCountry: true });
                },
                rawValue: function rawValue(privateArchiveUser) {
                    return privateArchiveUser.userId;
                },
                headerName: "User",
                sortDescending: false,
                headerStyle: { verticalAlign: "middle" },
                cellStyle: { verticalAlign: "middle" }
            }];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                var _loop2 = function _loop2() {
                    var contestTask = _step.value;

                    columns.push({
                        value: function value(privateArchiveUser) {
                            var contestUser = privateArchiveUser.getContestUser(contestTask);
                            if (!contestUser) {
                                return "-";
                            }
                            if (!contestUser.scores) {
                                return "-";
                            }
                            var userTaskSummary = contestUser.scores[contestTask.id];
                            if (!userTaskSummary) {
                                return "-";
                            }

                            var showSubmissions = function showSubmissions() {
                                var filters = {
                                    contestId: contestTask.getEvalTask().getDefaultContest().id,
                                    userId: contestUser.userId,
                                    contestTaskId: contestTask.id
                                };

                                Modal.show({
                                    fillScreen: true,
                                    children: [UI.createElement(SubmissionSummaryPanel, { filters: filters, style: { paddingRight: "5%" } })]
                                });
                            };

                            var score = void 0;
                            if (contestUser.solvedTask(contestTask)) {
                                score = UI.createElement("span", { className: "fa fa-check fa-lg", style: { color: "green" }, onClick: showSubmissions });
                            } else {
                                score = Formatter.truncate(userTaskSummary.score, 2);
                            }
                            return UI.createElement(
                                "span",
                                { onClick: showSubmissions },
                                score
                            );
                        },
                        rawValue: function rawValue(privateArchiveUser) {
                            var contestUser = privateArchiveUser.getContestUser(contestTask);
                            if (!contestUser) {
                                return -1;
                            }
                            if (!contestUser.scores) {
                                return -1;
                            }
                            var userTaskSummary = contestUser.scores[contestTask.id];
                            if (!userTaskSummary) {
                                return -1;
                            }
                            return userTaskSummary.score || 0;
                        },
                        headerName: function headerName() {
                            return UI.createElement(
                                "div",
                                null,
                                contestTask.longName
                            );
                        },
                        sortDescending: true,
                        headerStyle: centerStyle,
                        cellStyle: centerStyle
                    });
                };

                for (var _iterator = this.options.privateArchive.getContestTasks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    _loop2();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            get(PrivateArchiveUsersTable.prototype.__proto__ || Object.getPrototypeOf(PrivateArchiveUsersTable.prototype), "setColumns", this).call(this, columns);
        }
    }]);
    return PrivateArchiveUsersTable;
}(SortableTable);

var MetaContestEntriesManager = function (_EntriesManager2) {
    inherits(MetaContestEntriesManager, _EntriesManager2);

    function MetaContestEntriesManager(metaContest, comparator) {
        classCallCheck(this, MetaContestEntriesManager);

        var _this15 = possibleConstructorReturn(this, (MetaContestEntriesManager.__proto__ || Object.getPrototypeOf(MetaContestEntriesManager)).call(this, [], { comparator: comparator }));

        _this15.metaContest = metaContest;

        _this15.addMetaContestListeners();
        _this15.cacheEntries();
        return _this15;
    }

    createClass(MetaContestEntriesManager, [{
        key: "addMetaContestListeners",
        value: function addMetaContestListeners() {
            var _this16 = this;

            var updateEntriesThrottler = new CallThrottler({ throttle: 500 });
            var updateEntriesThrottled = updateEntriesThrottler.wrap(function (from) {
                return _this16.updateEntries();
            });

            var archiveUserEvents = ["updateOrCreate", "create"];
            this.attachListener(ArchiveUserStore, archiveUserEvents, updateEntriesThrottled);
            this.attachUpdateListener(this.metaContest, updateEntriesThrottled);
        }
    }, {
        key: "getRawEntries",
        value: function getRawEntries() {
            if (!this.metaContest) {
                return [];
            }
            return this.metaContest.getUsers();
        }
    }]);
    return MetaContestEntriesManager;
}(EntriesManager$$1);

var MetaContestUsersTable = function (_RangeTableInterface3) {
    inherits(MetaContestUsersTable, _RangeTableInterface3);

    function MetaContestUsersTable() {
        classCallCheck(this, MetaContestUsersTable);
        return possibleConstructorReturn(this, (MetaContestUsersTable.__proto__ || Object.getPrototypeOf(MetaContestUsersTable)).apply(this, arguments));
    }

    createClass(MetaContestUsersTable, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(MetaContestUsersTable.prototype.__proto__ || Object.getPrototypeOf(MetaContestUsersTable.prototype), "getDefaultOptions", this), {
                columnWidths: {
                    rank: 0,
                    user: 80,
                    score: 20
                }
            });
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(MetaContestUsersTable.prototype.__proto__ || Object.getPrototypeOf(MetaContestUsersTable.prototype), "setOptions", this).call(this, options);

            this.resetColumnSortingOrder();
        }
    }, {
        key: "resetColumnSortingOrder",
        value: function resetColumnSortingOrder() {
            // First by score, second by name
            this.columnSortingOrder = [this.columns[2], this.columns[1]];
        }
    }, {
        key: "getRowClass",
        value: function getRowClass() {
            return ScoreboardEntryRow;
        }
    }, {
        key: "getEntriesManager",
        value: function getEntriesManager() {
            if (!this.entriesManager) {
                this.entriesManager = new MetaContestEntriesManager(this.options.metaContest, this.getComparator());
            }
            return this.entriesManager;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.getEntriesManager().getEntries();
        }
    }, {
        key: "applyFilter",
        value: function applyFilter(filter) {
            this.getEntriesManager().setFilter(filter);
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            var centerStyle = {
                textAlign: "center",
                margin: "auto",
                verticalAlign: "middle"
            };

            var rankStyle = {
                width: this.options.columnWidths.rank + "%"
            };
            var userStyle = {
                width: this.options.columnWidths.user + "%"
            };
            var scoreStyle = {
                width: this.options.columnWidths.score + "%"
            };

            var columns = [{
                value: function value(metaContestUser, index) {
                    return index + 1;
                },
                headerName: UI.T("Rank"),
                sortDescending: false,
                headerStyle: Object.assign({ verticalAlign: "middle" }, rankStyle),
                cellStyle: Object.assign({}, numberStyle, rankStyle)
            }, {
                value: function value(metaContestUser) {
                    return UI.createElement(UserHandle, { userId: metaContestUser.userId, user: metaContestUser, showCountry: true });
                },
                rawValue: function rawValue(metaContestUser) {
                    var publicUser = PublicUserStore.get(metaContestUser.userId);
                    if (!publicUser) {
                        return "publicUser-" + metaContestUser.userId;
                    }
                    return publicUser.getDisplayHandle();
                },
                headerName: UI.T("User"),
                sortDescending: false,
                headerStyle: Object.assign({ verticalAlign: "middle" }, userStyle),
                cellStyle: Object.assign({ verticalAlign: "middle" }, userStyle)
            }, {
                value: function value(metaContestUser) {
                    //TODO: send publicUser when someone registers
                    return Formatter.truncate(metaContestUser.totalScore, 2);
                },
                rawValue: function rawValue(metaContestUser) {
                    return metaContestUser.totalScore;
                },
                headerName: UI.T("Score"),
                sortDescending: true,
                headerStyle: Object.assign({}, centerStyle, scoreStyle),
                cellStyle: Object.assign({}, centerStyle, scoreStyle)
            }];

            get(MetaContestUsersTable.prototype.__proto__ || Object.getPrototypeOf(MetaContestUsersTable.prototype), "setColumns", this).call(this, columns);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this18 = this;

            get(MetaContestUsersTable.prototype.__proto__ || Object.getPrototypeOf(MetaContestUsersTable.prototype), "onMount", this).call(this);
            this.addListener("reorder", function () {
                _this18.getEntriesManager().setComparator(_this18.getComparator());
            });
        }
    }]);
    return MetaContestUsersTable;
}(RangeTableInterface$$1(SortableTable));

var ContestUsersFilter = function (_UI$Primitive) {
    inherits(ContestUsersFilter, _UI$Primitive);

    function ContestUsersFilter() {
        classCallCheck(this, ContestUsersFilter);
        return possibleConstructorReturn(this, (ContestUsersFilter.__proto__ || Object.getPrototypeOf(ContestUsersFilter)).apply(this, arguments));
    }

    createClass(ContestUsersFilter, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(ContestUsersFilter.prototype.__proto__ || Object.getPrototypeOf(ContestUsersFilter.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle("whiteSpace", "nowrap");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(Select, { ref: "filterUsers", options: ["All participants", "Only official", "Only unofficial"],
                style: { height: "2.2em" } }), UI.createElement(Select, { ref: "filterCountry", style: { height: "2.2em", marginLeft: "10px" },
                options: this.options.contest.getCountries() }), UI.createElement(TextInput, { ref: "findUserInput", style: { height: "2.03em", marginLeft: "10px", verticalAlign: "middle" },
                placeholder: "Find user..." })];
        }
    }, {
        key: "getFilter",
        value: function getFilter() {
            var _this20 = this;

            return function (contestUser) {
                var usersFilter = _this20.filterUsers.getIndex();
                var countryIdFilter = _this20.filterCountry.get().id;
                var findUser = _this20.findUserInput.getValue() || "";
                var isOfficial = contestUser.isOfficial();
                if (isOfficial && usersFilter === USERS_FILTER.ONLY_UNOFFICIAL || !isOfficial && usersFilter === USERS_FILTER.ONLY_OFFICIAL) {
                    return false;
                }
                var keywords = findUser.trim().toLowerCase();
                var publicUser = PublicUserStore.get(contestUser.userId);
                // TODO: Public user should have been in state.
                if (!publicUser) {
                    return false;
                }
                if (keywords !== "") {
                    if ((publicUser.name || "").toLowerCase().indexOf(keywords) == -1 && (publicUser.username || "").toLowerCase().indexOf(keywords) == -1) {
                        return false;
                    }
                }
                if (countryIdFilter) {
                    return publicUser.countryId === countryIdFilter;
                }
                return true;
            };
        }
    }, {
        key: "updateFilter",
        value: function updateFilter() {
            this.dispatch("filterChange");
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this21 = this;

            this.filterUsers.addChangeListener(function () {
                _this21.updateFilter();
            });
            this.filterCountry.addChangeListener(function () {
                _this21.updateFilter();
            });
            this.findUserInput.addNodeListener("keyup", function () {
                _this21.updateFilter();
            });

            this.updateFilter();

            var updateThrottler = new CallThrottler({ throttle: 300 });
            var updateCountryFilterThrottled = updateThrottler.wrap(function () {
                return _this21.filterCountry.updateOptions({ options: _this21.options.contest.getCountries() });
            });
            this.attachListener(this.options.contest, "contestUserUpdate", updateCountryFilterThrottled);
        }
    }]);
    return ContestUsersFilter;
}(UI.Primitive("span"));

var Scoreboard = function (_Panel) {
    inherits(Scoreboard, _Panel);

    function Scoreboard() {
        classCallCheck(this, Scoreboard);
        return possibleConstructorReturn(this, (Scoreboard.__proto__ || Object.getPrototypeOf(Scoreboard)).apply(this, arguments));
    }

    createClass(Scoreboard, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(Scoreboard.prototype.__proto__ || Object.getPrototypeOf(Scoreboard.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Utils.fullHeight);
            attr.setStyle({
                display: "flex",
                flexDirection: "column"
            });
        }
    }, {
        key: "getContestUsersFilter",
        value: function getContestUsersFilter() {
            return UI.createElement(ContestUsersFilter, { ref: "contestUsersFilter", contest: this.options.contest });
        }
    }, {
        key: "getContestUsersTableClass",
        value: function getContestUsersTableClass() {
            return ContestUsersTable;
        }
    }, {
        key: "getScoreboardTableClass",
        value: function getScoreboardTableClass() {
            return ScoreboardTable;
        }
    }, {
        key: "getScoreboardActionableArea",
        value: function getScoreboardActionableArea() {
            var _this23 = this;

            var showMeButton = void 0;
            if (this.options.contest.getUser(USER.id)) {
                showMeButton = UI.createElement(Button, { ref: "showMeButton", style: { marginRight: "10px", height: "2.2em" }, level: Level.INFO, label: UI.T("Show Me"),
                    size: Size.SMALL, onClick: function onClick() {
                        return _this23.showMe();
                    } });
            }
            return [showMeButton, this.getContestUsersFilter()];
        }
    }, {
        key: "render",
        value: function render() {
            var scoreboard = void 0;
            if (!this.options.originalContest.hasStarted()) {
                var ContestUsersTableClass = this.getContestUsersTableClass();
                scoreboard = UI.createElement(ContestUsersTableClass, { ref: "scoreboardTable", contest: this.options.contest, virtualContest: this.options.virtualContest });
            } else {
                var ScoreboardTableClass = this.getScoreboardTableClass();
                scoreboard = UI.createElement(ScoreboardTableClass, { ref: "scoreboardTable", contest: this.options.contest, virtualContest: this.options.virtualContest,
                    originalContest: this.options.originalContest, style: { flex: "1" } });
            }
            return [UI.createElement(
                "div",
                { style: { padding: "20px 0" } },
                this.getScoreboardActionableArea()
            ), scoreboard];
        }
    }, {
        key: "showMe",
        value: function showMe() {
            var currentUserRow = document.getElementById("currentUserRow");
            if (currentUserRow) {
                document.body.scrollTop = Math.max(currentUserRow.offsetTop - window.innerHeight / 2, 0);
            } else {
                this.scoreboardTable.dispatch("showCurrentUser");
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this24 = this;

            get(Scoreboard.prototype.__proto__ || Object.getPrototypeOf(Scoreboard.prototype), "onMount", this).call(this);
            this.scoreboardTable.applyFilter(this.contestUsersFilter.getFilter());

            this.contestUsersFilter.addListener("filterChange", function () {
                _this24.scoreboardTable.applyFilter(_this24.contestUsersFilter.getFilter());
            });

            this.addListener("setActive", function (active$$1) {
                setTimeout(function () {
                    _this24.scoreboardTable.redraw();
                });
                if (active$$1) {
                    if (typeof _this24.scoreboardTable.applyScrollState == "function") {
                        _this24.scoreboardTable.applyScrollState();
                    }
                } else {
                    if (typeof _this24.scoreboardTable.saveScrollState == "function") {
                        _this24.scoreboardTable.saveScrollState();
                    }
                }
            });
        }
    }]);
    return Scoreboard;
}(Panel);

var _class$68, _descriptor$30, _descriptor2$26, _descriptor3$22, _descriptor4$19, _descriptor5$17, _descriptor6$14, _descriptor7$12, _descriptor8$9, _dec$32, _class3$19;

function _initDefineProp$31(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$31(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var tasksTagsDispatcher = new Dispatcher();

var TagsHiddenLabel = function (_Label) {
    inherits(TagsHiddenLabel, _Label);

    function TagsHiddenLabel() {
        classCallCheck(this, TagsHiddenLabel);
        return possibleConstructorReturn(this, (TagsHiddenLabel.__proto__ || Object.getPrototypeOf(TagsHiddenLabel)).apply(this, arguments));
    }

    createClass(TagsHiddenLabel, [{
        key: "render",
        value: function render() {
            return [UI.createElement(UI.TextElement, { ref: this.refLink("content"), value: this.getLabel() || "show tags" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.addClickListener(function (event) {
                event.preventDefault();
                event.stopPropagation();
                _this2.options.bubble.updateOptions({ showTags: true });
            });
        }
    }]);
    return TagsHiddenLabel;
}(Label);

var ContestTaskBubbleStyle = (_class$68 = function (_StyleSheet) {
    inherits(ContestTaskBubbleStyle, _StyleSheet);

    function ContestTaskBubbleStyle() {
        classCallCheck(this, ContestTaskBubbleStyle);

        var _this3 = possibleConstructorReturn(this, (ContestTaskBubbleStyle.__proto__ || Object.getPrototypeOf(ContestTaskBubbleStyle)).call(this, { updateOnResize: true }));

        _this3.fontColor = "rgb(55, 55, 55)";
        _this3.height = 110;

        _initDefineProp$31(_this3, "className", _descriptor$30, _this3);

        _initDefineProp$31(_this3, "tags", _descriptor2$26, _this3);

        _initDefineProp$31(_this3, "userScore", _descriptor3$22, _this3);

        _initDefineProp$31(_this3, "taskDescription", _descriptor4$19, _this3);

        _initDefineProp$31(_this3, "taskName", _descriptor5$17, _this3);

        _initDefineProp$31(_this3, "originalContest", _descriptor6$14, _this3);

        _initDefineProp$31(_this3, "taskDifficulty", _descriptor7$12, _this3);

        _initDefineProp$31(_this3, "taskStatistics", _descriptor8$9, _this3);

        return _this3;
    } // default CSAcademy navbar color


    return ContestTaskBubbleStyle;
}(StyleSheet), _descriptor$30 = _applyDecoratedDescriptor$31(_class$68.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            cursor: "pointer",
            boxShadow: "0px 0px 1px " + this.fontColor,
            width: "99%",
            marginLeft: "0.5%",
            marginRight: "0.5%",
            height: this.height,
            fontColor: this.fontColor,
            display: "block",
            marginTop: "20px",
            whiteSpace: "nowrap",
            userSelect: "none",
            ":hover": {
                transition: "0.23s",
                boxShadow: "0px 0px 5px " + this.fontColor,
                textDecoration: "none"
            },
            ">*": {
                verticalAlign: "top",
                display: "inline-block",
                height: "100%",
                lineHeight: this.height,
                textAlign: "center",
                float: "initial !important"
            }
        };
    }
}), _descriptor2$26 = _applyDecoratedDescriptor$31(_class$68.prototype, "tags", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "22%",
            padding: this.height / 6,
            paddingLeft: this.height / 12,
            paddingRight: this.height / 12
        };
    }
}), _descriptor3$22 = _applyDecoratedDescriptor$31(_class$68.prototype, "userScore", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "11%",
            color: this.fontColor,
            fontSize: "20px"
        };
    }
}), _descriptor4$19 = _applyDecoratedDescriptor$31(_class$68.prototype, "taskDescription", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "35%",
            paddingLeft: "6%"
        };
    }
}), _descriptor5$17 = _applyDecoratedDescriptor$31(_class$68.prototype, "taskName", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "50%",
            lineHeight: this.height / 2,
            width: "100%",
            fontSize: "130%",
            color: "black",
            textAlign: "left"
        };
    }
}), _descriptor6$14 = _applyDecoratedDescriptor$31(_class$68.prototype, "originalContest", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "50%",
            width: "100%",
            fontSize: "100%",
            lineHeight: this.height / 2,
            textAlign: "left"
        };
    }
}), _descriptor7$12 = _applyDecoratedDescriptor$31(_class$68.prototype, "taskDifficulty", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "9%",
            fontSize: "16px"
        };
    }
}), _descriptor8$9 = _applyDecoratedDescriptor$31(_class$68.prototype, "taskStatistics", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "20%"
        };
    }
}), _class$68);

var ContestTaskBubble = (_dec$32 = registerStyle(ContestTaskBubbleStyle), _dec$32(_class3$19 = function (_Link) {
    inherits(ContestTaskBubble, _Link);

    function ContestTaskBubble() {
        classCallCheck(this, ContestTaskBubble);
        return possibleConstructorReturn(this, (ContestTaskBubble.__proto__ || Object.getPrototypeOf(ContestTaskBubble)).apply(this, arguments));
    }

    createClass(ContestTaskBubble, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                svgColor: "#337AB7",
                showTags: true,
                circleStrokeWidth: 5,
                revealedTagIds: [],
                circlePadding: 15
            };
        }
    }, {
        key: "getContestTask",
        value: function getContestTask() {
            return this.options.contestTask;
        }
    }, {
        key: "getEvalTaskSummary",
        value: function getEvalTaskSummary() {
            return EvalTaskStatisticsStore.getByEvalTaskId(this.getContestTask().evalTaskId);
        }
    }, {
        key: "getTagIds",
        value: function getTagIds() {
            return this.getContestTask().tagIds || [];
        }
    }, {
        key: "getTags",
        value: function getTags() {
            return this.getTagIds().map(function (tagId) {
                return TagStore.get(tagId);
            });
        }
    }, {
        key: "getRevealedTags",
        value: function getRevealedTags() {
            return this.options.revealedTagIds.map(function (tagId) {
                return TagStore.get(tagId);
            });
        }
    }, {
        key: "recalculateStatistics",
        value: function recalculateStatistics() {
            var usersTried = 0,
                usersSolved = 0;
            var updateUser = function updateUser(user, contestTask) {
                if (user.scores[contestTask.id]) {
                    usersTried += 1;
                    if (user.scores[contestTask.id].score == 1) {
                        usersSolved += 1;
                    }
                }
            };

            /// used only if not in archive but during contest
            var contestTask = this.getContestTask();
            var contestUsers = contestTask.getContest().getUsers();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = contestUsers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestUser = _step.value;

                    updateUser(contestUser, contestTask);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (contestTask.getContest().isVirtual()) {
                var baseContestTask = contestTask.getContest().getBaseContest().getMatchingContestTask(contestTask);
                var baseContestUsers = contestTask.getContest().getBaseContest().getUsers();
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = baseContestUsers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var user = _step2.value;

                        updateUser(user, baseContestTask);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
            this.usersTried = usersTried;
            this.usersSolved = usersSolved;
        }
    }, {
        key: "getUsersTried",
        value: function getUsersTried() {
            if (this.options.isArchive) {
                return this.getEvalTaskSummary().usersTried || 0;
            } else {
                return this.usersTried || 0;
            }
        }
    }, {
        key: "getUsersSolved",
        value: function getUsersSolved() {
            if (this.options.isArchive) {
                return this.getEvalTaskSummary().usersSolved || 0;
            } else {
                return this.usersSolved || 0;
            }
        }
    }, {
        key: "getSuccessRate",
        value: function getSuccessRate() {
            var usersTried = this.getUsersTried();
            var usersSolved = this.getUsersSolved();
            if (usersTried) {
                return parseInt(usersSolved / usersTried * 100);
            }
            return 0;
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            options.href = options.href || options.contestTask.getFullURL();
            get(ContestTaskBubble.prototype.__proto__ || Object.getPrototypeOf(ContestTaskBubble.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.className);
        }
    }, {
        key: "getTaskDescriptionSection",
        value: function getTaskDescriptionSection() {
            var originalContest = this.getContestTask().getOriginalContest();
            if (originalContest) {
                originalContest = UI.createElement(Link, { href: "/contest/" + originalContest.name, value: originalContest.longName });
            } else {
                originalContest = this.getContestTask().originalContestName;
            }

            return UI.createElement(
                "div",
                { className: this.styleSheet.taskDescription },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.taskName },
                    UI.T(this.getContestTask().longName)
                ),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.originalContest },
                    originalContest
                )
            );
        }
    }, {
        key: "getUserScoreSection",
        value: function getUserScoreSection() {
            var points = void 0;
            var getPoints = function getPoints(points) {
                return [Formatter.truncate(points, 2), UI.createElement(
                    "span",
                    { style: { "font-size": "13px" } },
                    "pts"
                )];
            };
            var getSolvedIcon = function getSolvedIcon() {
                return UI.createElement("span", { className: "fa fa-check fa-lg", style: { color: "green" } });
            };
            var getUnsolvedIcon = function getUnsolvedIcon() {
                return UI.createElement("span", { className: "fa fa-times fa-lg", style: { color: "red" } });
            };
            if (this.options.isArchive) {
                var summary = EvalTaskUserSummaryStore.getByEvalTaskAndUserId(this.getContestTask().evalTaskId, USER.id);
                if (summary && summary.tried) {
                    points = summary.solved ? getSolvedIcon() : getPoints(summary.bestScore);
                }
            } else {
                var contestTask = this.getContestTask();
                var contestUser = contestTask.getContest().getUser(USER.id);
                if (contestUser && contestUser.scores && contestUser.scores[contestTask.id]) {
                    var score = contestUser.scores[contestTask.id].score;
                    if (score == 1) {
                        points = getSolvedIcon();
                    } else if (contestTask.hasPartialScore()) {
                        points = getPoints(score * contestTask.pointsWorth);
                    } else {
                        points = getUnsolvedIcon();
                    }
                }
            }
            return UI.createElement(
                "div",
                { className: this.styleSheet.userScore },
                points
            );
        }
    }, {
        key: "getTagsSection",
        value: function getTagsSection() {
            var result = [];
            var tags = [];
            if (this.options.isArchive && !this.options.showTags) {
                tags = this.getRevealedTags();
                result.push(UI.createElement(TagsHiddenLabel, { bubble: this, label: tags.length ? "show all tags" : null,
                    style: { display: "inline-block", float: "left", margin: ".1em" } }));
            } else {
                tags = this.getTags();
            }
            result = [tags.map(function (tag) {
                return UI.createElement(
                    Label,
                    { level: Level.SUCCESS, style: { display: "inline-block", float: "left", margin: ".1em" },
                        onClick: function onClick() {
                            window.event.preventDefault();
                            window.event.stopPropagation();
                            tasksTagsDispatcher.dispatch(tag);
                        } },
                    tag.name
                );
            })].concat(toConsumableArray(result));
            return UI.createElement(
                "div",
                { className: this.styleSheet.tags },
                result
            );
        }
    }, {
        key: "getTaskDifficultySection",
        value: function getTaskDifficultySection() {
            var taskDifficulty = Difficulty.get(this.getContestTask().getDifficulty());

            if (!taskDifficulty) {
                return UI.createElement("div", { className: this.styleSheet.taskDifficulty });
            }

            return UI.createElement(
                "div",
                { className: this.styleSheet.taskDifficulty, style: { "color": taskDifficulty.color } },
                taskDifficulty.toString()
            );
        }
    }, {
        key: "getCircleArgs",
        value: function getCircleArgs() {
            return {
                strokeWidth: this.options.circleStrokeWidth,
                radius: (this.styleSheet.height - this.options.circleStrokeWidth) / 2 - this.options.circlePadding,
                fill: "transparent",
                center: { x: this.styleSheet.height / 2, y: this.styleSheet.height / 2 },
                stroke: this.options.svgColor
            };
        }
    }, {
        key: "getCircleArc",
        value: function getCircleArc(ratio) {
            if (ratio === 1) {
                return UI.createElement(SVG.Circle, this.getCircleArgs());
            } else {
                return UI.createElement(SVG.CircleArc, _extends({}, this.getCircleArgs(), {
                    startAngle: Math.PI * 1.5,
                    endAngle: Math.PI * (1.5 + 2 * ratio) }));
            }
        }
    }, {
        key: "getTaskStatisticsSection",
        value: function getTaskStatisticsSection() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.taskStatistics },
                UI.createElement(
                    SVG.SVGRoot,
                    { height: this.styleSheet.height, width: this.styleSheet.height },
                    this.getCircleArc(this.getSuccessRate() / 100),
                    UI.createElement(SVG.Text, { x: this.styleSheet.height / 2, y: this.styleSheet.height / 2 - 9,
                        text: this.getSuccessRate() + "%", fontSize: "20", fill: "#337AB7" }),
                    UI.createElement(SVG.Text, { x: this.styleSheet.height / 2, y: this.styleSheet.height / 2 + 9,
                        text: this.getUsersSolved() + "/" + this.getUsersTried(), fontSize: "10", fill: "#337AB7" })
                )
            );
        }
    }, {
        key: "render",
        value: function render() {
            if (!this.options.isArchive) {
                this.recalculateStatistics();
            }
            return [this.getTaskDescriptionSection(), this.getUserScoreSection(), this.getTagsSection(), this.getTaskDifficultySection(), this.getTaskStatisticsSection()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            get(ContestTaskBubble.prototype.__proto__ || Object.getPrototypeOf(ContestTaskBubble.prototype), "onMount", this).call(this);
            if (this.options.isArchive) {
                var statistics = EvalTaskStatisticsStore.getByEvalTaskId(this.getContestTask().evalTaskId);
                if (statistics) {
                    statistics.addUpdateListener(function () {
                        _this5.redraw();
                    });
                }
                EvalTaskUserSummaryStore.addListener("updateOrCreate", function (data) {
                    if (data.evalTaskId === _this5.getContestTask().evalTaskId) {
                        _this5.redraw();
                    }
                });
            } else {
                this.attachUpdateListener(this.getContestTask().getContest(), function () {
                    _this5.redraw();
                });
                var redrawThrottler = new CallThrottler({ throttle: 300 });
                var redrawThrottled = redrawThrottler.wrap(function () {
                    _this5.redraw();
                });
                this.attachListener(this.getContestTask().getContest(), "contestUserUpdate", redrawThrottled);
            }
        }
    }]);
    return ContestTaskBubble;
}(Link)) || _class3$19);

var _class$69, _descriptor$31, _descriptor2$27, _descriptor3$23, _descriptor4$20, _descriptor5$18, _descriptor6$15, _descriptor7$13, _descriptor8$10, _dec$33, _class3$20;

function _initDefineProp$32(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$32(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

function _cmp(a, b, isArchive, getKey, fallbackComparer) {
    var keyA = getKey(a, isArchive);
    var keyB = getKey(b, isArchive);
    if (keyA < keyB) {
        return -1;
    }
    if (keyA > keyB) {
        return 1;
    }
    // The 4th argument can be the next function to call in case of equality
    if (fallbackComparer) {
        return fallbackComparer(a, b, isArchive);
    }
    return 0;
}

var ColumnContentGetters = function () {
    function ColumnContentGetters() {
        classCallCheck(this, ColumnContentGetters);
    }

    createClass(ColumnContentGetters, null, [{
        key: "getName",
        value: function getName(contestTask, isArchive) {
            return contestTask.longName;
        }
    }, {
        key: "getContest",
        value: function getContest(contestTask, isArchive) {
            var contest = contestTask.getOriginalContest();
            return contest ? contest.name : "";
        }
    }, {
        key: "getScore",
        value: function getScore(contestTask, isArchive) {
            if (isArchive) {
                var evalTaskUserSummary = EvalTaskUserSummaryStore.getByEvalTaskAndUserId(contestTask.evalTaskId, USER.id);
                if (evalTaskUserSummary && evalTaskUserSummary.bestScore) {
                    return evalTaskUserSummary.bestScore;
                }
                return 0;
            }
            var user = contestTask.getContest().getUser(USER.id);
            if (user && user.scores && user.scores[contestTask.id]) {
                return user.scores[contestTask.id].score * contestTask.pointsWorth;
            }
            return 0;
        }
    }, {
        key: "getTags",
        value: function getTags(contestTask, isArchive) {
            var str = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (contestTask.tagIds || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var tagId = _step.value;

                    str.push(TagStore.get(tagId).name);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return str.sort().join(" ");
        }
    }, {
        key: "getDifficulty",
        value: function getDifficulty(contestTask, isArchive) {
            return contestTask.getDifficulty();
        }
    }, {
        key: "getSolved",
        value: function getSolved(contestTask, isArchive) {
            if (isArchive) {
                return (EvalTaskStatisticsStore.getByEvalTaskId(contestTask.evalTaskId) || {}).usersSolved || 0;
            }
            var users = contestTask.getContest().getUsers();
            var solved = 0;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = users[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var user = _step2.value;

                    if (user.scores && user.scores[contestTask.id] && user.scores[contestTask.id].score == 1) {
                        solved += 1;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return solved;
        }
    }, {
        key: "getTried",
        value: function getTried(contestTask, isArchive) {
            if (isArchive) {
                return (EvalTaskStatisticsStore.getByEvalTaskId(contestTask.evalTaskId) || {}).usersTried || 0;
            }
            var users = contestTask.getContest().getUsers();
            var tried = 0;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = users[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var user = _step3.value;

                    if (user.scores && user.scores[contestTask.id]) {
                        tried += 1;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return tried;
        }
    }, {
        key: "getRatio",
        value: function getRatio(contestTask, isArchive) {
            var solved = this.getSolved(contestTask, isArchive);
            var tried = this.getTried(contestTask, isArchive);
            return tried ? solved / tried : 0;
        }
    }]);
    return ColumnContentGetters;
}();

var SortableHeaderMixin = function SortableHeaderMixin(parent, compareFunction, fallbackCompareFunction) {
    return function (_UI$Element) {
        inherits(SortableHeader, _UI$Element);

        function SortableHeader() {
            classCallCheck(this, SortableHeader);
            return possibleConstructorReturn(this, (SortableHeader.__proto__ || Object.getPrototypeOf(SortableHeader)).apply(this, arguments));
        }

        createClass(SortableHeader, [{
            key: "getDefaultOptions",
            value: function getDefaultOptions() {
                return {
                    state: 0,
                    style: {
                        display: "inline-block",
                        cursor: "pointer"
                    }
                };
            }
        }, {
            key: "render",
            value: function render() {
                return [UI.createElement(FASortIcon, { ref: "icon", style: { display: "inline-block", opacity: 0 } }), UI.createElement(
                    "div",
                    { ref: "header", style: { marginRight: "7.44px", display: "inline-block" } },
                    this.options.name
                )];
            }
        }, {
            key: "updateIcon",
            value: function updateIcon() {
                var direction = void 0;
                if (this.options.state === 1) {
                    direction = Direction.DOWN;
                }
                if (this.options.state === -1) {
                    direction = Direction.UP;
                }
                if (direction) {
                    this.icon.setDirection(direction);
                    this.icon.setStyle("opacity", 1);
                } else {
                    this.icon.setStyle("opacity", 0);
                }
            }
        }, {
            key: "setState",
            value: function setState(state) {
                // console.warn("Setting state of", this.options.name.value, "from", this.options.state, "to", state);
                this.options.state = state;
                this.updateIcon();
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this2 = this;

                this.updateIcon();
                if (this.options.state === 1 || this.options.state === -1) {
                    setTimeout(function () {
                        return parent.promoteCmp(_this2);
                    });
                }
                this.addClickListener(function () {
                    _this2.setState(_this2.options.state === 1 ? -1 : 1);
                    parent.promoteCmp(_this2);
                    _this2.updateIcon();
                });
            }
        }], [{
            key: "cmp",
            value: function cmp(a, b) {
                return _cmp(a, b, parent.options.isArchive, compareFunction, fallbackCompareFunction);
            }
        }]);
        return SortableHeader;
    }(UI.Element);
};

var ContestTaskListHeaderStyle = (_class$69 = function (_ContestTaskBubbleSty) {
    inherits(ContestTaskListHeaderStyle, _ContestTaskBubbleSty);

    function ContestTaskListHeaderStyle() {
        var _ref;

        var _temp, _this3, _ret;

        classCallCheck(this, ContestTaskListHeaderStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this3 = possibleConstructorReturn(this, (_ref = ContestTaskListHeaderStyle.__proto__ || Object.getPrototypeOf(ContestTaskListHeaderStyle)).call.apply(_ref, [this].concat(args))), _this3), _this3.height = 35, _initDefineProp$32(_this3, "className", _descriptor$31, _this3), _initDefineProp$32(_this3, "taskDescription", _descriptor2$27, _this3), _initDefineProp$32(_this3, "userScore", _descriptor3$23, _this3), _initDefineProp$32(_this3, "tags", _descriptor4$20, _this3), _initDefineProp$32(_this3, "taskDifficulty", _descriptor5$18, _this3), _initDefineProp$32(_this3, "taskStatistics", _descriptor6$15, _this3), _initDefineProp$32(_this3, "taskStatisticsTitle", _descriptor7$13, _this3), _initDefineProp$32(_this3, "taskStatisticsSubtitle", _descriptor8$10, _this3), _temp), possibleConstructorReturn(_this3, _ret);
    }

    return ContestTaskListHeaderStyle;
}(ContestTaskBubbleStyle), _descriptor$31 = _applyDecoratedDescriptor$32(_class$69.prototype, "className", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            cursor: "pointer",
            pointerEvents: "cursor"
        };
    }
}), _descriptor2$27 = _applyDecoratedDescriptor$32(_class$69.prototype, "taskDescription", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        var _this4 = this;

        return {
            lineHeight: function lineHeight() {
                return _this4.height + "px";
            },
            fontSize: "13px",
            paddingLeft: "5.25%",
            textAlign: "left"
        };
    }
}), _descriptor3$23 = _applyDecoratedDescriptor$32(_class$69.prototype, "userScore", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "14px"
        };
    }
}), _descriptor4$20 = _applyDecoratedDescriptor$32(_class$69.prototype, "tags", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        var _this5 = this;

        return {
            padding: 0,
            textAlign: "center",
            lineHeight: function lineHeight() {
                return _this5.height + "px";
            }
        };
    }
}), _descriptor5$18 = _applyDecoratedDescriptor$32(_class$69.prototype, "taskDifficulty", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "14px"
        };
    }
}), _descriptor6$15 = _applyDecoratedDescriptor$32(_class$69.prototype, "taskStatistics", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            textAlign: "auto"
        };
    }
}), _descriptor7$13 = _applyDecoratedDescriptor$32(_class$69.prototype, "taskStatisticsTitle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this6 = this;

        return {
            height: function height() {
                return _this6.height / 2 + "px";
            },
            width: "100%",
            fontSize: "12px",
            textAlign: "center",
            lineHeight: function lineHeight() {
                return _this6.height / 2 + "px";
            }
        };
    }
}), _descriptor8$10 = _applyDecoratedDescriptor$32(_class$69.prototype, "taskStatisticsSubtitle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this7 = this;

        return {
            height: function height() {
                return _this7.height / 2 + "px";
            },
            lineHeight: function lineHeight() {
                return _this7.height / 2 + "px";
            },
            width: "100%",
            fontSize: "12px",
            textAlign: "center"
        };
    }
}), _class$69);

var ContestTaskListHeader = (_dec$33 = registerStyle(ContestTaskListHeaderStyle), _dec$33(_class3$20 = function (_UI$Element2) {
    inherits(ContestTaskListHeader, _UI$Element2);

    function ContestTaskListHeader(obj) {
        classCallCheck(this, ContestTaskListHeader);

        var _this8 = possibleConstructorReturn(this, (ContestTaskListHeader.__proto__ || Object.getPrototypeOf(ContestTaskListHeader)).call(this, obj));

        _this8.createSortableHeaders();
        _this8.headers = [];
        return _this8;
    }

    createClass(ContestTaskListHeader, [{
        key: "createSortableHeaders",
        value: function createSortableHeaders() {
            this.NameSort = SortableHeaderMixin(this, ColumnContentGetters.getName);
            this.ContestSort = SortableHeaderMixin(this, ColumnContentGetters.getContest, this.NameSort.cmp);
            this.ScoreSort = SortableHeaderMixin(this, ColumnContentGetters.getScore, this.NameSort.cmp);
            this.TagsSort = SortableHeaderMixin(this, ColumnContentGetters.getTags, this.NameSort.cmp);
            this.DifficultySort = SortableHeaderMixin(this, ColumnContentGetters.getDifficulty, this.NameSort.cmp);
            this.SolvedSort = SortableHeaderMixin(this, ColumnContentGetters.getSolved, this.NameSort.cmp);
            this.TriedSort = SortableHeaderMixin(this, ColumnContentGetters.getTried, this.NameSort.cmp);
            this.RatioSort = SortableHeaderMixin(this, ColumnContentGetters.getRatio, this.NameSort.cmp);
        }
    }, {
        key: "render",
        value: function render() {
            var _headers2;

            var archiveChildren = void 0;
            this.headers = [];
            if (this.options.isArchive || !this.options.contest.isRunning()) {
                var _headers;

                archiveChildren = [UI.createElement(this.TagsSort, { name: UI.T("Tags"), className: this.styleSheet.tags }), UI.createElement(this.DifficultySort, { name: UI.T("Difficulty"), className: this.styleSheet.taskDifficulty })];
                (_headers = this.headers).push.apply(_headers, toConsumableArray(archiveChildren));
            } else {
                archiveChildren = UI.createElement("div", { style: { width: "31%", height: "100%", display: "inline-block", float: "left" } });
            }
            var name = UI.createElement(this.NameSort, { name: UI.T("Task"), style: { marginRight: "2px", display: "inline-block" } });
            var contest = UI.createElement(this.ContestSort, { name: UI.T("Contest"), style: { marginLeft: "2px", display: "inline-block" } });
            var score = UI.createElement(this.ScoreSort, { name: UI.T("Score"), className: this.styleSheet.userScore });
            var solved = UI.createElement(this.SolvedSort, { name: UI.T("Solved"), state: -1 });
            var tried = UI.createElement(this.TriedSort, { name: UI.T("Tried") });
            var ratio = UI.createElement(this.RatioSort, { name: UI.T("Ratio") });
            (_headers2 = this.headers).push.apply(_headers2, [name, contest, score, solved, tried, ratio]);
            return [UI.createElement(
                "div",
                { className: this.styleSheet.className },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.taskDescription },
                    name,
                    "|",
                    contest
                ),
                score,
                archiveChildren,
                UI.createElement(
                    "div",
                    { className: this.styleSheet.taskStatistics },
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.taskStatisticsTitle, style: { paddingLeft: 2 * 6.86 + "px" } },
                        UI.T("Stats")
                    ),
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.taskStatisticsSubtitle },
                        solved,
                        "|",
                        tried,
                        "|",
                        ratio
                    )
                )
            )];
        }
    }, {
        key: "promoteCmp",
        value: function promoteCmp(selectedHeader) {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.headers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var header = _step4.value;

                    if (header !== selectedHeader) {
                        header.setState(0);
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.dispatch("setOrderCriterion", function (a, b) {
                return selectedHeader.options.state * selectedHeader.constructor.cmp(a, b);
            });
        }
    }]);
    return ContestTaskListHeader;
}(UI.Element)) || _class3$20);

var _class$70, _descriptor$32, _descriptor2$28, _descriptor3$24, _dec$34, _class3$21, _class4$3, _descriptor4$21, _descriptor5$19, _descriptor6$16, _descriptor7$14, _descriptor8$11, _descriptor9$8, _dec2$13, _class6$2;

function _initDefineProp$33(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$33(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var ContestTaskList = function (_UI$Element) {
    inherits(ContestTaskList, _UI$Element);

    function ContestTaskList() {
        var _ref;

        classCallCheck(this, ContestTaskList);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = possibleConstructorReturn(this, (_ref = ContestTaskList.__proto__ || Object.getPrototypeOf(ContestTaskList)).call.apply(_ref, [this].concat(args)));

        _this.bubbles = [];
        return _this;
    }

    createClass(ContestTaskList, [{
        key: "getTasks",
        value: function getTasks() {
            return this.getContest().getContestTasks();
        }
    }, {
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "getContestTaskBubble",
        value: function getContestTaskBubble(task) {
            var revealedTagIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            return UI.createElement(ContestTaskBubble, { key: task.id, isArchive: this.options.isArchive, contestTask: task,
                showTags: this.options.showTags, revealedTagIds: revealedTagIds });
        }
    }, {
        key: "setShowTags",
        value: function setShowTags(showTags) {
            this.options.showTags = showTags;
            this.refreshBubbles();
        }
    }, {
        key: "setText",
        value: function setText(text) {
            this.text = text;
            this.refreshBubbles();
        }
    }, {
        key: "getHeader",
        value: function getHeader() {
            return UI.createElement(ContestTaskListHeader, { ref: "header", isArchive: this.options.isArchive, contest: this.getContest() });
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getHeader(), UI.createElement(
                "div",
                { ref: "taskList" },
                this.bubbles
            )];
        }
    }, {
        key: "refreshBubbles",
        value: function refreshBubbles() {
            var _this2 = this;

            var tasks = this.getTasks();
            if (this.options.sortingCriterion) {
                tasks.sort(function (a, b) {
                    return _this2.options.sortingCriterion(a, b);
                });
            }

            var _tokenize = tokenize(this.text || ""),
                _tokenize2 = slicedToArray(_tokenize, 2),
                tagIds = _tokenize2[0],
                textTokens = _tokenize2[1];

            if (this.text) {
                tasks = tasks.filter(function (task) {
                    return contains(task.tagIds, tagIds) && containsTokens(task, textTokens);
                });
            }
            var bubbles = tasks.map(function (task) {
                return _this2.getContestTaskBubble(task, tagIds);
            });
            this.bubbles = bubbles;
            this.taskList.setChildren(bubbles);
        }
    }, {
        key: "setSortingCriterion",
        value: function setSortingCriterion(func) {
            this.options.sortingCriterion = func;
            this.refreshBubbles();
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.refreshBubbles();
            if (this.header) {
                this.header.addListener("setOrderCriterion", function (func) {
                    _this3.setSortingCriterion(func);
                });
            }
            if (!this.options.isArchive) {
                var contest = this.getContest();
                if (contest) {
                    this.attachListener(this.options.contest, "addTask", function () {
                        _this3.refreshBubbles();
                    });
                }
            }
        }
    }]);
    return ContestTaskList;
}(UI.Element);

// Function that splits the text of the search bar in two arrays:
// - the tags (starting with #), returns an array of the ids
// - the text tokens, returns an array of strings


function tokenize(text) {
    var tokens = text.split(/[ \n]/);
    var textTokens = [];
    var tagIds = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var token = _step.value;

            if (token.indexOf("#") === 0) {
                var tagName = token.replace("#", "").split("-").join(" ");
                var tag = TagStore.getTagByNameInsensitive(tagName, false);
                if (tag) {
                    tagIds.push(tag.id);
                }
            } else if (token !== "") {
                textTokens.push(token);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return [tagIds, textTokens];
}

// Check whether a set of tags passes the required tags.
// For this, we must consider the given tags as well as
// their way to their respective roots.
function contains(entryTagIds, requiredTagIds) {
    if (!requiredTagIds || requiredTagIds.length === 0) {
        return true;
    }
    if (!entryTagIds) {
        return false;
    }

    var vis = new Set();
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = entryTagIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var tag = _step2.value;

            var currentTag = TagStore.get(tag);
            while (currentTag) {
                vis.add(currentTag.id);
                currentTag = TagStore.get(currentTag.parentId);
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = requiredTagIds[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var tagId = _step3.value;

            if (!vis.has(tagId)) {
                return false;
            }
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    return true;
}

// Check whether the name or tags of a given task contain a given string token
// as a substring
function containsTokens(task, tokens) {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
        for (var _iterator4 = tokens[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var token = _step4.value;

            if (task.longName.toLocaleLowerCase().indexOf(token.toLocaleLowerCase()) === -1) {
                var value = false;
                if (task.tagIds) {
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;

                    try {
                        for (var _iterator5 = task.tagIds[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                            var tagId = _step5.value;

                            value = value || TagStore.get(tagId).name.toLocaleLowerCase().indexOf(token.toLocaleLowerCase()) !== -1;
                        }
                    } catch (err) {
                        _didIteratorError5 = true;
                        _iteratorError5 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                _iterator5.return();
                            }
                        } finally {
                            if (_didIteratorError5) {
                                throw _iteratorError5;
                            }
                        }
                    }
                }
                if (!value) {
                    return false;
                }
            }
        }
    } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
            }
        } finally {
            if (_didIteratorError4) {
                throw _iteratorError4;
            }
        }
    }

    return true;
}

var TagCheckboxStyle = (_class$70 = function (_StyleSheet) {
    inherits(TagCheckboxStyle, _StyleSheet);

    function TagCheckboxStyle() {
        var _ref2;

        var _temp, _this4, _ret;

        classCallCheck(this, TagCheckboxStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret = (_temp = (_this4 = possibleConstructorReturn(this, (_ref2 = TagCheckboxStyle.__proto__ || Object.getPrototypeOf(TagCheckboxStyle)).call.apply(_ref2, [this].concat(args))), _this4), _initDefineProp$33(_this4, "className", _descriptor$32, _this4), _initDefineProp$33(_this4, "checked", _descriptor2$28, _this4), _initDefineProp$33(_this4, "unchecked", _descriptor3$24, _this4), _temp), possibleConstructorReturn(_this4, _ret);
    }

    return TagCheckboxStyle;
}(StyleSheet), _descriptor$32 = _applyDecoratedDescriptor$33(_class$70.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "left",
            height: "25px",
            lineHeight: "25px",
            width: "100%",
            paddingLeft: "0%",
            cursor: "pointer",
            ":hover": {
                backgroundColor: "#eee"
            }
        };
    }
}), _descriptor2$28 = _applyDecoratedDescriptor$33(_class$70.prototype, "checked", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "black",
            fontWeight: "bold"
        };
    }
}), _descriptor3$24 = _applyDecoratedDescriptor$33(_class$70.prototype, "unchecked", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "rgb(55, 55, 55)",
            fontWeight: "initial"
        };
    }
}), _class$70);
var TagCheckbox = (_dec$34 = registerStyle(TagCheckboxStyle), _dec$34(_class3$21 = function (_UI$Element2) {
    inherits(TagCheckbox, _UI$Element2);

    function TagCheckbox() {
        classCallCheck(this, TagCheckbox);
        return possibleConstructorReturn(this, (TagCheckbox.__proto__ || Object.getPrototypeOf(TagCheckbox)).apply(this, arguments));
    }

    createClass(TagCheckbox, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                checked: false
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.className);
            if (this.options.checked) {
                attr.addClass(this.styleSheet.checked);
            } else {
                attr.addClass(this.styleSheet.unchecked);
            }
        }
    }, {
        key: "render",
        value: function render() {
            return this.options.tag.name;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.addClickListener(function () {
                _this6.updateOptions({ checked: !_this6.options.checked });
                _this6.options.tagFilters.dispatch("tagClicked", _this6.options.tag);
            });
        }
    }]);
    return TagCheckbox;
}(UI.Element)) || _class3$21);

var TagFilters = function (_UI$Element3) {
    inherits(TagFilters, _UI$Element3);

    function TagFilters() {
        classCallCheck(this, TagFilters);
        return possibleConstructorReturn(this, (TagFilters.__proto__ || Object.getPrototypeOf(TagFilters)).apply(this, arguments));
    }

    createClass(TagFilters, [{
        key: "getContestTasks",
        value: function getContestTasks() {
            return this.options.contest.getContestTasks();
        }
    }, {
        key: "getAppearingTags",
        value: function getAppearingTags() {
            var appearingTags = new Set();
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.getContestTasks()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var task = _step6.value;

                    if (task.tagIds) {
                        var _iteratorNormalCompletion7 = true;
                        var _didIteratorError7 = false;
                        var _iteratorError7 = undefined;

                        try {
                            for (var _iterator7 = task.tagIds[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                var tagId = _step7.value;

                                var tag = TagStore.get(tagId);
                                while (tag) {
                                    appearingTags.add(tag);
                                    tag = TagStore.get(tag.parentId);
                                }
                            }
                        } catch (err) {
                            _didIteratorError7 = true;
                            _iteratorError7 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                    _iterator7.return();
                                }
                            } finally {
                                if (_didIteratorError7) {
                                    throw _iteratorError7;
                                }
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            return appearingTags;
        }
    }, {
        key: "render",
        value: function render() {
            var tags = Array.from(this.getAppearingTags());
            tags.sort(function (a, b) {
                var categoriesA = a.toString().split("-");
                var categoriesB = b.toString().split("-");
                for (var i = 0; i < Math.min(categoriesA.length, categoriesB.length); i += 1) {
                    if (categoriesA[i] !== categoriesB[i]) {
                        return categoriesA[i] < categoriesB[i] ? -1 : 1;
                    }
                }
                if (categoriesA.length < categoriesB.length) {
                    return -1;
                }
                if (categoriesA.length > categoriesB.length) {
                    return 1;
                }
                return 0;
            });
            var result = [];
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = tags[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var tag = _step8.value;

                    result.push(UI.createElement(
                        "div",
                        { style: { paddingLeft: 18 * tag.getDepth() + "px", height: "25px" } },
                        UI.createElement(TagCheckbox, { tag: tag, ref: this.refLink("tagCheckbox" + tag.id), tagFilters: this })
                    ));
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            return result;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.addListener("textInput", function (text) {
                var tagIds = tokenize(text)[0];
                var _iteratorNormalCompletion9 = true;
                var _didIteratorError9 = false;
                var _iteratorError9 = undefined;

                try {
                    for (var _iterator9 = _this8.getAppearingTags()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                        var tag = _step9.value;

                        if (tagIds.indexOf(tag.id) !== -1) {
                            _this8["tagCheckbox" + tag.id].updateOptions({ checked: true });
                        } else {
                            _this8["tagCheckbox" + tag.id].updateOptions({ checked: false });
                        }
                    }
                } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion9 && _iterator9.return) {
                            _iterator9.return();
                        }
                    } finally {
                        if (_didIteratorError9) {
                            throw _iteratorError9;
                        }
                    }
                }
            });
            this.addListener("tagClicked", function (tag) {
                var filterArea = _this8.options.filterArea;
                filterArea.changeSearchBarText(tag, filterArea.searchBar.getValue());
                filterArea.dispatch("changeText", filterArea.searchBar.getValue());
            });
        }
    }]);
    return TagFilters;
}(UI.Element);

var FilterArea = function (_UI$Element4) {
    inherits(FilterArea, _UI$Element4);

    function FilterArea() {
        classCallCheck(this, FilterArea);
        return possibleConstructorReturn(this, (FilterArea.__proto__ || Object.getPrototypeOf(FilterArea)).apply(this, arguments));
    }

    createClass(FilterArea, [{
        key: "render",
        value: function render() {
            return [UI.createElement(TextInput, { ref: "searchBar", placeholder: "Search here (use # for tags)",
                className: this.options.searchBarCss }), UI.createElement(TagFilters, { ref: "tags", className: this.options.tagFiltersCss, filterArea: this,
                contest: this.options.contest })];
        }
    }, {
        key: "changeSearchBarText",
        value: function changeSearchBarText(tag, text) {
            var tokens = text.split(" ");
            var normalText = text.toLocaleLowerCase();
            var normalTagName = "#" + tag.name.toLocaleLowerCase().split(" ").join("-");
            var normalTokens = normalText.split(" ");
            if (this.tags["tagCheckbox" + tag.id].options.checked && normalTokens.indexOf(normalTagName) === -1) {
                tokens.push("#" + tag.name.split(" ").join("-"));
            } else {
                for (var i = 0; i < normalTokens.length; i += 1) {
                    if (normalTagName === normalTokens[i]) {
                        normalTokens.splice(i, 1);
                        tokens.splice(i, 1);
                    }
                }
            }
            text = tokens.join(" ");
            this.searchBar.setValue(text);
        }
    }, {
        key: "setText",
        value: function setText(text) {
            this.searchBar.setValue(text);
            this.tags.dispatch("textInput", text);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this10 = this;

            this.searchBar.addNodeListener("input", function () {
                var text = _this10.searchBar.getValue();
                _this10.tags.dispatch("textInput", text);
                _this10.dispatch("changeText", text);
            });
        }
    }]);
    return FilterArea;
}(UI.Element);

var ContestTaskListWithFiltersStyle = (_class4$3 = function (_StyleSheet2) {
    inherits(ContestTaskListWithFiltersStyle, _StyleSheet2);

    function ContestTaskListWithFiltersStyle() {
        classCallCheck(this, ContestTaskListWithFiltersStyle);

        var _this11 = possibleConstructorReturn(this, (ContestTaskListWithFiltersStyle.__proto__ || Object.getPrototypeOf(ContestTaskListWithFiltersStyle)).call(this, { updateOnResize: true }));

        _initDefineProp$33(_this11, "searchBar", _descriptor4$21, _this11);

        _initDefineProp$33(_this11, "tagFilters", _descriptor5$19, _this11);

        _initDefineProp$33(_this11, "collapseFiltersButton", _descriptor6$16, _this11);

        _initDefineProp$33(_this11, "filterArea", _descriptor7$14, _this11);

        _initDefineProp$33(_this11, "contestTaskList", _descriptor8$11, _this11);

        _initDefineProp$33(_this11, "className", _descriptor9$8, _this11);

        _this11.filterAreaCollapsed = Device.isMobileDevice();

        _this11.addBeforeUpdateListener(function () {
            return _this11.updateVariables();
        });
        return _this11;
    }

    createClass(ContestTaskListWithFiltersStyle, [{
        key: "updateVariables",
        value: function updateVariables() {
            this.screenWidth = Math.min(256, window.innerWidth * 2 / 10);
            this.screenHeight = window.innerHeight - 60;
            if (this.filterAreaCollapsed) {
                this.resizeWidth = Math.min(window.innerWidth * 9 / 10 - 30 > Math.max(0, window.innerWidth * 6 / 10) ? window.innerWidth * 9 / 10 - 30 : Math.max(0, window.innerWidth * 6 / 10), 1280 * 9 / 10 - 30) + "px";
            } else {
                this.resizeWidth = Math.min(window.innerWidth - Math.min(256, screen.width * 2 / 10) * 5 / 4, Math.min(window.innerWidth * 7 / 10 > 768 ? window.innerWidth * 7 / 10 : 768, Math.min(screen.width * 7 / 10, 1280 * 7 / 10))) + "px";
            }
            this.screenWidthBack = Math.min(256, screen.width * 2 / 10);
        }
    }, {
        key: "toggleCollapsed",
        value: function toggleCollapsed() {
            this.filterAreaCollapsed = !this.filterAreaCollapsed;
            this.update();
        }
    }]);
    return ContestTaskListWithFiltersStyle;
}(StyleSheet), _descriptor4$21 = _applyDecoratedDescriptor$33(_class4$3.prototype, "searchBar", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "20px",
            marginBottom: "20px",
            border: "0px",
            fontSize: "85%",
            height: "25px",
            width: "85%",
            boxShadow: "0px 0px 1px rgb(55, 55, 55)",
            paddingLeft: "5%",
            lineHeight: "25px",
            outline: "none",
            ":focus": {
                textDecoration: "none",
                backgroundColor: "#f6f6f6"
            }
        };
    }
}), _descriptor5$19 = _applyDecoratedDescriptor$33(_class4$3.prototype, "tagFilters", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this12 = this;

        return {
            fontSize: "95%",
            whiteSpace: "nowrap",
            overflowY: "auto",
            overflowX: "auto",
            maxHeight: function maxHeight() {
                return _this12.screenHeight - 65;
            } /* 65 from the input area */
        };
    }
}), _descriptor6$16 = _applyDecoratedDescriptor$33(_class4$3.prototype, "collapseFiltersButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this13 = this;

        return {
            display: "inline-block",
            float: "left",
            width: "35px",
            position: "absolute",
            overflowY: "hidden",
            textAlign: "center",
            fontSize: "14px",
            marginTop: "22.5px",
            marginLeft: function marginLeft() {
                return _this13.screenWidth / 4 - 25;
            },
            zIndex: "3"
        };
    }
}), _descriptor7$14 = _applyDecoratedDescriptor$33(_class4$3.prototype, "filterArea", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this14 = this;

        return {
            display: function display() {
                return _this14.filterAreaCollapsed ? "none" : "inline-block";
            },
            float: "left",
            width: function width() {
                return _this14.screenWidth;
            },
            position: "absolute",
            paddingLeft: function paddingLeft() {
                return 1 / 10 * _this14.screenWidth + "px";
            },
            maxHeight: function maxHeight() {
                return _this14.screenHeight + "px";
            },
            marginLeft: function marginLeft() {
                return 20 + _this14.screenWidth / 4 - 20 + "px";
            }
        };
    }
}), _descriptor8$11 = _applyDecoratedDescriptor$33(_class4$3.prototype, "contestTaskList", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this15 = this;

        return {
            display: "inline-block",
            float: "left",
            position: "absolute",
            marginLeft: function marginLeft() {
                return _this15.filterAreaCollapsed ? (30 + _this15.screenWidthBack / 4) * Math.max(0.4, window.innerWidth / screen.width) + "px" : _this15.screenWidth + _this15.screenWidth / 4 + "px";
            },
            width: function width() {
                return _this15.resizeWidth;
            },
            maxHeight: function maxHeight() {
                return _this15.screenHeight + "px";
            },
            minHeight: function minHeight() {
                return _this15.screenHeight + "px";
            },
            overflowY: "auto",
            overflowX: "auto",
            whiteSpace: "nowrap",
            paddingRight: "20px"
        };
    }
}), _descriptor9$8 = _applyDecoratedDescriptor$33(_class4$3.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: "auto",
            width: Math.min(1920, screen.width * 10 / 10) + "px",
            overflow: "hidden"
        };
    }
}), _class4$3);
var ContestTaskListWithFilters = (_dec2$13 = registerStyle(ContestTaskListWithFiltersStyle), _dec2$13(_class6$2 = function (_UI$Element5) {
    inherits(ContestTaskListWithFilters, _UI$Element5);

    function ContestTaskListWithFilters() {
        classCallCheck(this, ContestTaskListWithFilters);
        return possibleConstructorReturn(this, (ContestTaskListWithFilters.__proto__ || Object.getPrototypeOf(ContestTaskListWithFilters)).apply(this, arguments));
    }

    createClass(ContestTaskListWithFilters, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                defaultSortingCriterion: function defaultSortingCriterion(a, b) {
                    if (!this.cachedCompareFunction) {
                        this.cachedCompareFunction = new ContestTaskListHeader({ isArchive: true }).SolvedSort.cmp;
                    }
                    return -this.cachedCompareFunction(a, b);
                },
                showTags: USER.isAuthenticated ? UserStore.getCurrentUser().getShowTagsInArchive(this.options.contest.id) : false
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.className);
        }
    }, {
        key: "render",
        value: function render() {
            var _this17 = this;

            return [UI.createElement(Button, { ref: "collapseFiltersButton", className: this.styleSheet.collapseFiltersButton,
                faIcon: this.getCollapseFiltersButtonIcon(),
                level: Level.INFO, size: Size.SMALL,
                onClick: function onClick() {
                    return _this17.toggleFiltersCollapsed();
                } }), UI.createElement(FilterArea, { ref: "filterArea", className: this.styleSheet.filterArea,
                tagFiltersCss: this.styleSheet.tagFilters, searchBarCss: this.styleSheet.searchBar,
                contest: this.options.contest }), UI.createElement(
                "div",
                { ref: "contestTaskList", className: this.styleSheet.contestTaskList },
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "div",
                        { style: { "display": "inline-block", "padding-right": "10px" } },
                        UI.T("Show tags")
                    ),
                    UI.createElement(
                        "div",
                        { style: { "display": "inline-block" } },
                        UI.createElement(CheckboxInput, { ref: this.refLink("showTagsCheckbox"), checked: this.options.showTags,
                            style: { "display": "inline-block" } })
                    )
                ),
                UI.createElement(ContestTaskList, { ref: "table", contest: this.options.contest, isArchive: true, showTags: this.options.showTags,
                    sortingCriterion: this.options.defaultSortingCriterion })
            )];
        }
    }, {
        key: "getCollapseFiltersButtonIcon",
        value: function getCollapseFiltersButtonIcon() {
            return "chevron-" + (this.styleSheet.filterAreaCollapsed ? "right" : "left");
        }
    }, {
        key: "toggleFiltersCollapsed",
        value: function toggleFiltersCollapsed() {
            this.styleSheet.toggleCollapsed();
            this.collapseFiltersButton.setFaIcon(this.getCollapseFiltersButtonIcon());
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this18 = this;

            this.filterArea.addListener("changeText", function (text) {
                return _this18.table.setText(text);
            });
            this.showTagsCheckbox.addChangeListener(function () {
                _this18.options.showTags = _this18.showTagsCheckbox.getValue();
                _this18.table.setShowTags(_this18.options.showTags);
                if (USER.isAuthenticated) {
                    UserStore.getCurrentUser().saveCustomSetting("archive:showTags-" + _this18.options.contest.id, _this18.options.showTags);
                }
            });
            if (USER.isAuthenticated) {
                var getShowTags = function getShowTags() {
                    var newValue = UserStore.getCurrentUser().getShowTagsInArchive(_this18.options.contest.id);
                    if (newValue !== _this18.options.showTags) {
                        _this18.options.showTags = newValue;
                        _this18.showTagsCheckbox.setValue(newValue);
                        _this18.table.setShowTags(_this18.options.showTags);
                    }
                };
                getShowTags();
                this.attachUpdateListener(UserStore.getCurrentUser(), getShowTags);
            }
            this.addListener("setActive", function (active$$1) {
                if (active$$1) {
                    _this18.contestTaskList.node.scrollTop = _this18._scrollState || 0;
                } else {
                    _this18._scrollState = _this18.contestTaskList.node.scrollTop;
                }
            });
            tasksTagsDispatcher.addListener(function (tag) {
                var tabText = "#" + tag.name.split(" ").join("-");
                _this18.filterArea.setText(tabText);
                _this18.table.setText(tabText);
            });
        }
    }]);
    return ContestTaskListWithFilters;
}(UI.Element)) || _class6$2);

var BroadcastTaskNowModal = function (_ActionModal) {
    inherits(BroadcastTaskNowModal, _ActionModal);

    function BroadcastTaskNowModal() {
        classCallCheck(this, BroadcastTaskNowModal);
        return possibleConstructorReturn(this, (BroadcastTaskNowModal.__proto__ || Object.getPrototypeOf(BroadcastTaskNowModal)).apply(this, arguments));
    }

    createClass(BroadcastTaskNowModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Broadcast task";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return "Are you sure you want to broadcast this task now?";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Do it!";
        }
    }, {
        key: "action",
        value: function action() {
            Ajax.postJSON("/contest/change_task_delay/", {
                contestTaskId: this.options.contestTask.id
            });
            this.hide();
        }
    }]);
    return BroadcastTaskNowModal;
}(ActionModal);

var TaskBroadcastDelayEditor = function (_UI$Element6) {
    inherits(TaskBroadcastDelayEditor, _UI$Element6);

    function TaskBroadcastDelayEditor() {
        classCallCheck(this, TaskBroadcastDelayEditor);
        return possibleConstructorReturn(this, (TaskBroadcastDelayEditor.__proto__ || Object.getPrototypeOf(TaskBroadcastDelayEditor)).apply(this, arguments));
    }

    createClass(TaskBroadcastDelayEditor, [{
        key: "render",
        value: function render() {
            var _this21 = this;

            var message = void 0;
            if (this.options.editMode) {
                message = [UI.createElement(Button, { level: Level.PRIMARY, size: Size.EXTRA_SMALL, style: { marginLeft: "3px" },
                    faIcon: "floppy-o", onClick: function onClick() {
                        return _this21.save();
                    } }), UI.createElement(TextInput, { value: this.getTextInputValue(), ref: "broadcastDelayInput",
                    style: { width: "95px", marginLeft: "5px" } })];
            } else {
                message = [UI.createElement(Button, { level: Level.PRIMARY, size: Size.EXTRA_SMALL, style: { marginLeft: "3px" },
                    faIcon: "pencil", onClick: function onClick() {
                        return _this21.updateOptions({ editMode: true });
                    } }), UI.createElement(
                    "span",
                    { style: { paddingLeft: "5px" } },
                    this.getTextValue()
                )];
            }
            return [UI.createElement(
                Button,
                { level: Level.PRIMARY, size: Size.EXTRA_SMALL,
                    onClick: function onClick() {
                        return _this21.showBroadcastNowModal();
                    } },
                "Now!"
            ), message];
        }
    }, {
        key: "save",
        value: function save() {
            var formattedDuration = this.broadcastDelayInput.getValue();
            var durationTokens = formattedDuration.split(":");
            var seconds = void 0;
            if (durationTokens.length === 1) {
                seconds = parseInt(durationTokens);
            } else if (durationTokens.length === 2) {
                seconds = parseInt(durationTokens[0]) * 60 + parseInt(durationTokens[1]);
            } else if (durationTokens.length === 3) {
                seconds = parseInt(durationTokens[0]) * 3600 + parseInt(durationTokens[1]) * 60 + parseInt(durationTokens[2]);
            } else {
                alert("Invalid duration format");
                return;
            }
            Ajax.postJSON("/contest/change_task_delay/", {
                contestTaskId: this.options.contestTask.id,
                delay: seconds
            });
        }
    }, {
        key: "getTextValue",
        value: function getTextValue(delay) {
            delay = delay || this.options.contestTask.broadcastDelay;
            if (!delay) {
                return UI.createElement(
                    "em",
                    null,
                    "On contest start"
                );
            }
            var duration = new Duration({ seconds: delay });
            return duration.format("+HH:mm:ss");
        }
    }, {
        key: "getTextInputValue",
        value: function getTextInputValue() {
            var duration = new Duration({ seconds: this.options.contestTask.broadcastDelay || 0 });
            return duration.format("HH:mm:ss");
        }
    }, {
        key: "showBroadcastNowModal",
        value: function showBroadcastNowModal() {
            BroadcastTaskNowModal.show({ contestTask: this.options.contestTask });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this22 = this;

            this.attachUpdateListener(this.options.contestTask, function () {
                return _this22.updateOptions({ editMode: false });
            });
        }
    }]);
    return TaskBroadcastDelayEditor;
}(UI.Element);

var AdminContestTasksTable = function (_Table) {
    inherits(AdminContestTasksTable, _Table);

    function AdminContestTasksTable() {
        classCallCheck(this, AdminContestTasksTable);
        return possibleConstructorReturn(this, (AdminContestTasksTable.__proto__ || Object.getPrototypeOf(AdminContestTasksTable)).apply(this, arguments));
    }

    createClass(AdminContestTasksTable, [{
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "deleteTask",
        value: function deleteTask(task) {
            var data = {
                contestId: this.getContest().id,
                contestTaskId: task.id
            };
            Ajax.postJSON("/contest/delete_task/", data);
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.getContest().getContestTasks();
        }
    }, {
        key: "moveTaskUp",
        value: function moveTaskUp(task) {
            var _this24 = this;

            var contestTasks = this.getContest().getContestTasks();
            var updates = {};
            for (var i = 0; i < contestTasks.length; i += 1) {
                updates[contestTasks[i].id] = i + 1;
                if (contestTasks[i] === task) {
                    updates[contestTasks[i].id] -= 1;
                    updates[contestTasks[i - 1].id] += 1;
                }
            }
            var request = {
                updates: JSON.stringify(updates),
                contestId: this.options.contest.id
            };
            Ajax.postJSON("/contest/update_order/", request).then(function () {
                return _this24.redraw();
            });
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var _this25 = this;

            get(AdminContestTasksTable.prototype.__proto__ || Object.getPrototypeOf(AdminContestTasksTable.prototype), "setColumns", this).call(this, [{
                value: function value(task, index) {
                    return index > 0 ? UI.createElement(Button, { level: Level.PRIMARY, faIcon: "arrow-up",
                        onClick: function onClick() {
                            return _this25.moveTaskUp(task);
                        } }) : null;
                },
                rawValue: function rawValue(task) {
                    return task.contestIndex;
                },
                headerName: UI.T("Order")
            }, {
                value: function value(task) {
                    return UI.createElement(Link, { href: "/contest/" + _this25.getContest().name + "/task/" + task.name + "/",
                        value: task.longName });
                },
                rawValue: function rawValue(task) {
                    return task.longName;
                },
                headerName: UI.T("Task")
            }, {
                value: function value(task) {
                    return task.name;
                },
                headerName: UI.T("URL Name")
            }, {
                value: function value(task) {
                    return task.scoreTypeName;
                },
                headerName: UI.T("Score type")
            }, {
                value: function value(task) {
                    return UI.createElement(TaskBroadcastDelayEditor, { contestTask: task });
                },
                headerName: UI.T("Delay")
            }, {
                value: function value(task) {
                    return UI.createElement(
                        Button,
                        { level: "danger", onClick: function onClick() {
                                return _this25.deleteTask(task);
                            } },
                        UI.T("Delete")
                    );
                },
                headerName: UI.T("Delete")
            }]);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this26 = this;

            this.getContest().addUpdateListener(function () {
                return _this26.redraw();
            });
        }
    }]);
    return AdminContestTasksTable;
}(Table);

var CSAHorizontalOverflow = function (_HorizontalOverflow) {
    inherits(CSAHorizontalOverflow, _HorizontalOverflow);

    function CSAHorizontalOverflow() {
        classCallCheck(this, CSAHorizontalOverflow);
        return possibleConstructorReturn(this, (CSAHorizontalOverflow.__proto__ || Object.getPrototypeOf(CSAHorizontalOverflow)).apply(this, arguments));
    }

    createClass(CSAHorizontalOverflow, [{
        key: "handleEventAndHandlePositionChange",
        value: function handleEventAndHandlePositionChange() {
            var _babelHelpers$get;

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            (_babelHelpers$get = get(CSAHorizontalOverflow.prototype.__proto__ || Object.getPrototypeOf(CSAHorizontalOverflow.prototype), "handleEventAndHandlePositionChange", this)).call.apply(_babelHelpers$get, [this].concat(args));
            BasePopup.clearBodyPopups();
        }
    }]);
    return CSAHorizontalOverflow;
}(HorizontalOverflow);

var _class$71, _descriptor$33, _descriptor2$29, _descriptor3$25, _class3$22, _descriptor4$22, _descriptor5$20, _descriptor6$17, _descriptor7$15, _descriptor8$12, _descriptor9$9, _descriptor10$7, _descriptor11$7, _descriptor12$6, _class5$6, _descriptor13$6, _descriptor14$6, _descriptor15$6, _descriptor16$6, _class7$5, _descriptor17$6;

function _initDefineProp$34(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$34(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var WorkspaceButtonStyle = (_class$71 = function (_ButtonStyle) {
    inherits(WorkspaceButtonStyle, _ButtonStyle);

    function WorkspaceButtonStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, WorkspaceButtonStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = WorkspaceButtonStyle.__proto__ || Object.getPrototypeOf(WorkspaceButtonStyle)).call.apply(_ref, [this].concat(args))), _this), _this.workspaceBase = Object.assign({}, _this.base, {
            border: "none",
            borderRadius: "0",
            fontSize: "14px"
        }), _initDefineProp$34(_this, "RUN", _descriptor$33, _this), _initDefineProp$34(_this, "COMPILE", _descriptor2$29, _this), _initDefineProp$34(_this, "SUBMIT", _descriptor3$25, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return WorkspaceButtonStyle;
}(ButtonStyle), _descriptor$33 = _applyDecoratedDescriptor$34(_class$71.prototype, "RUN", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.workspaceBase, this.colorStyleRule(this.themeProperties.COLOR_RUN)];
    }
}), _descriptor2$29 = _applyDecoratedDescriptor$34(_class$71.prototype, "COMPILE", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.workspaceBase, this.colorStyleRule(this.themeProperties.COLOR_COMPILE)];
    }
}), _descriptor3$25 = _applyDecoratedDescriptor$34(_class$71.prototype, "SUBMIT", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.workspaceBase, this.colorStyleRule(this.themeProperties.COLOR_SUBMIT)];
    }
}), _class$71);

var WorkspaceStyle = (_class3$22 = function (_StyleSheet) {
    inherits(WorkspaceStyle, _StyleSheet);

    function WorkspaceStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, WorkspaceStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = WorkspaceStyle.__proto__ || Object.getPrototypeOf(WorkspaceStyle)).call.apply(_ref2, [this].concat(args))), _this2), _this2.workspaceBackground = function () {
            return _this2.themeProperties.COLOR_WORKSPACE;
        }, _this2.menuButtonSelected = function () {
            return enhance(_this2.workspaceBackground(), 1);
        }, _this2.menuButtonColor = function () {
            return enhance(_this2.workspaceBackground(), .8);
        }, _this2.menuSelectSelected = function () {
            return enhance(_this2.workspaceBackground(), .3);
        }, _this2.menuSelectBackground = function () {
            return enhance(_this2.workspaceBackground(), .2);
        }, _this2.menuButtonSelectedStyle = {
            color: _this2.menuButtonSelected,
            background: "none"
        }, _this2.menuSelectSelectedStyle = {
            color: _this2.menuButtonSelected,
            background: _this2.menuSelectSelected
        }, _this2.menuSelectBackgroundStyle = {
            background: _this2.menuSelectBackground
        }, _this2.menuButtonStyle = {
            fontSize: "14px",
            background: "none",
            border: "none",
            fontWeight: "bold",
            padding: "5px 10px",
            color: _this2.menuButtonColor,
            ":hover": _this2.menuButtonSelectedStyle,
            ":focus": { background: "none" },
            ":active": { background: "none" },
            ":focus:active": { background: "none" },
            ":hover:active": { background: "none" },
            outline: "0"
        }, _initDefineProp$34(_this2, "actionButtons", _descriptor4$22, _this2), _initDefineProp$34(_this2, "menuButton", _descriptor5$20, _this2), _initDefineProp$34(_this2, "menuSelect", _descriptor6$17, _this2), _initDefineProp$34(_this2, "workspace", _descriptor7$15, _this2), _initDefineProp$34(_this2, "optionButtons", _descriptor8$12, _this2), _initDefineProp$34(_this2, "bottomTab", _descriptor9$9, _this2), _initDefineProp$34(_this2, "tabAreaTitleArea", _descriptor10$7, _this2), _initDefineProp$34(_this2, "expandTabAreaButton", _descriptor11$7, _this2), _initDefineProp$34(_this2, "expandedButton", _descriptor12$6, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return WorkspaceStyle;
}(StyleSheet), _descriptor4$22 = _applyDecoratedDescriptor$34(_class3$22.prototype, "actionButtons", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            whiteSpace: "nowrap",
            padding: "5px 0",
            float: "right",
            ">*": {
                marginRight: "5px",
                display: "inline-block"
            },
            paddingLeft: "5px"
        };
    }
}), _descriptor5$20 = _applyDecoratedDescriptor$34(_class3$22.prototype, "menuButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return this.menuButtonStyle;
    }
}), _descriptor6$17 = _applyDecoratedDescriptor$34(_class3$22.prototype, "menuSelect", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return Object.assign({}, this.menuButtonStyle, {
            cursor: "pointer",
            ":hover": this.menuSelectSelectedStyle,
            ":focus": this.menuSelectBackgroundStyle,
            ":active": this.menuSelectBackgroundStyle,
            ":focus:active": this.menuSelectBackgroundStyle,
            ":hover:active": this.menuSelectSelectedStyle,
            ":hover:focus": this.menuSelectSelectedStyle,
            background: this.menuSelectBackground,
            marginLeft: "10px",
            height: "1.9em",
            verticalAlign: "middle"
        });
    }
}), _descriptor7$15 = _applyDecoratedDescriptor$34(_class3$22.prototype, "workspace", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: this.workspaceBackground
        };
    }
}), _descriptor8$12 = _applyDecoratedDescriptor$34(_class3$22.prototype, "optionButtons", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">*": {
                whiteSpace: "nowrap",
                margin: "5px 2.5px 5px 2.5px"
            },
            whiteSpace: "nowrap"
        };
    }
}), _descriptor9$9 = _applyDecoratedDescriptor$34(_class3$22.prototype, "bottomTab", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: this.themeProperties.COLOR_BACKGROUND
        };
    }
}), _descriptor10$7 = _applyDecoratedDescriptor$34(_class3$22.prototype, "tabAreaTitleArea", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            width: "100%",
            backgroundColor: this.workspaceBackground
        };
    }
}), _descriptor11$7 = _applyDecoratedDescriptor$34(_class3$22.prototype, "expandTabAreaButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">:first-child": {
                transform: "rotate(180deg)",
                fontSize: "120%",
                position: "relative",
                width: "1em",
                height: "1em",
                borderRadius: "100%",
                transition: "transform .3s ease",
                verticalAlign: "top"
            },
            ">:first-child::before": {
                position: "absolute",
                left: 0,
                top: "-.1em"
            }
        };
    }
}), _descriptor12$6 = _applyDecoratedDescriptor$34(_class3$22.prototype, "expandedButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">:first-child": {
                transform: "rotate(0deg) !important"
            }
        };
    }
}), _class3$22);
var WorkspaceTabAreaStyle = (_class5$6 = function (_DefaultTabAreaStyle) {
    inherits(WorkspaceTabAreaStyle, _DefaultTabAreaStyle);

    function WorkspaceTabAreaStyle() {
        var _ref3;

        var _temp3, _this3, _ret3;

        classCallCheck(this, WorkspaceTabAreaStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this3 = possibleConstructorReturn(this, (_ref3 = WorkspaceTabAreaStyle.__proto__ || Object.getPrototypeOf(WorkspaceTabAreaStyle)).call.apply(_ref3, [this].concat(args))), _this3), _this3.navBackground = function () {
            return _this3.themeProperties.COLOR_WORKSPACE;
        }, _this3.tabColor = function () {
            return enhance(_this3.navBackground(), .8);
        }, _this3.tabHoverBackground = function () {
            return enhance(_this3.navBackground(), .1);
        }, _this3.tabHoverColor = function () {
            return enhance(_this3.navBackground(), .9);
        }, _this3.tabActiveColor = function () {
            return enhance(_this3.navBackground(), 1);
        }, _this3.tabActiveBackground = function () {
            return enhance(_this3.navBackground(), -.2);
        }, _this3.transitionTime = .2, _initDefineProp$34(_this3, "workspaceTab", _descriptor13$6, _this3), _initDefineProp$34(_this3, "tab", _descriptor14$6, _this3), _initDefineProp$34(_this3, "activeTab", _descriptor15$6, _this3), _initDefineProp$34(_this3, "nav", _descriptor16$6, _this3), _temp3), possibleConstructorReturn(_this3, _ret3);
    }

    return WorkspaceTabAreaStyle;
}(DefaultTabAreaStyle), _descriptor13$6 = _applyDecoratedDescriptor$34(_class5$6.prototype, "workspaceTab", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            position: "relative",
            ">*": {
                position: "absolute",
                height: "100%",
                width: "100%"
            }
        };
    }
}), _descriptor14$6 = _applyDecoratedDescriptor$34(_class5$6.prototype, "tab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: this.tabColor,
            border: "none",
            borderRadius: "0",
            margin: "0",
            fontSize: "14px",
            padding: "6px",
            paddingRight: "12px",
            paddingLeft: "12px",
            transition: "padding " + this.transitionTime + "s ease",
            ":hover": {
                cursor: "pointer",
                backgroundColor: this.tabHoverBackground,
                border: "none",
                color: this.tabHoverColor
            }
        };
    }
}), _descriptor15$6 = _applyDecoratedDescriptor$34(_class5$6.prototype, "activeTab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            border: "none",
            color: this.tabActiveColor,
            backgroundColor: this.tabActiveBackground,
            paddingTop: "3px",
            ":hover": {
                backgroundColor: this.tabActiveBackground,
                color: this.tabActiveColor
            }
        };
    }
}), _descriptor16$6 = _applyDecoratedDescriptor$34(_class5$6.prototype, "nav", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            border: "none",
            whiteSpace: "nowrap",
            backgroundColor: this.navBackground
        };
    }
}), _class5$6);

var WorkspaceSectionDividerStyle = (_class7$5 = function (_SectionDividerStyle) {
    inherits(WorkspaceSectionDividerStyle, _SectionDividerStyle);

    function WorkspaceSectionDividerStyle() {
        var _ref4;

        var _temp4, _this4, _ret4;

        classCallCheck(this, WorkspaceSectionDividerStyle);

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        return _ret4 = (_temp4 = (_this4 = possibleConstructorReturn(this, (_ref4 = WorkspaceSectionDividerStyle.__proto__ || Object.getPrototypeOf(WorkspaceSectionDividerStyle)).call.apply(_ref4, [this].concat(args))), _this4), _this4.transitionTime = 0.3, _this4.barPadding = 0, _this4.barThickness = 5, _this4.dividerColor = function () {
            return enhance(_this4.themeProperties.COLOR_WORKSPACE, .3);
        }, _initDefineProp$34(_this4, "animatedSectionDivider", _descriptor17$6, _this4), _temp4), possibleConstructorReturn(_this4, _ret4);
    }

    return WorkspaceSectionDividerStyle;
}(SectionDividerStyle), _descriptor17$6 = _applyDecoratedDescriptor$34(_class7$5.prototype, "animatedSectionDivider", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">*": {
                transition: this.transitionTime + "s height ease"
            }
        };
    }
}), _class7$5);

var WorkspaceHorizontalOverflowStyle = function (_HorizontalOverflowSt) {
    inherits(WorkspaceHorizontalOverflowStyle, _HorizontalOverflowSt);

    function WorkspaceHorizontalOverflowStyle() {
        var _ref5;

        var _temp5, _this5, _ret5;

        classCallCheck(this, WorkspaceHorizontalOverflowStyle);

        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
        }

        return _ret5 = (_temp5 = (_this5 = possibleConstructorReturn(this, (_ref5 = WorkspaceHorizontalOverflowStyle.__proto__ || Object.getPrototypeOf(WorkspaceHorizontalOverflowStyle)).call.apply(_ref5, [this].concat(args))), _this5), _this5.baseColor = function () {
            return _this5.themeProperties.COLOR_WORKSPACE;
        }, _temp5), possibleConstructorReturn(_this5, _ret5);
    }

    return WorkspaceHorizontalOverflowStyle;
}(HorizontalOverflowStyle);

var workspaceButtonStyle = new WorkspaceButtonStyle();

var _dec$35, _class$72, _dec2$14, _class2$13, _dec3$3, _class3$23;

var FileSavingLabel = function (_Label) {
    inherits(FileSavingLabel, _Label);

    function FileSavingLabel(options) {
        classCallCheck(this, FileSavingLabel);

        var _this = possibleConstructorReturn(this, (FileSavingLabel.__proto__ || Object.getPrototypeOf(FileSavingLabel)).call(this, options));

        _this.fileUnsavedListener = function () {
            _this.updateLabel();
        };

        _this.fileSavingListener = function () {
            _this.updateLabel();
        };

        _this.fileSavedListener = function () {
            _this.updateLabel();
            setTimeout(function () {
                if (_this.file.isSaved()) {
                    _this.hide();
                }
            }, 1500);
        };
        return _this;
    }

    createClass(FileSavingLabel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(FileSavingLabel.prototype.__proto__ || Object.getPrototypeOf(FileSavingLabel.prototype), "extraNodeAttributes", this).call(this, attr);
            if (!this.file) {
                attr.addClass("hidden");
            }
        }
    }, {
        key: "updateLabel",
        value: function updateLabel() {
            this.show();
            if (this.file.isSaved()) {
                this.setLabel(UI.T("Saved"));
            } else {
                if (this.file.isSavedInBrowser()) {
                    this.setLabel(UI.T("Saved locally"));
                    return;
                }
                if (this.file.isSaving) {
                    this.setLabel(UI.T("Saving..."));
                } else {
                    this.setLabel(UI.T("Unsaved changes"));
                }
            }
        }
    }, {
        key: "setFile",
        value: function setFile(file) {
            if (this.fileListeners) {
                this.fileListeners.cleanup();
            }
            this.file = file;
            this.updateLabel();
            if (this.file.isSaved) {
                this.hide();
            }
            this.fileListeners = new CleanupJobs([this.file.addListener("unsaved", this.fileUnsavedListener), this.file.addListener("saving", this.fileSavingListener), this.file.addListener("saved", this.fileSavedListener)]);
        }
    }]);
    return FileSavingLabel;
}(Label);

var WorkspaceTabArea = (_dec$35 = registerStyle(WorkspaceTabAreaStyle), _dec$35(_class$72 = function (_TabArea) {
    inherits(WorkspaceTabArea, _TabArea);

    function WorkspaceTabArea() {
        classCallCheck(this, WorkspaceTabArea);
        return possibleConstructorReturn(this, (WorkspaceTabArea.__proto__ || Object.getPrototypeOf(WorkspaceTabArea)).apply(this, arguments));
    }

    createClass(WorkspaceTabArea, [{
        key: "getSwitcher",
        value: function getSwitcher(tabPanels) {
            var switcher = get(WorkspaceTabArea.prototype.__proto__ || Object.getPrototypeOf(WorkspaceTabArea.prototype), "getSwitcher", this).call(this, tabPanels);
            switcher.addClass(this.styleSheet.workspaceTab);
            return switcher;
        }
    }, {
        key: "getTitleArea",
        value: function getTitleArea(tabTitles) {
            return UI.createElement(
                HorizontalOverflow,
                { ref: "titleArea", className: this.styleSheet.nav,
                    styleSheet: WorkspaceHorizontalOverflowStyle },
                tabTitles
            );
        }
    }]);
    return WorkspaceTabArea;
}(TabArea)) || _class$72);

var WorkspaceDividerBar = (_dec2$14 = registerStyle(WorkspaceSectionDividerStyle), _dec2$14(_class2$13 = function (_DividerBar) {
    inherits(WorkspaceDividerBar, _DividerBar);

    function WorkspaceDividerBar() {
        classCallCheck(this, WorkspaceDividerBar);
        return possibleConstructorReturn(this, (WorkspaceDividerBar.__proto__ || Object.getPrototypeOf(WorkspaceDividerBar)).apply(this, arguments));
    }

    return WorkspaceDividerBar;
}(DividerBar$$1)) || _class2$13);

var WorkspaceSectionDivider = (_dec3$3 = registerStyle(WorkspaceSectionDividerStyle), _dec3$3(_class3$23 = function (_SectionDivider) {
    inherits(WorkspaceSectionDivider, _SectionDivider);

    function WorkspaceSectionDivider() {
        classCallCheck(this, WorkspaceSectionDivider);
        return possibleConstructorReturn(this, (WorkspaceSectionDivider.__proto__ || Object.getPrototypeOf(WorkspaceSectionDivider)).apply(this, arguments));
    }

    createClass(WorkspaceSectionDivider, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(WorkspaceSectionDivider.prototype.__proto__ || Object.getPrototypeOf(WorkspaceSectionDivider.prototype), "getDefaultOptions", this).call(this), {
                autoCollapse: true
            });
        }
    }, {
        key: "getDividerBarClass",
        value: function getDividerBarClass() {
            return WorkspaceDividerBar;
        }
    }, {
        key: "isCollapsed",
        value: function isCollapsed(child) {
            return child.collapsed;
        }
    }, {
        key: "animateAceResize",
        value: function animateAceResize() {
            var _this5 = this;

            var dispatchResize = function dispatchResize() {
                _this5.panels[0].dispatch("resize");
                _this5.animationId = requestAnimationFrame(dispatchResize);
            };
            this.animationId = requestAnimationFrame(dispatchResize);
        }
    }, {
        key: "cancelAceResizeAnimation",
        value: function cancelAceResizeAnimation() {
            cancelAnimationFrame(this.animationId);
            delete this.animationId;
        }
    }, {
        key: "collapseChild",
        value: function collapseChild(index) {
            var _this6 = this;

            if (index === 0) {
                return;
            }

            if (this.clearListeners) {
                this.clearListeners();
            }

            var topPanel = this.panels[0];
            var bottomPanel = this.panels[1];

            this.addClass(this.styleSheet.animatedSectionDivider);
            this.dividers[0].hide();
            this.setDimension(topPanel, "100%");
            this.setDimension(bottomPanel, 0);

            this.animateAceResize();

            setTimeout(function () {
                _this6.removeClass(_this6.styleSheet.animatedSectionDivider);
                _this6.cancelAceResizeAnimation();
                bottomPanel.collapsed = true;
            }, this.styleSheet.transitionTime * 1000);

            this.dispatch("collapse");
        }
    }, {
        key: "expandChild",
        value: function expandChild(index) {
            var _this7 = this;

            if (index === 0) {
                return;
            }
            var topPanel = this.panels[0];
            var bottomPanel = this.panels[1];

            this.addClass(this.styleSheet.animatedSectionDivider);
            this.setDimension(bottomPanel, "30%");
            this.setDimension(topPanel, "70%");

            this.animateAceResize();

            setTimeout(function () {
                _this7.removeClass(_this7.styleSheet.animatedSectionDivider);
                _this7.cancelAceResizeAnimation();
                _this7.dividers[0].show();
                bottomPanel.collapsed = false;
            }, this.styleSheet.transitionTime * 1000);
        }
    }]);
    return WorkspaceSectionDivider;
}(SectionDivider$$1)) || _class3$23);

var WorkspaceSettingsPanel = function (_UI$Element) {
    inherits(WorkspaceSettingsPanel, _UI$Element);

    function WorkspaceSettingsPanel() {
        classCallCheck(this, WorkspaceSettingsPanel);
        return possibleConstructorReturn(this, (WorkspaceSettingsPanel.__proto__ || Object.getPrototypeOf(WorkspaceSettingsPanel)).apply(this, arguments));
    }

    createClass(WorkspaceSettingsPanel, [{
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            var user = UserStore.getCurrentUser();
            // TODO(@gem): Ugly hack, fix this in Select
            this.aceThemeSelect.set(AceTheme.getDefaultTheme());
            this.aceThemeSelect.addChangeListener(function () {
                user.saveCustomSetting("workspace:aceTheme", _this2.aceThemeSelect.get().id);
            });
            this.codeFontSizeInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:codeFontSize", _this2.codeFontSizeInput.getValue());
            });
            this.fileFontSizeInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:fileFontSize", _this2.fileFontSizeInput.getValue());
            });
            this.tabSizeInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:tabSize", _this2.tabSizeInput.getValue());
            });
            this.showLineNumberInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:showLineNumber", _this2.showLineNumberInput.getValue());
            });
            this.showPrintMarginInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:showPrintMargin", _this2.showPrintMarginInput.getValue());
            });
            this.printMarginSizeInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:printMarginSize", _this2.printMarginSizeInput.getValue());
            });
            this.enableBasicAutocompletionInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:enableBasicAutocompletion", _this2.enableBasicAutocompletionInput.getValue());
            });
            this.enableLiveAutocompletionInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:enableLiveAutocompletion", _this2.enableLiveAutocompletionInput.getValue());
            });
            this.enableSnippetsInput.addChangeListener(function () {
                user.saveCustomSetting("workspace:enableSnippets", _this2.enableSnippetsInput.getValue());
            });
            this.aceKeyboardHandlerSelect.set(AceKeyboardHandler.getDefaultKeyboardHandler());
            this.aceKeyboardHandlerSelect.addChangeListener(function () {
                user.saveCustomSetting("workspace:aceKeyboardHandler", _this2.aceKeyboardHandlerSelect.get().id);
            });
        }
    }, {
        key: "render",
        value: function render() {
            var user = UserStore.getCurrentUser();
            return [UI.createElement(
                Form,
                { orientation: Orientation.VERTICAL,
                    style: { height: "330px", background: "#fff", display: "block", "overflow-y": "auto", "overflow-x": "hidden", padding: "10px" }, role: "menu" },
                UI.createElement(
                    FormField,
                    { label: UI.T("Theme") },
                    UI.createElement(Select, { options: AceTheme.all(), ref: "aceThemeSelect",
                        selected: AceTheme.getDefaultTheme() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Keyboard handler") },
                    UI.createElement(Select, { options: AceKeyboardHandler.all(), ref: "aceKeyboardHandlerSelect",
                        selected: AceKeyboardHandler.getDefaultKeyboardHandler() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Code font size") },
                    UI.createElement(NumberInput, { ref: "codeFontSizeInput", min: "6", max: "36",
                        value: user.getCodeFontSize() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Files font size") },
                    UI.createElement(NumberInput, { ref: "fileFontSizeInput", min: "6", max: "36",
                        value: user.getFileFontSize() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Tab size") },
                    UI.createElement(NumberInput, { ref: "tabSizeInput", min: "2", max: "8",
                        value: user.getTabSize() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Show line number"), inline: false },
                    UI.createElement(CheckboxInput, { ref: "showLineNumberInput",
                        checked: user.getShowLineNumber() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Show print margin"), inline: false },
                    UI.createElement(CheckboxInput, { ref: "showPrintMarginInput",
                        checked: user.getShowPrintMargin() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Print margin column") },
                    UI.createElement(NumberInput, { ref: "printMarginSizeInput", min: "60", max: "180",
                        value: user.getPrintMarginSize() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Enable basic autocompletion"), inline: false },
                    UI.createElement(CheckboxInput, { ref: "enableBasicAutocompletionInput",
                        checked: user.getBasicAutocompletionStatus() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Enable live autocompletion"), inline: false },
                    UI.createElement(CheckboxInput, { ref: "enableLiveAutocompletionInput",
                        checked: user.getLiveAutocompletionStatus() })
                ),
                UI.createElement(
                    FormField,
                    { label: UI.T("Enable snippets"), inline: false },
                    UI.createElement(CheckboxInput, { ref: "enableSnippetsInput",
                        checked: user.getSnippetsStatus() })
                )
            )];
        }
    }]);
    return WorkspaceSettingsPanel;
}(UI.Element);

var ProgrammingLanguageSourceTemplate = function (_UI$Element2) {
    inherits(ProgrammingLanguageSourceTemplate, _UI$Element2);

    function ProgrammingLanguageSourceTemplate() {
        classCallCheck(this, ProgrammingLanguageSourceTemplate);
        return possibleConstructorReturn(this, (ProgrammingLanguageSourceTemplate.__proto__ || Object.getPrototypeOf(ProgrammingLanguageSourceTemplate)).apply(this, arguments));
    }

    createClass(ProgrammingLanguageSourceTemplate, [{
        key: "getUser",
        value: function getUser() {
            return this.options.user;
        }
    }, {
        key: "getProgrammingLanguage",
        value: function getProgrammingLanguage() {
            return this.options.programmingLanguage;
        }
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            var programmingLanguage = this.getProgrammingLanguage();
            return [UI.createElement(CodeEditor, { ref: "codeEditor", aceMode: programmingLanguage.aceMode,
                value: programmingLanguage.getDefaultSource(),
                maxLines: 32 }), UI.createElement(Button, { size: Size.SMALL, faIcon: "save", style: { marginTop: "10px" },
                label: [UI.T(" Save template for"), " " + programmingLanguage.name],
                level: Level.INFO, onClick: function onClick() {
                    return _this4.saveTemplate();
                } })];
        }
    }, {
        key: "saveTemplate",
        value: function saveTemplate() {
            var user = this.getUser();
            var programmingLanguage = this.getProgrammingLanguage();
            var value = this.codeEditor.getValue();

            user.saveCustomSetting("workspace:programmingLanguage:" + programmingLanguage.id + ":defaultSource", value);
        }
    }]);
    return ProgrammingLanguageSourceTemplate;
}(UI.Element);

var AllProgrammingLanguagesTemplateEditor = function (_UI$Element3) {
    inherits(AllProgrammingLanguagesTemplateEditor, _UI$Element3);

    function AllProgrammingLanguagesTemplateEditor() {
        classCallCheck(this, AllProgrammingLanguagesTemplateEditor);
        return possibleConstructorReturn(this, (AllProgrammingLanguagesTemplateEditor.__proto__ || Object.getPrototypeOf(AllProgrammingLanguagesTemplateEditor)).apply(this, arguments));
    }

    createClass(AllProgrammingLanguagesTemplateEditor, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(AllProgrammingLanguagesTemplateEditor.prototype.__proto__ || Object.getPrototypeOf(AllProgrammingLanguagesTemplateEditor.prototype), "setOptions", this).call(this, options);
            this.languageTemplatesMap = new Map();

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = ProgrammingLanguage.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var programmingLanguage = _step.value;

                    this.languageTemplatesMap.set(programmingLanguage, UI.createElement(ProgrammingLanguageSourceTemplate, { user: this.options.user, programmingLanguage: programmingLanguage }));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                FormField,
                { label: UI.T("Edit your default code for"), style: { maxWidth: "800px" } },
                UI.createElement(Select, { ref: "programmingLanguageSelect", options: ProgrammingLanguage.all(), style: { maxWidth: "300px" } })
            ), UI.createElement(
                Switcher,
                { ref: "templateSwitcher" },
                Array.from(this.languageTemplatesMap.values())
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            var defaultLanguage = ProgrammingLanguage.getDefaultLanguage();

            this.programmingLanguageSelect.addChangeListener(function () {
                var selectedProgrammingLanguage = _this6.programmingLanguageSelect.get();
                _this6.templateSwitcher.setActive(_this6.languageTemplatesMap.get(selectedProgrammingLanguage));
            });

            this.templateSwitcher.setActive(this.languageTemplatesMap.get(defaultLanguage));
        }
    }]);
    return AllProgrammingLanguagesTemplateEditor;
}(UI.Element);

var UserWorkspaceSettingsPanel = function (_Panel) {
    inherits(UserWorkspaceSettingsPanel, _Panel);

    function UserWorkspaceSettingsPanel() {
        classCallCheck(this, UserWorkspaceSettingsPanel);
        return possibleConstructorReturn(this, (UserWorkspaceSettingsPanel.__proto__ || Object.getPrototypeOf(UserWorkspaceSettingsPanel)).apply(this, arguments));
    }

    createClass(UserWorkspaceSettingsPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(UserWorkspaceSettingsPanel.prototype.__proto__ || Object.getPrototypeOf(UserWorkspaceSettingsPanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.SMALL);
        }
    }, {
        key: "savePreferredProgrammingLanguage",
        value: function savePreferredProgrammingLanguage(programmingLanguage) {
            this.options.user.saveCustomSetting("workspace:preferredProgrammingLanguage", programmingLanguage.id);
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Workspace settings");
        }
    }, {
        key: "render",
        value: function render() {
            this.options.user = UserStore.getCurrentUser();

            return [UI.createElement(
                FormField,
                { style: { marginTop: "5px", marginBottom: "5px", maxWidth: "800px" }, label: UI.T("Preferred language:") },
                UI.createElement(Select, { ref: "preferredProgrammingLanguageSelect", options: ProgrammingLanguage.all(),
                    style: { maxWidth: "300px" } })
            ), UI.createElement("hr", null), UI.createElement(AllProgrammingLanguagesTemplateEditor, {
                style: { marginTop: "5px", marginBottom: "5px" },
                user: this.options.user })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            var defaultLanguage = ProgrammingLanguage.getDefaultLanguage();
            this.preferredProgrammingLanguageSelect.set(defaultLanguage);
            this.preferredProgrammingLanguageSelect.addChangeListener(function () {
                _this8.savePreferredProgrammingLanguage(_this8.preferredProgrammingLanguageSelect.get());
            });
        }
    }]);
    return UserWorkspaceSettingsPanel;
}(Panel);

function _applyDecoratedDescriptor$35(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var UserEditor = function (_CodeEditor) {
    inherits(UserEditor, _CodeEditor);

    function UserEditor() {
        classCallCheck(this, UserEditor);
        return possibleConstructorReturn(this, (UserEditor.__proto__ || Object.getPrototypeOf(UserEditor)).apply(this, arguments));
    }

    createClass(UserEditor, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            var user = UserStore.getCurrentUser();
            var defaultOptions = {
                aceKeyboardHandler: AceKeyboardHandler.getDefaultKeyboardHandler(),
                aceTheme: AceTheme.getDefaultTheme(),
                fontSize: user.getFileFontSize(),
                tabSize: user.getTabSize(),
                showLineNumber: user.getShowLineNumber()
            };
            return defaultOptions;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            var currentUser = UserStore.getCurrentUser();
            if (currentUser) {
                this.attachListener(currentUser, "updateCustomSetting", function (event) {
                    _this2.dispatch(event.key, event.value);
                });
            }
            this.addListener("workspace:aceTheme", function (aceThemeId) {
                var aceTheme = AceTheme.get(aceThemeId);
                _this2.setAceTheme(aceTheme);
            });
            this.addListener("workspace:tabSize", function (tabSize) {
                _this2.setAceTabSize(tabSize);
            });
            this.addListener("workspace:showLineNumber", function (showLineNumber) {
                _this2.setAceLineNumberVisible(showLineNumber);
            });
            this.addListener("workspace:enableBasicAutocompletion", function (value) {
                _this2.setBasicAutocompletion(value);
            });
            this.addListener("workspace:enableLiveAutocompletion", function (value) {
                _this2.setLiveAutocompletion(value);
            });
            this.addListener("workspace:enableSnippets", function (value) {
                _this2.setSnippets(value);
            });
            this.addListener("workspace:aceKeyboardHandler", function (aceKeyboardHandlerId) {
                var aceKeyboardHandler = AceKeyboardHandler.get(aceKeyboardHandlerId);
                _this2.setAceKeyboardHandler(aceKeyboardHandler);
            });
            get(UserEditor.prototype.__proto__ || Object.getPrototypeOf(UserEditor.prototype), "onMount", this).call(this);
        }
    }]);
    return UserEditor;
}(CodeEditor);

var UserInputEditor = function (_UserEditor) {
    inherits(UserInputEditor, _UserEditor);

    function UserInputEditor() {
        classCallCheck(this, UserInputEditor);
        return possibleConstructorReturn(this, (UserInputEditor.__proto__ || Object.getPrototypeOf(UserInputEditor)).apply(this, arguments));
    }

    createClass(UserInputEditor, [{
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.addListener("workspace:fileFontSize", function (fontSize) {
                _this4.setAceFontSize(fontSize);
            });
            get(UserInputEditor.prototype.__proto__ || Object.getPrototypeOf(UserInputEditor.prototype), "onMount", this).call(this);
        }
    }]);
    return UserInputEditor;
}(UserEditor);

var UserCodeEditor = function (_UserEditor2) {
    inherits(UserCodeEditor, _UserEditor2);

    function UserCodeEditor() {
        classCallCheck(this, UserCodeEditor);
        return possibleConstructorReturn(this, (UserCodeEditor.__proto__ || Object.getPrototypeOf(UserCodeEditor)).apply(this, arguments));
    }

    createClass(UserCodeEditor, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            var options = get(UserCodeEditor.prototype.__proto__ || Object.getPrototypeOf(UserCodeEditor.prototype), "getDefaultOptions", this).call(this);
            options.fontSize = UserStore.getCurrentUser().getCodeFontSize();
            return options;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.addListener("workspace:codeFontSize", function (fontSize) {
                _this6.setAceFontSize(fontSize);
            });
            this.addListener("workspace:showPrintMargin", function (showPrintMargin) {
                _this6.setAcePrintMarginVisible(showPrintMargin);
            });
            this.addListener("workspace:printMarginSize", function (printMarginSize) {
                _this6.setAcePrintMarginSize(printMarginSize);
            });
            get(UserCodeEditor.prototype.__proto__ || Object.getPrototypeOf(UserCodeEditor.prototype), "onMount", this).call(this);
        }
    }]);
    return UserCodeEditor;
}(UserEditor);

// Class that acts like a CodeEditor backed by a file-like object
// The file-like object needs to support
// - setValue(newValue, shouldSaveNow)
// - getValue()
// - addListener("update", fileUpdateEvent);
// - dispatch("changeByUser", fileUpdateEvent);
var FileCodeEditorMixin = function FileCodeEditorMixin(BaseCodeEditor) {
    var _class;

    return _class = function (_BaseCodeEditor) {
        inherits(FileCodeEditor, _BaseCodeEditor);

        function FileCodeEditor() {
            classCallCheck(this, FileCodeEditor);
            return possibleConstructorReturn(this, (FileCodeEditor.__proto__ || Object.getPrototypeOf(FileCodeEditor)).apply(this, arguments));
        }

        createClass(FileCodeEditor, [{
            key: "onDelayedMount",
            value: function onDelayedMount() {
                var _this8 = this;

                get(FileCodeEditor.prototype.__proto__ || Object.getPrototypeOf(FileCodeEditor.prototype), "onDelayedMount", this).call(this);
                if (this.options.file) {
                    this.setFile(this.options.file);
                }
                this.addAceSessionChangeListener(function (event) {
                    //Ignore when we're setting these values in code
                    //Whoever changes the value manually should issue a custom events if he want
                    if (_this8.apiChange) {
                        return;
                    }

                    event.newValue = _this8.getValue();
                    event.file = _this8.file;

                    _this8.file.setValue(event.newValue, true);
                    _this8.file.dispatch("userChanged", event);
                });
            }
        }, {
            key: "setFile",
            value: function setFile(file, programmingLanguage) {
                var _this9 = this;

                this.file = file;
                this.setValue(file.getValue());
                if (!programmingLanguage && file.hasOwnProperty("getProgrammingLanguage")) {
                    programmingLanguage = file.getProgrammingLanguage();
                }
                if (programmingLanguage) {
                    this.setAceMode(programmingLanguage);
                }

                var browserFileVersion = file.getBrowserVersion();

                if (browserFileVersion && browserFileVersion.serverTime > (file.serverLastSaved || 0) && browserFileVersion.value != file.getValue()) {
                    console.log("Using browser version for file ", file.getName());
                    this.setValue(browserFileVersion.value);
                    file.setValue(browserFileVersion.value);
                }

                if (this.fileListener) {
                    this.fileListener.remove();
                }

                this.fileListener = this.file.addListener("updateExternal", function (event) {
                    console.log("File listener for file: ", _this9.file);
                    _this9.setValue(_this9.file.getValue());
                });
            }
        }, {
            key: "getFile",
            value: function getFile() {
                return this.file;
            }
        }]);
        return FileCodeEditor;
    }(BaseCodeEditor), _applyDecoratedDescriptor$35(_class.prototype, "setFile", [enqueueIfNotLoaded], Object.getOwnPropertyDescriptor(_class.prototype, "setFile"), _class.prototype), _class;
};

var InputFileEditor = FileCodeEditorMixin(UserInputEditor);
var FileCodeEditor = FileCodeEditorMixin(UserCodeEditor);

var _dec$36, _class$73;

var WorkspacePanel = (_dec$36 = registerStyle(WorkspaceStyle), _dec$36(_class$73 = function (_FullScreenable) {
    inherits(WorkspacePanel, _FullScreenable);

    function WorkspacePanel() {
        classCallCheck(this, WorkspacePanel);
        return possibleConstructorReturn(this, (WorkspacePanel.__proto__ || Object.getPrototypeOf(WorkspacePanel)).apply(this, arguments));
    }

    createClass(WorkspacePanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(WorkspacePanel.prototype.__proto__ || Object.getPrototypeOf(WorkspacePanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.workspace);
        }
    }, {
        key: "addFullscreenListeners",
        value: function addFullscreenListeners() {
            var _this2 = this;

            this.addListener("enterFullScreen", function () {
                _this2.fullScreenButton.setFaIcon("compress");
            });

            this.addListener("exitFullScreen", function () {
                _this2.fullScreenButton.setFaIcon("expand");
            });

            this.fullScreenButton.addClickListener(function () {
                _this2.toggleFullScreen();
                _this2.resizeCodeEditor();
            });
        }
    }, {
        key: "addUploadButtonListeners",
        value: function addUploadButtonListeners() {
            var _this3 = this;

            if (Device.getBrowser() === "Firefox") {
                console.log("Use a different browser, for god's sake, it's for the good of the Realm.");
                this.uploadFileButton.addClickListener(function (event) {
                    _this3.uploadFile.node.click(event);
                });
            }

            this.uploadFile.node.onchange = function () {
                var reader = new FileReader();
                var file = _this3.uploadFile.getFile();
                console.log(file);
                if (!file) {
                    return;
                }
                if (file.size > 1e6) {
                    _this3.fileWarningModal.show();
                    console.warn("File ", file.name, " too large. Skipping upload.");
                    _this3.uploadFile.setValue("");
                    return;
                }
                reader.onprogress = function () {
                    _this3.uploadFileButton.setLevel(Level.WARNING);
                    _this3.uploadFileButton.setLabel(UI.T("Uploading..."));
                    _this3.uploadFileButton.disable();
                };
                reader.onload = function (e) {
                    _this3.uploadFileButton.setLevel(Level.SUCCESS);
                    _this3.uploadFileButton.setLabel(UI.T("Successfully uploaded!"));
                    setTimeout(function () {
                        _this3.uploadFileButton.enable();
                        _this3.uploadFileButton.setLevel(Level.INFO);
                        _this3.uploadFileButton.setLabel(UI.T("Open file"));
                    }, 700);
                    var text = e.currentTarget.result;
                    text.replace("\r\n", "\n");
                    _this3.codeEditor.setValue(text, 1);
                    _this3.uploadFile.setValue("");
                    _this3.dispatch("finishedFileUpload");
                };
                reader.readAsText(file);
            };
        }
    }, {
        key: "addTabAreaListeners",
        value: function addTabAreaListeners() {
            var _this4 = this;

            setTimeout(function () {
                _this4.tabArea.titleArea.appendChild(UI.createElement("div", { style: { flex: "1" } }));
                _this4.tabArea.titleArea.appendChild(UI.createElement(Button, { faIcon: "chevron-down", size: Size.LARGE,
                    onClick: function onClick() {
                        return _this4.sectionDivider.collapseChild(1);
                    },
                    className: _this4.styleSheet.menuButton }));
            }, 1000);

            this.expandTabAreaButton.addClickListener(function () {
                if (_this4.sectionDivider.panels[1].collapsed) {
                    _this4.expandTabAreaButton.addClass(_this4.styleSheet.expandedButton);
                } else {
                    _this4.expandTabAreaButton.removeClass(_this4.styleSheet.expandedButton);
                }
                _this4.sectionDivider.toggleChild(1);
            });
            this.attachListener(this.sectionDivider, "collapse", function () {
                _this4.expandTabAreaButton.removeClass(_this4.styleSheet.expandedButton);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            get(WorkspacePanel.prototype.__proto__ || Object.getPrototypeOf(WorkspacePanel.prototype), "onMount", this).call(this);

            this.codeSectionPanel.addListener("resize", function () {
                return _this5.resizeCodeEditor();
            });
            this.addListener("resize", function () {
                _this5.workspaceButtons.dispatch("resize");
                _this5.actionButtons.dispatch("resize");
                _this5.tabArea.titleArea.dispatch("resize");
            });

            this.settingsButton.addClickListener(function () {
                _this5.workspaceSettingsWindow.toggleClass("hidden");
            });

            setTimeout(function () {
                _this5.addTabAreaListeners();
                _this5.addFullscreenListeners();
                _this5.addUploadButtonListeners();
            });
        }
    }, {
        key: "resizeCodeEditor",
        value: function resizeCodeEditor() {
            this.codeEditor.dispatch("resize");
            this.tabArea.dispatch("resize");
        }
    }, {
        key: "maximizeTabSection",
        value: function maximizeTabSection() {
            this.expandTabAreaButton.addClass(this.styleSheet.expandedButton);
            this.sectionDivider.expandChild(1);
        }
    }, {
        key: "render",
        value: function render() {
            var user = UserStore.getCurrentUser();
            this.codeEditorOptions = {
                aceKeyboardHandler: AceKeyboardHandler.getDefaultKeyboardHandler(),
                aceTheme: AceTheme.getDefaultTheme(),
                fontSize: user.getCodeFontSize(),
                tabSize: user.getTabSize(),
                showLineNumber: user.getShowLineNumber(),
                showPrintMargin: user.getShowPrintMargin(),
                printMarginSize: user.getPrintMarginSize(),
                enableBasicAutocompletion: user.getBasicAutocompletionStatus(),
                enableLiveAutocompletion: user.getLiveAutocompletionStatus(),
                enableSnippets: user.getSnippetsStatus()
            };
            return [UI.createElement(
                Modal,
                { ref: "fileWarningModal" },
                UI.createElement(
                    "h5",
                    { style: { color: "red" } },
                    "File is too large. Skipping upload."
                )
            ), UI.createElement(
                "div",
                { style: { height: "100%", width: "100%", display: "flex", flexDirection: "column" } },
                UI.createElement(
                    WorkspaceSectionDivider,
                    { ref: "sectionDivider", orientation: Orientation.VERTICAL,
                        style: { width: "100%", height: "100%", overflow: "hidden", flex: "1" } },
                    UI.createElement(
                        Panel,
                        { ref: "codeSectionPanel", className: "row codeSection",
                            style: { margin: "0px", height: "70%", boxSizing: "border-box", position: "relative",
                                display: "flex", flexDirection: "column" } },
                        UI.createElement(
                            CSAHorizontalOverflow,
                            { ref: "workspaceButtons", className: this.styleSheet.topMenu,
                                styleSheet: WorkspaceHorizontalOverflowStyle },
                            UI.createElement(
                                "div",
                                { ref: "optionButtonsTopLeft", className: this.styleSheet.optionButtons },
                                UI.createElement(
                                    Button,
                                    { ref: "uploadFileButton", className: this.styleSheet.menuButton + " file-upload-button",
                                        label: UI.T("Open file"), faIcon: "upload", style: { position: "relative", overflow: "hidden" },
                                        HTMLtitle: "Press " + (navigator.platform.match("Mac") ? "Cmd" : "Ctrl") + " + O to open file"
                                    },
                                    UI.createElement(FileInput, { ref: "uploadFile", style: { position: "absolute", top: "0", right: "0", margin: "0", height: "200%",
                                            padding: "0", cursor: "pointer", opacity: "0", filter: "alpha(opacity=0)" } })
                                ),
                                UI.createElement(Select, { ref: "programmingLanguageSelect", options: ProgrammingLanguage.all(), className: this.styleSheet.menuSelect,
                                    style: { minWidth: "auto" } })
                            ),
                            UI.createElement(
                                "div",
                                { style: { flex: 1, overflow: "hidden", marginLeft: "-5px", marginRight: 0 } },
                                UI.createElement(FileSavingLabel, { ref: "saveFileStatusLabel", size: Size.MEDIUM, className: this.styleSheet.menuSelect,
                                    style: { pointerEvents: "none", padding: "2px 5px", height: "initial", maxWidth: "fit-content",
                                        width: "-webkit-fill-available", textOverflow: "ellipsis", overflow: "inherit",
                                        marginBottom: "-13px" } })
                            ),
                            UI.createElement(
                                "div",
                                { ref: "optionButtonsTopRight", className: this.styleSheet.optionButtons },
                                UI.createElement(Button, { label: UI.T("Settings"), faIcon: "cog", ref: "settingsButton", className: this.styleSheet.menuButton }),
                                UI.createElement(Button, { label: UI.T("Fullscreen"), faIcon: "expand", ref: "fullScreenButton", className: this.styleSheet.menuButton,
                                    HTMLtitle: "Press " + (navigator.platform.match("Mac") ? "Cmd" : "Ctrl") + " + Enter to enter/exit full screen" })
                            )
                        ),
                        UI.createElement(
                            "div",
                            { ref: "workspaceSettingsWindow", className: "hidden",
                                style: { position: "absolute", zIndex: "2016", right: "0px", top: "40px", boxShadow: this.styleSheet.themeProperties.BASE_BOX_SHADOW } },
                            UI.createElement(WorkspaceSettingsPanel, null)
                        ),
                        UI.createElement(FileCodeEditor, _extends({ ref: "codeEditor", style: { flex: 1, height: "100%" } }, this.codeEditorOptions))
                    ),
                    UI.createElement(
                        Panel,
                        { ref: "bottomArea", className: this.styleSheet.tabSection, style: { zIndex: "20", width: "100%", right: "0", bottom: "0",
                                height: "30%", display: "flex", flexDirection: "column" }, minHeight: 50 },
                        UI.createElement(WorkspaceTabArea, { ref: "tabArea", className: "tabSection", panelClass: this.styleSheet.bottomTab,
                            style: { flexGrow: "1", width: "100%", boxSizing: "border-box", fontSize: "9.5pt" },
                            titleAreaClass: this.styleSheet.tabAreaTitleArea })
                    )
                ),
                UI.createElement(
                    CSAHorizontalOverflow,
                    { styleSheet: WorkspaceHorizontalOverflowStyle, ref: "actionButtons" },
                    UI.createElement(Button, { ref: "expandTabAreaButton", faIcon: "chevron-up", label: UI.T("Execution Details"),
                        className: this.styleSheet.menuButton + " " + this.styleSheet.expandedButton + " " + this.styleSheet.expandTabAreaButton }),
                    UI.createElement("div", { style: { flex: 1 } }),
                    UI.createElement("div", { ref: "optionButtonsBottom", className: this.styleSheet.actionButtons })
                )
            )];
        }
    }]);
    return WorkspacePanel;
}(FullScreenable(UI.Element))) || _class$73);

var WorkspacePlugin = function (_Plugin) {
    inherits(WorkspacePlugin, _Plugin);

    function WorkspacePlugin() {
        classCallCheck(this, WorkspacePlugin);
        return possibleConstructorReturn(this, (WorkspacePlugin.__proto__ || Object.getPrototypeOf(WorkspacePlugin)).apply(this, arguments));
    }

    createClass(WorkspacePlugin, [{
        key: "linkToParent",
        value: function linkToParent(parent) {
            this.workspaceIDE = parent;
        }
    }, {
        key: "refLink",
        value: function refLink(name) {
            return { parent: this, name: name };
        }
    }]);
    return WorkspacePlugin;
}(Plugin);

var _class$74, _temp$14;

var WorkspaceSettingsPlugin = (_temp$14 = _class$74 = function (_WorkspacePlugin) {
    inherits(WorkspaceSettingsPlugin, _WorkspacePlugin);

    function WorkspaceSettingsPlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceSettingsPlugin);

        var _this = possibleConstructorReturn(this, (WorkspaceSettingsPlugin.__proto__ || Object.getPrototypeOf(WorkspaceSettingsPlugin)).call(this, workspaceIDE));

        _this.workspaceIDE.addListener("initDone", function () {
            _this.panel = _this.workspaceIDE.workspaceSettings;
            _this.addUserSettingsListeners();
        });
        return _this;
    }

    createClass(WorkspaceSettingsPlugin, [{
        key: "addUserSettingsListeners",
        value: function addUserSettingsListeners() {
            var _this2 = this;

            this.attachListener(UserStore.getCurrentUser(), "updateCustomSetting", function (event) {
                _this2.dispatch(event.key, event.value);
            });
        }
    }], [{
        key: "pluginName",
        value: function pluginName() {
            return "SettingsManager";
        }
    }]);
    return WorkspaceSettingsPlugin;
}(WorkspacePlugin), _class$74.priorityIndex = 100, _temp$14);

var CustomRun = function (_BaseUserSubmission) {
    inherits(CustomRun, _BaseUserSubmission);

    function CustomRun() {
        classCallCheck(this, CustomRun);
        return possibleConstructorReturn(this, (CustomRun.__proto__ || Object.getPrototypeOf(CustomRun)).apply(this, arguments));
    }

    createClass(CustomRun, [{
        key: "buildPublicUrl",
        value: function buildPublicUrl() {
            return location.origin + "/code/" + this.urlHash + "/";
        }
    }, {
        key: "setPublic",
        value: function setPublic() {
            var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NOOP_FUNCTION;

            if (this.isPublic) {
                callback();
                return;
            }
            this.makePublic(callback);
        }
    }, {
        key: "makePublic",
        value: function makePublic() {
            var _this2 = this;

            var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NOOP_FUNCTION;

            var request = {
                customRunId: this.id,
                makePublic: true
            };

            Ajax.postJSON("/eval/edit_custom_run/", request).then(function (data) {
                // TODO: Data should be an event to trigger listeners
                _this2.isPublic = true;
                _this2.urlHash = data.urlHash;
                callback();
            }, NOOP_FUNCTION);
        }
    }]);
    return CustomRun;
}(BaseUserSubmission);

var CustomRunStore = new (AjaxFetchMixin(GenericObjectStore))("customrun", CustomRun, {
    fetchURL: "/eval/get_custom_run/",
    maxFetchObjectCount: 1
});

var _class$75, _temp$15;

var InQueuePopupManagerClass = (_temp$15 = _class$75 = function () {
    function InQueuePopupManagerClass() {
        classCallCheck(this, InQueuePopupManagerClass);
    }

    createClass(InQueuePopupManagerClass, [{
        key: "showPopup",
        value: function showPopup(target, estimatedWait) {
            var _this = this;

            this.popup = BasePopup.create(document.body, {
                target: target,
                bodyPlaced: true,
                children: this.constructor.getTextForDuration(estimatedWait),
                arrowDirection: Direction.DOWN,
                style: {
                    width: "200px"
                }
            });
            var destroyPopupTimerId = setTimeout(function () {
                _this.cancelInQueuePopup();
            }, this.constructor.POPUP_HANGTIME);
            this.popup.addCleanupJob(function () {
                return clearTimeout(destroyPopupTimerId);
            });
        }
    }, {
        key: "scheduleInQueuePopup",
        value: function scheduleInQueuePopup(target, estimatedWait, callback) {
            var _this2 = this;

            this.cancelInQueuePopup();
            this.inQueuePopupTimeout = setTimeout(function () {
                _this2.showPopup(target, estimatedWait);
                if (callback) {
                    callback();
                }
            }, this.constructor.DELAY_BEFORE_POPUP);
        }
    }, {
        key: "cancelInQueuePopup",
        value: function cancelInQueuePopup() {
            if (this.inQueuePopupTimeout) {
                clearTimeout(this.inQueuePopupTimeout);
                delete this.inQueuePopupTimeout;
            }
            if (this.popup) {
                this.popup.destroyNode();
                delete this.popup;
            }
        }
    }], [{
        key: "getTextForDuration",
        value: function getTextForDuration(estimatedWait) {
            var formattedDuration = Formatter.duration(estimatedWait * 1000, {
                hours: true,
                minutes: true,
                seconds: true,
                lastSeparator: " and "
            });
            return "Your submission was received. The estimated queue time is " + formattedDuration + ".";
        }
    }]);
    return InQueuePopupManagerClass;
}(), _class$75.DELAY_BEFORE_POPUP = 1000, _class$75.POPUP_HANGTIME = 4000, _temp$15);


var InQueuePopupManager = new InQueuePopupManagerClass();

var _class$76, _temp$16;

var WorkspaceCustomRunPlugin = (_temp$16 = _class$76 = function (_WorkspacePlugin) {
    inherits(WorkspaceCustomRunPlugin, _WorkspacePlugin);

    function WorkspaceCustomRunPlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceCustomRunPlugin);

        var _this = possibleConstructorReturn(this, (WorkspaceCustomRunPlugin.__proto__ || Object.getPrototypeOf(WorkspaceCustomRunPlugin)).call(this, workspaceIDE));

        var tabArea = workspaceIDE.tabArea;

        var codeEditorOptions = Object.assign({}, _this.workspaceIDE.codeEditorOptions, {
            className: "custom-height",
            style: {
                height: "100%"
            },
            fontSize: UserStore.getCurrentUser().getFileFontSize(),
            enableBasicAutocompletion: false,
            enableLiveAutocompletion: false,
            enableSnippets: false
        });
        tabArea.appendChild(UI.createElement(
            Panel,
            { ref: _this.refLink("inputEditorTab"), title: UI.T("Input"), active: "true" },
            UI.createElement(InputFileEditor, _extends({ ref: _this.refLink("inputEditor") }, codeEditorOptions))
        ));

        tabArea.appendChild(UI.createElement(
            Panel,
            { ref: _this.refLink("outputEditorTab"), title: UI.T("Output") },
            UI.createElement(UserInputEditor, _extends({ ref: _this.refLink("outputEditor") }, codeEditorOptions))
        ));

        tabArea.appendChild(UI.createElement(
            Panel,
            { ref: _this.refLink("stderrEditorTab"), title: UI.T("Stderr") },
            UI.createElement(UserInputEditor, _extends({ ref: _this.refLink("stderrEditor") }, codeEditorOptions))
        ));

        tabArea.appendChild(UI.createElement(CompilationStatusPanel, { ref: _this.refLink("compilationStatusTab"), style: { height: "100%" }, title: UI.T("Compilation") }));
        tabArea.appendChild(UI.createElement(ExecutionStatusPanel, { ref: _this.refLink("executionStatusTab"), style: { height: "100%" }, title: UI.T("Execution") }));

        _this.workspace = workspaceIDE.workspace;

        _this.workspaceIDE.optionButtonsBottom.appendChild(UI.createElement(
            "span",
            { ref: _this.refLink("compilePopupContainer"), style: { position: "relative" } },
            UI.createElement(Button, { ref: _this.refLink("compileButton"), faIcon: "cogs", HTMLtitle: "Press " + (navigator.platform.match("Mac") ? "Cmd" : "Ctrl") + " + B to compile",
                className: workspaceButtonStyle.COMPILE, label: UI.T("Compile") })
        ));

        _this.workspaceIDE.optionButtonsBottom.appendChild(UI.createElement(
            "span",
            { ref: _this.refLink("runInputPopupContainer"), style: { position: "relative" } },
            UI.createElement(Button, { ref: _this.refLink("runInputButton"), HTMLtitle: "Press " + (navigator.platform.match("Mac") ? "Cmd" : "Ctrl") + " + I to run input",
                faIcon: "play", label: UI.T("Run input"), className: workspaceButtonStyle.RUN })
        ));

        _this.compileButton.addClickListener(function (event) {
            event.stopPropagation();
            _this.workspaceIDE.maximizeTabSection();
            _this.compileCode();
        });

        _this.runInputButton.addClickListener(function (event) {
            _this.workspaceIDE.maximizeTabSection();
            event.stopPropagation();
            _this.runCode();
        });

        _this.inputEditor.setFile(_this.workspace.getOrCreateFile(".stdin"));

        tabArea.addListener("resize", function () {
            _this.inputEditor.dispatch("resize");
            _this.outputEditor.dispatch("resize");
            _this.stderrEditor.dispatch("resize");
        });

        _this.exportFunctions();

        GlobalState.registerStream("workspacesession-" + _this.workspace.userId + "-" + _this.workspace.sessionId);

        CustomRunStore.addCreateListener(function (customRun) {
            _this.compilationStatusTab.setCustomRun(customRun);
            _this.executionStatusTab.setCustomRun(customRun);
        });

        WebsocketSubscriber.addListener("workspacesession-" + _this.workspace.userId + "-" + _this.workspace.sessionId, function (event) {
            if (event.type === "started") {
                _this.workspaceIDE.dispatch("compileStarted", event);
            } else if (event.type === "compile_status") {
                _this.workspaceIDE.dispatch("compileStatus", event);
            } else if (event.type === "runResults") {
                _this.workspaceIDE.dispatch("customRunTestResult", event);
            } else if (event.type === "finished") {
                _this.workspaceIDE.dispatch("customRunFinished", event);
            }
            InQueuePopupManager.cancelInQueuePopup();
        });

        _this.workspaceIDE.addListener("compileStarted", function (event) {
            _this.setCompilationStarted();
        });

        _this.workspaceIDE.addListener("compileStatus", function (event) {
            _this.setCompilationStatus(event.data);
        });

        _this.workspaceIDE.addListener("customRunTestResult", function (event) {
            _this.setCustomTestResult(event.data);
            _this.stderrEditor.dispatch("resize");
        });

        _this.workspaceIDE.addListener("submissionRunFinished", function (event) {
            _this.enableSubmission();
        });
        _this.workspaceIDE.addListener("customRunTestResult", function (event) {
            _this.enableSubmissionDelayed();
        });
        _this.workspaceIDE.addListener("customRunFinished", function (event) {
            _this.enableSubmissionDelayed();
        });

        Dispatcher.Global.addListener("loadWorkspaceInput", function (input) {
            _this.inputEditor.setValue(input);
            _this.inputEditorTab.show();
            _this.inputEditorTab.dispatch("show");
        });
        return _this;
    }

    createClass(WorkspaceCustomRunPlugin, [{
        key: "setSubmissionDisabled",
        value: function setSubmissionDisabled(disabled) {
            var internal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            // TODO: This should NOT be named setSubmissionDisabled
            this.runInputButton.setEnabled(!disabled);
            this.compileButton.setEnabled(!disabled);

            if (this.workspaceIDE.getPlugin("ContestSubmit") && internal) {
                this.workspaceIDE.getPlugin("ContestSubmit").setSubmissionDisabled(disabled, false);
            }
        }
    }, {
        key: "enableSubmission",
        value: function enableSubmission() {
            this.compileButton.setLabel(UI.T("Compile"));
            this.compileButton.setLevel("info");
            this.setSubmissionDisabled(false);
        }
    }, {
        key: "enableSubmissionDelayed",
        value: function enableSubmissionDelayed() {
            var _this2 = this;

            setTimeout(function () {
                _this2.enableSubmission();
            }, 200);
        }
        // TODO: This can be taken out and placed in an interaction layer with the website

    }, {
        key: "submitCode",
        value: function submitCode(workspaceFile, compileOnly) {
            var _this3 = this;

            this.setSubmissionDisabled(true);

            console.log("Submitting file: ", workspaceFile);

            var request = this.workspace.getBaseRequest();

            request.sourceCode = workspaceFile.getValue();
            //TODO: this should be rename to languageId
            request.programmingLanguageId = this.workspaceIDE.getPlugin("FileManager").getSelectedProgrammingLanguage().id;

            if (compileOnly) {
                request.compileOnly = true;
            } else {
                request.customInput = this.getInputEditor().getValue();
            }

            if (this.workspaceIDE.options.contestTaskId) {
                request.contestTaskId = this.workspaceIDE.options.contestTaskId;
            }

            Ajax.postJSON("/eval/submit_custom_run/", request).then(function (data) {
                var jobId = data.customRunId;
                var customRun = CustomRunStore.get(jobId);
                if (customRun && customRun.compileStarted) {
                    return; // The results through WebSocket came faster than the results through the Ajax
                    // Thus, no popup needs to be shown.
                }
                var target = _this3.runInputButton;
                if (compileOnly) {
                    target = _this3.compileButton;
                }
                InQueuePopupManager.scheduleInQueuePopup(target, data.estimatedWait, function () {
                    _this3.enableSubmission();
                });
            }, function (error) {
                ErrorHandlers.showErrorAlert("Error in compiling/running custom code:\n" + error.message);
                _this3.enableSubmission();
            });
        }
    }, {
        key: "compileCode",
        value: function compileCode() {
            this.submitCode(this.workspaceIDE.codeEditor.getFile(), true);
            this.compilationStatusTab.show();
            this.compilationStatusTab.dispatch("show");
        }
    }, {
        key: "runCode",
        value: function runCode() {
            this.submitCode(this.workspaceIDE.codeEditor.getFile(), false);
        }
    }, {
        key: "getInputEditor",
        value: function getInputEditor() {
            return this.inputEditor;
        }
    }, {
        key: "exportFunctions",


        //TODO: reconsider how to allow for external input Editor access
        value: function exportFunctions() {
            this.workspaceIDE.getInputEditor = function () {
                return this.inputEditor;
            };
        }
    }, {
        key: "setCompilationStarted",
        value: function setCompilationStarted() {
            this.compileButton.setLevel("warning");
            this.compileButton.setLabel(UI.T("Compiling..."));
            this.setSubmissionDisabled(true);
        }
    }, {
        key: "setCompilationStatus",
        value: function setCompilationStatus(compilationStatus) {
            if (compilationStatus.compileOK === true) {
                this.compileButton.setLabel(UI.T("Compiled"));
                this.compileButton.setLevel("success");
            } else {
                this.compileButton.setLabel("Compilation error!");
                this.compileButton.setLevel("danger");
                this.enableSubmissionDelayed();
                this.compilationStatusTab.show();
                this.compilationStatusTab.dispatch("show");
                // TODO: focus on the compilation results tab
            }
        }
    }, {
        key: "setCustomTestResult",
        value: function setCustomTestResult(data) {
            if (data.hasOwnProperty("stderr")) {
                this.stderrEditor.setValue(data.stderr);
                // TODO: show to stderr tab and focus on it
            }

            if (data.results.terminationReason) {
                this.executionStatusTab.show();
                this.executionStatusTab.dispatch("show");
            } else {
                this.outputEditorTab.show();
                this.outputEditorTab.dispatch("show");
            }

            this.outputEditor.setValue(data.stdout || "");
        }
    }], [{
        key: "pluginName",
        value: function pluginName() {
            return "CustomRun";
        }
    }]);
    return WorkspaceCustomRunPlugin;
}(WorkspacePlugin), _class$76.priorityIndex = 500, _temp$16);

function getDefaultContestStartDate() {
    var defaultDate = ServerTime.now().add({ minutes: 1 });
    var minutesToMilliseconds = 5 * 60 * 1000;
    var remainder = minutesToMilliseconds - defaultDate % minutesToMilliseconds;
    defaultDate.add(remainder, "milliseconds");
    return defaultDate;
}

var CreateContestModal = function (_ActionModal) {
    inherits(CreateContestModal, _ActionModal);

    function CreateContestModal() {
        classCallCheck(this, CreateContestModal);
        return possibleConstructorReturn(this, (CreateContestModal.__proto__ || Object.getPrototypeOf(CreateContestModal)).apply(this, arguments));
    }

    createClass(CreateContestModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "New contest";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Create contest";
        }
    }, {
        key: "getDefaultValues",
        value: function getDefaultValues() {
            return {
                contestName: "",
                contestLongName: "",
                startDate: getDefaultContestStartDate()
            };
        }
    }, {
        key: "getBody",
        value: function getBody() {
            var defaultValue = this.getDefaultValues();

            return [UI.createElement(
                FormField,
                { label: "Contest name" },
                UI.createElement(TextInput, { placeholder: "Contest name", ref: "contestNameInput", value: defaultValue.contestName })
            ), UI.createElement(
                FormField,
                { label: "Contest long name" },
                UI.createElement(TextInput, { placeholder: "Contest long name", ref: "contestLongNameInput", value: defaultValue.contestLongName })
            ), UI.createElement(
                FormField,
                { label: UI.createElement(UI.TextElement, { ref: this.refLink("timeTracker"), value: "" }) },
                UI.createElement(DateTimePicker$$1, { ref: "startDatePicker", date: defaultValue.startDate })
            ), UI.createElement(
                FormGroup,
                { style: { borderBottom: "1px solid #ddd" } },
                UI.createElement(
                    "h4",
                    null,
                    "Duration:"
                ),
                UI.createElement(
                    FormField,
                    { label: "Days" },
                    UI.createElement(NumberInput, { ref: "daysInput", min: "0", value: defaultValue.durationDays })
                ),
                UI.createElement(
                    FormField,
                    { label: "Hours" },
                    UI.createElement(NumberInput, { ref: "hoursInput", min: "0", value: defaultValue.durationHours })
                ),
                UI.createElement(
                    FormField,
                    { label: "Minutes" },
                    UI.createElement(NumberInput, { ref: "minutesInput", min: "0", value: defaultValue.durationMinutes })
                )
            ), UI.createElement(
                FormField,
                { label: "Scoring" },
                UI.createElement(Select, { ref: "scoringSelect", options: ContestScoringStore.all(),
                    selected: ContestScoringStore.get(defaultValue.scoringId) })
            ), UI.createElement(
                FormField,
                { label: "Visible" },
                UI.createElement(CheckboxInput, { ref: "visibleCheckbox", checked: defaultValue.visible })
            ), UI.createElement(
                FormField,
                { label: "Rated" },
                UI.createElement(CheckboxInput, { ref: "ratedCheckbox", checked: defaultValue.rated })
            ), UI.createElement(
                FormField,
                { label: "Public sources" },
                UI.createElement(CheckboxInput, { ref: "publicSourcesCheckbox", checked: defaultValue.publicSources })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(CreateContestModal.prototype.__proto__ || Object.getPrototypeOf(CreateContestModal.prototype), "onMount", this).call(this);

            this.intervalId = setInterval(function () {
                var serverTime = ServerTime.now().format("HH:mm:ss");
                _this2.timeTracker.setValue("Start/end date (Server time: " + serverTime + ")");
            }, 1000);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            clearInterval(this.intervalId);
        }
    }, {
        key: "getRequest",
        value: function getRequest() {
            var request = {
                contestName: this.contestNameInput.getValue(),
                contestLongName: this.contestLongNameInput.getValue(),
                isVisible: this.visibleCheckbox.getValue(),
                rated: this.ratedCheckbox.getValue(),
                publicSources: this.publicSourcesCheckbox.getValue(),
                scoringId: this.scoringSelect.get().id
            };

            var startDate = this.startDatePicker.getDate();
            if (startDate) {
                if (!startDate.isValid()) {
                    return "datetime invalid";
                }

                var days = Math.max(this.daysInput.getValue(), 0) || 0;
                var hours = Math.max(this.hoursInput.getValue(), 0) || 0;
                var minutes = Math.max(this.minutesInput.getValue(), 0) || 0;
                var endDate = startDate.clone().add({ days: days, hours: hours, minutes: minutes });

                request.startDate = startDate.unix();
                request.endDate = endDate.unix();
            }
            if (!request.contestLongName) {
                return "Please provide the contest long name";
            }

            return request;
        }
    }, {
        key: "getAjaxUrl",
        value: function getAjaxUrl() {
            return "/contest/add/";
        }
    }, {
        key: "action",
        value: function action() {
            var _this3 = this;

            var request = this.getRequest();
            if (typeof request === "string") {
                // an error occured
                alert(request);
                return;
            }

            Ajax.postJSON(this.getAjaxUrl(), request).then(function (data) {
                return window.location.replace("/contest/" + data.contestName + "/edit/");
            }, function (error) {
                return _this3.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return CreateContestModal;
}(ActionModal);

var CreateContestButton = ActionModalButton(CreateContestModal);

var RegisterVirtualModal = function (_ActionModal) {
    inherits(RegisterVirtualModal, _ActionModal);

    function RegisterVirtualModal() {
        classCallCheck(this, RegisterVirtualModal);
        return possibleConstructorReturn(this, (RegisterVirtualModal.__proto__ || Object.getPrototypeOf(RegisterVirtualModal)).apply(this, arguments));
    }

    createClass(RegisterVirtualModal, [{
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "getVirtualContest",
        value: function getVirtualContest() {
            return this.getContest().getVirtualContest();
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return UI.createElement(
                "h4",
                null,
                "Register for ",
                this.getVirtualContest().getName()
            );
        }
    }, {
        key: "getDefaultStartDate",
        value: function getDefaultStartDate() {
            var defaultDate = ServerTime.now().add({ minutes: 1 });
            var minutesToMilliseconds = 5 * 60 * 1000;
            var remainder = minutesToMilliseconds - defaultDate % minutesToMilliseconds;
            defaultDate.add(remainder, "milliseconds");
            return defaultDate;
        }
    }, {
        key: "getBody",
        value: function getBody() {
            var _this2 = this;

            var alreadyRegistered = null;
            if (ContestUserStore.all().find(function (contestUser) {
                return contestUser.userId === USER.id && contestUser.getContest() && contestUser.getContest().getVirtualContest() === _this2.getVirtualContest();
            })) {
                alreadyRegistered = UI.createElement(
                    "div",
                    null,
                    "Warning: You have another virtual participation for this contest. If you register, you will delete your past virtual participation."
                );
            }
            return [UI.createElement(
                "label",
                { style: { "display": "inline-block", "padding-right": "8px" } },
                "Start date (",
                UI.createElement("span", { ref: "timeTracker" }),
                ")"
            ), UI.createElement(DateTimePicker$$1, { style: { "display": "inline-block" }, ref: "startDatePicker", date: getDefaultContestStartDate() }), alreadyRegistered];
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return UI.T("Register");
        }

        // TODO: remove this, dupplicated from ContestWidget.ContestSummary

    }, {
        key: "action",
        value: function action() {
            var _this3 = this;

            var startDate = this.startDatePicker.getDate();
            var request = {
                contestId: this.getVirtualContest().id,
                startTime: startDate.unix()
            };

            Ajax.postJSON("/contest/register/", request).then(function () {
                Router.changeURL(["contest", _this3.getVirtualContest().name]);
                _this3.hide();
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            var timeTick = function timeTick() {
                var serverTime = ServerTime.now().format("HH:mm:ss");
                _this4.timeTracker.setChildren("Now " + serverTime);
            };
            timeTick();
            this.timerId = setInterval(timeTick, 1000);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            clearInterval(this.timerId);
            delete this.timerId;
        }
    }]);
    return RegisterVirtualModal;
}(ActionModal);

var VirtualParticipationButton = function (_ActionModalButton) {
    inherits(VirtualParticipationButton, _ActionModalButton);

    function VirtualParticipationButton() {
        classCallCheck(this, VirtualParticipationButton);
        return possibleConstructorReturn(this, (VirtualParticipationButton.__proto__ || Object.getPrototypeOf(VirtualParticipationButton)).apply(this, arguments));
    }

    createClass(VirtualParticipationButton, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                level: Level.PRIMARY,
                label: UI.T("Virtual participation")
            };
        }
    }]);
    return VirtualParticipationButton;
}(ActionModalButton(RegisterVirtualModal));

var ContestsTable = function (_Table) {
    inherits(ContestsTable, _Table);

    function ContestsTable() {
        classCallCheck(this, ContestsTable);
        return possibleConstructorReturn(this, (ContestsTable.__proto__ || Object.getPrototypeOf(ContestsTable)).apply(this, arguments));
    }

    createClass(ContestsTable, [{
        key: "setColumns",
        value: function setColumns() {
            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            var columns = [{
                value: function value(contest) {
                    return UI.createElement(Link, { href: "/contest/" + contest.name, value: contest.getName() });
                },
                headerName: UI.T("Contest"),
                headerStyle: { verticalAlign: "middle" },
                cellStyle: { verticalAlign: "middle" }
            }, {
                value: function value(contest) {
                    return contest.getFormattedStartTime("DD/MM/YYYY, H:mm");
                },
                headerName: UI.T("Start time"),
                headerStyle: { verticalAlign: "middle" },
                cellStyle: { verticalAlign: "middle" }
            }, {
                value: function value(contest) {
                    return contest.getFormattedDuration();
                },
                headerName: UI.T("Duration"),
                headerStyle: { verticalAlign: "middle" },
                cellStyle: { verticalAllign: "middle" }
            }];

            if (USER.isAuthenticated && this.options.displayRank) {
                columns.push({
                    value: function value(contest) {
                        var contestUser = contest.getUser(USER.id);
                        if (!contestUser) {
                            return "-";
                        }
                        return contestUser.rank;
                    },
                    headerName: UI.T("Rank"),
                    headerStyle: { verticalAlign: "middle" },
                    cellStyle: numberStyle
                });
            }

            if (USER.isSuperUser && this.options.displayEdit) {
                columns.push({
                    value: function value(contest) {
                        return UI.createElement(Link, { href: "/contest/" + contest.name + "/edit/", value: UI.T("Edit contest") });
                    },
                    headerName: "",
                    headerStyle: { verticalAlign: "middle" },
                    cellStyle: { verticalAllign: "middle" }
                });
            }

            if (this.options.displayVirtual) {
                columns.push({
                    value: function value(contest) {
                        return contest.virtualContestId ? UI.createElement(VirtualParticipationButton, { modalOptions: { contest: contest } }) : null;
                    },
                    headerName: "",
                    headerStyle: { verticalAlign: "middle" },
                    cellStyle: { verticalAllign: "middle" }
                });
            }

            get(ContestsTable.prototype.__proto__ || Object.getPrototypeOf(ContestsTable.prototype), "setColumns", this).call(this, columns);
        }
    }]);
    return ContestsTable;
}(Table);

var RunningContestPanel = function (_Panel) {
    inherits(RunningContestPanel, _Panel);

    function RunningContestPanel() {
        classCallCheck(this, RunningContestPanel);
        return possibleConstructorReturn(this, (RunningContestPanel.__proto__ || Object.getPrototypeOf(RunningContestPanel)).apply(this, arguments));
    }

    createClass(RunningContestPanel, [{
        key: "render",
        value: function render() {
            if (this.options.contests.length) {
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Running contests")
                ), UI.createElement(ContestsTable, { entries: this.options.contests, displayEdit: true })];
            } else {
                return [
                    //<h3>Running contests</h3>,
                    //<h5>No running contests</h5>
                ];
            }
        }
    }]);
    return RunningContestPanel;
}(Panel);

var FutureContestsPanel = function (_Panel2) {
    inherits(FutureContestsPanel, _Panel2);

    function FutureContestsPanel() {
        classCallCheck(this, FutureContestsPanel);
        return possibleConstructorReturn(this, (FutureContestsPanel.__proto__ || Object.getPrototypeOf(FutureContestsPanel)).apply(this, arguments));
    }

    createClass(FutureContestsPanel, [{
        key: "render",
        value: function render() {
            if (this.options.contests.length) {
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Future contests")
                ), UI.createElement(ContestsTable, { entries: this.options.contests, displayEdit: true })];
            } else {
                return [
                    //<h3>Future contests</h3>,
                    //<h5>No future contests</h5>
                ];
            }
        }
    }]);
    return FutureContestsPanel;
}(Panel);

var ContestTabs = [{
    tabName: UI.T("CSA Rounds"),
    displayRank: true,
    displayVirtual: true,
    check: function check(contest) {
        for (var i = 1; i < ContestTabs.length; i += 1) {
            if (ContestTabs[i].check(contest)) {
                return false;
            }
        }
        return true;
    }
}, {
    tabName: UI.T("CSA Hourly"),
    check: function check(contest) {
        return contest.systemGenerated;
    }
}, {
    tabName: "IEEE",
    check: function check(contest) {
        return contest.longName.indexOf("IEEE") !== -1;
    }
}];

var PastContestsPanel = function (_Panel3) {
    inherits(PastContestsPanel, _Panel3);

    function PastContestsPanel() {
        classCallCheck(this, PastContestsPanel);
        return possibleConstructorReturn(this, (PastContestsPanel.__proto__ || Object.getPrototypeOf(PastContestsPanel)).apply(this, arguments));
    }

    createClass(PastContestsPanel, [{
        key: "render",
        value: function render() {
            var _this10 = this;

            var tabs = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                var _loop = function _loop() {
                    var contestTab = _step.value;

                    var entries = _this10.options.contests.filter(function (contest) {
                        return contestTab.check(contest);
                    });
                    if (entries.length) {
                        tabs.push(UI.createElement(
                            Panel,
                            { title: UI.createElement(
                                    "h4",
                                    null,
                                    contestTab.tabName
                                ) },
                            UI.createElement(ContestsTable, { entries: entries,
                                displayRank: contestTab.displayRank, displayVirtual: contestTab.displayVirtual })
                        ));
                    }
                };

                for (var _iterator = ContestTabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (this.options.contests.length) {
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Past contests")
                ), UI.createElement(
                    TabArea,
                    null,
                    tabs
                )];
            } else {
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Past contests")
                ), UI.createElement(
                    "h5",
                    null,
                    "No past contests"
                )];
            }
        }
    }]);
    return PastContestsPanel;
}(Panel);

var ContestList = function (_Panel4) {
    inherits(ContestList, _Panel4);

    function ContestList() {
        classCallCheck(this, ContestList);
        return possibleConstructorReturn(this, (ContestList.__proto__ || Object.getPrototypeOf(ContestList)).apply(this, arguments));
    }

    createClass(ContestList, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(ContestList.prototype.__proto__ || Object.getPrototypeOf(ContestList.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.MEDIUM);
        }
    }, {
        key: "render",
        value: function render() {
            var runningContestsPanel = void 0;

            var contests = ContestStore.all().filter(function (contest) {
                return contest.getStartTime() && contest.getEndTime() && !contest.isVirtual();
            });
            var virtualContests = ContestStore.all().filter(function (contest) {
                return contest.isVirtual() && contest.getBaseContest().hasFinished() && !contest.hasFinished();
            });
            contests = [].concat(toConsumableArray(contests), toConsumableArray(virtualContests));
            var pastContests = contests.filter(function (contest) {
                return contest.hasFinished();
            }).sort(function (a, b) {
                return b.getEndTime() - a.getEndTime();
            });
            var runningContests = contests.filter(function (contest) {
                return contest.isRunning() && !contest.systemGenerated;
            }).sort(function (a, b) {
                return a.getStartTime() - b.getStartTime();
            });
            var futureContests = contests.filter(function (contest) {
                return !contest.hasStarted() && !contest.systemGenerated;
            }).sort(function (a, b) {
                return a.getStartTime() - b.getStartTime();
            });

            if (runningContests.length) {
                runningContestsPanel = UI.createElement(RunningContestPanel, { contests: runningContests });
            }
            var createContestButton = void 0;
            if (USER.isSuperUser) {
                createContestButton = UI.createElement(CreateContestButton, { label: UI.T("Create contest"), level: Level.PRIMARY });
            }
            return [createContestButton, UI.createElement(
                "h2",
                null,
                UI.T("Available contests"),
                ":"
            ), runningContestsPanel, UI.createElement(FutureContestsPanel, { contests: futureContests }), UI.createElement(PastContestsPanel, { contests: pastContests })];
        }
    }]);
    return ContestList;
}(Panel);

var _class$77, _temp$17;

var EvalTaskExamplesPanel = function (_Panel) {
    inherits(EvalTaskExamplesPanel, _Panel);

    function EvalTaskExamplesPanel() {
        classCallCheck(this, EvalTaskExamplesPanel);
        return possibleConstructorReturn(this, (EvalTaskExamplesPanel.__proto__ || Object.getPrototypeOf(EvalTaskExamplesPanel)).apply(this, arguments));
    }

    createClass(EvalTaskExamplesPanel, [{
        key: "setEvalJob",
        value: function setEvalJob(evalJob) {
            var _this2 = this;

            // Cleaning up the previous eval job
            if (this.listenerHandler) {
                this.listenerHandler.cleanup();
                delete this.listenerHandler;
            }

            // Setting a new eval job
            this.setChildren(UI.createElement(EvalJobResultsTable, { evalJob: evalJob, examplesOnly: true, key: Math.random() }));
            this.listenerHandler = evalJob.addUpdateListener(function () {
                if (evalJob.exampleTests.length > 0 && evalJob.tests.length === 0) {
                    _this2.dispatch("show");
                }
            });

            // focusing this panel
            this.show();
        }
    }]);
    return EvalTaskExamplesPanel;
}(Panel);

var SubmissionStatusPanel = function (_Panel2) {
    inherits(SubmissionStatusPanel, _Panel2);

    function SubmissionStatusPanel() {
        classCallCheck(this, SubmissionStatusPanel);
        return possibleConstructorReturn(this, (SubmissionStatusPanel.__proto__ || Object.getPrototypeOf(SubmissionStatusPanel)).apply(this, arguments));
    }

    createClass(SubmissionStatusPanel, [{
        key: "render",
        value: function render() {
            var children = [UI.createElement(ProgressBar, _extends({ ref: "resultsProgressBar" }, this.getRunProgress()))];
            if (this.evalJob) {
                children.push(UI.createElement(EvalJobResultsTable, { evalJob: this.evalJob, key: Math.random() }));
            }
            return children;
        }
    }, {
        key: "setEvalJob",
        value: function setEvalJob(evalJob) {
            var _this4 = this;

            if (this.listenerHandler) {
                this.listenerHandler.cleanup();
                delete this.listenerHandler;
            }

            this.evalJob = evalJob;

            if (this.evalJob) {
                this.listenerHandler = this.evalJob.addUpdateListener(function (event) {
                    _this4.updateEvalJobStatus(event);

                    if (_this4.evalJob.tests.length > 0) {
                        _this4.dispatch("show");
                    }
                });

                this.resultsProgressBar.updateOptions(this.getRunProgress());
                this.redraw();
            } else {
                this.resultsProgressBar.updateOptions({ level: Level.PRIMARY });
            }
        }
    }, {
        key: "updateEvalJobStatus",
        value: function updateEvalJobStatus() {
            this.show();
            this.resultsProgressBar.updateOptions(this.getRunProgress());
        }
    }, {
        key: "getRunProgress",
        value: function getRunProgress() {
            if (!this.evalJob) return {};

            var progress = {};

            var testResults = this.getTestResults();

            var status = this.evalJob.getStatus();
            var numTotalTests = this.options.evalTask.numSystemTests;
            if (this.options.evalTask.exampleTests) {
                numTotalTests += this.options.evalTask.exampleTests.length;
            }

            progress.value = testResults.length / numTotalTests;

            var worstCPU = 0;
            var worstMemory = 0;
            for (var i = 0; i < testResults.length; i += 1) {
                worstCPU = Math.max(worstCPU, testResults[i].cpuTime || 0);
                worstMemory = Math.max(worstMemory, testResults[i].memUsage || 0);
            }

            var labelInfo = "(" + Formatter.cpuTime(worstCPU) + " - " + Formatter.memory(worstMemory) + ")";

            if (status === EvalJob.Status.RUNNING) {
                progress.active = true;
                progress.striped = true;
                if (testResults.length > 0) {
                    progress.label = "Successfully done " + testResults.length + " tests" + labelInfo;
                } else {
                    progress.label = "Running";
                }
            } else {
                progress.value = 0;
                progress.active = false;
                progress.striped = false;
                progress.disableSmoothTransision = true;
            }

            if (status === EvalJob.Status.DONE) {
                var resultStatus = this.evalJob.getResultStatus();
                progress.value = 1;

                if (this.evalJob.hasCompileError()) {
                    progress.level = Level.WARNING;
                    progress.label = "Compilation Error";
                } else if (this.evalJob.hasInternalJudgeError()) {
                    progress.level = Level.DANGER;
                    progress.label = "Internal Judge Error!";
                } else {
                    if (this.evalJob.hasPartialScoring()) {
                        var score = this.evalJob.score;
                        progress.label = "Score: " + Formatter.truncate(score * 100, 2) + "/100 " + labelInfo;
                        if (score == 1) {
                            progress.level = Level.SUCCESS;
                        } else {
                            progress.level = Level.WARNING;
                        }
                    } else {
                        var lastTest = this.evalJob.getLastTest();
                        var labelResult = new Map([[EvalJob.ResultStatus.ACCEPTED, "Accepted " + labelInfo], [EvalJob.ResultStatus.WRONG_ANSWER, lastTest.message + " on test " + lastTest.testNumber], [EvalJob.ResultStatus.TIME_LIMIT_EXCEEDED, "Time Limit Exceeded"], [EvalJob.ResultStatus.MEMORY_LIMIT_EXCEEDED, "Memory Limit Exceeded"], [EvalJob.ResultStatus.RUNTIME_ERROR, "Runtime Error"], [EvalJob.ResultStatus.KILLED_BY_SIGNAL, lastTest.message]]);
                        progress.level = resultStatus === EvalJob.ResultStatus.ACCEPTED ? Level.SUCCESS : Level.DANGER;
                        progress.label = labelResult.get(resultStatus);
                    }
                }
            }

            return progress;
        }
    }, {
        key: "getTestResults",
        value: function getTestResults() {
            if (!this.evalJob) {
                return [];
            }

            return this.evalJob.exampleTests.concat(this.evalJob.tests);
        }
    }]);
    return SubmissionStatusPanel;
}(Panel);

var ContestNotRunningModal = function (_Modal) {
    inherits(ContestNotRunningModal, _Modal);

    function ContestNotRunningModal() {
        classCallCheck(this, ContestNotRunningModal);
        return possibleConstructorReturn(this, (ContestNotRunningModal.__proto__ || Object.getPrototypeOf(ContestNotRunningModal)).apply(this, arguments));
    }

    createClass(ContestNotRunningModal, [{
        key: "render",
        value: function render() {
            var _this6 = this;

            return [UI.createElement(
                "h3",
                null,
                "The contest is not currently running."
            ), UI.createElement(VirtualParticipationButton, { modalOptions: { contest: this.options.contest } }), UI.createElement(Button, { label: UI.T("Submit in " + this.options.archiveName), style: { margin: "20px" },
                level: Level.PRIMARY,
                onClick: function onClick() {
                    _this6.options.parent.submitCode(_this6.options.onlyExamples, _this6.options.archiveTaskId);
                    _this6.hide();
                } }), UI.createElement(Link, { style: { margin: "20px" }, href: "/contest/" + this.options.archiveUrl + "/task/" + this.options.evalTask.urlName,
                value: UI.T("Open task in " + this.options.archiveName) }), UI.createElement(
                "div",
                null,
                UI.createElement(
                    FormField,
                    { label: "Always submit in archive" },
                    UI.createElement(CheckboxInput, { ref: "disableCheckbox" })
                )
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            get(ContestNotRunningModal.prototype.__proto__ || Object.getPrototypeOf(ContestNotRunningModal.prototype), "onMount", this).call(this);
            this.disableCheckbox.addChangeListener(function () {
                _this7.options.parent.contestNotRunningModalDisabled = !_this7.options.parent.contestNotRunningModalDisabled;
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.options.parent.setSubmissionDisabled(false);
            get(ContestNotRunningModal.prototype.__proto__ || Object.getPrototypeOf(ContestNotRunningModal.prototype), "hide", this).call(this);
        }
    }]);
    return ContestNotRunningModal;
}(Modal);

var ContestSubmitAjax = new FixedURLAjaxHandler("/eval/submit_evaljob/");

var WorkspaceContestSubmitPlugin = (_temp$17 = _class$77 = function (_WorkspacePlugin) {
    inherits(WorkspaceContestSubmitPlugin, _WorkspacePlugin);

    function WorkspaceContestSubmitPlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceContestSubmitPlugin);

        var _this8 = possibleConstructorReturn(this, (WorkspaceContestSubmitPlugin.__proto__ || Object.getPrototypeOf(WorkspaceContestSubmitPlugin)).call(this, workspaceIDE));

        var tabArea = workspaceIDE.tabArea;

        _this8.workspace = _this8.workspaceIDE.workspace;

        _this8.contestTask = ContestTaskStore.get(_this8.workspaceIDE.options.contestTaskId);
        _this8.evalTask = _this8.contestTask.getEvalTask();
        _this8.contest = _this8.contestTask.getContest();

        tabArea.appendChild(UI.createElement(EvalTaskExamplesPanel, { ref: _this8.refLink("examplesTab"), title: UI.T("Examples"),
            evalTask: _this8.evalTask }));

        // TODO: We want to remount this onclick
        tabArea.appendChild(UI.createElement(SubmissionStatusPanel, { ref: _this8.refLink("submissionTab"), title: UI.T("Submission"),
            evalTask: _this8.evalTask }));
        _this8.workspaceIDE.optionButtonsBottom.appendChild(UI.createElement(
            "span",
            { ref: _this8.refLink("runExamplesPopupContainer"), style: { position: "relative" } },
            UI.createElement(Button, { ref: _this8.refLink("runExamplesButton"), HTMLtitle: "Press " + (navigator.platform.match("Mac") ? "Cmd" : "Ctrl") + " + E to run examples",
                className: workspaceButtonStyle.RUN, faIcon: "check", label: UI.T("Run examples") })
        ));

        _this8.workspaceIDE.optionButtonsBottom.appendChild(UI.createElement(
            "span",
            { ref: _this8.refLink("submitPopupContainer"), style: { position: "relative" } },
            UI.createElement(Button, { ref: _this8.refLink("submitButton"), HTMLtitle: "Press " + (navigator.platform.match("Mac") ? "Cmd" : "Ctrl") + " + U to submit",
                className: workspaceButtonStyle.SUBMIT, faIcon: "paper-plane", label: UI.T("Submit") })
        ));

        _this8.submitButton.addClickListener(function (event) {
            event.stopPropagation();
            _this8.submitCode();
            _this8.workspaceIDE.maximizeTabSection();
        });

        _this8.runExamplesButton.addClickListener(function () {
            _this8.examplesTab.show();
            _this8.examplesTab.dispatch("show");
            _this8.submitCode(true);
            _this8.workspaceIDE.maximizeTabSection();
        });

        EvalJobStore.addCreateListener(function (evalJob) {
            if (evalJob.statusStream.endsWith(_this8.workspace.sessionId)) {
                _this8.setEvalJob(evalJob);
            }
        });

        _this8.workspaceIDE.addListener("submissionStarted", function (event) {
            _this8.setSubmissionDisabled(true);
            InQueuePopupManager.cancelInQueuePopup();
        });

        _this8.workspaceIDE.addListener("submissionRunFinished", function (event) {
            _this8.setSubmissionDisabled(false);
        });

        Dispatcher.Global.addListener("loadEvalJobSource", function (event) {
            var evalJob = event.evalJob;
            if (evalJob.contestTaskId != _this8.contestTask.id) {
                return;
            }
            var programmingLanguage = event.evalJob.getProgrammingLanguage();
            _this8.workspaceIDE.getPlugin("FileManager").updateProgrammingLanguage(programmingLanguage);
            _this8.workspaceIDE.codeEditor.setValue(evalJob.sourceText, true);
            _this8.workspaceIDE.resizeCodeEditor();
            Dispatcher.Global.dispatch("finishedLoadEvalJobSource");
        });
        return _this8;
    }

    createClass(WorkspaceContestSubmitPlugin, [{
        key: "setSubmissionDisabled",
        value: function setSubmissionDisabled(disabled) {
            var internal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            this.submitButton.setEnabled(!disabled);
            this.runExamplesButton.setEnabled(!disabled);

            if (this.workspaceIDE.getPlugin("CustomRun") && internal) {
                this.workspaceIDE.getPlugin("CustomRun").setSubmissionDisabled(disabled, false);
            }
        }
    }, {
        key: "showContestNotRunningModal",
        value: function showContestNotRunningModal(archiveTaskId, archiveUrl, archiveName, onlyExamples) {
            if (this.contestNotRunningModalDisabled) {
                this.submitCode(onlyExamples, archiveTaskId);
            } else {
                ContestNotRunningModal.show({
                    archiveTaskId: archiveTaskId,
                    archiveUrl: archiveUrl,
                    archiveName: archiveName,
                    contest: this.contest,
                    evalTask: this.evalTask,
                    overflow: "auto",
                    parent: this,
                    onlyExamples: onlyExamples,
                    fillScreen: true
                });
            }
        }
    }, {
        key: "getAjaxHandler",
        value: function getAjaxHandler() {
            return this.ajaxHandler || ContestSubmitAjax;
        }
    }, {
        key: "setAjaxHandler",
        value: function setAjaxHandler(ajaxHandler) {
            this.ajaxHandler = ajaxHandler;
        }
    }, {
        key: "submitCode",
        value: function submitCode(onlyExamples) {
            var _this9 = this;

            var contestTaskId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

            var workspaceFile = this.workspaceIDE.codeEditor.getFile();
            var request = this.workspace.getBaseRequest();

            if (contestTaskId === -1) {
                request.contestTaskId = this.contestTask.id;
            } else {
                request.contestTaskId = contestTaskId;
            }
            request.sourceCode = workspaceFile.getValue();
            //TODO: this should be rename to languageId
            request.programmingLanguageId = this.workspaceIDE.getPlugin("FileManager").getSelectedProgrammingLanguage().id;

            if (onlyExamples) {
                request.onlyExamples = true;
            }

            this.resetStatus();
            this.setSubmissionDisabled(true);

            this.getAjaxHandler().postJSON(request).then(function (data) {
                var evalJobId = data.evalJobId;
                var evalJob = EvalJobStore.get(evalJobId);
                if (evalJob && evalJob.compileStarted) {
                    return; // Results through WebSocket came before the XHR.
                    // Thus, no popup needs to be displayed.
                }
                var target = _this9.submitButton;
                if (onlyExamples) {
                    target = _this9.runExamplesButton;
                }
                InQueuePopupManager.scheduleInQueuePopup(target, data.estimatedWait, function () {
                    _this9.setSubmissionDisabled(false);
                });
            }, function (error) {
                if (error.message === "The contest is not running" && error.archiveTask) {
                    ContestTaskStore.fakeCreate(error.archiveTask, "create");
                    _this9.showContestNotRunningModal(error.archiveTask.id, error.archiveUrl, error.archiveName, onlyExamples);
                } else {
                    ErrorHandlers.showErrorAlert("Error in submitting code:\n" + error.message);
                    _this9.setSubmissionDisabled(false);
                }
            });
        }
    }, {
        key: "setEvalJob",
        value: function setEvalJob(evalJob) {
            var _this10 = this;

            this.examplesTab.setEvalJob(evalJob);
            this.workspaceIDE.getPlugin("CustomRun").compilationStatusTab.setCustomRun(evalJob);

            if (!evalJob.onlyExamples) {
                this.submissionTab.setEvalJob(evalJob);
            }

            evalJob.addUpdateListener(function (event) {
                if (event.type === "started") {
                    _this10.workspaceIDE.dispatch("compileStarted", event);
                    _this10.workspaceIDE.dispatch("submissionStarted", event);
                } else if (event.type === "compile_status") {
                    _this10.workspaceIDE.dispatch("compileStatus", event);
                    if (!event.data.compileOK) {
                        _this10.setSubmissionDisabled(false);
                    }
                } else if (event.type === "test_results") {
                    _this10.workspaceIDE.dispatch("submissionTestResult", event);
                } else if (event.type === "finished") {
                    _this10.workspaceIDE.dispatch("submissionRunFinished", event);
                }
            });
        }
    }, {
        key: "resetStatus",
        value: function resetStatus() {
            // Reset progress bar
            this.submissionTab.setEvalJob(null);
            this.resultsProgressBar = this.submissionTab.resultsProgressBar;

            this.resultsProgressBar.striped = true;
            this.resultsProgressBar.active = true;
            this.resultsProgressBar.value = 0;

            // Reset counters
            this.numTests = 0;
            this.numTestsDone = 0;
            this.currentTest = 0;
            this.worstCPU = 0;
            this.worstMemory = 0;
        }
    }], [{
        key: "pluginName",
        value: function pluginName() {
            return "ContestSubmit";
        }
    }]);
    return WorkspaceContestSubmitPlugin;
}(WorkspacePlugin), _class$77.priorityIndex = 600, _temp$17);

var _class$78, _temp$18;

var WorkspaceSingleFileManagerPlugin = (_temp$18 = _class$78 = function (_WorkspacePlugin) {
    inherits(WorkspaceSingleFileManagerPlugin, _WorkspacePlugin);

    function WorkspaceSingleFileManagerPlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceSingleFileManagerPlugin);

        var _this = possibleConstructorReturn(this, (WorkspaceSingleFileManagerPlugin.__proto__ || Object.getPrototypeOf(WorkspaceSingleFileManagerPlugin)).call(this, workspaceIDE));

        _this.workspace = workspaceIDE.workspace;
        GlobalState.registerStream(_this.workspace.streamName());

        _this.workspace.addListener("updateExternal", function (event) {
            console.log("Workspace update event data: ", event);
        });

        _this.undoManagers = new Map();

        _this.programmingLanguageSelect = _this.workspaceIDE.programmingLanguageSelect;

        _this.changeFileCallback = function () {
            _this.updateProgrammingLanguage(_this.programmingLanguageSelect.get());
        };
        _this.programmingLanguageSelect.addChangeListener(_this.changeFileCallback);

        _this.loadFiles();
        return _this;
    }

    createClass(WorkspaceSingleFileManagerPlugin, [{
        key: "updateUndoManager",


        // We should have a different undo manager for each different language
        value: function updateUndoManager(workspaceFile) {
            if (!this.undoManagers.has(workspaceFile)) {
                var UndoManager = window.ace.require("ace/undomanager").UndoManager;
                this.undoManagers.set(workspaceFile, new UndoManager());
            }
            this.workspaceIDE.codeEditor.setUndoManager(this.undoManagers.get(workspaceFile));
        }
    }, {
        key: "updateProgrammingLanguage",
        value: function updateProgrammingLanguage(programmingLanguage) {
            var defaultCode = void 0;

            var _getLanguageAndCode = this.getLanguageAndCode(programmingLanguage);

            var _getLanguageAndCode2 = slicedToArray(_getLanguageAndCode, 2);

            programmingLanguage = _getLanguageAndCode2[0];
            defaultCode = _getLanguageAndCode2[1];

            if (programmingLanguage !== this.getSelectedProgrammingLanguage()) {
                this.setSelectedProgrammingLanguage(programmingLanguage);
            }
            var workspaceFile = this.workspace.getOrCreateFileForLanguage(programmingLanguage, defaultCode);

            this.setIDEOpenFile(workspaceFile, programmingLanguage);

            this.workspaceIDE.dispatch("changeLanguage", programmingLanguage);
        }
    }, {
        key: "getSelectedProgrammingLanguage",
        value: function getSelectedProgrammingLanguage() {
            return this.programmingLanguageSelect.get();
        }
    }, {
        key: "setSelectedProgrammingLanguage",
        value: function setSelectedProgrammingLanguage(programmingLanguage) {
            this.programmingLanguageSelect.set(programmingLanguage);
        }
    }, {
        key: "setIDEOpenFile",
        value: function setIDEOpenFile(workspaceFile, programmingLanguage) {
            var updateLanguage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            programmingLanguage = programmingLanguage || ProgrammingLanguage.getLanguageForFileName(workspaceFile.getName());

            //TODO: these should not be set here, but through a dispatcher
            this.workspaceIDE.saveFileStatusLabel.setFile(workspaceFile);

            this.workspaceIDE.codeEditor.setFile(workspaceFile);
            this.workspaceIDE.codeEditor.setAceMode(programmingLanguage);
            if (updateLanguage) {
                this.setSelectedProgrammingLanguage(programmingLanguage);
            }
            this.updateUndoManager(workspaceFile);
        }
    }, {
        key: "getLanguageAndCode",


        // This function is for eval tasks with enforced templates.
        // It checks whether the language given is among the eval task's allowed languages.
        // Also gives the default code for the language or its replacer.
        value: function getLanguageAndCode(language) {
            var defaultCode = void 0;
            if (this.workspaceIDE.options.contestTaskId) {
                var evalTask = ContestTaskStore.get(this.workspaceIDE.options.contestTaskId).getEvalTask();
                if (evalTask.hasEnforcedTemplates() && evalTask.getTemplate(language)) {
                    defaultCode = evalTask.getTemplate(language);
                } else if (evalTask.hasEnforcedTemplates()) {
                    defaultCode = language.getDefaultTemplateComment() + language.getDefaultSource();
                }
            }
            return [language, defaultCode];
        }
    }, {
        key: "getDefaultFile",
        value: function getDefaultFile() {
            var workspace = this.workspace;
            // If there's a file, open the last modified on
            // Otherwise, open the file for the default programming language stored for this user
            // In case we don't have any file, just create one for the user's language

            var defaultFile = null;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = workspace.files.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var workspaceFile = _step.value;

                    //Ignore files that start with a .
                    if (!workspaceFile.name.startsWith(".") && (defaultFile == null || workspaceFile.serverLastSaved > defaultFile.serverLastSaved)) {
                        defaultFile = workspaceFile;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (defaultFile) {
                return defaultFile;
            }

            // If we have an eval task that enforces templates, we want to overwrite the initial template
            var language = ProgrammingLanguage.getDefaultLanguage();
            return workspace.getOrCreateFileForLanguage.apply(workspace, toConsumableArray(this.getLanguageAndCode(language)));
        }
    }, {
        key: "loadFiles",
        value: function loadFiles() {
            this.setIDEOpenFile(this.getDefaultFile());
        }
    }], [{
        key: "pluginName",
        value: function pluginName() {
            return "FileManager";
        }
    }]);
    return WorkspaceSingleFileManagerPlugin;
}(WorkspacePlugin), _class$78.priorityIndex = 200, _temp$18);

var _class$79, _temp$19;

var WorkspaceCompilerParserPlugin = (_temp$19 = _class$79 = function (_WorkspacePlugin) {
    inherits(WorkspaceCompilerParserPlugin, _WorkspacePlugin);

    function WorkspaceCompilerParserPlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceCompilerParserPlugin);

        var _this = possibleConstructorReturn(this, (WorkspaceCompilerParserPlugin.__proto__ || Object.getPrototypeOf(WorkspaceCompilerParserPlugin)).call(this, workspaceIDE, "CompilerParser"));

        var cppLanguage = ProgrammingLanguage.get(1);
        var javaLanguage = ProgrammingLanguage.get(2);
        var python2Language = ProgrammingLanguage.get(3);
        var python3Language = ProgrammingLanguage.get(4);

        //TODO: have a compiler parser class!
        cppLanguage.compilerParser = function () {
            var obj = {};

            obj.getCompilerAnnotations = function (compilerMessage) {
                var annotations = [];
                compilerMessage.split("\n").forEach(function (message) {
                    var messageElements = message.match(/Main.cpp:(\d*)\:(\d*):\s*\w* (\w+): (.*)/);
                    if (messageElements == null) {
                        return;
                    }
                    annotations.push({
                        row: parseInt(messageElements[1]) - 1,
                        column: messageElements[2],
                        type: messageElements[3],
                        text: messageElements[4]
                    });
                });
                return annotations;
            };

            return obj;
        }();

        javaLanguage.compilerParser = function () {
            var obj = {};

            obj.getCompilerAnnotations = function (compilerMessage) {
                var annotations = [];
                compilerMessage.split("\n").forEach(function (message) {
                    var messageElements = message.match(/Main.java:(\d*)\:\s*\w* (\w+): (.*)/);
                    if (messageElements == null) {
                        return;
                    }
                    annotations.push({
                        row: parseInt(messageElements[1]) - 1,
                        column: 1,
                        type: messageElements[2],
                        text: messageElements[3]
                    });
                });
                return annotations;
            };

            return obj;
        }();

        python2Language.compilerParser = function () {
            var obj = {};

            obj.getCompilerAnnotations = function (message) {
                var annotations = [];
                var messageElements = message.match(/File "Main.py", line (\d*)\n.*\n.*\n.*\: (.*)/);
                if (messageElements == null) {
                    return;
                }
                annotations.push({
                    row: parseInt(messageElements[1]) - 1,
                    column: 1,
                    type: "error",
                    text: messageElements[2]
                });
                return annotations;
            };

            return obj;
        }();

        python3Language.compilerParser = function () {
            var obj = {};

            obj.getCompilerAnnotations = function (message) {
                var annotations = [];
                var messageElements = message.match(/File "Main.py", line (\d*)\n.*\n.*\n.*\: (.*)/);
                if (messageElements == null) {
                    return;
                }
                annotations.push({
                    row: parseInt(messageElements[1]) - 1,
                    column: 1,
                    type: "error",
                    text: messageElements[2]
                });
                return annotations;
            };

            return obj;
        }();

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = ProgrammingLanguage.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var programmingLanguage = _step.value;

                if (!programmingLanguage.compilerParser) {
                    programmingLanguage.compilerParser = function () {
                        var obj = {};

                        obj.getCompilerAnnotations = function (message) {
                            return [];
                        };

                        return obj;
                    }();
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        _this.workspaceIDE.addListener("compileStatus", function (event) {
            var programmingLanguage = _this.workspaceIDE.getPlugin("FileManager").getSelectedProgrammingLanguage();
            _this.workspaceIDE.codeEditor.setAnnotations(programmingLanguage.compilerParser.getCompilerAnnotations(event.data.compilerMessage));
        });
        return _this;
    }

    return WorkspaceCompilerParserPlugin;
}(WorkspacePlugin), _class$79.priorityIndex = 800, _temp$19);

var _class$80, _temp$20;

var WorkspaceKeymapPlugin = (_temp$20 = _class$80 = function (_WorkspacePlugin) {
    inherits(WorkspaceKeymapPlugin, _WorkspacePlugin);

    function WorkspaceKeymapPlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceKeymapPlugin);

        var _this = possibleConstructorReturn(this, (WorkspaceKeymapPlugin.__proto__ || Object.getPrototypeOf(WorkspaceKeymapPlugin)).call(this, workspaceIDE, "KeymapManager"));

        _this.keyboardShortcutsHandler = function (event) {
            if (!document.body.contains(_this.workspaceIDE.node)) {
                return;
            }
            if (event.keyCode == 8) {
                // TODO: Disable the backspace key
                //event.preventDefault();
            }
            if (event.ctrlKey || event.metaKey) {
                var button = void 0,
                    key = void 0,
                    plugin = void 0;
                if (event.ctrlKey) {
                    key = "Ctrl";
                } else {
                    key = "Cmd";
                }
                //Enter case must be treated differently
                if (event.which === 13) {
                    event.preventDefault();
                    button = _this.workspaceIDE.fullScreenButton;
                    if (button) {
                        button.node.click();
                    }
                }
                switch (String.fromCharCode(event.which).toLowerCase()) {
                    case 's':
                        event.preventDefault();
                        _this.workspaceIDE.workspace.saveAllFiles();
                        break;
                    case 'b':
                        event.preventDefault();
                        plugin = _this.workspaceIDE.getPlugin("CustomRun");
                        if (plugin) {
                            plugin.compileButton.node.click();
                        }
                        break;
                    case 'o':
                        event.preventDefault();
                        _this.workspaceIDE.uploadFile.node.click();
                        break;
                    case 'i':
                        event.preventDefault();
                        plugin = _this.workspaceIDE.getPlugin("CustomRun");
                        if (plugin) {
                            plugin.runInputButton.node.click();
                        }
                        break;
                    case 'u':
                        event.preventDefault();
                        plugin = _this.workspaceIDE.getPlugin("ContestSubmit");
                        if (plugin) {
                            plugin.submitButton.node.click();
                        }
                        break;
                    case 'e':
                        event.preventDefault();
                        plugin = _this.workspaceIDE.getPlugin("ContestSubmit");
                        if (plugin) {
                            console.log(key + "+E pressed, running examples");
                            plugin.runExamplesButton.node.click();
                        }
                        break;
                    case 'm':
                        event.preventDefault();
                        button = _this.workspaceIDE.toggleTabAreaButton;
                        if (button) {
                            button.node.click();
                        }
                        break;
                }
            }
            //TODO list of shortcuts to consider:
            //--Autoformat code
            //--Run lint checker
            //
        };

        window.addEventListener("keydown", _this.keyboardShortcutsHandler);
        return _this;
    }

    createClass(WorkspaceKeymapPlugin, [{
        key: "register",
        value: function register(keys, callback) {}
    }, {
        key: "unregister",
        value: function unregister(keys, callback) {}
    }]);
    return WorkspaceKeymapPlugin;
}(WorkspacePlugin), _class$80.priorityIndex = 700, _temp$20);

var _class$81, _temp$21;

var WorkspaceSharePlugin = (_temp$21 = _class$81 = function (_WorkspacePlugin) {
    inherits(WorkspaceSharePlugin, _WorkspacePlugin);

    function WorkspaceSharePlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceSharePlugin);

        var _this = possibleConstructorReturn(this, (WorkspaceSharePlugin.__proto__ || Object.getPrototypeOf(WorkspaceSharePlugin)).call(this, workspaceIDE));

        _this.workspace = workspaceIDE.workspace;

        _this.workspaceIDE.optionButtonsTopLeft.insertChild(UI.createElement(Button, { ref: _this.refLink("shareButton"), faIcon: "share-square-o", HTMLtitle: "Click to share the code",
            className: _this.workspaceIDE.styleSheet.menuButton, label: UI.T("Share") }), 0);
        _this.workspaceIDE.codeEditor.file.addListener("userChanged", function () {
            _this.customRun = undefined;
            _this.popup && _this.popup.hide();
            delete _this.popup;
        });
        _this.workspaceIDE.addListener("compileStarted", function () {
            _this.popup && _this.popup.hide();
            delete _this.popup;
        });
        _this.workspaceIDE.addListener("customRunFinished", function (event) {
            if (event.objectType !== "customrun") {
                return;
            }
            _this.customRun = CustomRunStore.get(event.objectId);
            _this.popup && _this.popup.hide();
            delete _this.popup;
        });

        _this.shareButton.addClickListener(function (event) {
            event.stopPropagation();
            _this.togglePopup();
        });
        return _this;
    }

    createClass(WorkspaceSharePlugin, [{
        key: "getPopupContent",
        value: function getPopupContent() {
            var _this2 = this;

            var buildContent = function buildContent() {
                return [UI.createElement(Link, { ref: _this2.refLink("popupUrl"), newTab: true,
                    href: _this2.customRun.buildPublicUrl(),
                    value: _this2.customRun.buildPublicUrl() }), UI.createElement(Button, { ref: _this2.refLink("copyUrlButton"), size: Size.SMALL, onClick: function onClick() {
                        return _this2.copyUrl();
                    },
                    style: { marginLeft: "5px" }, level: Level.DEFAULT, faIcon: "files-o", label: UI.T("Copy") })];
            };
            var updatePopup = function updatePopup() {
                _this2.popup.setContent(buildContent());
                _this2.popup.bindInsideParent();
            };
            if (!this.customRun) {
                this.createCustomRun(updatePopup);
                return UI.createElement(FAIcon, { icon: "spinner fa-spin" });
            }
            if (this.customRun && !this.customRun.isPublic) {
                this.customRun.setPublic(updatePopup);
                return UI.createElement(FAIcon, { icon: "spinner fa-spin" });
            }

            return buildContent();
        }
    }, {
        key: "createCustomRun",
        value: function createCustomRun(callback) {
            var _this3 = this;

            var workspaceFile = this.workspaceIDE.codeEditor.getFile();

            var request = this.workspace.getBaseRequest();

            request.sourceCode = workspaceFile.getValue();
            //TODO: this should be rename to languageId
            request.programmingLanguageId = this.workspaceIDE.getPlugin("FileManager").getSelectedProgrammingLanguage().id;

            Ajax.postJSON("/eval/create_share_custom_run/", request).then(function (data) {
                _this3.customRun = CustomRunStore.get(data.customRunId);
                callback();
            });
        }
    }, {
        key: "copyUrl",
        value: function copyUrl() {
            window.getSelection().removeAllRanges();
            var range = document.createRange();
            range.selectNode(this.popupUrl.node);
            window.getSelection().addRange(range);
            var successful = void 0;
            try {
                // https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en
                // Now that we've selected the anchor text, execute the copy command
                successful = document.execCommand('copy');
                var msg = successful ? 'successful' : 'unsuccessful';
                console.log('Copy command was ' + msg);
            } catch (err) {
                successful = false;
                console.log('Oops, unable to copy');
            }
            if (!successful) {
                this.copyUrlButton.hide();
                this.popup.bindInsideParent();
            }
            window.getSelection().removeAllRanges();
        }
    }, {
        key: "togglePopup",
        value: function togglePopup() {
            if (this.popup && this.popup.isInDocument()) {
                this.popup.hide();
                delete this.popup;
                return;
            }
            this.popup = BasePopup.create(document.body, {
                target: this.shareButton,
                children: this.getPopupContent(),
                arrowDirection: Direction.UP,
                bodyPlaced: true
            });
        }
    }], [{
        key: "pluginName",
        value: function pluginName() {
            return "Share";
        }
    }]);
    return WorkspaceSharePlugin;
}(WorkspacePlugin), _class$81.priorityIndex = 300, _temp$21);

var _class$82, _descriptor$34, _descriptor2$30;

function _initDefineProp$35(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$36(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var EnforcedTemplateStyle = (_class$82 = function (_StyleSheet) {
    inherits(EnforcedTemplateStyle, _StyleSheet);

    function EnforcedTemplateStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, EnforcedTemplateStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = EnforcedTemplateStyle.__proto__ || Object.getPrototypeOf(EnforcedTemplateStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$35(_this, "readOnly", _descriptor$34, _this), _initDefineProp$35(_this, "firstLine", _descriptor2$30, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(EnforcedTemplateStyle, null, [{
        key: "getCollapsedClassName",
        value: function getCollapsedClassName() {
            return [this.getInstance().firstLine, "fa", "fa-caret-right"];
        }
    }, {
        key: "getUncollapsedClassName",
        value: function getUncollapsedClassName() {
            return [this.getInstance().firstLine, "fa", "fa-caret-down"];
        }
    }]);
    return EnforcedTemplateStyle;
}(StyleSheet), _descriptor$34 = _applyDecoratedDescriptor$36(_class$82.prototype, "readOnly", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            "background-color": "#630707",
            "opacity": "0.2",
            "position": "absolute",
            "z-index": "10",
            "border-radius": "0"
        };
    }
}), _descriptor2$30 = _applyDecoratedDescriptor$36(_class$82.prototype, "firstLine", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ":before": {
                "margin-right": "7px",
                "font": "normal normal normal 14px/1 FontAwesome",
                "font-size": "1.1em"
            },
            "margin-left": "-7px",
            "font": "inherit"
        };
    }
}), _class$82);

function removeDecorations(session, row) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = EnforcedTemplateStyle.getCollapsedClassName()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var className = _step.value;

            session.removeGutterDecoration(row, className);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = EnforcedTemplateStyle.getUncollapsedClassName()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _className = _step2.value;

            session.removeGutterDecoration(row, _className);
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }
}
function decorateUncollapsed(session, range) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = EnforcedTemplateStyle.getCollapsedClassName()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var className = _step3.value;

            session.removeGutterDecoration(range.start.row, className);
        }
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
        for (var _iterator4 = EnforcedTemplateStyle.getUncollapsedClassName()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _className2 = _step4.value;

            session.addGutterDecoration(range.start.row, _className2);
        }
    } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
            }
        } finally {
            if (_didIteratorError4) {
                throw _iteratorError4;
            }
        }
    }
}
function decorateCollapsed(session, range) {
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
        for (var _iterator5 = EnforcedTemplateStyle.getUncollapsedClassName()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var className = _step5.value;

            session.removeGutterDecoration(range.start.row, className);
        }
    } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                _iterator5.return();
            }
        } finally {
            if (_didIteratorError5) {
                throw _iteratorError5;
            }
        }
    }

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
        for (var _iterator6 = EnforcedTemplateStyle.getCollapsedClassName()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var _className3 = _step6.value;

            session.addGutterDecoration(range.start.row, _className3);
        }
    } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
            }
        } finally {
            if (_didIteratorError6) {
                throw _iteratorError6;
            }
        }
    }
}

function getRanges(template, code) {
    var blocks = [];
    for (var i = 0; i < template.length; i += 1) {
        if (template[i].type === "editable") {
            blocks.push(null);
        } else {
            blocks.push(template[i].lines.join("\n") + "\n");
        }
    }
    var dp = new Map();
    var getDp = function getDp(codeIndex, blockIndex) {
        if (blockIndex === -1) {
            return codeIndex === -1;
        }
        var key = codeIndex + " " + blockIndex;
        if (dp.has(key)) {
            return dp.get(key) !== -2;
        }
        if (blocks[blockIndex]) {
            while (blocks[blockIndex].indexOf("\r") !== -1) {
                blocks[blockIndex] = blocks[blockIndex].replace("\r", "");
            }
            if (codeIndex + 1 < blocks[blockIndex].length || code.substring(codeIndex - blocks[blockIndex].length + 1, codeIndex + 1) !== blocks[blockIndex] || !getDp(codeIndex - blocks[blockIndex].length, blockIndex - 1)) {
                dp.set(key, -2);
            } else {
                dp.set(key, codeIndex - blocks[blockIndex].length);
            }
        } else {
            for (var _i = 0; _i <= codeIndex; _i += 1) {
                if (getDp(codeIndex - _i, blockIndex - 1)) {
                    dp.set(key, codeIndex - _i);
                }
            }
            if (!dp.has(key)) {
                dp.set(key, -2);
            }
        }
        return dp.get(key) !== -2;
    };
    var match = getDp(code.length - 1, blocks.length - 1);
    if (!match) {
        console.error("Failed to identify template.");
        return null;
    }
    var segments = [];
    var codeIndex = code.length - 1;
    for (var blockIndex = blocks.length - 1; blockIndex >= 0; blockIndex -= 1) {
        var previousCodeIndex = dp.get(codeIndex + " " + blockIndex);
        segments.push([previousCodeIndex + 1, codeIndex]);
        codeIndex = previousCodeIndex;
    }
    segments.reverse();
    var ranges = [];
    for (var _i2 = 0; _i2 < segments.length; _i2 += 1) {
        if (template[_i2].type === "editable") {
            continue;
        }
        var segment = segments[_i2];
        var getLastLineCharacters = function getLastLineCharacters(text) {
            var lastLineCharacters = 0;
            while (lastLineCharacters + 1 < text.length && text[text.length - 1 - lastLineCharacters] != '\n') {
                lastLineCharacters += 1;
            }
            return lastLineCharacters;
        };

        var firstLine = (code.substring(0, segment[0]).match(/\n/g) || []).length;
        var firstCol = getLastLineCharacters(code.substring(0, segment[0]));
        if (firstCol) {
            firstCol += 1;
        }
        var lastLine = (code.substring(0, segment[1] + 1).match(/\n/g) || []).length;
        var lastCol = getLastLineCharacters(code.substring(0, segment[1] + 1));
        if (lastCol) {
            lastCol += 1;
        }
        var Range = window.ace.require("ace/range").Range;
        ranges.push(new Range(firstLine, firstCol, lastLine, lastCol));
    }
    return ranges;
}

function updateAceRanges(template, code, markers, folds, session, anchors) {
    var ranges = getRanges(template, code);
    if (!ranges) {
        return null;
    }
    var next = 0;
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
        for (var _iterator7 = template[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var block = _step7.value;

            if (block.type === "editable") {
                continue;
            }
            var range = ranges[next++];
            markers.push(session.addMarker(range, EnforcedTemplateStyle.getInstance().readOnly));
            if (anchors) {
                range.start = session.doc.createAnchor(range.start);
                range.end = session.doc.createAnchor(range.end);
                range.end.$insertRight = true;
            }
            if (block.type === "collapsed") {
                var Range = window.ace.require("ace/range").Range;
                folds.push(session.addFold("...", new Range(range.start.row, range.start.column, range.end.row - 1, 10000)));
                folds[folds.length - 1].isFolded = true;
                decorateCollapsed(session, range);
            } else if (block.type === "collapsible") {
                folds.push({ isFolded: false });
                decorateUncollapsed(session, range);
            } else if (block.type === "uncollapsible") {
                folds.push(null);
            }
        }
    } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                _iterator7.return();
            }
        } finally {
            if (_didIteratorError7) {
                throw _iteratorError7;
            }
        }
    }

    return ranges;
}

var _class$83, _temp$22;

var WorkspaceEnforcedTemplatePlugin = (_temp$22 = _class$83 = function (_WorkspacePlugin) {
    inherits(WorkspaceEnforcedTemplatePlugin, _WorkspacePlugin);

    function WorkspaceEnforcedTemplatePlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceEnforcedTemplatePlugin);

        var _this = possibleConstructorReturn(this, (WorkspaceEnforcedTemplatePlugin.__proto__ || Object.getPrototypeOf(WorkspaceEnforcedTemplatePlugin)).call(this, workspaceIDE));

        var code = _this.workspaceIDE.codeEditor.getValue();
        while (code.indexOf("\r") !== -1) {
            code = code.replace("\r", "");
        }
        _this.workspaceIDE.codeEditor.setValue(code);

        var contestTask = ContestTaskStore.get(_this.workspaceIDE.options.contestTaskId);
        var evalTask = contestTask.getEvalTask();
        if (!evalTask.hasEnforcedTemplates()) {
            return possibleConstructorReturn(_this);
        }
        _this.markers = [];
        _this.ranges = [];
        _this.workspace = workspaceIDE.workspace;
        _this.programmingLanguageSelect = _this.workspaceIDE.programmingLanguageSelect;
        var tryUpdateTemplate = function tryUpdateTemplate() {
            var matchedTemplate = _this.updateTemplate(_this.programmingLanguageSelect.get());
            if (matchedTemplate) {
                _this.updateAceMethods();
            } else {
                _this.undoUpdateAceMethods();
            }
            _this.updateGutter();
        };
        _this.programmingLanguageSelect.addChangeListener(function () {
            tryUpdateTemplate();
        });
        Dispatcher.Global.addListener("finishedLoadEvalJobSource", function () {
            tryUpdateTemplate();
        });
        _this.workspaceIDE.addListener("finishedFileUpload", function () {
            tryUpdateTemplate();
        });

        var UndoManager = window.ace.require("ace/undomanager").UndoManager;
        var oldUndo = UndoManager.prototype.undo;
        UndoManager.prototype.undo = function () {
            var returnValue = oldUndo.call.apply(oldUndo, [this].concat(Array.prototype.slice.call(arguments)));
            if (returnValue) {
                tryUpdateTemplate();
            }
            return returnValue;
        };
        var oldRedo = UndoManager.prototype.redo;
        UndoManager.prototype.redo = function () {
            var returnValue = oldRedo.call.apply(oldRedo, [this].concat(Array.prototype.slice.call(arguments)));
            if (returnValue) {
                tryUpdateTemplate();
            }
            return returnValue;
        };

        tryUpdateTemplate();

        var ace = _this.workspaceIDE.codeEditor.ace;
        _this.lastCursorPosition = _this.currentCursorPosition = ace.selection.getCursor();
        _this.lineCount = 0;
        ace.on("change", function () {
            _this.updateGutter();
        });
        ace.selection.on("changeCursor", function () {
            _this.lastCursorPosition = _this.currentCursorPosition;
            _this.currentCursorPosition = ace.selection.getCursor();
        });

        _this.workspaceIDE.resetTemplateButton = UI.createElement(Button, { className: _this.workspaceIDE.styleSheet.menuButton,
            label: "Load template", faIcon: "refresh",
            style: { display: "inline-block" },
            onClick: function onClick() {
                return _this.resetTemplate();
            } });
        _this.workspaceIDE.resetTemplateButton.mount(_this.workspaceIDE.optionButtonsTopRight, _this.workspaceIDE.settingsButton.node);
        return _this;
    }

    createClass(WorkspaceEnforcedTemplatePlugin, [{
        key: "undoUpdateAceMethods",
        value: function undoUpdateAceMethods() {
            if (!this.updatedAceMethods) {
                return;
            }

            var editor = this.workspaceIDE.codeEditor;
            var ace = editor.ace;
            var session = this.session;

            editor.removeNodeListener("keypress", this.keyPressCallback);
            ace.$tryReplace = ace.old$tryReplace;
            session.insert = session.oldInsert;
            session.remove = session.oldRemove;
            session.moveTest = session.oldMoveText;
            session.off("changeFold", this.changeFoldCallback);
            ace.off("gutterclick", this.gutterClickCallback);
            var Mode = window.ace.require("ace/mode/text").Mode;
            Mode.prototype.toggleCommentLines = Mode.prototype.oldToggleCommentLines;
            this.updatedAceMethods = false;
        }
    }, {
        key: "updateAceMethods",
        value: function updateAceMethods() {
            var _this2 = this;

            if (this.updatedAceMethods) {
                return;
            }

            var editor = this.workspaceIDE.codeEditor;
            var ace = editor.ace;
            var session = this.session;

            // HUGE HACK TO DEAL WITH ACE BULLSHIT
            // Pressing "enter" right before a space will delete the space even if it's
            // inside an un-editable area...
            this.keyPressCallback = function (event) {
                var cursor = ace.getCursorPosition();
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = _this2.ranges[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var range = _step.value;

                        if (insideRange(range, cursor)) {
                            event.preventDefault();
                            event.stopPropagation();
                            return;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            };
            editor.addNodeListener("keypress", this.keyPressCallback);

            var beforeRange = function beforeRange(range, position) {
                var start = range.start;
                return position.row < start.row || position.row == start.row && position.column <= start.column;
            };
            var afterRange = function afterRange(range, position) {
                var end = range.end;
                return position.row > end.row || position.row == end.row && position.column >= end.column;
            };

            var insideRange = function insideRange(range, position) {
                return !beforeRange(range, position) && !afterRange(range, position);
            };
            var intersects = function intersects(range1, range2) {
                return insideRange(range1, range2.start) || insideRange(range1, range2.end) || insideRange(range2, range1.start) || insideRange(range2, range1.end);
            };
            var allRange = function allRange(start, range, end) {
                return start.row === range.start.row && start.column === range.start.column && end.row === range.end.row && end.column === range.end.column;
            };

            //not lambdas. Need a reference
            var self = this;
            ace.old$tryReplace = ace.$tryReplace;
            ace.$tryReplace = function (replaceRange) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = self.ranges[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var range = _step2.value;

                        if (intersects(range, replaceRange)) {
                            return null;
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                return ace.old$tryReplace.apply(ace, arguments);
            };
            session.oldInsert = session.insert;
            session.insert = function (position, text) {
                var afterAll = true,
                    beforeAll = true;
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = self.ranges[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var range = _step3.value;

                        if (insideRange(range, position) || position.column === 0 && position.row === range.start.row) {
                            return;
                        }
                        if (beforeRange(range, position)) {
                            afterAll = false;
                        }
                        if (afterRange(range, position)) {
                            beforeAll = false;
                        }
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                if (!afterAll && !beforeAll) {
                    return session.oldInsert.apply(session, arguments);
                }
            };
            session.oldRemove = session.remove;
            session.remove = function (removeRange) {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = self.ranges[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var range = _step4.value;

                        if (intersects(range, removeRange) || removeRange.end.row === range.start.row) {
                            return false;
                        }
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                for (var i = 0; i < self.ranges.length - 1; i += 1) {
                    if (allRange(self.ranges[i].end, removeRange, self.ranges[i + 1].start)) {
                        return false;
                    }
                }
                return session.oldRemove.apply(session, arguments);
            };
            session.oldMoveText = session.moveText;
            session.moveText = function (fromRange, toPosition, copy) {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = self.ranges[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var range = _step5.value;

                        if (intersects(range, fromRange) || insideRange(range, toPosition)) {
                            return fromRange;
                        }
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }

                return session.oldMoveText.apply(session, arguments);
            };
            this.changeFoldCallback = function (edit) {
                if (!edit.data || editor.getValue() === "") {
                    return;
                }
                if (edit.action === "remove") {
                    for (var i = 0; i < _this2.folds.length; i += 1) {
                        if (edit.data === _this2.folds[i]) {
                            _this2.folds[i] = { isFolded: false };
                            decorateUncollapsed(session, _this2.ranges[i]);
                            _this2.updateGutter();
                            break;
                        }
                    }
                }
            };
            session.on("changeFold", this.changeFoldCallback);
            this.gutterClickCallback = function (event) {
                var row = event.getDocumentPosition().row;
                for (var i = 0; i < _this2.ranges.length; i += 1) {
                    if (_this2.ranges[i].start.row === row && _this2.folds[i]) {
                        ace.selection.clearSelection();
                        ace.selection.moveCursorTo(_this2.lastCursorPosition.row, _this2.lastCursorPosition.column);
                        if (_this2.folds[i].isFolded) {
                            session.removeFold(_this2.folds[i]);
                        } else if (!_this2.folds[i].isFolded) {
                            var Range = window.ace.require("ace/range").Range;
                            _this2.folds[i] = session.addFold("...", new Range(_this2.ranges[i].start.row, _this2.ranges[i].start.column, _this2.ranges[i].end.row - 1, 10000));
                            _this2.folds[i].isFolded = true;
                            decorateCollapsed(session, _this2.ranges[i]);
                        }
                    }
                }
            };
            ace.on("gutterclick", this.gutterClickCallback);

            var Mode = window.ace.require("ace/mode/text").Mode;
            Mode.prototype.oldToggleCommentLines = Mode.prototype.toggleCommentLines;
            Mode.prototype.toggleCommentLines = function (state, session, startRow, endRow) {
                var language = self.programmingLanguageSelect.get();
                var contestTask = ContestTaskStore.get(self.workspaceIDE.options.contestTaskId);
                var evalTask = contestTask.getEvalTask();
                var template = evalTask.enforcedTemplates[language.id] || [];
                var ranges = getRanges(template, self.workspaceIDE.codeEditor.getValue());
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                    for (var _iterator6 = ranges[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var range = _step6.value;

                        if (range.start.row <= startRow && startRow < range.end.row) {
                            return;
                        }
                        if (range.start.row <= endRow && endRow < range.end.row) {
                            return;
                        }
                    }
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                            _iterator6.return();
                        }
                    } finally {
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }

                this.oldToggleCommentLines(state, session, startRow, endRow);
            };

            this.updatedAceMethods = true;
        }
    }, {
        key: "updateGutter",
        value: function updateGutter() {
            if (!this.workspaceIDE.codeEditor.getValue()) {
                return;
            }
            this.lineCount = Math.max(this.lineCount, this.session.doc.getLength());
            for (var i = 0; i <= this.lineCount; i += 1) {
                removeDecorations(this.session, i);
            }
            for (var _i = 0; _i < (this.ranges || []).length; _i += 1) {
                if (this.folds[_i] && this.folds[_i].isFolded) {
                    decorateCollapsed(this.session, this.ranges[_i]);
                } else if (this.folds[_i]) {
                    decorateUncollapsed(this.session, this.ranges[_i]);
                }
            }
        }
    }, {
        key: "updateTemplate",
        value: function updateTemplate(language) {
            var editor = this.workspaceIDE.codeEditor;
            var ace = editor.ace,
                session = void 0;
            this.session = session = ace.getSession();
            var code = editor.getValue();

            var contestTask = ContestTaskStore.get(this.workspaceIDE.options.contestTaskId);
            var evalTask = contestTask.getEvalTask();
            var template = evalTask.enforcedTemplates[language.id] || [];
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.markers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var markerId = _step7.value;

                    session.removeMarker(markerId);
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            this.markers = [];
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = (this.folds || [])[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var fold = _step8.value;

                    if (fold && fold.isFolded) {
                        session.removeFold(fold);
                    }
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            this.folds = [];
            if (!evalTask.getTemplate(language)) {
                return;
            }
            this.ranges = updateAceRanges(template, code, this.markers, this.folds, session, true);
            if (this.ranges) {
                this.updateGutter();
            }

            return !!this.ranges;
        }
    }, {
        key: "resetTemplate",
        value: function resetTemplate() {
            var language = this.programmingLanguageSelect.get();
            var contestTask = ContestTaskStore.get(this.workspaceIDE.options.contestTaskId);
            var evalTask = contestTask.getEvalTask();
            if (evalTask.hasEnforcedTemplates() && evalTask.getTemplate(language)) {
                this.workspaceIDE.codeEditor.setValue(evalTask.getTemplate(language), 1);
                var match = this.updateTemplate(language);
                if (match) {
                    this.updateAceMethods();
                } else {
                    this.undoUpdateAceMethods();
                }
            } else {
                this.workspaceIDE.codeEditor.setValue(language.getDefaultTemplateComment() + language.getDefaultSource());
            }
        }
    }]);
    return WorkspaceEnforcedTemplatePlugin;
}(WorkspacePlugin), _class$83.priorityIndex = 400, _temp$22);

var _class$84, _temp$23;

var DestroyFileModal = function (_ActionModal) {
    inherits(DestroyFileModal, _ActionModal);

    function DestroyFileModal() {
        classCallCheck(this, DestroyFileModal);
        return possibleConstructorReturn(this, (DestroyFileModal.__proto__ || Object.getPrototypeOf(DestroyFileModal)).apply(this, arguments));
    }

    createClass(DestroyFileModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Confirm";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "span",
                null,
                "Are you sure you want to remove file ",
                UI.createElement(
                    "em",
                    null,
                    this.options.file.name
                ),
                " from the workspace?"
            )];
        }
    }, {
        key: "getCloseName",
        value: function getCloseName() {
            return "Cancel";
        }
    }, {
        key: "action",
        value: function action() {
            var _this2 = this;

            Ajax.postJSON("/workspace/delete_workspace_file/", {
                fileId: this.options.file.id
            }).then(function () {
                WorkspaceFileStore.applyDeleteEvent({
                    objectId: _this2.options.file.id
                });
                WorkspaceFileStore.dispatch("changedFile");
                _this2.hide();
            });
        }
    }]);
    return DestroyFileModal;
}(ActionModal);

var DestroyFileButton = ActionModalButton(DestroyFileModal);

var FileNameEditor = function (_UI$Element) {
    inherits(FileNameEditor, _UI$Element);

    function FileNameEditor() {
        classCallCheck(this, FileNameEditor);
        return possibleConstructorReturn(this, (FileNameEditor.__proto__ || Object.getPrototypeOf(FileNameEditor)).apply(this, arguments));
    }

    createClass(FileNameEditor, [{
        key: "render",
        value: function render() {
            return [UI.createElement(DestroyFileButton, { faIcon: "minus", level: Level.DANGER, ref: "destroyButton",
                size: Size.EXTRA_SMALL, style: { "margin": "5px" },
                modalOptions: { file: this.options.file, title: "Destroy file" } }), UI.createElement(Button, { faIcon: "pencil", level: Level.PRIMARY, ref: "editButton",
                size: Size.EXTRA_SMALL, style: { "margin": "5px" } }), UI.createElement(
                "span",
                { ref: "nameSpan" },
                this.options.file.name
            ), UI.createElement(TextInput, { ref: "fileNameInput", className: "hidden", style: { "padding-left": "5px" } })];
        }
    }, {
        key: "setFileName",
        value: function setFileName(name) {
            var _this4 = this;

            Ajax.postJSON("/workspace/rename_workspace_file/", {
                fileId: this.options.file.id,
                fileName: name
            }).then(function () {
                WorkspaceFileStore.dispatch("changedFile");
                _this4.redraw();
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.fileNameInput.addNodeListener("keypress", function (event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    _this5.setFileName(_this5.fileNameInput.getValue());
                }
            });
            this.editButton.addClickListener(function () {
                _this5.nameSpan.addClass("hidden");
                _this5.fileNameInput.removeClass("hidden");
                _this5.fileNameInput.setValue(_this5.options.file.name);
                _this5.fileNameInput.node.focus();
                _this5.fileNameInput.node.select();
            });
        }
    }]);
    return FileNameEditor;
}(UI.Element);

var CreateFileModal = function (_ActionModal2) {
    inherits(CreateFileModal, _ActionModal2);

    function CreateFileModal() {
        classCallCheck(this, CreateFileModal);
        return possibleConstructorReturn(this, (CreateFileModal.__proto__ || Object.getPrototypeOf(CreateFileModal)).apply(this, arguments));
    }

    createClass(CreateFileModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "div",
                { style: { "display": "inline-block", "margin-right": "10px" } },
                "File Name:"
            ), UI.createElement(TextInput, { placeholder: "Main1.cpp", ref: "fileNameInput", style: { "padding-left": "5px" } })];
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Add";
        }
    }, {
        key: "action",
        value: function action() {
            var _this7 = this;

            Ajax.postJSON("/workspace/create_workspace_file/", {
                fileName: this.fileNameInput.getValue(),
                workspaceId: this.options.workspaceId
            }).then(function () {
                return _this7.hide();
            });
        }
    }]);
    return CreateFileModal;
}(ActionModal);

var CreateFileButton = ActionModalButton(CreateFileModal);

var WorkspaceFileNameManager = function (_Panel) {
    inherits(WorkspaceFileNameManager, _Panel);

    function WorkspaceFileNameManager() {
        classCallCheck(this, WorkspaceFileNameManager);
        return possibleConstructorReturn(this, (WorkspaceFileNameManager.__proto__ || Object.getPrototypeOf(WorkspaceFileNameManager)).apply(this, arguments));
    }

    createClass(WorkspaceFileNameManager, [{
        key: "getTitle",
        value: function getTitle() {
            return "Files";
        }
    }, {
        key: "getFiles",
        value: function getFiles() {
            return this.options.workspace.getFiles().filter(function (file) {
                return !file.getName().startsWith('.');
            });
        }
    }, {
        key: "render",
        value: function render() {
            var children = [UI.createElement(CreateFileButton, { faIcon: "plus", ref: "addFileButton", style: { "margin": "5px" },
                level: Level.SUCCESS, size: Size.EXTRA_SMALL,
                modalOptions: {
                    title: "Add file to workspace " + this.options.workspace.name,
                    workspaceId: this.options.workspace.id
                }
            })];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getFiles()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var file = _step.value;

                    children.push(UI.createElement(FileNameEditor, { file: file, ref: "file" + file.id }));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return children;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            var refresh = function refresh() {
                _this9.redraw();
                _this9.options.fileSelect.options.selected = _this9.options.fileSelect.get();
                _this9.options.fileSelect.options.options = _this9.getFiles();
                _this9.options.fileSelect.redraw();
            };
            WorkspaceFileStore.addListener("changedFile", refresh);
            this.options.workspace.addListener("newFile", refresh);
            this.options.workspace.addListener("removedFile", refresh);
        }
    }]);
    return WorkspaceFileNameManager;
}(Panel);

var WorkspaceCustomNamedFilesPlugin = (_temp$23 = _class$84 = function (_WorkspacePlugin) {
    inherits(WorkspaceCustomNamedFilesPlugin, _WorkspacePlugin);

    function WorkspaceCustomNamedFilesPlugin(workspaceIDE) {
        classCallCheck(this, WorkspaceCustomNamedFilesPlugin);

        var _this10 = possibleConstructorReturn(this, (WorkspaceCustomNamedFilesPlugin.__proto__ || Object.getPrototypeOf(WorkspaceCustomNamedFilesPlugin)).call(this, workspaceIDE));

        _this10.workspace = workspaceIDE.workspace;

        var fileManager = workspaceIDE.getPlugin("FileManager");

        // The language select now becomes a file select
        var fileSelect = _this10.workspaceIDE.programmingLanguageSelect;

        // Remove the old change listener
        fileSelect.removeNodeListener("change", fileManager.changeFileCallback);

        // Set the new options
        fileSelect.options.options = _this10.workspace.getFiles().filter(function (file) {
            return file.getName()[0] !== '.';
        });
        fileSelect.options.selected = fileManager.getDefaultFile();
        fileSelect.redraw();

        // Add a new change listener
        fileSelect.addChangeListener(function () {
            var file = fileSelect.get();
            fileManager.setIDEOpenFile(file, ProgrammingLanguage.getLanguageForFileName(file.getName()), false);
        });

        // Append a tab for file name managing to the tab area
        var tabArea = workspaceIDE.tabArea;
        tabArea.appendChild(UI.createElement(WorkspaceFileNameManager, { workspace: _this10.workspace, fileSelect: fileSelect }));
        return _this10;
    }

    return WorkspaceCustomNamedFilesPlugin;
}(WorkspacePlugin), _class$84.priorityIndex = 1000, _temp$23);

var PluginTypes = {};
PluginTypes.BASE = [WorkspaceSettingsPlugin, WorkspaceSingleFileManagerPlugin, WorkspaceCustomRunPlugin, WorkspaceKeymapPlugin, WorkspaceCompilerParserPlugin];
PluginTypes.CHECKER = [].concat(toConsumableArray(PluginTypes.BASE), [WorkspaceCustomNamedFilesPlugin]);
PluginTypes.GLOBAL = [].concat(toConsumableArray(PluginTypes.BASE), [WorkspaceSharePlugin]);
PluginTypes.CONTEST = [].concat(toConsumableArray(PluginTypes.BASE), [WorkspaceContestSubmitPlugin]);
PluginTypes.CONTEST_PUBLIC_SOURCES = [].concat(toConsumableArray(PluginTypes.CONTEST), [WorkspaceSharePlugin]);
PluginTypes.CONTEST_ENFORCED_TEMPLATE = [].concat(toConsumableArray(PluginTypes.CONTEST), [WorkspaceEnforcedTemplatePlugin]);
PluginTypes.CONTEST_PUBLIC_SOURCES_ENFORCED_TEMPLATE = [].concat(toConsumableArray(PluginTypes.CONTEST), [WorkspaceSharePlugin, WorkspaceEnforcedTemplatePlugin]);

var WorkspaceIDE = function (_Pluginable) {
    inherits(WorkspaceIDE, _Pluginable);

    function WorkspaceIDE(options) {
        classCallCheck(this, WorkspaceIDE);

        var _this = possibleConstructorReturn(this, (WorkspaceIDE.__proto__ || Object.getPrototypeOf(WorkspaceIDE)).call(this, options));

        _this.startTime = performance.now();
        _this.options.aceTheme = _this.options.aceTheme || "ace/theme/dawn";
        return _this;
    }

    createClass(WorkspaceIDE, [{
        key: "registerPlugins",
        value: function registerPlugins() {
            this.options.plugins = (this.options.plugins || []).sort(function (a, b) {
                return a.priorityIndex - b.priorityIndex;
            });
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var PluginConstructor = _step.value;

                    this.registerPlugin(PluginConstructor);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.addSettingsListeners();
            this.dispatch("initDone");
        }
    }, {
        key: "whenLoaded",
        value: function whenLoaded(callback) {
            if (this._loaded) {
                callback();
            } else {
                this.addListenerOnce("loaded", callback);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(WorkspaceIDE.prototype.__proto__ || Object.getPrototypeOf(WorkspaceIDE.prototype), "onMount", this).call(this);
            //TODO: Optimize the start time of the workspace
            //During this time the UI is frozen
            //We should batch some of these steps, separated by releasing the thread so that UI interaction can happen

            this.workspace = this.options.workspace;

            this.sessionId = Math.random().toString().substr(2);
            this.workspace.sessionId = this.sessionId;

            console.log("Init without plugin registrations: ", performance.now() - this.startTime);

            this.codeEditor.whenLoaded(function () {
                _this2.registerPlugins();
                _this2._loaded = true;
                _this2.dispatch("loaded");
            });
        }
    }, {
        key: "addSettingsListeners",
        value: function addSettingsListeners() {
            var settingsPlugin = this.getPlugin("SettingsManager");
            // TODO: Complete this!
        }
    }]);
    return WorkspaceIDE;
}(Pluginable(WorkspacePanel));

var NavCounterBadge = function (_Badge) {
    inherits(NavCounterBadge, _Badge);

    function NavCounterBadge() {
        classCallCheck(this, NavCounterBadge);
        return possibleConstructorReturn(this, (NavCounterBadge.__proto__ || Object.getPrototypeOf(NavCounterBadge)).apply(this, arguments));
    }

    createClass(NavCounterBadge, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    right: "-5px",
                    top: "30px",
                    position: "absolute",
                    zIndex: "1"
                },
                counter: 0
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(NavCounterBadge.prototype.__proto__ || Object.getPrototypeOf(NavCounterBadge.prototype), "extraNodeAttributes", this).call(this, attr);
            if (this.options.counter === 0) {
                attr.addClass("hidden");
            } else {
                attr.removeClass("hidden");
            }
        }
    }, {
        key: "render",
        value: function render() {
            return this.options.counter;
        }
    }, {
        key: "setValue",
        value: function setValue(value) {
            this.updateOptions({ counter: value });
            NavManager.Global.checkForWrap();
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.options.counter;
        }
    }, {
        key: "increment",
        value: function increment() {
            this.setValue(this.getValue() + 1);
        }
    }, {
        key: "reset",
        value: function reset() {
            this.setValue(0);
        }
    }, {
        key: "attachListenerForAction",
        value: function attachListenerForAction(obj, eventName, action, condition) {
            this.attachListener(obj, eventName, function () {
                if (!condition || !(typeof condition === "function") || condition.apply(undefined, arguments)) {
                    action.apply(undefined, arguments);
                }
            });
        }
    }, {
        key: "attachListenerForIncrement",
        value: function attachListenerForIncrement(obj, eventName, condition) {
            var _this2 = this;

            this.attachListenerForAction(obj, eventName, function () {
                return _this2.increment();
            }, condition);
        }
    }, {
        key: "attachListenerForReset",
        value: function attachListenerForReset(obj, eventName, condition) {
            var _this3 = this;

            this.attachListenerForAction(obj, eventName, function () {
                return _this3.reset();
            }, condition);
        }
    }]);
    return NavCounterBadge;
}(Badge);

var UsersSolved = function (_UI$Element) {
    inherits(UsersSolved, _UI$Element);

    function UsersSolved(obj) {
        classCallCheck(this, UsersSolved);

        var _this = possibleConstructorReturn(this, (UsersSolved.__proto__ || Object.getPrototypeOf(UsersSolved)).call(this, obj));

        _this.summaries = _this.options.summaries;
        return _this;
    }

    createClass(UsersSolved, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                UI.T("Users that solved this task: "),
                " ",
                this.summaries.length,
                " (",
                UI.createElement(
                    "span",
                    { ref: "details", style: { "color": "blue", "cursor": "pointer" } },
                    "details"
                ),
                ")"
            ), UI.createElement(
                "div",
                { ref: "userHandlesArea", style: { maxWidth: "500px", maxHeight: "300px", "overflow-y": "scroll" } },
                " "
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.details.addClickListener(function () {
                if (_this2.users) {
                    _this2.userHandlesArea.addClass("hidden");
                    _this2.users = false;
                } else {
                    _this2.users = true;
                    if (_this2.userHandlesArea.hasClass("hidden")) {
                        _this2.userHandlesArea.removeClass("hidden");
                    } else {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = _this2.summaries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var summary = _step.value;

                                _this2.userHandlesArea.appendChild(UI.createElement(
                                    "div",
                                    { style: { margin: "3px",
                                            padding: "4px",
                                            display: "inline-block",
                                            border: "2px solid #e6e6e6",
                                            "borderRadius": "4px" } },
                                    UI.createElement(UserHandle, { id: summary.userId })
                                ));
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                }
            });
        }
    }]);
    return UsersSolved;
}(UI.Element);

var BestSubmissionsTable = function (_Table) {
    inherits(BestSubmissionsTable, _Table);

    function BestSubmissionsTable() {
        classCallCheck(this, BestSubmissionsTable);
        return possibleConstructorReturn(this, (BestSubmissionsTable.__proto__ || Object.getPrototypeOf(BestSubmissionsTable)).apply(this, arguments));
    }

    createClass(BestSubmissionsTable, [{
        key: "getEntryKey",
        value: function getEntryKey(entry, index) {
            return index;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.summaries;
        }
    }]);
    return BestSubmissionsTable;
}(Table);

var BestTimesTable = function (_BestSubmissionsTable) {
    inherits(BestTimesTable, _BestSubmissionsTable);

    function BestTimesTable(obj) {
        classCallCheck(this, BestTimesTable);

        var _this4 = possibleConstructorReturn(this, (BestTimesTable.__proto__ || Object.getPrototypeOf(BestTimesTable)).call(this, obj));

        _this4.summaries = _this4.options.summaries;
        _this4.summaries.sort(function (a, b) {
            return a.bestTime - b.bestTime;
        });
        _this4.summaries = _this4.summaries.slice(0, Math.min(10, _this4.summaries.length));
        return _this4;
    }

    createClass(BestTimesTable, [{
        key: "setColumns",
        value: function setColumns() {
            var style = {
                textAlign: "center"
            };
            get(BestTimesTable.prototype.__proto__ || Object.getPrototypeOf(BestTimesTable.prototype), "setColumns", this).call(this, [{
                value: function value(entry) {
                    return UI.createElement(UserHandle, { id: entry.userId });
                },
                headerName: "User",
                cellStyle: style,
                headerStyle: style
            }, {
                value: function value(entry) {
                    return Formatter.cpuTime(entry.bestTime);
                },
                headerName: "CPU Time",
                cellStyle: style,
                headerStyle: style
            }, {
                value: function value(entry) {
                    return UI.createElement(SubmissionSummaryMarkup, { id: entry.bestTimeEvalJobId });
                },
                headerName: "Submission",
                headerStyle: style
            }]);
        }
    }]);
    return BestTimesTable;
}(BestSubmissionsTable);

var BestMemoryTable = function (_BestSubmissionsTable2) {
    inherits(BestMemoryTable, _BestSubmissionsTable2);

    function BestMemoryTable(obj) {
        classCallCheck(this, BestMemoryTable);

        var _this5 = possibleConstructorReturn(this, (BestMemoryTable.__proto__ || Object.getPrototypeOf(BestMemoryTable)).call(this, obj));

        _this5.summaries = _this5.options.summaries;
        _this5.summaries.sort(function (a, b) {
            return a.bestMemory - b.bestMemory;
        });
        _this5.summaries = _this5.summaries.slice(0, Math.min(10, _this5.summaries.length));
        return _this5;
    }

    createClass(BestMemoryTable, [{
        key: "setColumns",
        value: function setColumns() {
            var style = {
                textAlign: "center"
            };
            get(BestMemoryTable.prototype.__proto__ || Object.getPrototypeOf(BestMemoryTable.prototype), "setColumns", this).call(this, [{
                value: function value(entry) {
                    return UI.createElement(UserHandle, { id: entry.userId });
                },
                headerName: "User",
                cellStyle: style,
                headerStyle: style
            }, {
                value: function value(entry) {
                    return Formatter.memory(entry.bestMemory);
                },
                headerName: "Memory usage",
                cellStyle: style,
                headerStyle: style
            }, {
                value: function value(entry) {
                    return UI.createElement(SubmissionSummaryMarkup, { id: entry.bestMemoryEvalJobId });
                },
                headerName: "Submission",
                headerStyle: style
            }]);
        }
    }]);
    return BestMemoryTable;
}(BestSubmissionsTable);

var LoadingTable = function (_Table2) {
    inherits(LoadingTable, _Table2);

    function LoadingTable() {
        classCallCheck(this, LoadingTable);
        return possibleConstructorReturn(this, (LoadingTable.__proto__ || Object.getPrototypeOf(LoadingTable)).apply(this, arguments));
    }

    createClass(LoadingTable, [{
        key: "getEntryKey",
        value: function getEntryKey(entry, index) {
            return index;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return [0];
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var style = {
                textAlign: "center"
            };
            get(LoadingTable.prototype.__proto__ || Object.getPrototypeOf(LoadingTable.prototype), "setColumns", this).call(this, [{
                value: function value(entry) {
                    return "Loading...";
                },
                headerName: "User",
                cellStyle: style,
                headerStyle: style
            }, {
                value: function value(entry) {
                    return "";
                },
                headerName: "CPU Time",
                cellStyle: style,
                headerStyle: style
            }, {
                value: function value(entry) {
                    return "";
                },
                headerName: "Submission",
                headerStyle: style
            }]);
        }
    }]);
    return LoadingTable;
}(Table);

var EvalTaskStatisticsWidget = function (_UI$Element2) {
    inherits(EvalTaskStatisticsWidget, _UI$Element2);

    function EvalTaskStatisticsWidget(obj) {
        classCallCheck(this, EvalTaskStatisticsWidget);

        var _this7 = possibleConstructorReturn(this, (EvalTaskStatisticsWidget.__proto__ || Object.getPrototypeOf(EvalTaskStatisticsWidget)).call(this, obj));

        _this7.options.evalTaskId = _this7.options.evalTaskId || _this7.options.evalTask.id;
        return _this7;
    }

    createClass(EvalTaskStatisticsWidget, [{
        key: "render",
        value: function render() {
            var _this8 = this;

            var summaries = this.getSummaries();
            if (summaries) {
                return [UI.createElement(UsersSolved, { summaries: summaries }), UI.createElement(
                    "h3",
                    null,
                    " ",
                    UI.T("Solutions with lowest CPU Time:"),
                    " "
                ), UI.createElement(BestTimesTable, { summaries: summaries,
                    style: { "border": "1px solid #BBB", "borderRadius": "5px" } }), UI.createElement(
                    "h3",
                    null,
                    " ",
                    UI.T("Solutions with lowest memory usage:"),
                    " "
                ), UI.createElement(BestMemoryTable, { summaries: summaries,
                    style: { "border": "1px solid #BBB", "borderRadius": "5px" } })];
            }
            EvalTaskUserSummaryStore.fetchEvalTask(this.options.evalTaskId, function () {
                _this8.redraw();
            });
            return [UI.createElement(
                "h3",
                null,
                "Loading..."
            ), UI.createElement(
                "h3",
                null,
                " ",
                UI.T("Solutions with lowest CPU Time:"),
                " "
            ), UI.createElement(LoadingTable, null), UI.createElement(
                "h3",
                null,
                " ",
                UI.T("Solutions with lowest memory usage:"),
                " "
            ), UI.createElement(LoadingTable, null)];
        }
    }, {
        key: "getSummaries",
        value: function getSummaries() {
            if (EvalTaskUserSummaryStore.fetchedEvalTasks.has(this.options.evalTaskId)) {
                var summariesOfEvalTask = EvalTaskUserSummaryStore.getByEvalTaskId(this.options.evalTaskId);
                var result = [];
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = summariesOfEvalTask[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var summary = _step2.value;

                        if (summary.solved) {
                            result.push(summary);
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                return result;
            }
            return null;
        }
    }]);
    return EvalTaskStatisticsWidget;
}(UI.Element);

var EvalTaskBadge = function EvalTaskBadge(tooltip, children, faIcon) {
    var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "#eeeeaa";
    return function (_UI$Primitive) {
        inherits(Badge$$1, _UI$Primitive);

        function Badge$$1() {
            classCallCheck(this, Badge$$1);
            return possibleConstructorReturn(this, (Badge$$1.__proto__ || Object.getPrototypeOf(Badge$$1)).apply(this, arguments));
        }

        createClass(Badge$$1, [{
            key: "getDefaultOptions",
            value: function getDefaultOptions() {
                return {
                    HTMLtitle: tooltip,
                    style: {
                        cursor: "help",
                        backgroundColor: color,
                        padding: "6px",
                        borderRadius: "4px",
                        fontSize: "1.3em",
                        marginBottom: "5px",
                        marginLeft: "6px"
                    }
                };
            }
        }, {
            key: "render",
            value: function render() {
                return [UI.createElement(FAIcon, { icon: faIcon }), children];
            }
        }]);
        return Badge$$1;
    }(UI.Primitive("span"));
};

var InteractiveBadge = EvalTaskBadge("This task is interactive", "Interactive", "exchange");
var EnforcedTemplateBadge = EvalTaskBadge("This task uses enforced templates", "Template", "code");
var OutputOnlyBadge = EvalTaskBadge("This task is output-only", "Output", "file-text-o");
var ApproximationBadge = EvalTaskBadge("This is an approximation task", "Aprox", "");

var ServerInputTest = function (_UI$Element) {
    inherits(ServerInputTest, _UI$Element);

    function ServerInputTest() {
        classCallCheck(this, ServerInputTest);
        return possibleConstructorReturn(this, (ServerInputTest.__proto__ || Object.getPrototypeOf(ServerInputTest)).apply(this, arguments));
    }

    createClass(ServerInputTest, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                type: "increment",
                height: 150
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            options.input = options.input && options.input.replace(new RegExp("\\\\n", "g"), "\n");
            get(ServerInputTest.prototype.__proto__ || Object.getPrototypeOf(ServerInputTest.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("height", this.options.height + "px");
            attr.setStyle("display", "flex");
            attr.setStyle("flex-direction", "column");
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            return [UI.createElement(
                "div",
                null,
                UI.createElement(
                    Button,
                    { ref: "runInputButton", level: Level.PRIMARY, onClick: function onClick() {
                            return _this2.recalculate();
                        },
                        faIcon: "cogs", style: { marginBottom: "10px" } },
                    " ",
                    UI.T("Compute")
                )
            ), UI.createElement(
                "div",
                { ref: "container", style: { flex: "1" } },
                UI.createElement(
                    "div",
                    { style: { float: "left", width: "48%", height: "100%" } },
                    UI.createElement(CodeEditor, { ref: "inputEditor", value: this.options.input, style: { height: "100%" } })
                ),
                UI.createElement(
                    "div",
                    { style: { float: "right", width: "48%", height: "100%", marginRight: "2%" } },
                    UI.createElement(StaticCodeHighlighter, { ref: "outputView", style: { height: "100%" } })
                )
            )];
        }
    }, {
        key: "recalculate",
        value: function recalculate() {
            var _this3 = this;

            var request = {
                type: this.options.type,
                input: this.inputEditor.getValue()
            };
            this.runInputButton.setLevel(Level.WARNING);
            Ajax.postJSON("/eval/input_server_test/", request, {
                onComplete: function onComplete() {
                    return setTimeout(function () {
                        return _this3.runInputButton.setLevel(Level.PRIMARY);
                    }, 2000);
                }
            }).then(function (data) {
                _this3.outputView.setValue(String(data.output));
                _this3.runInputButton.setLevel(Level.SUCCESS);
            });
        }
    }]);
    return ServerInputTest;
}(UI.Element);

var EvalTaskExamplesTable = function EvalTaskExamplesTable(evalTask) {
    return function (_Table) {
        inherits(EvalTaskExamplesTable, _Table);

        function EvalTaskExamplesTable() {
            classCallCheck(this, EvalTaskExamplesTable);
            return possibleConstructorReturn(this, (EvalTaskExamplesTable.__proto__ || Object.getPrototypeOf(EvalTaskExamplesTable)).apply(this, arguments));
        }

        createClass(EvalTaskExamplesTable, [{
            key: "setOptions",
            value: function setOptions(options) {
                get(EvalTaskExamplesTable.prototype.__proto__ || Object.getPrototypeOf(EvalTaskExamplesTable.prototype), "setOptions", this).call(this, options);

                this.entries = evalTask.exampleTests;
                this.haveComments = false;

                for (var i = 0; i < this.entries.length; i += 1) {
                    this.haveComments = this.haveComments || this.entries[i].hasOwnProperty("comment");
                }

                this.setColumns();
            }
        }, {
            key: "getCellStyle",
            value: function getCellStyle() {
                return {};
            }
        }, {
            key: "setColumns",
            value: function setColumns() {
                var _this2 = this;

                var columns = void 0;

                if (evalTask.getType() == 0) {
                    // non interactive problems
                    columns = [{
                        value: function value(entry) {
                            return UI.createElement(
                                "pre",
                                null,
                                entry.input
                            );
                        },
                        headerName: UI.T("Input"),
                        cellStyle: this.getCellStyle()
                    }, {
                        value: function value(entry) {
                            return UI.createElement(
                                "pre",
                                null,
                                entry.output
                            );
                        },
                        headerName: UI.T("Output"),
                        cellStyle: this.getCellStyle()
                    }];
                } else {
                    // interactive problems
                    columns = [{
                        value: function value(entry) {
                            return UI.createElement(InteractiveTaskLog, { extra: entry.extra });
                        },
                        headerName: UI.T("Interaction"),
                        cellStyle: this.getCellStyle()
                    }];
                }

                if (this.haveComments || this.options.loadTestButton) {
                    columns.push({
                        value: function value(entry) {
                            var result = [];
                            if (entry.comment) {
                                result.push(UI.createElement(MarkupRenderer, { classMap: evalTask.articleClassMap,
                                    value: entry.comment }));
                            }
                            if (_this2.options.loadTestButton) {
                                result.push(UI.createElement(Button, { label: UI.T(_this2.options.loadTestText || "Load test"),
                                    onClick: function onClick() {
                                        evalTask.dispatch("loadTest", entry.input);
                                    },
                                    level: Level.INFO,
                                    style: { display: "block", margin: "5px" } }));
                            }
                            return result;
                        },
                        headerName: UI.T("Explanation"),
                        cellStyle: this.getCellStyle()
                    });
                }
                get(EvalTaskExamplesTable.prototype.__proto__ || Object.getPrototypeOf(EvalTaskExamplesTable.prototype), "setColumns", this).call(this, columns);
            }
        }]);
        return EvalTaskExamplesTable;
    }(Table);
};

var EvalTaskExamplesTableForPDF = function EvalTaskExamplesTableForPDF(evalTask) {
    return function (_EvalTaskExamplesTabl) {
        inherits(EvalTaskExamplesTableForPDF, _EvalTaskExamplesTabl);

        function EvalTaskExamplesTableForPDF() {
            classCallCheck(this, EvalTaskExamplesTableForPDF);
            return possibleConstructorReturn(this, (EvalTaskExamplesTableForPDF.__proto__ || Object.getPrototypeOf(EvalTaskExamplesTableForPDF)).apply(this, arguments));
        }

        createClass(EvalTaskExamplesTableForPDF, [{
            key: "getDefaultOptions",
            value: function getDefaultOptions() {
                return Object.assign({}, get(EvalTaskExamplesTableForPDF.prototype.__proto__ || Object.getPrototypeOf(EvalTaskExamplesTableForPDF.prototype), "getDefaultOptions", this).call(this), {
                    pageBreakInside: "avoid"
                });
            }
        }, {
            key: "getCellStyle",
            value: function getCellStyle() {
                return {
                    pageBreakBefore: "avoid"
                };
            }
        }]);
        return EvalTaskExamplesTableForPDF;
    }(EvalTaskExamplesTable(evalTask));
};

var _class$85, _descriptor$35, _descriptor2$31, _descriptor3$26, _descriptor4$23, _descriptor5$21, _descriptor6$18, _descriptor7$16, _descriptor8$13, _descriptor9$10, _descriptor10$8;

function _initDefineProp$36(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$37(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var ContestQuestionListStyle = (_class$85 = function (_CardPanelStyle) {
    inherits(ContestQuestionListStyle, _CardPanelStyle);

    function ContestQuestionListStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, ContestQuestionListStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ContestQuestionListStyle.__proto__ || Object.getPrototypeOf(ContestQuestionListStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$36(_this, "contestQuestionList", _descriptor$35, _this), _initDefineProp$36(_this, "cardPanelContainer", _descriptor2$31, _this), _this.cardPanelBodyStyle = {
            padding: _this.themeProperties.CONTEST_QUESTION_CARD_PANEL_BODY_PADDING + "px",
            lineHeight: _this.themeProperties.CONTEST_QUESTION_CARD_PANEL_LINE_HEIGHT + "px"
        }, _initDefineProp$36(_this, "extraElementStyle", _descriptor3$26, _this), _initDefineProp$36(_this, "questionsContainer", _descriptor4$23, _this), _initDefineProp$36(_this, "questionsColumnContainer", _descriptor5$21, _this), _initDefineProp$36(_this, "filterContainer", _descriptor6$18, _this), _initDefineProp$36(_this, "filterSwitcherContainer", _descriptor7$16, _this), _this.filterOptionBase = {
            height: "40px",
            paddingLeft: "5px",
            border: "1px solid black",
            justifyContent: "center",
            display: "flex",
            flexDirection: "column",
            fontSize: "1.2em",
            cursor: "pointer"
        }, _initDefineProp$36(_this, "filterOption", _descriptor8$13, _this), _initDefineProp$36(_this, "filterOptionFocused", _descriptor9$10, _this), _initDefineProp$36(_this, "filterSwitcher", _descriptor10$8, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return ContestQuestionListStyle;
}(CardPanelStyle), _descriptor$35 = _applyDecoratedDescriptor$37(_class$85.prototype, "contestQuestionList", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            margin: "0 auto",
            justifyContent: "center"
        };
    }
}), _descriptor2$31 = _applyDecoratedDescriptor$37(_class$85.prototype, "cardPanelContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            flex: "1",
            maxWidth: "100%",
            padding: this.themeProperties.CONTEST_QUESTION_CARD_PANEL_PADDING,
            width: this.themeProperties.CONTEST_QUESTION_CARD_PANEL_WIDTH
        };
    }
}), _descriptor3$26 = _applyDecoratedDescriptor$37(_class$85.prototype, "extraElementStyle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            flex: "1",
            padding: this.themeProperties.CONTEST_QUESTION_CARD_PANEL_PADDING,
            minWidth: this.themeProperties.CONTEST_QUESTION_CARD_PANEL_MIN_WIDTH
        };
    }
}), _descriptor4$23 = _applyDecoratedDescriptor$37(_class$85.prototype, "questionsContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            margin: "0 auto",

            display: "flex",
            justifyContent: "center",

            overflow: "hidden"
        };
    }
}), _descriptor5$21 = _applyDecoratedDescriptor$37(_class$85.prototype, "questionsColumnContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "50%",
            overflow: "auto"
        };
    }
}), _descriptor6$18 = _applyDecoratedDescriptor$37(_class$85.prototype, "filterContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            overflowY: "auto",
            width: "25%",
            height: "100%",
            float: "left"
        };
    }
}), _descriptor7$16 = _applyDecoratedDescriptor$37(_class$85.prototype, "filterSwitcherContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "75%",
            height: "100%",
            float: "right"
        };
    }
}), _descriptor8$13 = _applyDecoratedDescriptor$37(_class$85.prototype, "filterOption", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return Object.assign({
            backgroundColor: this.themeProperties.COLOR_BACKGROUND,
            ":hover": {
                backgroundColor: this.themeProperties.COLOR_BACKGROUND_ALTERNATIVE
            }
        }, this.filterOptionBase);
    }
}), _descriptor9$10 = _applyDecoratedDescriptor$37(_class$85.prototype, "filterOptionFocused", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return Object.assign({
            ":hover": {
                backgroundColor: this.themeProperties.COLOR_BACKGROUND_ALTERNATIVE
            },
            backgroundColor: this.themeProperties.COLOR_BACKGROUND_ALTERNATIVE
        }, this.filterOptionBase);
    }
}), _descriptor10$8 = _applyDecoratedDescriptor$37(_class$85.prototype, "filterSwitcher", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "100%",
            overflow: "auto"
        };
    }
}), _class$85);

var _dec$37, _class$86, _dec2$15, _class2$14, _dec3$4, _class3$24;

var FilterOptions = {
    ALL: "All",
    GENERAL: "General"
};
function getQuestionsForFilter(filter, contest) {
    var questions = contest.getQuestions();
    if (filter === FilterOptions.ALL) {
        return questions;
    }
    if (filter === FilterOptions.GENERAL) {
        return questions.filter(function (question) {
            return !question.contestTaskId;
        });
    }
    var contestTask = contest.getContestTasks().find(function (contestTask) {
        return contestTask.longName === filter;
    });
    return questions.filter(function (question) {
        return question.contestTaskId === contestTask.id;
    });
}

var ContestQuestionList = (_dec$37 = registerStyle(ContestQuestionListStyle), _dec$37(_class$86 = function (_UI$Element) {
    inherits(ContestQuestionList, _UI$Element);

    function ContestQuestionList() {
        classCallCheck(this, ContestQuestionList);
        return possibleConstructorReturn(this, (ContestQuestionList.__proto__ || Object.getPrototypeOf(ContestQuestionList)).apply(this, arguments));
    }

    createClass(ContestQuestionList, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({
                displayListTitle: true
            }, get(ContestQuestionList.prototype.__proto__ || Object.getPrototypeOf(ContestQuestionList.prototype), "getDefaultOptions", this).call(this));
        }
    }, {
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "getQuestions",
        value: function getQuestions() {
            return this.getContest().getQuestions();
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.contestQuestionList);
        }
    }, {
        key: "renderQuestion",
        value: function renderQuestion(question) {
            if (!question.shouldAppear()) {
                return null;
            }
            var askedTime = StemDate(question.timeAsked).format("HH:mm:ss");
            var answeredTime = void 0;

            var answeredStatus = void 0;
            if (question.replyTime) {
                answeredTime = StemDate(question.replyTime).format("HH:mm:ss");
                answeredStatus = UI.createElement(
                    "i",
                    null,
                    " (Answered at " + answeredTime + ")"
                );
            }

            var questionType = void 0;
            if (question.isPublic) {
                questionType = "Public Answer";
            }

            var level = Level.PRIMARY;

            var answerElement = void 0;
            if (question.isAnswered()) {
                level = Level.SUCCESS;
                answerElement = UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        "Answer: "
                    ),
                    question.reply
                );
            }

            if (question.isInvalid) {
                level = Level.DANGER;
                answerElement = UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        "Invalid question"
                    )
                );
            }

            var target = question.contestTaskId ? ContestTaskStore.get(question.contestTaskId).longName : FilterOptions.GENERAL;

            var votingWidget = question.isPublic && question.isAnswered() && UI.createElement(CommentVotingWidgetWithThumbs, { height: 40, message: question });

            var title = UI.createElement(
                "div",
                null,
                UI.createElement(
                    "div",
                    null,
                    askedTime,
                    answeredStatus,
                    ": ",
                    UI.createElement(
                        "strong",
                        null,
                        target
                    )
                ),
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        questionType
                    )
                )
            );

            return UI.createElement(
                "div",
                { className: this.styleSheet.cardPanelContainer, key: question.id },
                UI.createElement(
                    CardPanel,
                    { title: title,
                        level: level,
                        bodyStyle: this.styleSheet.cardPanelBodyStyle,
                        id: "question" + question.id },
                    UI.createElement(
                        "p",
                        null,
                        UI.createElement(UserHandle, { userId: question.userAskedId }),
                        ": " + question.question
                    ),
                    answerElement,
                    votingWidget || null
                )
            );
        }
    }, {
        key: "render",
        value: function render() {
            // Sort questions by latest activity
            var userQuestions = this.getQuestions().filter(function (question) {
                return question.isAskedByCurrentUser();
            }).sort(function (x, y) {
                return Math.max(y.timeAsked, y.replyTime || 0) - Math.max(x.timeAsked, x.replyTime || 0);
            });
            var publicQuestions = this.getQuestions().filter(function (question) {
                return !question.isAskedByCurrentUser();
            }).sort(function (x, y) {
                return Math.max(y.timeAsked, y.replyTime || 0) - Math.max(x.timeAsked, x.replyTime || 0);
            });
            var recentQuestions = publicQuestions.slice(0, 2);
            var sortedPublicQuestionsByBalance = publicQuestions.length > 2 ? publicQuestions.slice(recentQuestions.length, publicQuestions.length).sort(function (x, y) {
                return y.getVotesBalance() - x.getVotesBalance();
            }) : [];

            var yourQuestionsTitle = this.options.displayListTitle && userQuestions.length ? UI.createElement(
                "h4",
                { style: { textAlign: "center", borderBottom: "2px solid black" } },
                "Own questions"
            ) : null;
            var publicQuestionsTitle = this.options.displayListTitle && publicQuestions.length ? UI.createElement(
                "h4",
                { style: { textAlign: "center", borderBottom: "2px solid black" } },
                "Public questions"
            ) : null;
            return [yourQuestionsTitle, userQuestions.map(this.renderQuestion, this), publicQuestionsTitle, recentQuestions.concat(sortedPublicQuestionsByBalance).map(this.renderQuestion, this)];
        }
    }, {
        key: "attachQuestionListeners",
        value: function attachQuestionListeners() {
            var _this2 = this;

            var questionCallback = function questionCallback(question) {
                if (question.contestId === _this2.getContest().id) {
                    _this2.redraw();
                }
            };
            this.attachCreateListener(ContestQuestionStore, questionCallback);
            this.attachListener(this.getContest(), "updateQuestion", questionCallback);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.attachQuestionListeners();
        }
    }]);
    return ContestQuestionList;
}(UI.Element)) || _class$86);

var ContestTaskQuestionList = function (_ContestQuestionList) {
    inherits(ContestTaskQuestionList, _ContestQuestionList);

    function ContestTaskQuestionList() {
        classCallCheck(this, ContestTaskQuestionList);
        return possibleConstructorReturn(this, (ContestTaskQuestionList.__proto__ || Object.getPrototypeOf(ContestTaskQuestionList)).apply(this, arguments));
    }

    createClass(ContestTaskQuestionList, [{
        key: "getQuestions",
        value: function getQuestions() {
            var _this4 = this;

            return this.getContest().getQuestions().filter(function (question) {
                return question.contestTaskId === _this4.options.contestTaskId;
            });
        }
    }]);
    return ContestTaskQuestionList;
}(ContestQuestionList);

var AdminContestQuestionCard = function (_CardPanel) {
    inherits(AdminContestQuestionCard, _CardPanel);

    function AdminContestQuestionCard() {
        classCallCheck(this, AdminContestQuestionCard);
        return possibleConstructorReturn(this, (AdminContestQuestionCard.__proto__ || Object.getPrototypeOf(AdminContestQuestionCard)).apply(this, arguments));
    }

    createClass(AdminContestQuestionCard, [{
        key: "getLevel",

        // getDefaultOptions() {
        //     return Object.assign({}, super.getDefaultOptions(), {
        //         bodyStyle: {
        //             padding: "3px",
        //         }
        //     });
        // }

        // extraNodeAttributes(attr) {
        //     super.extraNodeAttributes(attr);
        //     attr.addClass(this.styleSheet.cardPanelContainer);
        // }

        value: function getLevel() {
            if (this.options.question) {
                if (this.options.question.isInvalid) {
                    return Level.DANGER;
                }
                if (this.options.question.isAnswered()) {
                    return Level.SUCCESS;
                }
            }
            return Level.PRIMARY;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            var question = this.options.question;
            var askedTime = StemDate(question.timeAsked).format("HH:mm:ss");

            var answeredStatus = void 0,
                answeredTime = void 0;
            if (question.replyTime) {
                answeredTime = StemDate(question.replyTime).format("HH:mm:ss");
                answeredStatus = UI.createElement(
                    "i",
                    null,
                    "(Answered at ",
                    answeredTime,
                    ")"
                );
            }

            var target = question.contestTaskId ? ContestTaskStore.get(question.contestTaskId).longName : FilterOptions.GENERAL;

            return UI.createElement(
                "div",
                null,
                askedTime,
                answeredStatus,
                ": ",
                UI.createElement(
                    "strong",
                    null,
                    target
                )
            );
        }
    }, {
        key: "logReply",
        value: function logReply() {
            var _this6 = this;

            var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var xhrPromise = Ajax.postJSON("/contest/question_typing_state_change/", {
                questionId: this.options.question.id,
                contestId: this.options.question.contestId,
                reply: this.answerField.getValue(),
                sessionId: this.sessionId
            });
            if (redraw) {
                xhrPromise.then(function () {
                    return _this6.redraw();
                });
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this7 = this;

            var question = this.options.question;
            var someoneTypingArea = void 0,
                isReadonly = false,
                backgroundColor = Theme.Global.getProperty("COLOR_BACKGROUND", "#fff");
            if (question.replyUserId && question.replyUserId !== USER.id && !question.isAnswered() && !question.isInvalid) {
                isReadonly = true;
                backgroundColor = Theme.Global.getProperty("COLOR_BACKGROUND_ALTERNATIVE", "#f6f6f6");
                someoneTypingArea = UI.createElement(
                    Badge,
                    { level: Level.WARNING, key: "someoneTypingArea", style: { marginBottom: "10px" } },
                    UI.createElement(
                        "em",
                        null,
                        UI.createElement(UserHandle, { userId: question.replyUserId }),
                        " is typing a response!"
                    ),
                    UI.createElement(
                        Button,
                        { level: Level.PRIMARY, size: Size.EXTRA_SMALL,
                            onClick: function onClick() {
                                return _this7.logReply(true);
                            }, style: { marginLeft: "3px" } },
                        "Take over"
                    )
                );
            }

            var answerElement = UI.createElement(
                "div",
                null,
                UI.createElement(
                    FormField,
                    { inline: false, style: { margin: "initial", padding: "0" } },
                    UI.createElement(
                        "strong",
                        { style: { display: "block" } },
                        "Answer: "
                    ),
                    someoneTypingArea,
                    UI.createElement(TextArea, { ref: "answerField", rows: "5", readOnly: isReadonly, value: question.reply || "",
                        style: { height: "100px", maxWidth: "100%", backgroundColor: backgroundColor } })
                ),
                UI.createElement(
                    ButtonGroup,
                    { size: Size.SMALL },
                    UI.createElement(
                        Button,
                        { ref: "answerQuestionButton", level: Level.PRIMARY, disabled: isReadonly },
                        question.isAnswered() ? "Change answer" : "Answer"
                    ),
                    UI.createElement(
                        Button,
                        { ref: "invalidQuestionButton", level: Level.DANGER, disabled: isReadonly },
                        "Invalid question"
                    )
                ),
                UI.createElement(
                    "div",
                    { style: { paddingTop: "10px" } },
                    UI.createElement(
                        "strong",
                        null,
                        "Public answer",
                        UI.createElement(CheckboxInput, { ref: "publicAnswerCheckbox", checked: question.isPublic })
                    )
                )
            );

            return [UI.createElement(UserHandle, { userId: question.userAskedId }), UI.createElement(
                "strong",
                null,
                ": "
            ), question.question, answerElement];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            get(AdminContestQuestionCard.prototype.__proto__ || Object.getPrototypeOf(AdminContestQuestionCard.prototype), "onMount", this).call(this);

            this.sessionId = Math.random().toString().substr(2);
            this.attachEventListener(this.options.question, "typingStateChange", function (event) {
                if (event.sessionId !== _this8.sessionId) {
                    _this8.redraw();
                }
            });

            var logReplyThrottler = new CallThrottler({ throttle: 500 });
            var logReplyThrottled = logReplyThrottler.wrap(function () {
                return _this8.logReply();
            });
            this.answerField.addNodeListener("input", logReplyThrottled);

            this.answerQuestionButton.addClickListener(function () {
                if (!confirm("Are you sure you want to answer this question?")) {
                    return;
                }
                _this8.answerQuestion();
            });
            this.invalidQuestionButton.addClickListener(function () {
                if (!confirm("Are you sure you want to invalidate this question? This cannot be undone!")) {
                    return;
                }
                _this8.answerQuestion(true);
            });
        }
    }, {
        key: "answerQuestion",
        value: function answerQuestion(invalidQuestion) {
            var answer = this.answerField.getValue();
            var isPublicAnswer = this.publicAnswerCheckbox.getValue();

            var request = {
                contestId: this.options.contest.id,
                questionId: this.options.question.id
            };

            if (invalidQuestion) {
                request.isInvalid = true;
            } else {
                if (!answer) return;
                if (isPublicAnswer) {
                    request.isPublic = true;
                }
                request.reply = answer;
            }

            Ajax.postJSON("/contest/answer_question/", request);
        }
    }]);
    return AdminContestQuestionCard;
}(CardPanel);

var AdminContestQuestionList = function (_ContestQuestionList2) {
    inherits(AdminContestQuestionList, _ContestQuestionList2);

    function AdminContestQuestionList() {
        classCallCheck(this, AdminContestQuestionList);
        return possibleConstructorReturn(this, (AdminContestQuestionList.__proto__ || Object.getPrototypeOf(AdminContestQuestionList)).apply(this, arguments));
    }

    createClass(AdminContestQuestionList, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(AdminContestQuestionList.prototype.__proto__ || Object.getPrototypeOf(AdminContestQuestionList.prototype), "getDefaultOptions", this).call(this), {
                displayListTitle: false
            });
        }
    }, {
        key: "renderQuestion",
        value: function renderQuestion(question) {
            return UI.createElement(
                "div",
                { className: this.styleSheet.cardPanelContainer, key: question.id },
                UI.createElement(AdminContestQuestionCard, {
                    question: question,
                    contest: this.getContest(),
                    bodyStyle: { padding: "15px" } })
            );
        }
    }, {
        key: "getQuestions",
        value: function getQuestions() {
            return getQuestionsForFilter(this.options.filter || FilterOptions.ALL, this.getContest());
        }
    }]);
    return AdminContestQuestionList;
}(ContestQuestionList);

var AnsweredContestQuestionList = function (_AdminContestQuestion) {
    inherits(AnsweredContestQuestionList, _AdminContestQuestion);

    function AnsweredContestQuestionList() {
        classCallCheck(this, AnsweredContestQuestionList);
        return possibleConstructorReturn(this, (AnsweredContestQuestionList.__proto__ || Object.getPrototypeOf(AnsweredContestQuestionList)).apply(this, arguments));
    }

    createClass(AnsweredContestQuestionList, [{
        key: "getQuestions",
        value: function getQuestions() {
            var questions = get(AnsweredContestQuestionList.prototype.__proto__ || Object.getPrototypeOf(AnsweredContestQuestionList.prototype), "getQuestions", this).call(this);

            questions = questions.filter(function (a) {
                return a.isAnswered() || a.isInvalid;
            }).sort(function (a, b) {
                return b.replyTime - a.replyTime;
            });
            if (questions.length > 20) {
                questions = questions.slice(0, 20);
            }
            return questions;
        }
    }]);
    return AnsweredContestQuestionList;
}(AdminContestQuestionList);

var UnansweredContestQuestionList = function (_AdminContestQuestion2) {
    inherits(UnansweredContestQuestionList, _AdminContestQuestion2);

    function UnansweredContestQuestionList() {
        classCallCheck(this, UnansweredContestQuestionList);
        return possibleConstructorReturn(this, (UnansweredContestQuestionList.__proto__ || Object.getPrototypeOf(UnansweredContestQuestionList)).apply(this, arguments));
    }

    createClass(UnansweredContestQuestionList, [{
        key: "getQuestions",
        value: function getQuestions() {
            var questions = get(UnansweredContestQuestionList.prototype.__proto__ || Object.getPrototypeOf(UnansweredContestQuestionList.prototype), "getQuestions", this).call(this);

            return questions.filter(function (a) {
                return !(a.isAnswered() || a.isInvalid);
            }).sort(function (a, b) {
                return a.id - b.id;
            });
        }
    }]);
    return UnansweredContestQuestionList;
}(AdminContestQuestionList);

var FilterOption = (_dec2$15 = registerStyle(ContestQuestionListStyle), _dec2$15(_class2$14 = function (_UI$Element2) {
    inherits(FilterOption, _UI$Element2);

    function FilterOption() {
        classCallCheck(this, FilterOption);
        return possibleConstructorReturn(this, (FilterOption.__proto__ || Object.getPrototypeOf(FilterOption)).apply(this, arguments));
    }

    createClass(FilterOption, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.filterOption);
        }
    }, {
        key: "focus",
        value: function focus$$1() {
            this.removeClass(this.styleSheet.filterOption);
            this.addClass(this.styleSheet.filterOptionFocused);
        }
    }, {
        key: "unfocus",
        value: function unfocus() {
            this.removeClass(this.styleSheet.filterOptionFocused);
            this.addClass(this.styleSheet.filterOption);
        }
    }, {
        key: "getNumQuestions",
        value: function getNumQuestions() {
            return getQuestionsForFilter(this.options.filter, this.options.contest).filter(function (a) {
                return !(a.isAnswered() || a.isInvalid);
            }).length;
        }
    }, {
        key: "render",
        value: function render() {
            var numQuestions = this.getNumQuestions();
            var badge = null;
            if (numQuestions) {
                badge = UI.createElement(
                    "span",
                    { style: { paddingRight: "5px" } },
                    UI.createElement(
                        Badge,
                        { level: Level.DANGER },
                        numQuestions
                    )
                );
            }
            return [UI.createElement(
                "div",
                null,
                [badge, this.options.filter]
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this13 = this;

            this.attachCreateListener(ContestQuestionStore, function (contestQuestion) {
                if (_this13.options.contest.id === contestQuestion.contestId) {
                    _this13.redraw();
                }
            });
            this.attachListener(this.options.contest, "updateQuestion", function () {
                return _this13.redraw();
            });
        }
    }]);
    return FilterOption;
}(UI.Element)) || _class2$14);
var AdminContestQuestionPanel = (_dec3$4 = registerStyle(ContestQuestionListStyle), _dec3$4(_class3$24 = function (_UI$Element3) {
    inherits(AdminContestQuestionPanel, _UI$Element3);

    function AdminContestQuestionPanel() {
        classCallCheck(this, AdminContestQuestionPanel);
        return possibleConstructorReturn(this, (AdminContestQuestionPanel.__proto__ || Object.getPrototypeOf(AdminContestQuestionPanel)).apply(this, arguments));
    }

    createClass(AdminContestQuestionPanel, [{
        key: "getContestTasks",
        value: function getContestTasks() {
            return this.options.contest.getContestTasks();
        }
    }, {
        key: "getFilterOptions",
        value: function getFilterOptions() {
            var options = [FilterOptions.ALL, FilterOptions.GENERAL];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getContestTasks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestTask = _step.value;

                    options.push(contestTask.longName);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return options;
        }
    }, {
        key: "renderQuestionListForFilter",
        value: function renderQuestionListForFilter(filter) {
            return UI.createElement(
                "div",
                { className: this.styleSheet.questionsContainer, ref: "switcherChild" + filter },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.questionsColumnContainer },
                    UI.createElement(UnansweredContestQuestionList, {
                        filter: filter,
                        ref: "unansweredQuestionList",
                        contest: this.options.contest })
                ),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.questionsColumnContainer },
                    UI.createElement(AnsweredContestQuestionList, {
                        filter: filter,
                        ref: "answeredQuestionList",
                        contest: this.options.contest })
                )
            );
        }
    }, {
        key: "changeFilter",
        value: function changeFilter(filterOption) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getFilterOptions()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var filter = _step2.value;

                    this["filter" + filter].unfocus();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.filterSwitcher.setActive(this["switcherChild" + filterOption]);
            this["filter" + filterOption].focus();
        }
    }, {
        key: "render",
        value: function render() {
            var _this15 = this;

            return [UI.createElement(
                "div",
                { className: this.styleSheet.filterContainer },
                this.getFilterOptions().map(function (filterOption) {
                    return UI.createElement(FilterOption, { onClick: function onClick() {
                            return _this15.changeFilter(filterOption);
                        },
                        filter: filterOption, contest: _this15.options.contest,
                        ref: "filter" + filterOption });
                })
            ), UI.createElement(
                "div",
                { className: this.styleSheet.filterSwitcherContainer },
                UI.createElement(
                    Switcher,
                    { className: this.styleSheet.filterSwitcher, ref: "filterSwitcher" },
                    this.getFilterOptions().map(function (filterOption) {
                        return _this15.renderQuestionListForFilter(filterOption);
                    })
                )
            ), UI.createElement("div", { style: { clear: "both" } })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.changeFilter(FilterOptions.ALL);
        }
    }]);
    return AdminContestQuestionPanel;
}(UI.Element)) || _class3$24);

var AskQuestionModal = function (_ActionModal) {
    inherits(AskQuestionModal, _ActionModal);

    function AskQuestionModal() {
        classCallCheck(this, AskQuestionModal);
        return possibleConstructorReturn(this, (AskQuestionModal.__proto__ || Object.getPrototypeOf(AskQuestionModal)).apply(this, arguments));
    }

    createClass(AskQuestionModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Ask question";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Ask question";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            var taskOptions = this.options.contest.getContestTasks();
            taskOptions.push({
                general: true,
                toString: function toString() {
                    return FilterOptions.GENERAL;
                }
            });
            return [UI.createElement(
                FormField,
                { label: "Task name" },
                UI.createElement(Select, { ref: "contestTaskSelect", className: "form-control", options: taskOptions })
            ), UI.createElement(TextArea, { rows: "2", ref: "questionTextField", placeholder: "Type question...",
                style: { resize: "vertical", width: "100%" } })];
        }
    }, {
        key: "action",
        value: function action() {
            var question = this.questionTextField.getValue();
            var contestTask = this.contestTaskSelect.get();

            var request = {
                contestId: this.options.contest.id,
                question: question
            };

            if (!contestTask.general) {
                request.contestTaskId = contestTask.id;
            }

            Ajax.postJSON("/contest/ask_question/", request);
            this.hide();
        }
    }]);
    return AskQuestionModal;
}(ActionModal);

var AskTaskQuestionModal = function (_AskQuestionModal) {
    inherits(AskTaskQuestionModal, _AskQuestionModal);

    function AskTaskQuestionModal() {
        classCallCheck(this, AskTaskQuestionModal);
        return possibleConstructorReturn(this, (AskTaskQuestionModal.__proto__ || Object.getPrototypeOf(AskTaskQuestionModal)).apply(this, arguments));
    }

    createClass(AskTaskQuestionModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(TextArea, { rows: "2", ref: "questionTextField", placeholder: "Type question...",
                style: { resize: "vertical", width: "100%" } })];
        }
    }, {
        key: "action",
        value: function action() {
            var question = this.questionTextField.getValue();
            var _options = this.options,
                contest = _options.contest,
                contestTask = _options.contestTask;


            var request = {
                contestId: contest.id,
                question: question
            };

            request.contestTaskId = contestTask.id;

            Ajax.postJSON("/contest/ask_question/", request);
            this.hide();
        }
    }]);
    return AskTaskQuestionModal;
}(AskQuestionModal);

var AskQuestionButton = ActionModalButton(AskQuestionModal);
var AskTaskQuestionButton = ActionModalButton(AskTaskQuestionModal);

var ContestLocalStorageManagerClass = function () {
    function ContestLocalStorageManagerClass() {
        classCallCheck(this, ContestLocalStorageManagerClass);

        this.localStorageMap = new Map();
    }

    createClass(ContestLocalStorageManagerClass, [{
        key: "getLocalStorageMap",
        value: function getLocalStorageMap(contestId, type) {
            var identifier = "contest-" + contestId + "user-" + USER.id + type;
            if (!this.localStorageMap.has(identifier)) {
                this.localStorageMap.set(identifier, new LocalStorageMap(identifier));
            }
            return this.localStorageMap.get(identifier);
        }

        /* Key is task id.
           Value is badge count.
         */

    }, {
        key: "getQuestionsLocalStorageMap",
        value: function getQuestionsLocalStorageMap(contestId) {
            return this.getLocalStorageMap(contestId, "questions");
        }

        /* Key is "counter".
           Value is badge count.
         */

    }, {
        key: "getAnnouncementsLocalStorageMap",
        value: function getAnnouncementsLocalStorageMap(contestId) {
            return this.getLocalStorageMap(contestId, "announcements");
        }

        /* Key is data key.
           Value is data.
         */

    }, {
        key: "getNotificationsLocalStorageMap",
        value: function getNotificationsLocalStorageMap(contestId) {
            return this.getLocalStorageMap(contestId, "notifications");
        }
    }]);
    return ContestLocalStorageManagerClass;
}();

var ContestLocalStorageManager = new ContestLocalStorageManagerClass();

var _class$87, _descriptor$36, _dec$38, _class3$25;

function _initDefineProp$37(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$38(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var EvalTaskLimits = function (_UI$Element) {
    inherits(EvalTaskLimits, _UI$Element);

    function EvalTaskLimits() {
        classCallCheck(this, EvalTaskLimits);
        return possibleConstructorReturn(this, (EvalTaskLimits.__proto__ || Object.getPrototypeOf(EvalTaskLimits)).apply(this, arguments));
    }

    createClass(EvalTaskLimits, [{
        key: "render",
        value: function render() {
            var evalTask = this.options.evalTask;
            return [UI.T("Time limit:"), " ", UI.createElement(
                "em",
                null,
                Formatter.cpuTime(evalTask.getTimeLimit(this.options.programmingLanguageId) / 1000)
            ), UI.createElement("br", null), UI.T("Memory limit:"), " ", UI.createElement(
                "em",
                null,
                Formatter.memory(evalTask.getMemoryLimit(this.options.programmingLanguageId) * 1024)
            ), UI.createElement("br", null), UI.createElement("br", null)];
        }
    }, {
        key: "setProgrammingLanguageId",
        value: function setProgrammingLanguageId(programmingLanguageId) {
            this.updateOptions({ programmingLanguageId: programmingLanguageId });
        }
    }]);
    return EvalTaskLimits;
}(UI.Element);

var ContestTaskSummaryPanel = function (_Panel) {
    inherits(ContestTaskSummaryPanel, _Panel);

    function ContestTaskSummaryPanel() {
        classCallCheck(this, ContestTaskSummaryPanel);
        return possibleConstructorReturn(this, (ContestTaskSummaryPanel.__proto__ || Object.getPrototypeOf(ContestTaskSummaryPanel)).apply(this, arguments));
    }

    createClass(ContestTaskSummaryPanel, [{
        key: "getContestTask",
        value: function getContestTask() {
            return this.options.contestTask;
        }
    }, {
        key: "getEvalTaskBadges",
        value: function getEvalTaskBadges() {
            var badges = [];
            var evalTask = this.getContestTask().getEvalTask();
            if (evalTask) {
                if (evalTask.hasEnforcedTemplates()) {
                    badges.push(UI.createElement(EnforcedTemplateBadge, null));
                }
                if (evalTask.isInteractive()) {
                    badges.push(UI.createElement(InteractiveBadge, null));
                }
            }
            return badges;
        }
    }, {
        key: "render",
        value: function render() {
            var contestTask = this.getContestTask();
            var evalTask = contestTask.getEvalTask();
            var articleClassMap = new MarkupClassMap(MarkupClassMap.GLOBAL, [["TaskExamples", EvalTaskExamplesTable(evalTask)], ["RawHTML", RawHTML], ["ServerInputTest", ServerInputTest]]);
            evalTask.articleClassMap = articleClassMap;
            var taskArticle = UI.createElement(ArticleRenderer, { ref: "statementArticle",
                article: contestTask.getStatementArticle(),
                showEditButton: true,
                liveLanguage: true,
                editButtonUrl: "/task/" + evalTask.urlName + "/edit/",
                classMap: articleClassMap });
            return [UI.createElement(
                "div",
                { className: "text-center" },
                UI.createElement(
                    "h1",
                    null,
                    UI.T(evalTask.longName)
                ),
                UI.createElement(EvalTaskLimits, { ref: "taskLimits", evalTask: evalTask, programmingLanguageId: this.options.programmingLanguageId }),
                UI.createElement(
                    "div",
                    null,
                    this.getEvalTaskBadges()
                )
            ), taskArticle];
        }
    }]);
    return ContestTaskSummaryPanel;
}(Panel);

var EvalTaskSolutionPanel = function (_Panel2) {
    inherits(EvalTaskSolutionPanel, _Panel2);

    function EvalTaskSolutionPanel() {
        classCallCheck(this, EvalTaskSolutionPanel);
        return possibleConstructorReturn(this, (EvalTaskSolutionPanel.__proto__ || Object.getPrototypeOf(EvalTaskSolutionPanel)).apply(this, arguments));
    }

    createClass(EvalTaskSolutionPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Editorial");
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(ArticleRenderer, { article: this.options.evalTask.getSolutionArticle(), liveLanguage: true });
        }
    }]);
    return EvalTaskSolutionPanel;
}(Panel);

var EvalTaskStatisticsPanel = function (_Panel3) {
    inherits(EvalTaskStatisticsPanel, _Panel3);

    function EvalTaskStatisticsPanel() {
        classCallCheck(this, EvalTaskStatisticsPanel);
        return possibleConstructorReturn(this, (EvalTaskStatisticsPanel.__proto__ || Object.getPrototypeOf(EvalTaskStatisticsPanel)).apply(this, arguments));
    }

    createClass(EvalTaskStatisticsPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Statistics");
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.addListener("setActive", function () {
                if (_this5.options.children.length === 0) {
                    var child = UI.createElement(EvalTaskStatisticsWidget, { evalTask: _this5.options.evalTask });
                    _this5.appendChild(child);
                }
            });
        }
    }]);
    return EvalTaskStatisticsPanel;
}(Panel);

var QuestionsPanel = function (_Panel4) {
    inherits(QuestionsPanel, _Panel4);

    function QuestionsPanel() {
        classCallCheck(this, QuestionsPanel);
        return possibleConstructorReturn(this, (QuestionsPanel.__proto__ || Object.getPrototypeOf(QuestionsPanel)).apply(this, arguments));
    }

    createClass(QuestionsPanel, [{
        key: "render",
        value: function render() {
            var _options = this.options,
                contest = _options.contest,
                contestTask = _options.contestTask;


            return [UI.createElement(AskTaskQuestionButton, { level: Level.PRIMARY,
                label: UI.T("Ask question"),
                modalOptions: { contest: contest, contestTask: contestTask },
                style: { margin: "10px" } }), UI.createElement(ContestTaskQuestionList, { contest: contest,
                contestTaskId: contestTask.id })];
        }
    }]);
    return QuestionsPanel;
}(Panel);

var ContestTaskCounterBadge = function (_NavCounterBadge) {
    inherits(ContestTaskCounterBadge, _NavCounterBadge);

    function ContestTaskCounterBadge() {
        classCallCheck(this, ContestTaskCounterBadge);
        return possibleConstructorReturn(this, (ContestTaskCounterBadge.__proto__ || Object.getPrototypeOf(ContestTaskCounterBadge)).apply(this, arguments));
    }

    createClass(ContestTaskCounterBadge, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ContestTaskCounterBadge.prototype.__proto__ || Object.getPrototypeOf(ContestTaskCounterBadge.prototype), "getDefaultOptions", this).call(this), {
                style: {
                    right: 0,
                    top: 0,
                    marginLeft: 5,
                    position: "initial"
                }
            });
        }
    }]);
    return ContestTaskCounterBadge;
}(NavCounterBadge);

var ContestTaskPanelStyle = (_class$87 = function (_StyleSheet) {
    inherits(ContestTaskPanelStyle, _StyleSheet);

    function ContestTaskPanelStyle() {
        var _ref;

        var _temp, _this8, _ret;

        classCallCheck(this, ContestTaskPanelStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this8 = possibleConstructorReturn(this, (_ref = ContestTaskPanelStyle.__proto__ || Object.getPrototypeOf(ContestTaskPanelStyle)).call.apply(_ref, [this].concat(args))), _this8), _initDefineProp$37(_this8, "taskPanel", _descriptor$36, _this8), _temp), possibleConstructorReturn(_this8, _ret);
    }

    return ContestTaskPanelStyle;
}(StyleSheet), _descriptor$36 = _applyDecoratedDescriptor$38(_class$87.prototype, "taskPanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "5px 24px",
            backgroundColor: this.themeProperties.COLOR_BACKGROUND
        };
    }
}), _class$87);
var ContestTaskPanel = (_dec$38 = registerStyle(ContestTaskPanelStyle), _dec$38(_class3$25 = function (_FullScreenable) {
    inherits(ContestTaskPanel, _FullScreenable);

    function ContestTaskPanel() {
        classCallCheck(this, ContestTaskPanel);
        return possibleConstructorReturn(this, (ContestTaskPanel.__proto__ || Object.getPrototypeOf(ContestTaskPanel)).apply(this, arguments));
    }

    createClass(ContestTaskPanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ContestTaskPanel.prototype.__proto__ || Object.getPrototypeOf(ContestTaskPanel.prototype), "getDefaultOptions", this).call(this), {
                updateURL: true
            });
        }
    }, {
        key: "getContestTask",
        value: function getContestTask() {
            return ContestTaskStore.get(this.options.contestTaskId);
        }
    }, {
        key: "getEvalTask",
        value: function getEvalTask() {
            return this.getContestTask().getEvalTask();
        }
    }, {
        key: "getContest",
        value: function getContest() {
            return this.getContestTask().getContest();
        }
    }, {
        key: "getWorkspace",
        value: function getWorkspace() {
            return this.getEvalTask().getWorkspace();
        }
    }, {
        key: "showWorkspace",
        value: function showWorkspace() {
            this.divider.collapseChild(0);
            this.divider.expandChild(1);
        }
    }, {
        key: "showStatement",
        value: function showStatement() {
            this.divider.collapseChild(1);
            this.divider.expandChild(0);
        }
    }, {
        key: "showBoth",
        value: function showBoth() {
            if (this.idePanel.getWidth() === 0) {
                this.idePanel.setWidth("50%");
                this.taskPanel.setWidth("50%");
            }
            this.divider.expandChild(0);
            this.divider.expandChild(1);
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            this.showUrlTab(urlParts[0] || "");
        }
    }, {
        key: "addQuestionBadgeListeners",
        value: function addQuestionBadgeListeners() {
            var _this10 = this;

            var localStorageMap = ContestLocalStorageManager.getQuestionsLocalStorageMap(this.getContestTask().id);

            /* When badge is created, it takes its counter from the local storage. After that:
               - when a question is created: increase badge counter if the active tab isn't "Questions"
               - when active tab is set to "Questions": reset badge count and update local storage value
               - when local storage value changes: if the new value is 0 it means that the "Questions" tab has been clicked
                    on another tab, so reset the badge counter.
             */

            this.badge.setValue(localStorageMap.get(this.getContestTask().id) || 0);
            this.attachListener(this.tabArea.activeTabDispatcher, function () {
                if (_this10.tabArea.getActive() === _this10.questionsPanel) {
                    _this10.badge.reset();
                    localStorageMap.set(_this10.getContestTask().id, 0);
                }
            });

            localStorageMap.addChangeListener(function (event) {
                if (!event.newValue) {
                    _this10.badge.reset();
                }
            });

            var incrementBadgeCount = function incrementBadgeCount(question) {
                if (question.contestId === _this10.getContest().id && question.contestTaskId === _this10.getContestTask().id) {
                    _this10.badge.increment();
                }
            };

            this.attachListener(ContestQuestionStore, "create", function (question) {
                if (!question.isAskedByCurrentUser()) {
                    incrementBadgeCount(question);
                }
            });
            this.attachListener(this.getContest(), "updateQuestion", incrementBadgeCount);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            this.attachUpdateListener(this.getEvalTask(), function () {
                return _this11.redraw();
            });

            var modifyIde = function modifyIde() {
                var updateTaskLimits = function updateTaskLimits(programmingLanguage) {
                    _this11.taskSummaryPanel.taskLimits.setProgrammingLanguageId(programmingLanguage.id);
                };
                _this11.ide.addListener("changeLanguage", updateTaskLimits);
                updateTaskLimits(_this11.ide.programmingLanguageSelect.get());

                // Automatically focus the code editor when entering the page (feature request)
                _this11.ide.codeEditor.focus();
                _this11.ide.codeEditor.gotoEnd();
            };

            this.addListener("workspaceLoaded", function () {
                return modifyIde();
            });
            if (this.ide) {
                modifyIde();
            }

            // TODO: make this a method in this class!
            var dispatchResize = function dispatchResize() {
                if (_this11.ide) {
                    _this11.ide.sectionDivider.dispatch("resize");
                }
            };

            window.addEventListener("resize", function () {
                dispatchResize();
            });

            this.idePanel.addListener("resize", function () {
                dispatchResize();
            });

            var contest = this.getContest();
            if (contest.systemGenerated) {
                this.attachEventListener(contest, "contestEnd", function () {
                    _this11.tabArea.redraw();
                });
            }

            // TODO: Why is this here?
            contest.addEventListener("broadcastTask", function (event) {
                GlobalState.importState(event.extra.state);
            });

            window.taskView = false;

            // Questions Badge
            if (this.questionsPanel) {
                this.addQuestionBadgeListeners();
            }

            this.addListener("enterFullScreen", function () {
                return _this11.ide.dispatch("enterFullScreen");
            });
            this.addListener("exitFullScreen", function () {
                return _this11.ide.dispatch("exitFullScreen");
            });

            this.attachListener(this.idePanel, "resize", function () {
                if (_this11.ide) {
                    _this11.ide.dispatch("resize");
                }
            });
            this.attachListener(this.taskPanel, "resize", function () {
                _this11.tabArea.titleArea.dispatch("resize");
            });
        }
    }, {
        key: "getCommentsPanel",
        value: function getCommentsPanel() {
            var discussionId = this.getEvalTask().discussionId;
            if (discussionId && (!this.getContest().isRunning() || this.getContest().isInfinite())) {
                return UI.createElement(
                    Panel,
                    { ref: "discussionPanel", title: UI.T("Task Discussion"),
                        tabHref: this.getSubURL("discussion") },
                    UI.createElement(AsyncCommentThread, { chatId: discussionId })
                );
            }
        }
    }, {
        key: "getSolutionPanel",
        value: function getSolutionPanel() {
            var solutionArticle = this.getEvalTask().getSolutionArticle();
            if (solutionArticle && (!this.getContest().isRunning() || this.getContest().isInfinite())) {
                return UI.createElement(EvalTaskSolutionPanel, { ref: "solutionPanel",
                    tabHref: this.getSubURL("solution"),
                    evalTask: this.getEvalTask() });
            }
        }
    }, {
        key: "getStatisticsPanel",
        value: function getStatisticsPanel() {
            if (this.getContestTask().canShowStatistics()) {
                return UI.createElement(EvalTaskStatisticsPanel, { ref: "statisticsPanel",
                    tabHref: this.getSubURL("statistics"),
                    evalTask: this.getEvalTask() });
            }
        }
    }, {
        key: "getSubmissionPanel",
        value: function getSubmissionPanel() {
            return UI.createElement(SubmissionSummaryContestFilter, { ref: "submissionsPanel", title: UI.T("Submissions"),
                tabHref: this.getSubURL("submissions"),
                contestId: this.getContest().id,
                contestTaskId: this.getContestTask().id });
        }
    }, {
        key: "getQuestionsPanelTitleWithBadge",
        value: function getQuestionsPanelTitleWithBadge() {
            if (!this.badge) {
                this.badge = UI.createElement(ContestTaskCounterBadge, { level: Level.DANGER });
            }
            return UI.createElement(
                "div",
                null,
                UI.createElement(
                    "span",
                    null,
                    UI.T("Questions")
                ),
                this.badge
            );
        }
    }, {
        key: "getQuestionsPanel",
        value: function getQuestionsPanel() {
            var contest = this.getContest();

            if (!contest.canReceiveQuestions()) {
                return;
            }

            return UI.createElement(QuestionsPanel, { ref: "questionsPanel",
                title: this.getQuestionsPanelTitleWithBadge(),
                tabHref: this.getSubURL("questions"),
                contest: this.getContest(),
                contestTask: this.getContestTask() });
        }
    }, {
        key: "requestEvalTaskWorkspace",
        value: function requestEvalTaskWorkspace() {
            var _this12 = this;

            Ajax.postJSON("/eval/fetch_eval_task_user_summary/", { evalTaskId: this.getEvalTask().id }).then(function () {
                if (_this12.getWorkspace()) {
                    _this12.idePanel.setChildren([_this12.getWorkspaceIDE()]);
                    _this12.dispatch("workspaceLoaded");
                }
            });
        }
    }, {
        key: "getWorkspaceIDE",
        value: function getWorkspaceIDE() {
            var _this13 = this;

            if (USER.isAuthenticated) {
                var workspace = this.getWorkspace();
                if (workspace) {
                    var plugins = PluginTypes.CONTEST;
                    if (this.getContest().canShowPublicSources() && this.getEvalTask().hasEnforcedTemplates()) {
                        plugins = PluginTypes.CONTEST_PUBLIC_SOURCES_ENFORCED_TEMPLATE;
                    } else if (this.getContest().canShowPublicSources()) {
                        plugins = PluginTypes.CONTEST_PUBLIC_SOURCES;
                    } else if (this.getEvalTask().hasEnforcedTemplates()) {
                        plugins = PluginTypes.CONTEST_ENFORCED_TEMPLATE;
                    }
                    this.ide = UI.createElement(WorkspaceIDE, { plugins: plugins, workspace: workspace, fullContainer: false,
                        contestTaskId: this.options.contestTaskId });

                    this.ide.toggleFullScreen = function () {
                        return _this13.toggleFullScreen();
                    };

                    return this.ide;
                } else {
                    var timeShouldRequest = this.getContestTask().getTimeAvailable().add({ seconds: 10 + 10 * Math.random() });
                    var requestDelay = +timeShouldRequest - ServerTime.now();
                    if (this.getContest() && this.getContest().isVirtual()) {
                        requestDelay = 0;
                    }

                    setTimeout(function () {
                        return _this13.requestEvalTaskWorkspace();
                    }, Math.min(Math.max(requestDelay, 0), 20 * 1000));

                    return [StateDependentElement.renderLoading(), UI.createElement(
                        "div",
                        { style: { marginTop: "20px", textAlign: "center", fontSize: "1.3em" } },
                        "Loading the workspace..."
                    )];
                }
            } else {
                return UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "h3",
                        { className: "text-center" },
                        UI.T("Authenticate to use the workspace")
                    ),
                    UI.createElement(Login, { ref: this.refLink("loginPanel") })
                );
            }
        }

        /* TODO: WARNING! THIS CLASS FAILS ON REDRAW */

    }, {
        key: "redraw",
        value: function redraw() {
            if (!this.taskPanel) {
                get(ContestTaskPanel.prototype.__proto__ || Object.getPrototypeOf(ContestTaskPanel.prototype), "redraw", this).call(this);
            } else {
                this.taskPanel.redraw();
            }
        }
    }, {
        key: "getSubURL",
        value: function getSubURL(section) {
            if (this.options.updateURL) {
                var prefix = void 0;
                if (this.options.customURLPrefix) {
                    prefix = this.options.customURLPrefix;
                } else {
                    prefix = this.getContestTask().getFullURL();
                }
                return prefix + section + "/";
            }
        }
    }, {
        key: "getContestTaskSummaryPanelClass",
        value: function getContestTaskSummaryPanelClass() {
            return ContestTaskSummaryPanel;
        }
    }, {
        key: "render",
        value: function render() {
            var programmingLanguageId = ProgrammingLanguage.getDefaultLanguage().id;
            var ContestTaskSummaryPanelClass = this.getContestTaskSummaryPanelClass();

            var isMobile = Device.isMobileDevice();

            var ideWidth = isMobile ? "0%" : "50%";
            var taskWidth = isMobile ? "100%" : "50%";

            return [UI.createElement(
                TitledSectionDivider,
                { ref: "divider", orientation: Orientation.HORIZONTAL,
                    style: { overflow: "hidden", height: "100%", width: "100%" } },
                UI.createElement(
                    Panel,
                    { size: taskWidth, style: { overflow: "hidden" }, title: "task", ref: "taskPanel" },
                    UI.createElement(
                        FlatTabArea,
                        { style: { height: "100%" }, ref: "tabArea", lazyRender: true,
                            panelClass: this.styleSheet.taskPanel },
                        UI.createElement(ContestTaskSummaryPanelClass, {
                            ref: "taskSummaryPanel",
                            title: UI.T("Statement"), active: "true",
                            tabHref: this.getSubURL("statement"),
                            contestTask: this.getContestTask(),
                            programmingLanguageId: programmingLanguageId,
                            style: { width: "100%" }
                        }),
                        this.getSolutionPanel(),
                        this.getCommentsPanel(),
                        this.getStatisticsPanel(),
                        this.getSubmissionPanel(),
                        this.getQuestionsPanel()
                    )
                ),
                UI.createElement(
                    Panel,
                    { collapsed: Device.isMobileDevice(), size: ideWidth, ref: "idePanel", title: "workspace / submit" },
                    this.getWorkspaceIDE()
                )
            )];
        }
    }, {
        key: "showUrlTab",
        value: function showUrlTab(location) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.tabArea.options.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var panel = _step.value;

                    if (panel.options.tabHref === this.getSubURL(location)) {
                        panel.dispatch("show");
                        return;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.taskSummaryPanel.dispatch("show");
        }
    }]);
    return ContestTaskPanel;
}(FullScreenable(Panel))) || _class3$25);

var ContestTaskModal = function (_Modal) {
    inherits(ContestTaskModal, _Modal);

    function ContestTaskModal() {
        classCallCheck(this, ContestTaskModal);
        return possibleConstructorReturn(this, (ContestTaskModal.__proto__ || Object.getPrototypeOf(ContestTaskModal)).apply(this, arguments));
    }

    createClass(ContestTaskModal, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ContestTaskModal.prototype.__proto__ || Object.getPrototypeOf(ContestTaskModal.prototype), "getDefaultOptions", this).call(this), {
                height: "80%",
                width: "80%"
            });
        }
    }, {
        key: "showTask",
        value: function showTask() {
            this.modalWindow.setChildren(this.render());
        }
    }, {
        key: "getContestTaskPanelStyle",
        value: function getContestTaskPanelStyle() {
            return {
                minHeight: "700px",
                borderRadius: "10px"
            };
        }
    }, {
        key: "render",
        value: function render() {
            var _this15 = this;

            var contestTask = ContestTaskStore.get(this.options.contestTaskId);
            if (contestTask) {
                return [UI.createElement(ContestTaskPanel, { style: this.getContestTaskPanelStyle(),
                    contestTaskId: this.options.contestTaskId,
                    updateURL: false })];
            }
            // This is a post because it creates a workspace if one doesn't exist
            Ajax.postJSON("/contest/get_contest_task/", {
                contestTaskId: this.options.contestTaskId,
                requestContestTask: true
            }).then(function () {
                return _this15.showTask();
            });
            return [StateDependentElement.renderLoading()];
        }
    }]);
    return ContestTaskModal;
}(Modal);

var ContestTaskButton = function (_Button) {
    inherits(ContestTaskButton, _Button);

    function ContestTaskButton() {
        classCallCheck(this, ContestTaskButton);
        return possibleConstructorReturn(this, (ContestTaskButton.__proto__ || Object.getPrototypeOf(ContestTaskButton)).apply(this, arguments));
    }

    createClass(ContestTaskButton, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ContestTaskButton.prototype.__proto__ || Object.getPrototypeOf(ContestTaskButton.prototype), "getDefaultOptions", this).call(this), {
                style: {
                    margin: "5px"
                },
                level: Level.PRIMARY,
                size: Size.LARGE
            });
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            if (!options.faIcon) {
                options.label = options.label || UI.T("Solve this task");
            }
            get(ContestTaskButton.prototype.__proto__ || Object.getPrototypeOf(ContestTaskButton.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this17 = this;

            get(ContestTaskButton.prototype.__proto__ || Object.getPrototypeOf(ContestTaskButton.prototype), "onMount", this).call(this);
            this.addClickListener(function () {
                if (_this17.contestTaskModal) {
                    _this17.contestTaskModal.show();
                } else {
                    _this17.contestTaskModal = ContestTaskModal.show({
                        contestTaskId: _this17.options.contestTaskId,
                        destroyOnHide: false
                    });
                }
            });
        }
    }]);
    return ContestTaskButton;
}(Button);

var DelayedContestTaskPanel = function (_StateDependentElemen) {
    inherits(DelayedContestTaskPanel, _StateDependentElemen);

    function DelayedContestTaskPanel() {
        classCallCheck(this, DelayedContestTaskPanel);
        return possibleConstructorReturn(this, (DelayedContestTaskPanel.__proto__ || Object.getPrototypeOf(DelayedContestTaskPanel)).apply(this, arguments));
    }

    createClass(DelayedContestTaskPanel, [{
        key: "beforeRedrawNotLoaded",
        value: function beforeRedrawNotLoaded() {
            var _this2 = this;

            if (this.getContestTask() && this.getContestTask().hasStateLoaded()) {
                // The contest task already has its state loaded, either from the WebSocket or from previous requests.
                this.setLoaded();
                return;
            }
            Ajax.postJSON("/contest/get_contest_task/", { contestTaskId: this.options.contestTaskId }).then(function (data) {
                _this2.importState(data);
                _this2.setLoaded();
            });
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {
            get(DelayedContestTaskPanel.prototype.__proto__ || Object.getPrototypeOf(DelayedContestTaskPanel.prototype), "onDelayedMount", this).call(this);
            if (this.urlParts) {
                this.setURL(this.urlParts);
            }
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (this.taskPanel) {
                get(DelayedContestTaskPanel.prototype.__proto__ || Object.getPrototypeOf(DelayedContestTaskPanel.prototype), "setURL", this).call(this, urlParts);
            } else {
                this.urlParts = urlParts;
            }
        }
    }, {
        key: "pageTitle",
        get: function get$$1() {
            return this.getContestTask() && this.getContestTask().longName;
        }
    }]);
    return DelayedContestTaskPanel;
}(StateDependentElement(ContestTaskPanel));

var ContestTimeCounter = function (_UI$Primitive) {
    inherits(ContestTimeCounter, _UI$Primitive);

    function ContestTimeCounter() {
        classCallCheck(this, ContestTimeCounter);
        return possibleConstructorReturn(this, (ContestTimeCounter.__proto__ || Object.getPrototypeOf(ContestTimeCounter)).apply(this, arguments));
    }

    createClass(ContestTimeCounter, [{
        key: "updateTimer",
        value: function updateTimer() {
            var contest = this.options.contest;
            var currentServerTime = ServerTime.now();
            var value = void 0;
            if (contest.getStartTime() && !contest.hasStarted()) {
                var contestStartTime = StemDate(contest.getStartTime());
                var timeDifference = currentServerTime.diffDuration(contestStartTime);
                var diffFormat = timeDifference.format("H:mm:ss");
                if (timeDifference >= 24 * Duration.HOUR) {
                    diffFormat = Formatter.duration(timeDifference, {
                        days: true,
                        hours: true,
                        lastSeparator: " and "
                    });
                }
                value = "Starts in " + diffFormat;
            } else if (contest.getEndTime() && !contest.hasFinished()) {
                var contestEndTime = StemDate(contest.getEndTime());
                var _timeDifference = currentServerTime.diffDuration(contestEndTime);
                var _diffFormat = _timeDifference.format("H:mm:ss");
                if (_timeDifference >= 24 * Duration.HOUR) {
                    _diffFormat = Formatter.duration(_timeDifference, {
                        days: true,
                        hours: true,
                        lastSeparator: " and "
                    });
                }
                value = "Ends in " + _diffFormat;
            } else {
                value = "Server time: " + currentServerTime.utc().format("HH:mm:ss");
            }
            this.setChildren([value]);
            this.dispatch("update");
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.updateTimer();
            this.intervalId = setInterval(function () {
                return _this2.updateTimer();
            }, 1000);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            clearInterval(this.intervalId);
        }
    }]);
    return ContestTimeCounter;
}(UI.Primitive("span"));

var ContestScoreTracker = function (_UI$Primitive) {
    inherits(ContestScoreTracker, _UI$Primitive);

    function ContestScoreTracker() {
        classCallCheck(this, ContestScoreTracker);
        return possibleConstructorReturn(this, (ContestScoreTracker.__proto__ || Object.getPrototypeOf(ContestScoreTracker)).apply(this, arguments));
    }

    createClass(ContestScoreTracker, [{
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "getContestUser",
        value: function getContestUser() {
            return this.getContest().getUser(USER.id);
        }
    }, {
        key: "getRankText",
        value: function getRankText() {
            if (!this.options.loadedScoreboard) {
                return;
            }

            var contest = this.getContest();
            var user = this.getContestUser();
            var contestUsers = contest.getBaseContest().getUsers();
            if (contest.isVirtual()) {
                contestUsers.push(user);
            }

            var rank = 1;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = contestUsers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestUser = _step.value;

                    if (ContestUser.compare(user, contestUser) > 0) {
                        rank += 1;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return "Rank " + rank + " / " + contestUsers.length;
        }
    }, {
        key: "getScoreText",
        value: function getScoreText() {
            if (this.getContestUser().hasOwnProperty("totalScore")) {
                return "Score: " + Formatter.truncate(this.getContestUser().totalScore, 2) + "";
            }
        }
    }, {
        key: "track",
        value: function track() {
            if (this.getContestUser()) {
                var rankText = this.getRankText();
                var scoreText = this.getScoreText();
                var text = void 0;
                if (rankText && scoreText) {
                    text = rankText + " (" + scoreText + ")";
                } else {
                    text = rankText || scoreText || "";
                }
                this.setChildren([text]);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.track();
            var contest = this.options.contest;
            if (this.options.contest.isVirtual()) {
                this.attachListener(contest.getBaseContest(), "rankingsChange", function () {
                    return _this2.track();
                });
            }
            this.attachListener(contest, "rankingsChange", function () {
                return _this2.track();
            });
        }
    }]);
    return ContestScoreTracker;
}(UI.Primitive("span"));

var ArchiveScoreTracker = function (_ContestScoreTracker) {
    inherits(ArchiveScoreTracker, _ContestScoreTracker);

    function ArchiveScoreTracker() {
        classCallCheck(this, ArchiveScoreTracker);
        return possibleConstructorReturn(this, (ArchiveScoreTracker.__proto__ || Object.getPrototypeOf(ArchiveScoreTracker)).apply(this, arguments));
    }

    createClass(ArchiveScoreTracker, [{
        key: "getContest",
        value: function getContest() {
            return this.options.archive;
        }
    }, {
        key: "getRankText",
        value: function getRankText() {
            var archiveUsers = this.getContest().getUsers();
            var rank = 1;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = archiveUsers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var archiveUser = _step2.value;

                    if (ArchiveUser.compare(this.getContestUser(), archiveUser) > 0) {
                        rank += 1;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return "Rank " + rank + " / " + archiveUsers.length;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.track();
            this.attachListener(this.getContest(), "rankingsChange", function () {
                return _this4.track();
            });
        }
    }]);
    return ArchiveScoreTracker;
}(ContestScoreTracker);

var NavChatBadge = function (_NavCounterBadge) {
    inherits(NavChatBadge, _NavCounterBadge);

    function NavChatBadge() {
        classCallCheck(this, NavChatBadge);
        return possibleConstructorReturn(this, (NavChatBadge.__proto__ || Object.getPrototypeOf(NavChatBadge)).apply(this, arguments));
    }

    createClass(NavChatBadge, [{
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(NavChatBadge.prototype.__proto__ || Object.getPrototypeOf(NavChatBadge.prototype), "onMount", this).call(this);

            var contestPanel = this.options.contestPanel;
            var contest = this.options.contest;

            this.attachListener(contestPanel, "activeElementChanged", function () {
                if (contestPanel.getActive() === contestPanel.chat) {
                    _this2.reset();
                }
            });
            if (contest.getChat()) {
                this.attachListener(contest.getChat().getMessageThread(), "newMessage", function () {
                    if (contestPanel.getActive() !== contestPanel.chat) {
                        _this2.increment();
                    }
                });
            }
        }
    }]);
    return NavChatBadge;
}(NavCounterBadge);

var NavAnnouncementsBadge = function (_NavCounterBadge2) {
    inherits(NavAnnouncementsBadge, _NavCounterBadge2);

    function NavAnnouncementsBadge() {
        classCallCheck(this, NavAnnouncementsBadge);
        return possibleConstructorReturn(this, (NavAnnouncementsBadge.__proto__ || Object.getPrototypeOf(NavAnnouncementsBadge)).apply(this, arguments));
    }

    createClass(NavAnnouncementsBadge, [{
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(NavAnnouncementsBadge.prototype.__proto__ || Object.getPrototypeOf(NavAnnouncementsBadge.prototype), "onMount", this).call(this);

            var contestPanel = this.options.contestPanel;
            var localStorageMap = this.options.localStorageMap;

            /* When badge is created, it takes its counter from the local storage. After that:
               - when an announcement is created: increase badge counter if the active tab isn't "Announcements"
               - when active tab is set to "Announcements": reset badge count and update local storage value
               - when local storage value changes: if the new value is 0 it means that the "Announcements" tab has been
                    clicked on another tab, so reset the badge counter.
             */

            this.attachListener(localStorageMap, "change", function (event) {
                if (!event.newValue) {
                    _this4.reset();
                }
            });

            this.attachListenerForIncrement(ContestAnnouncementStore, "create", function (announcement) {
                return announcement.contestId === _this4.options.contest.id;
            });

            this.attachListener(contestPanel, "activeElementChanged", function () {
                if (contestPanel.getActive() === contestPanel.announcements) {
                    _this4.reset();
                    localStorageMap.set("counter", 0);
                }
            });
        }
    }]);
    return NavAnnouncementsBadge;
}(NavCounterBadge);

var ContestNavigationHandler = function (_Dispatchable) {
    inherits(ContestNavigationHandler, _Dispatchable);

    function ContestNavigationHandler(contest, contestPanel) {
        classCallCheck(this, ContestNavigationHandler);

        var _this5 = possibleConstructorReturn(this, (ContestNavigationHandler.__proto__ || Object.getPrototypeOf(ContestNavigationHandler)).call(this));

        _this5.contest = contest;
        _this5.contestPanel = contestPanel;
        return _this5;
    }

    createClass(ContestNavigationHandler, [{
        key: "getURLPrefix",
        value: function getURLPrefix(str) {
            var url = "/contest/" + this.contest.name + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }, {
        key: "getTasksDropdownElements",
        value: function getTasksDropdownElements() {
            var _this6 = this;

            return this.contest.getContestTasks().map(function (contestTask) {
                return UI.createElement(NavLinkElement, { href: _this6.getURLPrefix("task/" + contestTask.name),
                    value: contestTask.longName, key: Math.random() });
            });
        }
    }, {
        key: "getLeftChildren",
        value: function getLeftChildren() {
            var contest = this.contest;

            var leftChildren = [];
            // Summary button
            leftChildren.push(UI.createElement(NavLinkElement, { href: this.getURLPrefix("summary"), key: "summary",
                value: UI.T("Summary") }));
            // Tasks dropdown
            if (contest.hasStarted()) {
                leftChildren.push(UI.createElement(
                    NavLinkElement,
                    { href: this.getURLPrefix("tasks"), key: "tasks",
                        value: UI.T("Tasks") },
                    this.getTasksDropdownElements()
                ));
            }
            // Scoreboard button
            if (contest.canShowScoreboard()) {
                leftChildren.push(UI.createElement(NavLinkElement, { href: this.getURLPrefix("scoreboard"), key: "scoreboard",
                    value: UI.T("Scoreboard") }));
            }
            // Submissions button
            if (contest.hasStarted() && USER.isAuthenticated) {
                leftChildren.push(UI.createElement(NavLinkElement, { href: this.getURLPrefix("submissions"), key: "submissions",
                    value: UI.T("Own Submissions") }));
            }
            // Chat button
            if (contest.chatId) {
                leftChildren.push(this.createChatButton());
            }
            // Questions & Announcements Buttons
            if (!contest.systemGenerated && contest.hasStarted()) {
                leftChildren.push(this.createAnnouncementsButton());
            }
            // Analysis button
            if (contest.hasFinished() && contest.isAnalysisPublic) {
                leftChildren.push(UI.createElement(NavLinkElement, { href: this.getURLPrefix("analysis"), key: "analysis",
                    value: UI.T("Analysis") }));
            }

            return leftChildren;
        }
    }, {
        key: "getRightChildren",
        value: function getRightChildren() {
            var contest = this.contest;

            var rightChildren = [];

            if (contest.hasStarted() && USER.isAuthenticated) {
                rightChildren.push(this.createRankInfo());
            }
            rightChildren.push(this.createTimeCounter());

            return rightChildren;
        }
    }, {
        key: "apply",
        value: function apply() {
            if (!this.contestPanel.isInDocument()) {
                return;
            }

            NavManager.Global.skipWrap();
            NavManager.Global.getLeftConditioned().setChildren(this.getLeftChildren());
            NavManager.Global.getRightConditioned().setChildren(this.getRightChildren());
            NavManager.Global.unskipWrap();
            NavManager.Global.checkForWrap();
        }
    }, {
        key: "createChatButton",
        value: function createChatButton() {
            var badge = UI.createElement(NavChatBadge, { contestPanel: this.contestPanel, contest: this.contest });
            var chatButton = UI.createElement(NavLinkElement, { href: this.getURLPrefix("chat"), key: "chat",
                style: { position: "relative" }, value: [UI.T("Chat"), badge] });

            return chatButton;
        }
    }, {
        key: "createAnnouncementsButton",
        value: function createAnnouncementsButton() {
            var localStorageMap = ContestLocalStorageManager.getAnnouncementsLocalStorageMap(this.contest.id);
            var badge = UI.createElement(NavAnnouncementsBadge, { contestPanel: this.contestPanel, contest: this.contest,
                counter: localStorageMap.get("counter") || 0, level: Level.DANGER,
                localStorageMap: localStorageMap });
            var announcementsButton = UI.createElement(NavLinkElement, { href: this.getURLPrefix("announcements"), key: "announcements",
                style: { position: "relative" }, value: [UI.T("Announcements"), badge] });

            return announcementsButton;
        }
    }, {
        key: "createTimeCounter",
        value: function createTimeCounter() {
            var timer = UI.createElement(ContestTimeCounter, { contest: this.contest });
            this.attachListener(timer, "update", function () {
                return NavManager.Global.checkForWrap();
            });
            return UI.createElement(NavElement, { value: [timer], key: "timer" });
        }
    }, {
        key: "createRankInfo",
        value: function createRankInfo() {
            var tracker = UI.createElement(ContestScoreTracker, { contest: this.contest, loadedScoreboard: this.contestPanel._loadedScoreboard });
            this.contestPanel.attachListener(tracker, "update", function () {
                return NavManager.Global.checkForWrap();
            });
            return UI.createElement(NavElement, { value: tracker, key: "rank" });
        }
    }, {
        key: "reset",
        value: function reset() {
            NavManager.Global.getLeftConditioned().setChildren([]);
            NavManager.Global.getRightConditioned().setChildren([]);
            NavManager.Global.checkForWrap();
        }
    }]);
    return ContestNavigationHandler;
}(Dispatchable);

var ArchiveNavigationHandler = function (_ContestNavigationHan) {
    inherits(ArchiveNavigationHandler, _ContestNavigationHan);

    function ArchiveNavigationHandler() {
        classCallCheck(this, ArchiveNavigationHandler);
        return possibleConstructorReturn(this, (ArchiveNavigationHandler.__proto__ || Object.getPrototypeOf(ArchiveNavigationHandler)).apply(this, arguments));
    }

    createClass(ArchiveNavigationHandler, [{
        key: "getLeftChildren",
        value: function getLeftChildren() {
            var leftChildren = [UI.createElement(NavLinkElement, { href: this.getURLPrefix("tasks"), value: UI.T("Tasks") }), UI.createElement(NavLinkElement, { href: this.getURLPrefix("scoreboard"), value: UI.T("Scoreboard") }), UI.createElement(NavLinkElement, { href: this.getURLPrefix("submissions"), value: UI.T("Submissions") })];
            if (this.contest.discussionId) {
                leftChildren.push(UI.createElement(NavLinkElement, { href: this.getURLPrefix("chat"), value: UI.T("Chat") }));
            }
            return leftChildren;
        }
    }, {
        key: "getRightChildren",
        value: function getRightChildren() {
            var tracker = UI.createElement(ArchiveScoreTracker, { archive: this.contest });
            this.contestPanel.attachListener(tracker, "update", function () {
                return setTimeout(function () {
                    return NavManager.Global.checkForWrap();
                });
            });
            return [UI.createElement(NavElement, { value: tracker, key: Math.random() })];
        }
    }]);
    return ArchiveNavigationHandler;
}(ContestNavigationHandler);

var TopLevelNavigationHandler = function TopLevelNavigationHandler(NavigationHandler) {
    return function (_NavigationHandler) {
        inherits(TopLevelNavigationHandler, _NavigationHandler);

        function TopLevelNavigationHandler() {
            classCallCheck(this, TopLevelNavigationHandler);
            return possibleConstructorReturn(this, (TopLevelNavigationHandler.__proto__ || Object.getPrototypeOf(TopLevelNavigationHandler)).apply(this, arguments));
        }

        createClass(TopLevelNavigationHandler, [{
            key: "getURLPrefix",
            value: function getURLPrefix(str) {
                var url = "/" + this.contest.name + "/";
                if (str) {
                    url += str + "/";
                }
                return url;
            }
        }]);
        return TopLevelNavigationHandler;
    }(NavigationHandler);
};

var TopLevelContestNavigationHandler = TopLevelNavigationHandler(ContestNavigationHandler);
var TopLevelArchiveNavigationHandler = TopLevelNavigationHandler(ArchiveNavigationHandler);

// TODO: merge this class with ContestUsersFilter

var CountryUsersFilter = function (_UI$Primitive) {
    inherits(CountryUsersFilter, _UI$Primitive);

    function CountryUsersFilter() {
        classCallCheck(this, CountryUsersFilter);
        return possibleConstructorReturn(this, (CountryUsersFilter.__proto__ || Object.getPrototypeOf(CountryUsersFilter)).apply(this, arguments));
    }

    createClass(CountryUsersFilter, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(CountryUsersFilter.prototype.__proto__ || Object.getPrototypeOf(CountryUsersFilter.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle("whiteSpace", "nowrap");
            attr.setStyle("padding", "10px 0");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(Select, { ref: "filterCountry", style: { height: "2em", marginLeft: "10px" },
                options: this.options.countries })];
        }
    }, {
        key: "getFilter",
        value: function getFilter() {
            var _this2 = this;

            this.options.countryIdFilter = this.filterCountry.get().id;

            return function (user) {
                if (_this2.options.countryIdFilter) {
                    return user.countryId === _this2.options.countryIdFilter;
                }
                return true;
            };
        }
    }, {
        key: "updateFilter",
        value: function updateFilter() {
            this.dispatch("filterChange");
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.filterCountry.addChangeListener(function () {
                _this3.updateFilter();
            });

            this.updateFilter();
        }
    }]);
    return CountryUsersFilter;
}(UI.Primitive("span"));

var ArchiveScoreboardWrapper = function (_UI$Element) {
    inherits(ArchiveScoreboardWrapper, _UI$Element);

    function ArchiveScoreboardWrapper() {
        classCallCheck(this, ArchiveScoreboardWrapper);
        return possibleConstructorReturn(this, (ArchiveScoreboardWrapper.__proto__ || Object.getPrototypeOf(ArchiveScoreboardWrapper)).apply(this, arguments));
    }

    createClass(ArchiveScoreboardWrapper, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                display: "flex",
                flexDirection: "column",
                height: "100%"
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(CountryUsersFilter, { ref: "archiveUsersFilter", countries: this.options.archive.getCountries() }), UI.createElement(MetaContestUsersTable, { ref: "scoreboard", metaContest: this.options.archive, style: { flex: "1", overflow: "hidden" } })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.archiveUsersFilter.addListener("filterChange", function () {
                _this5.scoreboard.applyFilter(_this5.archiveUsersFilter.getFilter());
            });

            var updateCountriesThrottler = new CallThrottler({ throttle: 500 });
            var updateCountriesThrottled = updateCountriesThrottler.wrap(function () {
                return _this5.archiveUsersFilter.updateOptions({ countries: _this5.options.archive.getCountries() });
            });
            this.attachListener(ArchiveUserStore, ["create", "updateOrCreate"], updateCountriesThrottled);

            this.addListener("setActive", function (active$$1) {
                _this5.scoreboard.redraw();
                if (active$$1) {
                    if (typeof _this5.scoreboard.applyScrollState == "function") {
                        _this5.scoreboard.applyScrollState();
                    }
                } else {
                    if (typeof _this5.scoreboard.saveScrollState == "function") {
                        _this5.scoreboard.saveScrollState();
                    }
                }
            });
        }
    }]);
    return ArchiveScoreboardWrapper;
}(UI.Element);

var ArchiveSubmissionsWrapper = function (_UI$Element2) {
    inherits(ArchiveSubmissionsWrapper, _UI$Element2);

    function ArchiveSubmissionsWrapper() {
        classCallCheck(this, ArchiveSubmissionsWrapper);
        return possibleConstructorReturn(this, (ArchiveSubmissionsWrapper.__proto__ || Object.getPrototypeOf(ArchiveSubmissionsWrapper)).apply(this, arguments));
    }

    createClass(ArchiveSubmissionsWrapper, [{
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            this.addListener("setActive", function (active$$1) {
                if (active$$1) {
                    if (_this7.options.children.length === 0) {
                        _this7.appendChild(UI.createElement(SubmissionSummaryContestFilter, { contestId: _this7.options.archive.baseContestId,
                            allContests: true }));
                    }
                }
            });
        }
    }]);
    return ArchiveSubmissionsWrapper;
}(UI.Element);

var ArchivePanel = function (_Router) {
    inherits(ArchivePanel, _Router);

    function ArchivePanel() {
        var _ref;

        classCallCheck(this, ArchivePanel);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this8 = possibleConstructorReturn(this, (_ref = ArchivePanel.__proto__ || Object.getPrototypeOf(ArchivePanel)).call.apply(_ref, [this].concat(args)));

        _this8.navHandler = new ArchiveNavigationHandler(_this8.getArchive(), _this8);
        return _this8;
    }

    createClass(ArchivePanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ArchivePanel.prototype.__proto__ || Object.getPrototypeOf(ArchivePanel.prototype), "getDefaultOptions", this).call(this), {
                fullHeight: true
            });
        }
    }, {
        key: "getArchive",
        value: function getArchive() {
            return ArchiveStore.get(this.options.archiveId);
        }
    }, {
        key: "getTasks",
        value: function getTasks() {
            return UI.createElement(ContestTaskListWithFilters, { contest: this.getArchive(), isArchive: true });
        }
    }, {
        key: "getScoreboard",
        value: function getScoreboard() {
            return UI.createElement(ArchiveScoreboardWrapper, { archive: this.getArchive(), className: GlobalStyle.Container.MEDIUM });
        }
    }, {
        key: "getSubmissions",
        value: function getSubmissions() {
            return UI.createElement(ArchiveSubmissionsWrapper, { archive: this.getArchive(), className: GlobalStyle.Container.MEDIUM });
        }
    }, {
        key: "getChat",
        value: function getChat() {
            var chatId = this.getArchive().discussionId;
            return chatId && UI.createElement(ContestChat, { chatId: chatId, ref: this.refLink("chat") });
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            var _this9 = this;

            this.routes = this.routes || new Route(null, function () {
                return _this9.getTasks();
            }, [new Route("tasks", function () {
                return _this9.getTasks();
            }), new Route("task", function () {
                return _this9.getTasks();
            }, [new TerminalRoute("%s", function (options) {
                var contestTask = ContestTaskStore.getByContestIdAndUrlName(_this9.getArchive().baseContestId, options.args[0]);
                return contestTask && UI.createElement(DelayedContestTaskPanel, { contestTaskId: contestTask.id });
            })]), new Route("scoreboard", function () {
                return _this9.getScoreboard();
            }), new Route("submissions", function () {
                return _this9.getSubmissions();
            }), new Route("chat", function () {
                return _this9.getChat();
            })]);
            return this.routes;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this10 = this;

            Ajax.getJSON("/contest/archive_scoreboard_state/", {
                archiveId: this.getArchive().id
            }).then(function () {
                return _this10.getArchive().recalculateUsers();
            });
            if (this.isInDocument()) {
                this.navHandler.apply();
            }
            if (this.getArchive().discussionId) {
                GroupChatStore.fetch(this.getArchive().discussionId, function () {
                    return _this10.chat && _this10.chat.redraw();
                }, function (error) {
                    return _this10.chat && _this10.chat.updateOptions({ error: error });
                });
            }
            GlobalState.registerStream("contest-" + this.getArchive().baseContestId + "-scores");
        }
    }]);
    return ArchivePanel;
}(Router);

var Ranking = function (_SortableTable) {
    inherits(Ranking, _SortableTable);
    createClass(Ranking, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(Ranking.prototype.__proto__ || Object.getPrototypeOf(Ranking.prototype), "getDefaultOptions", this), {
                columnWidths: {
                    rank: 0,
                    user: 80,
                    score: 20
                }
            });
        }
    }]);

    function Ranking(options) {
        classCallCheck(this, Ranking);

        var _this = possibleConstructorReturn(this, (Ranking.__proto__ || Object.getPrototypeOf(Ranking)).call(this, options));

        _this.columnSortingOrder = [_this.columns[0], _this.columns[1]];
        return _this;
    }

    createClass(Ranking, [{
        key: "getEntries",
        value: function getEntries() {
            return this.sortEntries(PublicUserStore.all().filter(function (user) {
                return user.rating;
            }));
        }
    }, {
        key: "getColumns",
        value: function getColumns() {
            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            var paddingStyle = {
                paddingTop: "8px",
                paddingBottom: "8px",
                paddingLeft: "4px",
                paddingRight: "3px"
            };
            var rankStyle = {
                width: this.options.columnWidths.rank + "%"
            };
            var userStyle = {
                width: this.options.columnWidths.user + "%",
                whiteSpace: "nowrap"
            };
            var scoreStyle = {
                width: this.options.columnWidths.score + "%"
            };

            return [{
                value: function value(user) {
                    return user.globalRatingRank;
                },
                headerName: UI.T("Rank"),
                sortDescending: false,
                headerStyle: Object.assign({ verticalAlign: "middle" }, rankStyle, paddingStyle),
                cellStyle: Object.assign(numberStyle, rankStyle, paddingStyle)
            }, {
                value: function value(user) {
                    return UI.createElement(UserHandle, { userId: user.id, showCountry: true });
                },
                headerName: UI.T("User"),
                sortDescending: false,
                headerStyle: Object.assign({ verticalAlign: "middle" }, userStyle, paddingStyle),
                cellStyle: Object.assign({ verticalAlign: "middle" }, userStyle, paddingStyle)
            }, {
                value: function value(user) {
                    return user.rating || "-";
                },
                headerName: UI.T("Rating"),
                sortDescending: false,
                headerStyle: Object.assign({ verticalAlign: "middle" }, scoreStyle, paddingStyle),
                cellStyle: Object.assign({ verticalAllign: "middle" }, scoreStyle, paddingStyle)
            }];
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            get(Ranking.prototype.__proto__ || Object.getPrototypeOf(Ranking.prototype), "setColumns", this).call(this, this.getColumns());
        }
    }]);
    return Ranking;
}(SortableTable);

var RankingsEntriesManager = function (_EntriesManager) {
    inherits(RankingsEntriesManager, _EntriesManager);

    function RankingsEntriesManager(comparator) {
        classCallCheck(this, RankingsEntriesManager);

        var _this2 = possibleConstructorReturn(this, (RankingsEntriesManager.__proto__ || Object.getPrototypeOf(RankingsEntriesManager)).call(this, [], { comparator: comparator }));

        _this2.cacheEntries();
        return _this2;
    }

    createClass(RankingsEntriesManager, [{
        key: "getRawEntries",
        value: function getRawEntries() {
            return PublicUserStore.all().filter(function (user) {
                return user.rating;
            });
        }
    }]);
    return RankingsEntriesManager;
}(EntriesManager$$1);

var RangeTableRanking = function (_RangeTableInterface) {
    inherits(RangeTableRanking, _RangeTableInterface);

    function RangeTableRanking() {
        classCallCheck(this, RangeTableRanking);
        return possibleConstructorReturn(this, (RangeTableRanking.__proto__ || Object.getPrototypeOf(RangeTableRanking)).apply(this, arguments));
    }

    createClass(RangeTableRanking, [{
        key: "getEntriesManager",
        value: function getEntriesManager() {
            if (!this.entriesManager) {
                this.entriesManager = new RankingsEntriesManager(this.getComparator());
            }
            return this.entriesManager;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.getEntriesManager().getEntries();
        }
    }, {
        key: "applyFilter",
        value: function applyFilter(filter) {
            this.getEntriesManager().setFilter(filter);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(RangeTableRanking.prototype.__proto__ || Object.getPrototypeOf(RangeTableRanking.prototype), "onMount", this).call(this);
            this.addListener("reorder", function () {
                _this4.getEntriesManager().setComparator(_this4.getComparator());
            });
        }
    }]);
    return RangeTableRanking;
}(RangeTableInterface$$1(Ranking));

var MinRanking = function (_Ranking) {
    inherits(MinRanking, _Ranking);

    function MinRanking() {
        classCallCheck(this, MinRanking);
        return possibleConstructorReturn(this, (MinRanking.__proto__ || Object.getPrototypeOf(MinRanking)).apply(this, arguments));
    }

    createClass(MinRanking, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(MinRanking.prototype.__proto__ || Object.getPrototypeOf(MinRanking.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle("margin-bottom", "0");
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            if (this.shortList) {
                return this.sortEntries(this.shortList);
            }
            this.shortList = [];
            var allUsers = PublicUserStore.all().filter(function (user) {
                return !user.isAdmin;
            });
            allUsers.sort(function (a, b) {
                return (b.rating || 0) - (a.rating || 0);
            });
            for (var i = 0; i < 10; i += 1) {
                this.shortList.push(allUsers[i]);
            }
            return this.sortEntries(this.shortList);
        }
    }]);
    return MinRanking;
}(Ranking);

var ReputationRanking = function (_RangeTableRanking) {
    inherits(ReputationRanking, _RangeTableRanking);

    function ReputationRanking() {
        classCallCheck(this, ReputationRanking);
        return possibleConstructorReturn(this, (ReputationRanking.__proto__ || Object.getPrototypeOf(ReputationRanking)).apply(this, arguments));
    }

    createClass(ReputationRanking, [{
        key: "getColumns",
        value: function getColumns() {
            var _this7 = this;

            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            var rankStyle = {
                width: this.options.columnWidths.rank + "%"
            };
            var userStyle = {
                width: this.options.columnWidths.user + "%"
            };
            var scoreStyle = {
                width: this.options.columnWidths.score + "%"
            };

            return [{
                value: function value(user) {
                    return _this7.options.reputationDict[user.id].rank;
                },
                headerName: "Rank",
                sortDescending: false,
                headerStyle: Object.assign({ verticalAlign: "middle" }, rankStyle),
                cellStyle: Object.assign({}, numberStyle, rankStyle)
            }, {
                value: function value(user) {
                    return UI.createElement(UserHandle, { userId: user.id, showCountry: true });
                },
                headerName: "Name",
                sortDescending: false,
                headerStyle: Object.assign({ verticalAlign: "middle" }, userStyle),
                cellStyle: Object.assign({ verticalAlign: "middle" }, userStyle)
            }, {
                value: function value(user) {
                    return parseInt(_this7.options.reputationDict[user.id].reputation);
                },
                headerName: "Reputation",
                sortDescending: false,
                headerStyle: Object.assign({ verticalAlign: "middle" }, scoreStyle),
                cellStyle: Object.assign({ verticalAllign: "middle" }, scoreStyle)
            }];
        }
    }]);
    return ReputationRanking;
}(RangeTableRanking);

var GlobalRatings = function (_SortableTable2) {
    inherits(GlobalRatings, _SortableTable2);

    function GlobalRatings() {
        classCallCheck(this, GlobalRatings);
        return possibleConstructorReturn(this, (GlobalRatings.__proto__ || Object.getPrototypeOf(GlobalRatings)).apply(this, arguments));
    }

    createClass(GlobalRatings, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    margin: "0 auto",
                    maxWidth: "1000px",
                    width: "90%",
                    display: "flex",
                    flexDirection: "column",
                    height: "100%"
                }
            };
        }
    }, {
        key: "render",
        value: function render() {
            var ranking = void 0;
            if (this.options.type === "reputation") {
                ranking = UI.createElement(ReputationRanking, { ref: "ranking", reputationDict: this.options.reputationDict, style: { flex: "1", overflow: "hidden" } });
            } else {
                ranking = UI.createElement(RangeTableRanking, { ref: "ranking", style: { flex: "1", overflow: "hidden" } });
            }
            return [UI.createElement(
                "h3",
                { className: "text-center" },
                UI.T("Leaderboard")
            ), UI.createElement(CountryUsersFilter, { ref: "usersFilter", countries: PublicUserStore.getCountries() }), ranking];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            this.usersFilter.addListener("filterChange", function () {
                _this9.ranking.applyFilter(_this9.usersFilter.getFilter());
            });
        }
    }]);
    return GlobalRatings;
}(SortableTable);

var _class$88, _temp$24;

var Questionnaire = function (_StoreObject) {
    inherits(Questionnaire, _StoreObject);

    function Questionnaire() {
        classCallCheck(this, Questionnaire);

        var _this = possibleConstructorReturn(this, (Questionnaire.__proto__ || Object.getPrototypeOf(Questionnaire)).apply(this, arguments));

        _this.questions = [];
        return _this;
    }

    createClass(Questionnaire, [{
        key: "getQuestions",
        value: function getQuestions() {
            return this.questions.sort(function (a, b) {
                return a.priority === b.priority ? a.id - b.id : a.priority - b.priority;
            });
        }
    }, {
        key: "addQuestion",
        value: function addQuestion(question) {
            this.questions.push(question);
        }
    }, {
        key: "getAllInstances",
        value: function getAllInstances() {
            var _this2 = this;

            return QuestionnaireInstanceStore.all().filter(function (instance) {
                return instance.questionnaireId === _this2.id;
            });
        }
    }]);
    return Questionnaire;
}(StoreObject);

var QuestionnaireStore = new GenericObjectStore("questionnaire", Questionnaire);

var QuestionnaireQuestion = (_temp$24 = _class$88 = function (_StoreObject2) {
    inherits(QuestionnaireQuestion, _StoreObject2);
    createClass(QuestionnaireQuestion, [{
        key: "getQuestionnaire",
        value: function getQuestionnaire() {
            return QuestionnaireStore.get(this.questionnaireId);
        }
    }]);

    function QuestionnaireQuestion() {
        classCallCheck(this, QuestionnaireQuestion);

        var _this3 = possibleConstructorReturn(this, (QuestionnaireQuestion.__proto__ || Object.getPrototypeOf(QuestionnaireQuestion)).apply(this, arguments));

        _this3.getQuestionnaire().addQuestion(_this3);
        _this3.options = [];
        return _this3;
    }

    createClass(QuestionnaireQuestion, [{
        key: "addOption",
        value: function addOption(option) {
            this.options.push(option);
        }
    }, {
        key: "getOptions",
        value: function getOptions() {
            return this.options.sort(function (a, b) {
                return a.priority === b.priority ? a.id - b.id : a.priority - b.priority;
            });
        }
    }, {
        key: "getCurrentUserResponse",
        value: function getCurrentUserResponse() {
            var userInstance = QuestionnaireInstanceStore.getCurrentUserInstance(this.questionnaireId);
            return userInstance && userInstance.getQuestionResponse(this.id);
        }
    }]);
    return QuestionnaireQuestion;
}(StoreObject), _class$88.Type = {
    PLAIN_TEXT: 1,
    SINGLE_CHOICE: 2,
    MULTIPLE_CHOICE: 3
}, _temp$24);

var QuestionnaireQuestionStore = new GenericObjectStore("questionnairequestion", QuestionnaireQuestion, {
    dependencies: ["Questionnaire"]
});

var QuestionnaireQuestionOption = function (_StoreObject3) {
    inherits(QuestionnaireQuestionOption, _StoreObject3);

    function QuestionnaireQuestionOption() {
        classCallCheck(this, QuestionnaireQuestionOption);

        var _this4 = possibleConstructorReturn(this, (QuestionnaireQuestionOption.__proto__ || Object.getPrototypeOf(QuestionnaireQuestionOption)).apply(this, arguments));

        _this4.getQuestion() && _this4.getQuestion().addOption(_this4);
        return _this4;
    }

    createClass(QuestionnaireQuestionOption, [{
        key: "getQuestion",
        value: function getQuestion() {
            return QuestionnaireQuestionStore.get(this.questionId);
        }
    }]);
    return QuestionnaireQuestionOption;
}(StoreObject);

var QuestionnaireQuestionOptionStore = new GenericObjectStore("QuestionnaireQuestionOption", QuestionnaireQuestionOption, {
    dependencies: ["QuestionnaireQuestion"]
});

var QuestionnaireInstance = function (_StoreObject4) {
    inherits(QuestionnaireInstance, _StoreObject4);

    function QuestionnaireInstance() {
        classCallCheck(this, QuestionnaireInstance);

        var _this5 = possibleConstructorReturn(this, (QuestionnaireInstance.__proto__ || Object.getPrototypeOf(QuestionnaireInstance)).apply(this, arguments));

        _this5.questionResponses = new Map();
        return _this5;
    }

    createClass(QuestionnaireInstance, [{
        key: "getQuestionnaire",
        value: function getQuestionnaire() {
            return QuestionnaireStore.get(this.questionnaireId);
        }
    }, {
        key: "addQuestionResponse",
        value: function addQuestionResponse(questionResponse) {
            this.questionResponses.set(questionResponse.questionId, questionResponse);
        }
    }, {
        key: "getQuestionResponse",
        value: function getQuestionResponse(questionId) {
            return this.questionResponses.get(questionId);
        }
    }]);
    return QuestionnaireInstance;
}(StoreObject);

var QuestionnaireInstanceStoreClass = function (_GenericObjectStore) {
    inherits(QuestionnaireInstanceStoreClass, _GenericObjectStore);

    function QuestionnaireInstanceStoreClass() {
        classCallCheck(this, QuestionnaireInstanceStoreClass);
        return possibleConstructorReturn(this, (QuestionnaireInstanceStoreClass.__proto__ || Object.getPrototypeOf(QuestionnaireInstanceStoreClass)).call(this, "QuestionnaireInstance", QuestionnaireInstance, {
            dependencies: ["Questionnaire", "QuestionnaireQuestion", "QuestionnaireQuestionOption"]
        }));
    }

    createClass(QuestionnaireInstanceStoreClass, [{
        key: "getCurrentUserInstance",
        value: function getCurrentUserInstance(questionnaireId) {
            return this.all().find(function (instance) {
                return instance.userId === USER.id && instance.questionnaireId === questionnaireId;
            });
        }
    }]);
    return QuestionnaireInstanceStoreClass;
}(GenericObjectStore);

var QuestionnaireInstanceStore = new QuestionnaireInstanceStoreClass();

var QuestionnaireQuestionResponse = function (_StoreObject5) {
    inherits(QuestionnaireQuestionResponse, _StoreObject5);

    function QuestionnaireQuestionResponse() {
        classCallCheck(this, QuestionnaireQuestionResponse);

        var _this7 = possibleConstructorReturn(this, (QuestionnaireQuestionResponse.__proto__ || Object.getPrototypeOf(QuestionnaireQuestionResponse)).apply(this, arguments));

        _this7.getQuestionnaireInstance().addQuestionResponse(_this7);
        return _this7;
    }

    createClass(QuestionnaireQuestionResponse, [{
        key: "getQuestionnaireInstance",
        value: function getQuestionnaireInstance() {
            return QuestionnaireInstanceStore.get(this.instanceId);
        }
    }, {
        key: "getText",
        value: function getText() {
            return this.text || "";
        }
    }, {
        key: "getChoice",
        value: function getChoice() {
            return QuestionnaireQuestionOptionStore.get(this.choiceId);
        }
    }]);
    return QuestionnaireQuestionResponse;
}(StoreObject);

var QuestionnaireQuestionResponseStore = new GenericObjectStore("QuestionnaireQuestionResponse", QuestionnaireQuestionResponse, {
    dependencies: ["QuestionnaireInstance"]
});

var _class$89, _descriptor$37, _descriptor2$32, _descriptor3$27, _descriptor4$24, _descriptor5$22, _descriptor6$19, _descriptor7$17, _descriptor8$14, _descriptor9$11, _descriptor10$9, _dec$39, _class3$26, _dec2$16, _class4$4, _dec3$5, _class5$7;

function _initDefineProp$38(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$39(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var QuestionnaireStyle = (_class$89 = function (_StyleSheet) {
    inherits(QuestionnaireStyle, _StyleSheet);

    function QuestionnaireStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, QuestionnaireStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = QuestionnaireStyle.__proto__ || Object.getPrototypeOf(QuestionnaireStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$38(_this, "footer", _descriptor$37, _this), _initDefineProp$38(_this, "questionPage", _descriptor2$32, _this), _initDefineProp$38(_this, "questionTextArea", _descriptor3$27, _this), _initDefineProp$38(_this, "questionAnswerArea", _descriptor4$24, _this), _initDefineProp$38(_this, "form", _descriptor5$22, _this), _initDefineProp$38(_this, "textArea", _descriptor6$19, _this), _initDefineProp$38(_this, "radioInputContainer", _descriptor7$17, _this), _initDefineProp$38(_this, "finished", _descriptor8$14, _this), _initDefineProp$38(_this, "otherInput", _descriptor9$11, _this), _initDefineProp$38(_this, "markup", _descriptor10$9, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return QuestionnaireStyle;
}(StyleSheet), _descriptor$37 = _applyDecoratedDescriptor$39(_class$89.prototype, "footer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center"
        };
    }
}), _descriptor2$32 = _applyDecoratedDescriptor$39(_class$89.prototype, "questionPage", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "30px"
        };
    }
}), _descriptor3$27 = _applyDecoratedDescriptor$39(_class$89.prototype, "questionTextArea", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "1.2em",
            minHeight: "60px"
        };
    }
}), _descriptor4$24 = _applyDecoratedDescriptor$39(_class$89.prototype, "questionAnswerArea", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "10px"
        };
    }
}), _descriptor5$22 = _applyDecoratedDescriptor$39(_class$89.prototype, "form", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%"
        };
    }
}), _descriptor6$19 = _applyDecoratedDescriptor$39(_class$89.prototype, "textArea", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            minHeight: "100px"
        };
    }
}), _descriptor7$17 = _applyDecoratedDescriptor$39(_class$89.prototype, "radioInputContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {};
    }
}), _descriptor8$14 = _applyDecoratedDescriptor$39(_class$89.prototype, "finished", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "1.5em",
            alignItems: "center",
            height: "250px",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            textAlign: "center"
        };
    }
}), _descriptor9$11 = _applyDecoratedDescriptor$39(_class$89.prototype, "otherInput", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            outline: 0,
            border: 0,
            minWidth: "220px",
            borderBottom: "1px solid #eee",
            marginLeft: "5px",
            transition: "0.4s",
            ":focus": {
                transition: "0.4s",
                borderBottom: "1px solid #777"
            },
            ":hover": {
                transition: "0.4s",
                borderBottom: "1px solid #777"
            }
        };
    }
}), _descriptor10$9 = _applyDecoratedDescriptor$39(_class$89.prototype, "markup", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            " p": {
                margin: 0
            }
        };
    }
}), _class$89);

var QuestionPage = (_dec$39 = registerStyle(QuestionnaireStyle), _dec$39(_class3$26 = function (_UI$Element) {
    inherits(QuestionPage, _UI$Element);

    function QuestionPage() {
        classCallCheck(this, QuestionPage);
        return possibleConstructorReturn(this, (QuestionPage.__proto__ || Object.getPrototypeOf(QuestionPage)).apply(this, arguments));
    }

    createClass(QuestionPage, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                editable: true
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.questionPage);
        }
    }, {
        key: "isPlainText",
        value: function isPlainText() {
            return this.options.question.type === QuestionnaireQuestion.Type.PLAIN_TEXT;
        }
    }, {
        key: "isSingleChoice",
        value: function isSingleChoice() {
            return this.options.question.type === QuestionnaireQuestion.Type.SINGLE_CHOICE;
        }
    }, {
        key: "isMultipleChoice",
        value: function isMultipleChoice() {
            return this.options.question.type === QuestionnaireQuestion.Type.MULTIPLE_CHOICE;
        }
    }, {
        key: "getForm",
        value: function getForm() {
            var _this3 = this;

            var formFields = void 0;
            var InputType = void 0;
            if (this.isSingleChoice()) {
                InputType = RadioInput;
            }
            if (this.isMultipleChoice()) {
                InputType = CheckboxInput;
            }
            if (!this.isPlainText()) {
                formFields = this.options.question.getOptions().map(function (option) {
                    return UI.createElement(
                        "div",
                        { className: _this3.styleSheet.radioInputContainer },
                        UI.createElement(InputType, { ref: "option" + option.id, name: _this3.options.question.id,
                            checked: _this3.isChecked(option), disabled: !_this3.options.editable }),
                        UI.createElement(MarkupRenderer, { value: option.answer, className: _this3.styleSheet.markup })
                    );
                });
                if (this.options.question.otherChoice) {
                    formFields.push(UI.createElement(
                        "div",
                        { className: this.styleSheet.radioInputContainer },
                        UI.createElement(InputType, { ref: "otherChoice", name: this.options.question.id,
                            checked: this.isOtherChoice(), disabled: !this.options.editable }),
                        "Other: ",
                        UI.createElement(TextInput, { ref: "textArea", value: this.getTextValue(),
                            className: this.styleSheet.otherInput, readOnly: !this.options.editable })
                    ));
                }
            } else {
                formFields = [UI.createElement(TextArea, { className: this.styleSheet.textArea, value: this.getTextValue(),
                    ref: "textArea", readOnly: !this.options.editable })];
            }
            return UI.createElement(
                Form,
                { className: this.styleSheet.form },
                formFields
            );
        }
    }, {
        key: "getResponse",
        value: function getResponse() {
            if (this.options.instance) {
                return this.options.instance.getQuestionResponse(this.options.question.id);
            }
            return this.options.question.getCurrentUserResponse();
        }
    }, {
        key: "isChecked",
        value: function isChecked(questionOption) {
            var userResponse = this.getResponse();
            return userResponse && userResponse.choiceIds.indexOf(questionOption.id) >= 0 || false;
        }
    }, {
        key: "isOtherChoice",
        value: function isOtherChoice() {
            var userResponse = this.getResponse();
            return userResponse && (userResponse.choiceIds.length === 0 || this.isMultipleChoice()) && userResponse.text;
        }
    }, {
        key: "getTextValue",
        value: function getTextValue() {
            var userResponse = this.getResponse();
            return userResponse && userResponse.text || "";
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.questionTextArea },
                UI.createElement(MarkupRenderer, { value: this.options.question.text, className: this.styleSheet.markup })
            ), UI.createElement(
                "div",
                { className: this.styleSheet.questionAnswerArea },
                this.getForm()
            )];
        }
    }, {
        key: "getResponseData",
        value: function getResponseData() {
            var response = {
                questionnaireId: this.options.question.questionnaireId,
                questionId: this.options.question.id
            };
            if (this.isPlainText() || this.options.question.otherChoice) {
                if (this.textArea.getValue()) {
                    response.text = this.textArea.getValue();
                }
            }
            if (!this.isPlainText()) {
                var choiceIds = [];
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.options.question.getOptions()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var option = _step.value;

                        if (this["option" + option.id].getValue()) {
                            choiceIds.push(option.id);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                if (choiceIds.length) {
                    response.choiceIds = choiceIds;
                }
            }
            return response;
        }
    }, {
        key: "sendResponse",
        value: function sendResponse() {
            var _this4 = this;

            this.ajaxThrottler = this.ajaxThrottler || new CallThrottler({ throttle: 3000, debounce: 500 });
            this.ajaxThrottler.wrap(function () {
                return Ajax.postJSON("/questionnaire_answer/", _this4.getResponseData()).then(function () {
                    return _this4.options.panel.dispatch("updateFooter", false);
                });
            })();
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            if (!this.options.editable) {
                return;
            }
            if (!this.isPlainText()) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = this.options.question.getOptions()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var option = _step2.value;

                        this["option" + option.id].addChangeListener(function () {
                            return _this5.sendResponse();
                        });
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                if (this.options.question.otherChoice) {
                    this.otherChoice.addChangeListener(function () {
                        return _this5.sendResponse();
                    });
                }
            }
            if (this.isPlainText() || this.options.question.otherChoice) {
                this.textArea.addNodeListener("input", function () {
                    return _this5.sendResponse();
                });
            }
        }
    }]);
    return QuestionPage;
}(UI.Element)) || _class3$26);

var OrderedChildrenSwitcher = function (_Switcher) {
    inherits(OrderedChildrenSwitcher, _Switcher);

    function OrderedChildrenSwitcher() {
        classCallCheck(this, OrderedChildrenSwitcher);

        var _this6 = possibleConstructorReturn(this, (OrderedChildrenSwitcher.__proto__ || Object.getPrototypeOf(OrderedChildrenSwitcher)).apply(this, arguments));

        _this6.childIndex = 0;
        return _this6;
    }

    createClass(OrderedChildrenSwitcher, [{
        key: "getChildIndex",
        value: function getChildIndex() {
            return this.childIndex;
        }
    }, {
        key: "isFirstChild",
        value: function isFirstChild() {
            return this.getChildIndex() === 0;
        }
    }, {
        key: "isLastChild",
        value: function isLastChild() {
            return this.getChildIndex() === this.options.children.length - 1;
        }
    }, {
        key: "updateChildIndex",
        value: function updateChildIndex(delta) {
            var newChildIndex = this.childIndex + delta;
            if (0 <= newChildIndex && newChildIndex < this.options.children.length) {
                this.childIndex = newChildIndex;
                this.setActive(this.options.children[this.childIndex]);
            }
        }
    }]);
    return OrderedChildrenSwitcher;
}(Switcher);

var QuestionnairePanel = (_dec2$16 = registerStyle(QuestionnaireStyle), _dec2$16(_class4$4 = function (_UI$Element2) {
    inherits(QuestionnairePanel, _UI$Element2);

    function QuestionnairePanel() {
        classCallCheck(this, QuestionnairePanel);
        return possibleConstructorReturn(this, (QuestionnairePanel.__proto__ || Object.getPrototypeOf(QuestionnairePanel)).apply(this, arguments));
    }

    createClass(QuestionnairePanel, [{
        key: "getQuestionnaire",
        value: function getQuestionnaire() {
            return QuestionnaireStore.get(this.options.questionnaireId);
        }
    }, {
        key: "getQuestions",
        value: function getQuestions() {
            return this.getQuestionnaire().getQuestions();
        }
    }, {
        key: "render",
        value: function render() {
            var _this8 = this;

            var questions = this.getQuestions();
            return [UI.createElement(
                OrderedChildrenSwitcher,
                { ref: "questionPageSwitcher", style: { minHeight: "300px" } },
                questions.map(function (question) {
                    return UI.createElement(QuestionPage, { question: question, panel: _this8 });
                })
            ), UI.createElement(
                "div",
                { className: this.styleSheet.footer },
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(Button, { level: Level.PRIMARY, faIcon: "arrow-left", ref: "backButton" })
                ),
                UI.createElement("div", { ref: "progressArea" }),
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(Button, { level: Level.PRIMARY, faIcon: "arrow-right", ref: "forwardButton" })
                )
            )];
        }
    }, {
        key: "finish",
        value: function finish() {
            Ajax.postJSON("/questionnaire_submit/", {
                questionnaireId: this.options.questionnaireId
            });
            this.dispatch("finished");
            this.parent instanceof DelayedQuestionnairePanel && this.parent.dispatch("finished");
        }
    }, {
        key: "updateFooter",
        value: function updateFooter() {
            var _this9 = this;

            this.backButton.setStyle("visibility", this.questionPageSwitcher.isFirstChild() ? "hidden" : "initial");

            var isLastPage = this.questionPageSwitcher.isLastChild();
            this.forwardButton.setStyle("visibility", isLastPage ? "hidden" : "initial");

            var currentQuestion = this.getQuestions()[this.questionPageSwitcher.childIndex];
            if (currentQuestion.getCurrentUserResponse()) {
                this.forwardButton.updateOptions({ faIcon: "arrow-right", label: "" });
            } else {
                this.forwardButton.updateOptions({ faIcon: "", label: UI.T("Skip") });
            }

            if (isLastPage) {
                this.progressArea.setChildren([UI.createElement(
                    Button,
                    { onClick: function onClick() {
                            return _this9.finish();
                        }, level: Level.PRIMARY },
                    UI.T("Finish")
                )]);
            } else {
                this.progressArea.setChildren([UI.createElement(
                    "div",
                    { style: { fontSize: "1.3em" } },
                    (this.questionPageSwitcher.getChildIndex() + 1).toString() + "/" + this.getQuestions().length
                )]);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this10 = this;

            this.updateFooter();
            this.backButton.addClickListener(function () {
                _this10.questionPageSwitcher.updateChildIndex(-1);
                _this10.updateFooter();
            });
            this.forwardButton.addClickListener(function () {
                _this10.questionPageSwitcher.updateChildIndex(1);
                _this10.updateFooter();
            });
            this.addListener("updateFooter", function () {
                _this10.updateFooter();
            });
        }
    }]);
    return QuestionnairePanel;
}(UI.Element)) || _class4$4);

var DelayedQuestionnairePanel = (_dec3$5 = registerStyle(QuestionnaireStyle), _dec3$5(_class5$7 = function (_UI$Element3) {
    inherits(DelayedQuestionnairePanel, _UI$Element3);

    function DelayedQuestionnairePanel() {
        classCallCheck(this, DelayedQuestionnairePanel);
        return possibleConstructorReturn(this, (DelayedQuestionnairePanel.__proto__ || Object.getPrototypeOf(DelayedQuestionnairePanel)).apply(this, arguments));
    }

    createClass(DelayedQuestionnairePanel, [{
        key: "isFinished",
        value: function isFinished() {
            return !!QuestionnaireInstanceStore.getCurrentUserInstance(this.options.questionnaireId).dateSubmitted;
        }
    }, {
        key: "render",
        value: function render() {
            if (this.options.error) {
                return StateDependentElement.renderError(this.options.error);
            }
            if (!this.options.loaded) {
                return StateDependentElement.renderLoading();
            }
            // if (this.isFinished()) {
            //     return <div className={this.styleSheet.finished}>
            //                 <div>
            //                     {UI.T("We have received your answer for this form.")}
            //                 </div>
            //                 <div>
            //                     {UI.T("Thank you!")}
            //                 </div>
            //            </div>;
            // }
            return UI.createElement(QuestionnairePanel, { questionnaireId: this.options.questionnaireId });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            Ajax.postJSON("/questionnaire_state/", {
                questionnaireId: this.options.questionnaireId
            }).then(function () {
                return _this12.updateOptions({ loaded: true });
            }, function (error) {
                return _this12.updateOptions({ error: error });
            });
        }
    }]);
    return DelayedQuestionnairePanel;
}(UI.Element)) || _class5$7);

var QuestionnaireModal = function (_Modal) {
    inherits(QuestionnaireModal, _Modal);

    function QuestionnaireModal() {
        classCallCheck(this, QuestionnaireModal);
        return possibleConstructorReturn(this, (QuestionnaireModal.__proto__ || Object.getPrototypeOf(QuestionnaireModal)).apply(this, arguments));
    }

    createClass(QuestionnaireModal, [{
        key: "render",
        value: function render() {
            return UI.createElement(DelayedQuestionnairePanel, { questionnaireId: this.options.questionnaireId, ref: "questionnairePanel" });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this14 = this;

            get(QuestionnaireModal.prototype.__proto__ || Object.getPrototypeOf(QuestionnaireModal.prototype), "onMount", this).call(this);
            this.questionnairePanel.addListener("finished", function () {
                return _this14.hide();
            });
        }
    }]);
    return QuestionnaireModal;
}(Modal);

var QuestionnaireButton = function (_ActionModalButton) {
    inherits(QuestionnaireButton, _ActionModalButton);

    function QuestionnaireButton() {
        classCallCheck(this, QuestionnaireButton);
        return possibleConstructorReturn(this, (QuestionnaireButton.__proto__ || Object.getPrototypeOf(QuestionnaireButton)).apply(this, arguments));
    }

    createClass(QuestionnaireButton, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                level: Level.PRIMARY,
                label: UI.T("Open Questionnaire")
            };
        }
    }, {
        key: "getModalOptions",
        value: function getModalOptions() {
            return {
                questionnaireId: this.options.questionnaireId
            };
        }
    }]);
    return QuestionnaireButton;
}(ActionModalButton(QuestionnaireModal));

var FrontPagePanel = function (_UI$Element) {
    inherits(FrontPagePanel, _UI$Element);

    function FrontPagePanel() {
        classCallCheck(this, FrontPagePanel);
        return possibleConstructorReturn(this, (FrontPagePanel.__proto__ || Object.getPrototypeOf(FrontPagePanel)).apply(this, arguments));
    }

    createClass(FrontPagePanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                margin: "0 auto",
                width: "90%",
                maxWidth: "1000px"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var panelStyle = function panelStyle(width) {
                return {
                    width: width + "%",
                    display: "inline-block",
                    verticalAlign: "top",
                    textAlign: "none",
                    whiteSpace: "initial",
                    padding: "0px 10px",
                    marginBottom: "-70px"
                };
            };

            var miniBlogPanel = [UI.createElement(
                "div",
                { ref: "leftPanelChild",
                    style: {
                        height: "50px",
                        lineHeight: "50px",
                        fontSize: "1.8em",
                        marginBottom: "-30px",
                        paddingLeft: "16px"
                    } },
                UI.T("Latest Blog Entries")
            ), UI.createElement(MiniBlog, { ref: "miniBlog" })];

            var styleElements = UI.createElement(
                StyleElement,
                null,
                UI.createElement(StyleInstance, { selector: "#frontPage h1", attributes: { "font-size": "1.65em", "margin-top": "9px", "margin-bottom": "5px" } }),
                UI.createElement(StyleInstance, { selector: "#frontPage h2", attributes: { "font-size": "1.15em", "margin-top": "7px", "margin-bottom": "5px" } }),
                UI.createElement(StyleInstance, { selector: "#frontPage h3", attributes: { "font-size": "0.88em", "margin-top": "7px", "margin-bottom": "5px" } }),
                UI.createElement(StyleInstance, { selector: "#frontPage h4", attributes: { "font-size": "0.71em", "margin-top": "7px", "margin-bottom": "5px" } }),
                UI.createElement(StyleInstance, { selector: "#frontPage h5", attributes: { "font-size": "0.60em", "margin-top": "7px", "margin-bottom": "5px" } }),
                UI.createElement(StyleInstance, { selector: ".panel-body", attributes: { "padding": "5px" } })
            );

            if (!Device.isMobileDevice()) {
                return [UI.createElement(
                    "div",
                    { ref: "leftPanel", style: panelStyle(76) },
                    miniBlogPanel
                ), UI.createElement(
                    "div",
                    { ref: "rightPanel", style: Object.assign({}, panelStyle(23), { marginTop: "63.5px" }) },
                    UI.createElement(AnswerQuestionnaire, { style: { marginBottom: "40px" } }),
                    UI.createElement(
                        "div",
                        { style: { marginBottom: "40px" } },
                        UI.createElement(UpcomingContestsPanel, { style: { "margin-bottom": "40px", marginTop: "30px" } }),
                        UI.createElement(HourlyContestsArea, null)
                    ),
                    UI.createElement(LeaderboardPanel, { ref: "leaderboard", style: { marginBottom: "40px" }, bodyStyle: { padding: 0 } }),
                    UI.createElement(SuggestionPanel, { ref: "suggestionPanel", style: { marginBottom: "40px" } })
                ), styleElements];
            } else {
                return [UI.createElement(
                    "div",
                    { ref: "leftPanel", style: panelStyle(76) },
                    UI.createElement(AnswerQuestionnaire, { style: { marginBottom: "40px" } }),
                    UI.createElement(
                        "div",
                        { style: { marginBottom: "40px" } },
                        UI.createElement(UpcomingContestsPanel, { style: { "margin-bottom": "40px", marginTop: "30px" } })
                    )
                ), UI.createElement(
                    "div",
                    { ref: "rightPanel", style: Object.assign({}, panelStyle(23), { marginTop: "63.5px" }) },
                    miniBlogPanel
                ), UI.createElement(
                    "div",
                    { style: Object.assign({}, panelStyle(100), { marginTop: "63.5px" }) },
                    UI.createElement(LeaderboardPanel, { ref: "leaderboard", bodyStyle: { padding: 0 } }),
                    UI.createElement(HourlyContestsArea, { style: { marginTop: "40px" } }),
                    UI.createElement(SuggestionPanel, { ref: "suggestionPanel", style: { marginTop: "40px", marginBottom: "40px" } })
                ), styleElements];
            }
        }
    }, {
        key: "recalculateDimensions",
        value: function recalculateDimensions() {
            var parentSize = this.getWidth();
            if (parentSize <= 900) {
                this.setStyle("white-space", "initial");
                this.rightPanel.setWidth("100%");
                this.leftPanel.setWidth("100%");
                return;
            }
            this.leftPanel.setWidth("76%");
            this.rightPanel.setWidth("23%");
            this.setStyle("white-space", "nowrap");
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            setTimeout(function () {
                _this2.recalculateDimensions();
            }, 0);
            window.addEventListener("resize", function () {
                _this2.recalculateDimensions();
            });
            this.addListener("show", function () {
                _this2.recalculateDimensions();
            });
        }
    }]);
    return FrontPagePanel;
}(UI.Element);

var MiniBlog = function (_UI$Element2) {
    inherits(MiniBlog, _UI$Element2);

    function MiniBlog() {
        classCallCheck(this, MiniBlog);
        return possibleConstructorReturn(this, (MiniBlog.__proto__ || Object.getPrototypeOf(MiniBlog)).apply(this, arguments));
    }

    createClass(MiniBlog, [{
        key: "render",
        value: function render() {
            var entries = [];

            var blogEntries = BlogEntryStore.all().sort(function (a, b) {
                return b.getArticle().dateCreated - a.getArticle().dateCreated;
            });

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = blogEntries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var entry = _step.value;

                    entries.push(UI.createElement(BlogEntryPreview, { key: entry.id, entryId: entry.id, urlPrefix: "/blog/", style: { marginBottom: "-20px !important" } }));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return entries;
        }
    }]);
    return MiniBlog;
}(UI.Element);

var SuggestionPanel = function (_CardPanel) {
    inherits(SuggestionPanel, _CardPanel);

    function SuggestionPanel() {
        classCallCheck(this, SuggestionPanel);
        return possibleConstructorReturn(this, (SuggestionPanel.__proto__ || Object.getPrototypeOf(SuggestionPanel)).apply(this, arguments));
    }

    createClass(SuggestionPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Feedback");
        }
    }, {
        key: "render",
        value: function render() {
            var _ref,
                _this5 = this;

            this.options.children = [UI.createElement(
                "div",
                { style: { textAlign: "center", fontSize: "1.1em", height: "30px", lineHeight: "30px" }, ref: "titleHeader" },
                UI.T("Tell us what you think!")
            ), UI.createElement(
                "div",
                { ref: "writingSection", className: "text-center" },
                UI.createElement(TextArea, { ref: "textInput", style: (_ref = { overflow: "auto", resize: "none", width: "100%", height: "50px", maxWidth: "90%" }, defineProperty(_ref, "height", "30px"), defineProperty(_ref, "borderRadius", "0px"), _ref) }),
                UI.createElement(Button, { ref: "sendFeedbackButton", style: { "margin": "2px", backgroundColor: "#fff", border: "0", color: "#337ab7", padding: "0", marginTop: "2px" }, faIcon: "book", level: Level.PRIMARY,
                    size: Size.MEDIUM, onClick: function onClick() {
                        return _this5.sendFeedback();
                    }, label: UI.T("Send feedback") })
            )];
            return this.options.children;
        }
    }, {
        key: "afterFeedbackSent",
        value: function afterFeedbackSent() {
            this.titleHeader.hide();
            this.textInput.hide();
            this.sendFeedbackButton.setLabel(UI.T("Thanks for your feedback!"));
            this.sendFeedbackButton.setLevel(Level.SUCCESS);
            this.sendFeedbackButton.setFaIcon("check-square");
            this.sendFeedbackButton.disable();
            this.options.sentFeedback = true;
        }
    }, {
        key: "sendFeedback",
        value: function sendFeedback() {
            var _this6 = this;

            if (!USER.isAuthenticated) {
                LoginModal.show();
                return;
            }
            var message = (this.textInput.getValue() || "").trim();
            if (message.length === 0 || this.options.sentFeedback) {
                return;
            }

            var request = {
                message: message,
                clientMessage: "{}"
            };

            Ajax.postJSON("/send_feedback/", request).then(function () {
                return _this6.afterFeedbackSent();
            });
        }
    }]);
    return SuggestionPanel;
}(CardPanel);

var LeaderboardPanel = function (_CardPanel2) {
    inherits(LeaderboardPanel, _CardPanel2);

    function LeaderboardPanel() {
        classCallCheck(this, LeaderboardPanel);
        return possibleConstructorReturn(this, (LeaderboardPanel.__proto__ || Object.getPrototypeOf(LeaderboardPanel)).apply(this, arguments));
    }

    createClass(LeaderboardPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Leaderboard");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(MinRanking, { style: { fontSize: "0.9em", padding: "0 !important", borderTop: "0", borderBottom: "1px solid #ddd" } }), UI.createElement(
                "div",
                { style: { textAlign: "center", height: "32px", lineHeight: "32px", padding: "0 !important" } },
                UI.createElement(Link, { href: "/ratings/", value: UI.T("See full leaderboard") })
            )];
        }
    }]);
    return LeaderboardPanel;
}(CardPanel);

var HourlyContestWidget = function (_UI$Element3) {
    inherits(HourlyContestWidget, _UI$Element3);

    function HourlyContestWidget() {
        classCallCheck(this, HourlyContestWidget);
        return possibleConstructorReturn(this, (HourlyContestWidget.__proto__ || Object.getPrototypeOf(HourlyContestWidget)).apply(this, arguments));
    }

    createClass(HourlyContestWidget, [{
        key: "getContests",
        value: function getContests() {
            var _this9 = this;

            var hourlyContests = ContestStore.all().filter(function (contest) {
                return contest.systemGenerated && !contest.hasFinished() && contest.originArchiveId === _this9.options.originArchiveId;
            }).sort(function (a, b) {
                return a.getStartTime() - b.getStartTime();
            });
            if (hourlyContests.length === 0) {
                return null;
            }
            return hourlyContests;
        }
    }, {
        key: "goToContest",
        value: function goToContest(contest) {
            var _this10 = this;

            if (contest.isRunning() || contest.getUser(USER.id)) {
                Router.changeURL(["contest", contest.name]);
                return;
            }
            if (!USER.isAuthenticated) {
                LoginModal.show();
                return;
            }

            var request = {
                contestId: contest.id
            };

            Ajax.postJSON("/contest/register/", request).then(function () {
                return _this10.redraw();
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this11 = this;

            var nextContests = this.getContests();
            var children = [UI.createElement(
                "div",
                { style: { "width": "100%", "font-size": ".9em", textTransform: "uppercase", height: "28px", fontWeight: "bold" } },
                this.options.name
            )];
            var containerStyle = {
                flex: "1",
                padding: "4px",
                minHeight: "120px",
                verticalAlign: "middle",
                position: "relative"
            };

            var emStyle = {
                position: "absolute",
                width: "100%",
                left: "50%",
                top: "50%",
                transform: "translate(-50%, -50%)"
            };

            if (!nextContests) {
                children.push(UI.createElement(
                    "div",
                    { style: containerStyle },
                    UI.createElement(
                        "em",
                        { style: emStyle },
                        UI.T("No contest scheduled")
                    )
                ));
            } else {
                if (nextContests.length === 1 && !nextContests[0].isRunning()) {
                    children.push(UI.createElement(
                        "div",
                        { style: containerStyle },
                        UI.createElement(
                            "em",
                            { style: emStyle },
                            UI.T("No contest running")
                        )
                    ));
                }
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    var _loop = function _loop() {
                        var nextContest = _step2.value;

                        var label = UI.T("Register"),
                            title = UI.T("Next contest");
                        var usersRegistered = void 0,
                            usersRegisteredSpan = void 0;
                        if (nextContest.isRunning()) {
                            title = UI.T("Current contest");
                        } else {
                            usersRegistered = ContestUserStore.all().filter(function (contestUser) {
                                return contestUser.contestId === nextContest.id;
                            });
                            if (usersRegistered.length > 0) {
                                usersRegisteredSpan = UI.createElement(
                                    "div",
                                    { style: { "display": "block", "position": "relative" } },
                                    UI.createElement(
                                        PopupSpan,
                                        { style: { position: "relative", overflow: "hidden", "cursor": "pointer", "color": "blue" },
                                            popupContent: function popupContent() {
                                                return usersRegistered.map(function (user) {
                                                    return UI.createElement(
                                                        "div",
                                                        { style: { "width": "100%", "height": "25px", "line-height": "25px" } },
                                                        UI.createElement(UserHandle, { userId: user.userId })
                                                    );
                                                });
                                            } },
                                        UI.T("Users registered"),
                                        ": ",
                                        usersRegistered.length
                                    )
                                );
                            }
                        }
                        if (nextContest.isRunning() || nextContest.getUser(USER.id)) {
                            label = UI.T("Go to contest");
                        }

                        children.push(UI.createElement(
                            "div",
                            { style: containerStyle },
                            UI.createElement(
                                "h5",
                                { style: { textTransform: "uppercase", fontWeight: "bold", fontSize: "90%" } },
                                title
                            ),
                            UI.createElement(
                                "div",
                                null,
                                UI.createElement(ContestTimeCounter, { contest: nextContest })
                            ),
                            UI.createElement(
                                "div",
                                null,
                                UI.createElement(
                                    Button,
                                    { onClick: function onClick() {
                                            _this11.goToContest(nextContest);
                                        }, level: Level.PRIMARY, size: Size.SMALL },
                                    label
                                )
                            ),
                            usersRegisteredSpan
                        ));
                    };

                    for (var _iterator2 = nextContests[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        _loop();
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
            return UI.createElement(
                "div",
                { style: { width: "100%", display: "flex", flexDirection: "column", textAlign: "center" } },
                children
            );
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            get(HourlyContestWidget.prototype.__proto__ || Object.getPrototypeOf(HourlyContestWidget.prototype), "onMount", this).call(this);
            ContestStore.addCreateListener(function () {
                _this12.redraw();
            });
            ContestUserStore.addCreateListener(function (contestUser) {
                var contest = contestUser.getContest();
                if (contest && contest.systemGenerated && !contest.hasFinished() && contest.originArchiveId === _this12.options.originArchiveId) {
                    _this12.redraw();
                }
            });
            ContestStore.addDeleteListener(function () {
                _this12.redraw();
            });
        }
    }]);
    return HourlyContestWidget;
}(UI.Element);

var UpcomingContestsPanel = function (_CardPanel3) {
    inherits(UpcomingContestsPanel, _CardPanel3);

    function UpcomingContestsPanel() {
        classCallCheck(this, UpcomingContestsPanel);
        return possibleConstructorReturn(this, (UpcomingContestsPanel.__proto__ || Object.getPrototypeOf(UpcomingContestsPanel)).apply(this, arguments));
    }

    createClass(UpcomingContestsPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Upcoming Contests");
        }
    }, {
        key: "render",
        value: function render() {
            var contests = ContestStore.all().filter(function (contest) {
                return !contest.systemGenerated && !contest.hasFinished() && !contest.isInfinite();
            });
            var list = [];
            if (contests.length) {
                var startedContests = contests.filter(function (contest) {
                    return contest.hasStarted();
                });
                var futureContests = contests.filter(function (contest) {
                    return !contest.hasStarted();
                });
                startedContests = startedContests.sort(function (contest1, contest2) {
                    return -contest2.getEndTime() + contest1.getEndTime();
                });
                futureContests = futureContests.sort(function (contest1, contest2) {
                    return -contest2.getStartTime() + contest1.getStartTime();
                });
                list = startedContests.concat(futureContests).map(function (contest) {
                    return UI.createElement(
                        "div",
                        { style: { border: "2px  #ddd", borderRadius: "8px", textAlign: "center", margin: "1px" } },
                        UI.createElement(
                            "div",
                            { style: {
                                    fontSize: "1.3em"
                                } },
                            UI.createElement(Link, { href: "/contest/" + contest.name, value: contest.longName })
                        ),
                        UI.createElement(
                            "div",
                            { style: {
                                    fontSize: "1em",
                                    paddingTop: "8px"
                                } },
                            contest.getFormattedStartTime()
                        ),
                        UI.createElement(
                            "div",
                            { style: {
                                    fontSize: "1em",
                                    paddingTop: "8px",
                                    fontWeight: "bold",
                                    fontStyle: "italic"
                                } },
                            UI.createElement(ContestTimeCounter, { contest: contest })
                        )
                    );
                });
            } else {
                list.push(UI.createElement(
                    "div",
                    { style: { textAlign: "center" } },
                    UI.T("No upcoming contests.")
                ));
            }
            list.push(UI.createElement(
                "div",
                { style: { textAlign: "center", paddingTop: "8px" } },
                UI.createElement(Link, { href: "/contests/", value: UI.T("See full contests list") })
            ));
            return UI.createElement(
                "div",
                { style: { padding: "8px" } },
                list
            );
        }
    }]);
    return UpcomingContestsPanel;
}(CardPanel);

var AnswerQuestionnaire = function (_UI$Element4) {
    inherits(AnswerQuestionnaire, _UI$Element4);

    function AnswerQuestionnaire() {
        classCallCheck(this, AnswerQuestionnaire);
        return possibleConstructorReturn(this, (AnswerQuestionnaire.__proto__ || Object.getPrototypeOf(AnswerQuestionnaire)).apply(this, arguments));
    }

    createClass(AnswerQuestionnaire, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                CardPanel,
                { title: UI.T("Contest Preferences Survey") },
                UI.createElement(
                    "div",
                    { style: {
                            padding: "8px",
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            flexDirection: "column"
                        } },
                    UI.createElement(
                        "div",
                        { style: { paddingBottom: "8px" } },
                        "Please take a couple of minutes to answer a few questions regarding the CS Academy contests."
                    ),
                    UI.createElement(QuestionnaireButton, { questionnaireId: 2,
                        label: "Take the Survey" })
                )
            )];
        }
    }]);
    return AnswerQuestionnaire;
}(UI.Element);

var HourlyContestsArea = function (_UI$Element5) {
    inherits(HourlyContestsArea, _UI$Element5);

    function HourlyContestsArea() {
        classCallCheck(this, HourlyContestsArea);
        return possibleConstructorReturn(this, (HourlyContestsArea.__proto__ || Object.getPrototypeOf(HourlyContestsArea)).apply(this, arguments));
    }

    createClass(HourlyContestsArea, [{
        key: "render",
        value: function render() {
            var panelStyle = {
                flex: "1",
                paddingTop: "8px",
                paddingBottom: "8px"
            };

            return [UI.createElement(
                CardPanel,
                { title: UI.T("Hourly Contests"), style: { display: "flex", flexDirection: "column" }, bodyStyle: { display: "flex", flex: "1" } },
                UI.createElement(HourlyContestWidget, { originArchiveId: ALGORITHMS_ARCHIVE_ID, name: UI.T("Algorithms"), style: panelStyle }),
                UI.createElement(HourlyContestWidget, { originArchiveId: INTERVIEWS_ARCHIVE_ID, name: UI.T("Interviews"), style: panelStyle })
            )];
        }
    }]);
    return HourlyContestsArea;
}(UI.Element);

var UpcomingContestsArea = function (_UI$Element6) {
    inherits(UpcomingContestsArea, _UI$Element6);

    function UpcomingContestsArea() {
        classCallCheck(this, UpcomingContestsArea);
        return possibleConstructorReturn(this, (UpcomingContestsArea.__proto__ || Object.getPrototypeOf(UpcomingContestsArea)).apply(this, arguments));
    }

    createClass(UpcomingContestsArea, [{
        key: "render",
        value: function render() {
            return [UI.createElement(UpcomingContestsPanel, { style: { "margin-bottom": "40px", marginTop: "30px" } }), UI.createElement(HourlyContestsArea, null)];
        }
    }]);
    return UpcomingContestsArea;
}(UI.Element);

var ProblemSetting = function (_UI$Element) {
    inherits(ProblemSetting, _UI$Element);

    function ProblemSetting() {
        classCallCheck(this, ProblemSetting);
        return possibleConstructorReturn(this, (ProblemSetting.__proto__ || Object.getPrototypeOf(ProblemSetting)).apply(this, arguments));
    }

    createClass(ProblemSetting, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("width", "60%");
            attr.setStyle("margin-left", "20%");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h1",
                { style: "margin-bottom: 20px;" },
                "Problem setting"
            ), UI.createElement(
                "p",
                null,
                "We are looking for hard problems. Each Div. 1 + Div. 2 round consists of ",
                UI.createElement(
                    "strong",
                    null,
                    "7"
                ),
                " tasks of varying difficulty. The first few are addressed to the casual competitors, while the last three are supposed to be more challenging. These last three problems (let's label them ",
                UI.createElement(
                    "strong",
                    null,
                    "1, 2, 3"
                ),
                ", with ",
                UI.createElement(
                    "strong",
                    null,
                    "1"
                ),
                " being the hardest) are what we are looking for."
            ), UI.createElement(
                "p",
                null,
                "You can check out previous Rounds",
                UI.createElement(Link, { value: "#4", href: "/contest/beta-round-4/" }),
                ",",
                UI.createElement(Link, { value: "#9", href: "/contest/round-9/" }),
                " and",
                UI.createElement(Link, { value: "#18", href: "/contest/round-18/" }),
                "to get an idea about the kind of tasks we consider suitable for future contests."
            ), UI.createElement(
                "p",
                null,
                "As the bottleneck of setting a contest usually consists of finding a suitable ",
                UI.createElement(
                    "strong",
                    null,
                    "1"
                ),
                "(the hardest problem), we will accept the following proposals:"
            ), UI.createElement(
                "ul",
                null,
                UI.createElement(
                    "li",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        "1"
                    ),
                    ": 200$"
                ),
                UI.createElement(
                    "li",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        "1 + 2"
                    ),
                    ": 200$ + 125$ = 325$"
                ),
                UI.createElement(
                    "li",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        "1 + 2 + 3"
                    ),
                    ": 200$ + 125$ + 75$ = 400$"
                )
            ), UI.createElement(
                "p",
                null,
                "The first step of becoming a problem setter consists in sending us an email at",
                UI.createElement(
                    "a",
                    { href: "mailto:contact@csacademy.com" },
                    "contact@csacademy.com"
                ),
                " consisting of:"
            ), UI.createElement(
                "ul",
                null,
                UI.createElement(
                    "li",
                    null,
                    " Short problem statement. Leave out any unnecessary story details, as we will write the final draft. Our policy is to create minimalistic statements. "
                ),
                UI.createElement(
                    "li",
                    null,
                    " Solution description (.txt, .pdf, .doc, .docx, etc.) "
                )
            ), UI.createElement(
                "p",
                null,
                "If we accept your proposal you will be required to further provide:"
            ), UI.createElement(
                "ul",
                null,
                UI.createElement(
                    "li",
                    null,
                    " Official solution in C++ and/or Java. "
                ),
                UI.createElement(
                    "li",
                    null,
                    " Tests. "
                ),
                UI.createElement(
                    "li",
                    null,
                    " Checker (if it's the case). "
                ),
                UI.createElement(
                    "li",
                    null,
                    " (Optional): Brute force, wrong greedy, or any other solution that shouldn't pass the test cases. "
                )
            ), UI.createElement(
                "p",
                null,
                "For any other questions contact us at ",
                UI.createElement(
                    "a",
                    { href: "mailto:contact@csacademy.com" },
                    "contact@csacademy.com"
                ),
                "."
            )];
        }
    }]);
    return ProblemSetting;
}(UI.Element);

var color$1 = {
    // BLUE: "#20232d",
    BLUE: "#202e3e",
    HOVER_BLUE: "#364251",
    // BLACK: "#181a22",
    BLACK: "#1c2937",
    // HOVER_BLACK: "#323539",
    HOVER_BLACK: "#364251",
    WHITE: "#eee"
};

var CSAStyle$1 = {
    color: color$1
};

var _class$90, _descriptor$38, _class3$27, _descriptor2$33, _descriptor3$28, _descriptor4$25, _descriptor5$23;

function _initDefineProp$39(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$40(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var LessonSectionPanelStyle = (_class$90 = function (_StyleSheet) {
    inherits(LessonSectionPanelStyle, _StyleSheet);

    function LessonSectionPanelStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, LessonSectionPanelStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = LessonSectionPanelStyle.__proto__ || Object.getPrototypeOf(LessonSectionPanelStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$39(_this, "lessonSectionPanel", _descriptor$38, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return LessonSectionPanelStyle;
}(StyleSheet), _descriptor$38 = _applyDecoratedDescriptor$40(_class$90.prototype, "lessonSectionPanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "800px",
            maxWidth: "80%",
            margin: "0 auto",
            marginBottom: "30px"
        };
    }
}), _class$90);

var LessonPanelStyle = (_class3$27 = function (_StyleSheet2) {
    inherits(LessonPanelStyle, _StyleSheet2);

    function LessonPanelStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, LessonPanelStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = LessonPanelStyle.__proto__ || Object.getPrototypeOf(LessonPanelStyle)).call.apply(_ref2, [this].concat(args))), _this2), _initDefineProp$39(_this2, "articleRenderer", _descriptor2$33, _this2), _initDefineProp$39(_this2, "className", _descriptor3$28, _this2), _initDefineProp$39(_this2, "comments", _descriptor4$25, _this2), _initDefineProp$39(_this2, "commentsContainer", _descriptor5$23, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return LessonPanelStyle;
}(StyleSheet), _descriptor2$33 = _applyDecoratedDescriptor$40(_class3$27.prototype, "articleRenderer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "17px",
            textAlign: "justify",
            " h1": {
                textAlign: "center",
                marginTop: "25px",
                marginBottom: "25px"
            },
            " h2": {
                textAlign: "center",
                marginTop: "25px",
                marginBottom: "25px"
            },
            " h3": {
                textAlign: "center",
                marginTop: "25px",
                marginBottom: "25px"
            },
            " h4": {
                textAlign: "center",
                marginTop: "25px",
                marginBottom: "25px"
            },
            " h5": {
                textAlign: "center",
                marginTop: "25px",
                marginBottom: "25px"
            },
            " h6": {
                textAlign: "center",
                marginTop: "25px",
                marginBottom: "25px"
            }
        };
    }
}), _descriptor3$28 = _applyDecoratedDescriptor$40(_class3$27.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "#fff",
            boxShadow: "rgb(160, 160, 160) 0px 3px 15px",
            width: "900px",
            padding: "2% 5%",
            maxWidth: "100%",
            margin: "0 auto"
        };
    }
}), _descriptor4$25 = _applyDecoratedDescriptor$40(_class3$27.prototype, "comments", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            maxWidth: "100%"
        };
    }
}), _descriptor5$23 = _applyDecoratedDescriptor$40(_class3$27.prototype, "commentsContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginBottom: "20px",
            paddingBottom: "20px",
            paddingTop: "10px"
        };
    }
}), _class3$27);

var _dec$40, _class$91;

var LessonSectionPanel = (_dec$40 = registerStyle(LessonSectionPanelStyle), _dec$40(_class$91 = function (_UI$Element) {
    inherits(LessonSectionPanel, _UI$Element);

    function LessonSectionPanel() {
        classCallCheck(this, LessonSectionPanel);
        return possibleConstructorReturn(this, (LessonSectionPanel.__proto__ || Object.getPrototypeOf(LessonSectionPanel)).apply(this, arguments));
    }

    createClass(LessonSectionPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.lessonSectionPanel);
        }
    }, {
        key: "getLessons",
        value: function getLessons() {
            return this.options.lessonSection.getLessons();
        }
    }, {
        key: "getLessonURL",
        value: function getLessonURL(urlName) {
            return "/lesson/" + urlName;
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var title = this.options.title;


            var lessons = this.getLessons();
            if (!USER.isSuperUser) {
                lessons = lessons.filter(function (lesson) {
                    return lesson.visible;
                });
            }

            // If there are no available lessons, don't show just the label to the regular users.
            if (lessons.length === 0 && !USER.isSuperUser) {
                return null;
            }

            return UI.createElement(
                CardPanel,
                { title: title,
                    headingCentered: false,
                    size: Size.LARGE },
                UI.createElement(RowList$$1, { rows: lessons,
                    alternateColors: false,
                    size: Size.LARGE,
                    rowParser: function rowParser(lesson, index) {
                        return UI.createElement(Link, { href: _this2.getLessonURL(lesson.urlName),
                            value: lesson.name });
                    } })
            );
        }
    }]);
    return LessonSectionPanel;
}(UI.Element)) || _class$91);


var LessonList = function (_UI$Element2) {
    inherits(LessonList, _UI$Element2);

    function LessonList() {
        classCallCheck(this, LessonList);
        return possibleConstructorReturn(this, (LessonList.__proto__ || Object.getPrototypeOf(LessonList)).apply(this, arguments));
    }

    createClass(LessonList, [{
        key: "render",
        value: function render() {
            var allLessonSections = LessonSectionStore.all();
            return allLessonSections.map(function (lessonSection) {
                return UI.createElement(LessonSectionPanel, { title: lessonSection.name, lessonSection: lessonSection });
            });
        }
    }]);
    return LessonList;
}(UI.Element);

var _dec$41, _class$92, _class2$15, _temp$25;

var LessonEditModal = function (_Modal) {
    inherits(LessonEditModal, _Modal);

    function LessonEditModal() {
        classCallCheck(this, LessonEditModal);
        return possibleConstructorReturn(this, (LessonEditModal.__proto__ || Object.getPrototypeOf(LessonEditModal)).apply(this, arguments));
    }

    createClass(LessonEditModal, [{
        key: "getModalWindowStyle",
        value: function getModalWindowStyle() {
            return Object.assign({}, get(LessonEditModal.prototype.__proto__ || Object.getPrototypeOf(LessonEditModal.prototype), "getModalWindowStyle", this).call(this), {
                margin: "0 auto",
                maxHeight: "100%",
                overflow: "initial",
                display: "flex",
                flexDirection: "column",
                top: "1vh",
                height: "98vh"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var lesson = this.options.lesson;
            var article = lesson.getArticle();

            var discussionButton = null;
            if (!lesson.discussionId) {
                discussionButton = UI.createElement(Button, { level: Level.WARNING, label: "Create discussion",
                    onClick: function onClick() {
                        return _this2.createDiscussion();
                    }, style: { marginLeft: "5px" } });
            }

            return [UI.createElement(
                "h1",
                null,
                "Edit Lesson"
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    FormField,
                    { label: "Title" },
                    UI.createElement(TextInput, { ref: "titleInput", value: article.name })
                ),
                UI.createElement(
                    FormField,
                    { label: "URL Name" },
                    UI.createElement(TextInput, { ref: "urlInput", value: lesson.urlName })
                ),
                UI.createElement(
                    FormField,
                    { label: "Visible" },
                    UI.createElement(CheckboxInput, { ref: "visibleCheckbox", value: lesson.visible })
                ),
                UI.createElement(Button, { level: Level.PRIMARY, label: "Change settings", onClick: function onClick() {
                        return _this2.changeSettings();
                    } }),
                discussionButton,
                UI.createElement(TemporaryMessageArea, { ref: "messageArea" })
            ), UI.createElement(ArticleEditor, { ref: "contentEditor", articleId: article.id, style: { flex: "1" } })];
        }
    }, {
        key: "changeSettings",
        value: function changeSettings() {
            var title = this.titleInput.getValue();
            var urlName = this.urlInput.getValue();
            var lesson = this.options.lesson;

            var request = {
                isVisible: this.visibleCheckbox.getValue()
            };

            if (title) {
                request.title = title;
            }

            if (urlName) {
                request.urlName = urlName;
            }

            Ajax.postJSON("/lesson/" + lesson.urlName + "/edit/", request);
        }
    }, {
        key: "createDiscussion",
        value: function createDiscussion() {
            var _this3 = this;

            var request = {};

            Ajax.postJSON("/lesson/" + this.options.lesson.urlName + "/create_discussion/", request).then(function (data) {
                return _this3.hide();
            });
        }
    }]);
    return LessonEditModal;
}(Modal);

var LessonPanel = (_dec$41 = registerStyle(LessonPanelStyle), _dec$41(_class$92 = (_temp$25 = _class2$15 = function (_Panel) {
    inherits(LessonPanel, _Panel);

    function LessonPanel() {
        classCallCheck(this, LessonPanel);
        return possibleConstructorReturn(this, (LessonPanel.__proto__ || Object.getPrototypeOf(LessonPanel)).apply(this, arguments));
    }

    createClass(LessonPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.className);
        }
    }, {
        key: "render",
        value: function render() {
            var lesson = LessonStore.all().find(function (lesson) {
                return lesson.urlName === Router.parseURL()[1];
            });
            var article = lesson.getArticle();
            var articleComments = void 0;
            if (lesson.discussionId) {
                articleComments = UI.createElement(AsyncCommentThread, { chatId: lesson.discussionId, className: this.styleSheet.comments });
            }

            var lessonEditButton = void 0;
            if (USER.isSuperUser) {
                lessonEditButton = UI.createElement(Button, { label: "Edit", onClick: function onClick() {
                        LessonEditModal.show({
                            lesson: lesson,
                            fillScreen: true
                        });
                    } });
            }

            return [lessonEditButton, UI.createElement(ArticleRenderer, { article: article, classMap: LessonPanel.LessonClassMap,
                liveLanguage: true, className: this.styleSheet.articleRenderer }), UI.createElement(
                "div",
                { className: this.styleSheet.commentsContainer },
                articleComments
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var previousBackgroundColor = document.body.style["backgroundColor"];
            document.body.style["backgroundColor"] = "#f3f4f6";

            this.addListener("urlEnter", function () {
                previousBackgroundColor = document.body.style["backgroundColor"];
                document.body.style["backgroundColor"] = "#f3f4f6";
            });
            this.addListener("urlExit", function () {
                document.body.style["backgroundColor"] = previousBackgroundColor;
            });
        }
    }]);
    return LessonPanel;
}(Panel), _class2$15.LessonClassMap = new MarkupClassMap(MarkupClassMap.GLOBAL, [["ContestTaskButton", ContestTaskButton]]), _temp$25)) || _class$92);

var EditThreadReplyButton = function (_Button) {
    inherits(EditThreadReplyButton, _Button);

    function EditThreadReplyButton() {
        classCallCheck(this, EditThreadReplyButton);
        return possibleConstructorReturn(this, (EditThreadReplyButton.__proto__ || Object.getPrototypeOf(EditThreadReplyButton)).apply(this, arguments));
    }

    createClass(EditThreadReplyButton, [{
        key: "setOptions",
        value: function setOptions(options) {
            if (!options.faIcon) {
                options.label = options.label || UI.T("Preview");
            }
            options.level = options.level || Level.PRIMARY;
            get(EditThreadReplyButton.prototype.__proto__ || Object.getPrototypeOf(EditThreadReplyButton.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(EditThreadReplyButton.prototype.__proto__ || Object.getPrototypeOf(EditThreadReplyButton.prototype), "onMount", this).call(this);
            this.addClickListener(function () {
                if (!USER.isAuthenticated) {
                    LoginModal.show();
                    return;
                }
                EditThreadReplyModal.show({
                    messageInstance: _this2.options.messageInstance,
                    classMap: ChatMarkupRenderer.classMap
                });
            });
        }
    }]);
    return EditThreadReplyButton;
}(Button);

var EditThreadReplyModal = function (_MarkupEditorModal) {
    inherits(EditThreadReplyModal, _MarkupEditorModal);

    function EditThreadReplyModal() {
        classCallCheck(this, EditThreadReplyModal);
        return possibleConstructorReturn(this, (EditThreadReplyModal.__proto__ || Object.getPrototypeOf(EditThreadReplyModal)).apply(this, arguments));
    }

    createClass(EditThreadReplyModal, [{
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(EditThreadReplyModal.prototype.__proto__ || Object.getPrototypeOf(EditThreadReplyModal.prototype), "onMount", this).call(this);
            this.markupEditor.setValue(this.options.messageInstance.getContent());
            // this.markupEditor.codeEditor.getAce().focus();
            this.doneButton.addClickListener(function () {
                _this4.options.messageInstance.edit(_this4.markupEditor.getValue());
            });
        }
    }]);
    return EditThreadReplyModal;
}(MarkupEditorModal);

var DeleteThreadReplyModal = function (_ActionModal) {
    inherits(DeleteThreadReplyModal, _ActionModal);

    function DeleteThreadReplyModal() {
        classCallCheck(this, DeleteThreadReplyModal);
        return possibleConstructorReturn(this, (DeleteThreadReplyModal.__proto__ || Object.getPrototypeOf(DeleteThreadReplyModal)).apply(this, arguments));
    }

    createClass(DeleteThreadReplyModal, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Delete message");
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return UI.T("Delete");
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                UI.T("Are you sure you want to delete the message?")
            );
        }
    }, {
        key: "action",
        value: function action() {
            this.options.messageInstance.deleteMessage();
            this.hide();
        }
    }]);
    return DeleteThreadReplyModal;
}(ActionModal);

var DeleteThreadReplyButton = ActionModalButton(DeleteThreadReplyModal);

var _class$93, _descriptor$39, _descriptor2$34, _descriptor3$29, _descriptor4$26, _descriptor5$24, _class3$28, _descriptor6$20, _descriptor7$18, _descriptor8$15, _descriptor9$12, _descriptor10$10, _descriptor11$8, _descriptor12$7, _descriptor13$7, _descriptor14$7, _descriptor15$7, _descriptor16$7, _descriptor17$7, _descriptor18$4, _descriptor19$4, _descriptor20$4, _descriptor21$2, _descriptor22$1, _descriptor23$1, _descriptor24, _class5$8, _descriptor25, _class7$6, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _class9$1, _descriptor33, _class11, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _class13, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52;

function _initDefineProp$40(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$41(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}
//import {CSAStyle} from "CSAStyle";

var colors = {
    // BLUE: "#20232d",
    BLUE: "#202e3e",
    HOVER_BLUE: "#364251",
    // BLACK: "#181a22",
    BLACK: "#1c2937",
    // HOVER_BLACK: "#323539",
    HOVER_BLACK: "#364251",
    WHITE: "#eee"
};

var ForumThreadReplyStyle = (_class$93 = function (_StyleSheet) {
    inherits(ForumThreadReplyStyle, _StyleSheet);

    function ForumThreadReplyStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, ForumThreadReplyStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ForumThreadReplyStyle.__proto__ || Object.getPrototypeOf(ForumThreadReplyStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$40(_this, "mainClass", _descriptor$39, _this), _initDefineProp$40(_this, "repliesUserAndDate", _descriptor2$34, _this), _initDefineProp$40(_this, "repliesUser", _descriptor3$29, _this), _initDefineProp$40(_this, "repliesDate", _descriptor4$26, _this), _initDefineProp$40(_this, "repliesContent", _descriptor5$24, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return ForumThreadReplyStyle;
}(StyleSheet), _descriptor$39 = _applyDecoratedDescriptor$41(_class$93.prototype, "mainClass", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "90%",
            margin: "0 auto",
            maxWidth: "1200px"
        };
    }
}), _descriptor2$34 = _applyDecoratedDescriptor$41(_class$93.prototype, "repliesUserAndDate", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "40px",
            width: "100%",
            lineHeight: "40px",
            fontSize: "15px",
            marginTop: "8px",
            marginBottom: "8px"
        };
    }
}), _descriptor3$29 = _applyDecoratedDescriptor$41(_class$93.prototype, "repliesUser", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "left",
            color: "#444",
            fontSize: "14px"
        };
    }
}), _descriptor4$26 = _applyDecoratedDescriptor$41(_class$93.prototype, "repliesDate", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "right"
        };
    }
}), _descriptor5$24 = _applyDecoratedDescriptor$41(_class$93.prototype, "repliesContent", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginBottom: "15px",
            fontSize: "16px"
        };
    }
}), _class$93);

var ForumThreadPanelStyle = (_class3$28 = function (_StyleSheet2) {
    inherits(ForumThreadPanelStyle, _StyleSheet2);

    function ForumThreadPanelStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, ForumThreadPanelStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = ForumThreadPanelStyle.__proto__ || Object.getPrototypeOf(ForumThreadPanelStyle)).call.apply(_ref2, [this].concat(args))), _this2), _this2.fontSize = "0.9em", _this2.numRepliesFontSize = "1.03em", _this2.messageFontSize = "1.2em", _this2.buttonFontSize = "1em", _initDefineProp$40(_this2, "mainClass", _descriptor6$20, _this2), _initDefineProp$40(_this2, "title", _descriptor7$18, _this2), _initDefineProp$40(_this2, "backButton", _descriptor8$15, _this2), _initDefineProp$40(_this2, "replyButtonDiv", _descriptor9$12, _this2), _initDefineProp$40(_this2, "replyButton", _descriptor10$10, _this2), _initDefineProp$40(_this2, "fullPost", _descriptor11$8, _this2), _initDefineProp$40(_this2, "dislikeButton", _descriptor12$7, _this2), _initDefineProp$40(_this2, "likeButton", _descriptor13$7, _this2), _initDefineProp$40(_this2, "author", _descriptor14$7, _this2), _initDefineProp$40(_this2, "header", _descriptor15$7, _this2), _initDefineProp$40(_this2, "message", _descriptor16$7, _this2), _initDefineProp$40(_this2, "buttons", _descriptor17$7, _this2), _initDefineProp$40(_this2, "bottomPanel", _descriptor18$4, _this2), _initDefineProp$40(_this2, "voting", _descriptor19$4, _this2), _initDefineProp$40(_this2, "numReplies", _descriptor20$4, _this2), _initDefineProp$40(_this2, "replies", _descriptor21$2, _this2), _initDefineProp$40(_this2, "editDeleteButtons", _descriptor22$1, _this2), _initDefineProp$40(_this2, "editButton", _descriptor23$1, _this2), _initDefineProp$40(_this2, "deleteButton", _descriptor24, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return ForumThreadPanelStyle;
}(StyleSheet), _descriptor6$20 = _applyDecoratedDescriptor$41(_class3$28.prototype, "mainClass", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: "0 auto",
            marginBottom: "20px",
            width: "100%"
        };
    }
}), _descriptor7$18 = _applyDecoratedDescriptor$41(_class3$28.prototype, "title", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "90%",
            maxWidth: "1200px",
            margin: "0 auto",
            fontSize: "2em",
            color: "#333",
            minHeight: "50px",
            display: "flex",
            justifyContent: "center",
            alignItems: "center"
        };
    }
}), _descriptor8$15 = _applyDecoratedDescriptor$41(_class3$28.prototype, "backButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "#444",
            fontSize: this.fontsize,
            textDecoration: "none",
            transition: ".15s",
            opacity: "1",
            ":hover": {
                opacity: "1",
                color: "#337ab7",
                transition: ".15s"
            }
        };
    }
}), _descriptor9$12 = _applyDecoratedDescriptor$41(_class3$28.prototype, "replyButtonDiv", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "90%",
            maxWidth: "1200px",
            height: "50px",
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            margin: "0 auto"
        };
    }
}), _descriptor10$10 = _applyDecoratedDescriptor$41(_class3$28.prototype, "replyButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: "0"
        };
    }
}), _descriptor11$8 = _applyDecoratedDescriptor$41(_class3$28.prototype, "fullPost", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "90%",
            maxWidth: "1200px",
            margin: "0 auto",
            fontSize: this.fontSize,
            border: "1px solid #ddd",
            borderTop: "0"
        };
    }
}), _descriptor12$7 = _applyDecoratedDescriptor$41(_class3$28.prototype, "dislikeButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "right",
            marginRight: "16px"
        };
    }
}), _descriptor13$7 = _applyDecoratedDescriptor$41(_class3$28.prototype, "likeButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "right",
            marginRight: "8px"
        };
    }
}), _descriptor14$7 = _applyDecoratedDescriptor$41(_class3$28.prototype, "author", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "#262626",
            fontSize: this.fontSize,
            height: "50px",
            display: "flex",
            alignItems: "center",
            paddingLeft: "0",
            // justifyContent: "center",
            textTransform: "uppercase"
            // fontWeight: "bold",
        };
    }
}), _descriptor15$7 = _applyDecoratedDescriptor$41(_class3$28.prototype, "header", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {};
    }
}), _descriptor16$7 = _applyDecoratedDescriptor$41(_class3$28.prototype, "message", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "5px 12px",
            fontSize: this.messageFontSize,
            color: colors.BLUE,
            " p": {
                marginBottom: "0",
                padding: "5px 0"
            }
        };
    }
}), _descriptor17$7 = _applyDecoratedDescriptor$41(_class3$28.prototype, "buttons", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "50px",
            width: "100%",
            paddingTop: "12px"
        };
    }
}), _descriptor18$4 = _applyDecoratedDescriptor$41(_class3$28.prototype, "bottomPanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "50px",
            width: "100%",
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between"
        };
    }
}), _descriptor19$4 = _applyDecoratedDescriptor$41(_class3$28.prototype, "voting", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            paddingRight: "12px"
        };
    }
}), _descriptor20$4 = _applyDecoratedDescriptor$41(_class3$28.prototype, "numReplies", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "50px",
            fontSize: this.numRepliesFontSize,
            paddingLeft: "12px",
            color: "#767676",
            display: "flex",
            alignItems: "center",
            fontWeight: "bold",
            textTransform: "uppercase"
        };
    }
}), _descriptor21$2 = _applyDecoratedDescriptor$41(_class3$28.prototype, "replies", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            color: "#444"
        };
    }
}), _descriptor22$1 = _applyDecoratedDescriptor$41(_class3$28.prototype, "editDeleteButtons", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            height: "50px",
            padding: "0 7px",
            display: "flex",
            alignItems: "center",
            justifyContent: "flex-start"
        };
    }
}), _descriptor23$1 = _applyDecoratedDescriptor$41(_class3$28.prototype, "editButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "35px",
            width: "35px",
            margin: "0 4px",
            border: "0",
            borderRadius: "0",
            color: "#fff",
            backgroundColor: "#333",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            fontSize: this.buttonFontSize,
            transition: ".2s",
            ":hover": {
                backgroundColor: "#454545",
                transition: ".2s"
            }
        };
    }
}), _descriptor24 = _applyDecoratedDescriptor$41(_class3$28.prototype, "deleteButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "35px",
            width: "35px",
            margin: "0 4px",
            border: "0",
            borderRadius: "0",
            color: "#fff",
            backgroundColor: "#333",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            fontSize: this.buttonFontSize,
            transition: ".2s",
            ":hover": {
                backgroundColor: "#454545",
                transition: ".2s"
            }
        };
    }
}), _class3$28);
var ButtonStyle$1 = (_class5$8 = function (_StyleSheet3) {
    inherits(ButtonStyle$$1, _StyleSheet3);

    function ButtonStyle$$1() {
        var _ref3;

        var _temp3, _this3, _ret3;

        classCallCheck(this, ButtonStyle$$1);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this3 = possibleConstructorReturn(this, (_ref3 = ButtonStyle$$1.__proto__ || Object.getPrototypeOf(ButtonStyle$$1)).call.apply(_ref3, [this].concat(args))), _this3), _initDefineProp$40(_this3, "button", _descriptor25, _this3), _temp3), possibleConstructorReturn(_this3, _ret3);
    }

    return ButtonStyle$$1;
}(StyleSheet), _descriptor25 = _applyDecoratedDescriptor$41(_class5$8.prototype, "button", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _ref4;

        return _ref4 = {
            marginLeft: "16px",
            color: "#fff",
            height: "30px",
            marginTop: "10px",
            marginBottom: "20px",
            width: "auto",
            borderRadius: "0px",
            backgroundColor: colors.BLUE,
            border: "0",
            padding: "5px 10px"
        }, defineProperty(_ref4, "marginBottom", "0"), defineProperty(_ref4, "borderColor", colors.BLUE), defineProperty(_ref4, "fontSize", "13px"), defineProperty(_ref4, "transition", ".2s"), defineProperty(_ref4, "outline", "none"), defineProperty(_ref4, ":hover", {
            backgroundColor: colors.HOVER_BLUE,
            borderColor: colors.HOVER_BLUE,
            transition: ".2s"
        }), defineProperty(_ref4, ":active", {
            backgroundColor: colors.HOVER_BLUE,
            borderColor: colors.HOVER_BLUE,
            transition: ".2s"
        }), defineProperty(_ref4, ":focus", {
            backgroundColor: colors.HOVER_BLUE,
            borderColor: colors.HOVER_BLUE,
            transition: ".2s"
        }), _ref4;
    }
}), _class5$8);
var ForumThreadHeaderStyle = (_class7$6 = function (_StyleSheet4) {
    inherits(ForumThreadHeaderStyle, _StyleSheet4);

    function ForumThreadHeaderStyle() {
        classCallCheck(this, ForumThreadHeaderStyle);

        var _this4 = possibleConstructorReturn(this, (ForumThreadHeaderStyle.__proto__ || Object.getPrototypeOf(ForumThreadHeaderStyle)).call(this, {
            updateOnResize: true
        }));

        _this4.fontSize = "0.85em";
        _this4.widthLimit = 800;
        _this4.tagsHeight = 50;
        _this4.borderTopColor = "#333";
        _this4.baseStyleObject = {
            height: _this4.tagsHeight + "px",
            // display: "inline-block",
            // float: "left",
            color: "#262626",
            // letterSpacing: "-0.3px",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            textTransform: "uppercase",
            fontWeight: "bold"
        };

        _initDefineProp$40(_this4, "mainClass", _descriptor26, _this4);

        _initDefineProp$40(_this4, "tagsTitle", _descriptor27, _this4);

        _initDefineProp$40(_this4, "tagsAuthor", _descriptor28, _this4);

        _initDefineProp$40(_this4, "tagsReplies", _descriptor29, _this4);

        _initDefineProp$40(_this4, "tagsViews", _descriptor30, _this4);

        _initDefineProp$40(_this4, "tagsVotes", _descriptor31, _this4);

        _initDefineProp$40(_this4, "tagsActivity", _descriptor32, _this4);

        return _this4;
    }
    // borderTopColor = "rgb(232, 189, 35)";


    return ForumThreadHeaderStyle;
}(StyleSheet), _descriptor26 = _applyDecoratedDescriptor$41(_class7$6.prototype, "mainClass", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _ref5;

        return _ref5 = {
            height: "40px",
            width: "100%",
            maxWidth: "1200px",
            marginLeft: "auto",
            marginRight: "auto",
            // borderBottom: "2px solid #333",// + this.borderTopColor,
            color: "#aaa",
            display: "flex",

            boxSizing: "content-box",
            backgroundColor: "#eaeaea"
        }, defineProperty(_ref5, "height", this.tagsHeight + "px"), defineProperty(_ref5, "borderTop", "3px solid " + this.borderTopColor), _ref5;
    }
}), _descriptor27 = _applyDecoratedDescriptor$41(_class7$6.prototype, "tagsTitle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this5 = this;

        return [this.baseStyleObject, {
            // marginLeft: "1%",
            // width: "40%",
            paddingLeft: "12px",
            flex: function flex() {
                if (window.innerWidth < _this5.widthLimit) {
                    return "1.5";
                }
                return "3";
            },
            justifyContent: "initial",
            fontSize: this.fontSize
        }];
    }
}), _descriptor28 = _applyDecoratedDescriptor$41(_class7$6.prototype, "tagsAuthor", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.baseStyleObject, {
            // width: "14%",
            paddingLeft: "4px",
            paddingRight: "4px",
            flex: ".7",
            textAlign: "center",
            fontSize: this.fontSize
        }];
    }
}), _descriptor29 = _applyDecoratedDescriptor$41(_class7$6.prototype, "tagsReplies", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _ref6;

        return [this.baseStyleObject, (_ref6 = {
            paddingLeft: "4px",
            paddingRight: "4px"
        }, defineProperty(_ref6, "paddingLeft", "4px"), defineProperty(_ref6, "paddingRight", "4px"), defineProperty(_ref6, "flex", ".5"), defineProperty(_ref6, "textAlign", "center"), defineProperty(_ref6, "fontSize", this.fontSize), _ref6)];
    }
}), _descriptor30 = _applyDecoratedDescriptor$41(_class7$6.prototype, "tagsViews", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this6 = this;

        return [this.baseStyleObject, {
            // width: "8%",
            paddingLeft: "4px",
            paddingRight: "4px",
            flex: ".5",
            textAlign: "center",
            fontSize: this.fontSize,
            display: function display() {
                console.log(window.innerWidth);
                if (window.innerWidth < _this6.widthLimit) {
                    return "none";
                }
                return "inherit";
            }
        }];
    }
}), _descriptor31 = _applyDecoratedDescriptor$41(_class7$6.prototype, "tagsVotes", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this7 = this;

        return [this.baseStyleObject, {
            // width: "8%",
            paddingLeft: "4px",
            paddingRight: "4px",
            flex: ".5",
            textAlign: "center",
            fontSize: this.fontSize,
            display: function display() {
                if (window.innerWidth < _this7.widthLimit) {
                    return "none";
                }
                return "inherit";
            }
        }];
    }
}), _descriptor32 = _applyDecoratedDescriptor$41(_class7$6.prototype, "tagsActivity", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.baseStyleObject, {
            // width: "20%",
            paddingLeft: "4px",
            paddingRight: "12px",
            flex: ".5",
            textAlign: "center",
            fontSize: this.fontSize
        }];
    }
}), _class7$6);
var ForumThreadPreviewStyle = (_class9$1 = function (_StyleSheet5) {
    inherits(ForumThreadPreviewStyle, _StyleSheet5);

    function ForumThreadPreviewStyle() {
        var _ref7;

        var _temp4, _this8, _ret4;

        classCallCheck(this, ForumThreadPreviewStyle);

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        return _ret4 = (_temp4 = (_this8 = possibleConstructorReturn(this, (_ref7 = ForumThreadPreviewStyle.__proto__ || Object.getPrototypeOf(ForumThreadPreviewStyle)).call.apply(_ref7, [this].concat(args))), _this8), _this8.maxHeight = 50, _this8.lines = 2, _this8.lineHeight = _this8.maxHeight / _this8.lines, _this8.fontSize = ".88em", _this8.color = "#aaa", _initDefineProp$40(_this8, "forumThreadPreview", _descriptor33, _this8), _temp4), possibleConstructorReturn(_this8, _ret4);
    }
    // functionality


    // design


    return ForumThreadPreviewStyle;
}(StyleSheet), _descriptor33 = _applyDecoratedDescriptor$41(_class9$1.prototype, "forumThreadPreview", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            maxHeight: this.maxHeight + "px",
            lineHeight: this.lineHeight + "px",
            overflow: "hidden",
            fontSize: this.fontSize,
            color: this.color,
            " *": {
                marginBottom: "0"
            }
        };
    }
}), _class9$1);
var ForumThreadBubbleStyle = (_class11 = function (_StyleSheet6) {
    inherits(ForumThreadBubbleStyle, _StyleSheet6);

    function ForumThreadBubbleStyle() {
        classCallCheck(this, ForumThreadBubbleStyle);

        var _this9 = possibleConstructorReturn(this, (ForumThreadBubbleStyle.__proto__ || Object.getPrototypeOf(ForumThreadBubbleStyle)).call(this, {
            updateOnResize: true
        }));

        _this9.fontSize = "1em";
        _this9.titlePaddingBottom = "10px";
        _this9.widthLimit = 800;
        _this9.baseStyleObject = {
            display: "inline-block",
            verticalAlign: "top",
            fontSize: _this9.fontSize
        };

        _initDefineProp$40(_this9, "backgroundColorOddInstances", _descriptor34, _this9);

        _initDefineProp$40(_this9, "backgroundColorPinnedInstances", _descriptor35, _this9);

        _initDefineProp$40(_this9, "backgroundColorEvenInstances", _descriptor36, _this9);

        _initDefineProp$40(_this9, "mainClass", _descriptor37, _this9);

        _initDefineProp$40(_this9, "threadTitleAndPreview", _descriptor38, _this9);

        _initDefineProp$40(_this9, "threadTitle", _descriptor39, _this9);

        _initDefineProp$40(_this9, "pinnedIcon", _descriptor40, _this9);

        _initDefineProp$40(_this9, "threadTitleSpan", _descriptor41, _this9);

        _initDefineProp$40(_this9, "threadAuthor", _descriptor42, _this9);

        _initDefineProp$40(_this9, "threadReplies", _descriptor43, _this9);

        _initDefineProp$40(_this9, "threadRepliesSpan", _descriptor44, _this9);

        _initDefineProp$40(_this9, "threadViews", _descriptor45, _this9);

        _initDefineProp$40(_this9, "threadVotes", _descriptor46, _this9);

        _initDefineProp$40(_this9, "threadActivity", _descriptor47, _this9);

        return _this9;
    }

    return ForumThreadBubbleStyle;
}(StyleSheet), _descriptor34 = _applyDecoratedDescriptor$41(_class11.prototype, "backgroundColorOddInstances", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "#f4f6f7",
            ":hover": {
                backgroundColor: "#eff1f2"
            }
        };
    }
}), _descriptor35 = _applyDecoratedDescriptor$41(_class11.prototype, "backgroundColorPinnedInstances", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "#f4f6f7",
            ":hover": {
                backgroundColor: "#eff1f2"
            }
        };
    }
}), _descriptor36 = _applyDecoratedDescriptor$41(_class11.prototype, "backgroundColorEvenInstances", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "#fff",
            ":hover": {
                backgroundColor: "#fafafa"
            }
        };
    }
}), _descriptor37 = _applyDecoratedDescriptor$41(_class11.prototype, "mainClass", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            maxWidth: "1200px",
            marginLeft: "auto",
            marginRight: "auto",
            color: "#555",
            border: "1px solid #ddd",
            borderTop: "0",
            display: "flex"
        };
    }
}), _descriptor38 = _applyDecoratedDescriptor$41(_class11.prototype, "threadTitleAndPreview", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this10 = this;

        return {
            flexDirection: "column",
            flex: function flex() {
                if (window.innerWidth < _this10.widthLimit) {
                    return "1.5";
                }
                return "3";
            },
            paddingTop: "25px",
            paddingBottom: "25px",
            paddingLeft: "12px"
        };
    }
}), _descriptor39 = _applyDecoratedDescriptor$41(_class11.prototype, "threadTitle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.baseStyleObject, {
            // width: "40%",
            // maxWidth: "50%",
            // flex: "1.5",
            flexDirection: "column",
            textAlign: "justify",
            // paddingRight: "8px",
            verticalAlign: "middle",
            wordWrap: "break-word",
            color: "#252628",
            paddingBottom: this.titlePaddingBottom
        }];
    }
}), _descriptor40 = _applyDecoratedDescriptor$41(_class11.prototype, "pinnedIcon", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            textAlign: "center",
            display: "inline-block",
            float: "left",
            height: "60px",
            paddingTop: "25px",
            paddingRight: "12px"
        };
    }
}), _descriptor41 = _applyDecoratedDescriptor$41(_class11.prototype, "threadTitleSpan", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            verticalAlign: "middle",
            lineHeight: "20px",
            // maxWidth: "95%",
            transition: "0.2s",
            fontSize: "1.2em",
            ":hover": {
                color: "#337ab7",
                transition: "0.2s"
            }
        };
    }
}), _descriptor42 = _applyDecoratedDescriptor$41(_class11.prototype, "threadAuthor", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.baseStyleObject, {
            // width: "14%",
            // maxWidth: "14%",
            flex: ".7",
            // paddingLeft: "8px",
            textAlign: "center",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            paddingLeft: "4px",
            paddingRight: "4px"
        }];
    }
}), _descriptor43 = _applyDecoratedDescriptor$41(_class11.prototype, "threadReplies", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.baseStyleObject, {
            // width: "8%",
            flex: ".5",
            textAlign: "center",
            fontWeight: "bold",
            color: "#767676",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            paddingLeft: "4px",
            paddingRight: "4px"
        }];
    }
}), _descriptor44 = _applyDecoratedDescriptor$41(_class11.prototype, "threadRepliesSpan", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            transition: "0.2s",
            ":hover": {
                color: "#337ab7",
                transition: "0.2s"
            }
        };
    }
}), _descriptor45 = _applyDecoratedDescriptor$41(_class11.prototype, "threadViews", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this11 = this;

        return [this.baseStyleObject, defineProperty({
            // width: "8%",
            flex: ".5",
            textAlign: "center",
            color: "#767676",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            paddingLeft: "4px",
            paddingRight: "4px"
        }, "display", function display() {
            if (window.innerWidth < _this11.widthLimit) {
                return "none";
            }
            return "inherit";
        })];
    }
}), _descriptor46 = _applyDecoratedDescriptor$41(_class11.prototype, "threadVotes", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this12 = this;

        return [this.baseStyleObject, defineProperty({
            // width: "8%",
            flex: ".5",
            textAlign: "center",
            color: "#767676",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            paddingLeft: "4px",
            paddingRight: "4px"
        }, "display", function display() {
            if (window.innerWidth < _this12.widthLimit) {
                return "none";
            }
            return "inherit";
        })];
    }
}), _descriptor47 = _applyDecoratedDescriptor$41(_class11.prototype, "threadActivity", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return [this.baseStyleObject, {
            // width: "20%",
            flex: ".5",
            textAlign: "center",
            color: "#767676",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            paddingLeft: "4px",
            paddingRight: "12px",
            fontSize: ".85em"
        }];
    }
}), _class11);
var ForumPanelStyle = (_class13 = function (_StyleSheet7) {
    inherits(ForumPanelStyle, _StyleSheet7);

    function ForumPanelStyle() {
        var _ref10;

        var _temp5, _this13, _ret5;

        classCallCheck(this, ForumPanelStyle);

        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
        }

        return _ret5 = (_temp5 = (_this13 = possibleConstructorReturn(this, (_ref10 = ForumPanelStyle.__proto__ || Object.getPrototypeOf(ForumPanelStyle)).call.apply(_ref10, [this].concat(args))), _this13), _this13.textColor = "#333", _this13.headerItemHeight = 50, _initDefineProp$40(_this13, "mainClass", _descriptor48, _this13), _initDefineProp$40(_this13, "title", _descriptor49, _this13), _initDefineProp$40(_this13, "buttonParent", _descriptor50, _this13), _initDefineProp$40(_this13, "button", _descriptor51, _this13), _initDefineProp$40(_this13, "header", _descriptor52, _this13), _temp5), possibleConstructorReturn(_this13, _ret5);
    }

    return ForumPanelStyle;
}(StyleSheet), _descriptor48 = _applyDecoratedDescriptor$41(_class13.prototype, "mainClass", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%"
        };
    }
}), _descriptor49 = _applyDecoratedDescriptor$41(_class13.prototype, "title", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            // textAlign: "center",
            fontSize: "2em",
            color: this.textColor,
            height: this.headerItemHeight + "px",
            display: "flex",
            justifyContent: "center",
            alignItems: "center"
        };
    }
}), _descriptor50 = _applyDecoratedDescriptor$41(_class13.prototype, "buttonParent", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "90%",
            maxWidth: "1200px",
            margin: "0 auto",
            height: this.headerItemHeight + "px",
            display: "flex",
            justifyContent: "flex-end",
            alignItems: "center"
        };
    }
}), _descriptor51 = _applyDecoratedDescriptor$41(_class13.prototype, "button", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: "0"
        };
    }
}), _descriptor52 = _applyDecoratedDescriptor$41(_class13.prototype, "header", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: 2 * this.headerItemHeight + "px",
            width: "100%"
        };
    }
}), _class13);

var _dec$42, _class$94;

var CreateThreadReplyButton = (_dec$42 = registerStyle(ButtonStyle$1), _dec$42(_class$94 = function (_Button) {
    inherits(CreateThreadReplyButton, _Button);

    function CreateThreadReplyButton() {
        classCallCheck(this, CreateThreadReplyButton);
        return possibleConstructorReturn(this, (CreateThreadReplyButton.__proto__ || Object.getPrototypeOf(CreateThreadReplyButton)).apply(this, arguments));
    }

    createClass(CreateThreadReplyButton, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                level: Level.PRIMARY,
                size: Size.LARGE,
                label: UI.T("Preview")
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.button);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(CreateThreadReplyButton.prototype.__proto__ || Object.getPrototypeOf(CreateThreadReplyButton.prototype), "onMount", this).call(this);
            this.addClickListener(function () {
                if (!USER.isAuthenticated) {
                    LoginModal.show();
                    return;
                }
                if (!_this2.markupEditorModal) {
                    _this2.markupEditorModal = UI.createElement(CreateThreadReplyModal, { forumThreadId: _this2.options.forumThreadId,
                        classMap: ChatMarkupRenderer.classMap
                    });
                }
                _this2.markupEditorModal.show();
            });
        }
    }]);
    return CreateThreadReplyButton;
}(Button)) || _class$94);

var CreateThreadReplyModal = function (_MarkupEditorModal) {
    inherits(CreateThreadReplyModal, _MarkupEditorModal);

    function CreateThreadReplyModal() {
        classCallCheck(this, CreateThreadReplyModal);
        return possibleConstructorReturn(this, (CreateThreadReplyModal.__proto__ || Object.getPrototypeOf(CreateThreadReplyModal)).apply(this, arguments));
    }

    createClass(CreateThreadReplyModal, [{
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(CreateThreadReplyModal.prototype.__proto__ || Object.getPrototypeOf(CreateThreadReplyModal.prototype), "onMount", this).call(this);
            this.doneButton.addClickListener(function () {
                _this4.createThreadReply();
            });
        }
    }, {
        key: "createThreadReply",
        value: function createThreadReply() {
            // TODO: should be a dispatch: it should jump and highlight your post
            Ajax.postJSON("/forum/forum_thread_post/", {
                forumThreadId: this.options.forumThreadId,
                message: this.markupEditor.getValue()
            });
        }
    }]);
    return CreateThreadReplyModal;
}(MarkupEditorModal);

var _dec$43, _class$95, _dec2$17, _class2$16;

var forumThreadPanelStyle = ForumThreadPanelStyle.getInstance();
var buttonStyle = ButtonStyle$1.getInstance();

var CreateForumThreadModal = function (_MarkupEditorModal) {
    inherits(CreateForumThreadModal, _MarkupEditorModal);

    function CreateForumThreadModal() {
        classCallCheck(this, CreateForumThreadModal);
        return possibleConstructorReturn(this, (CreateForumThreadModal.__proto__ || Object.getPrototypeOf(CreateForumThreadModal)).apply(this, arguments));
    }

    createClass(CreateForumThreadModal, [{
        key: "render",
        value: function render() {
            var inputStyle = {
                "margin-bottom": "4px",
                "border": "0",
                //"border-radius": "4px",
                //"border": "2px solid #dcdcdc",
                "outline": "none",
                "color": "#333",
                "font-size": "14px",
                "padding-left": "8px",
                "width": "100%",
                "text-align": "center",
                "font-weight": "bold"
            };

            return [UI.createElement(Input, { label: UI.T("Title"), ref: "titleInput", style: inputStyle, placeholder: "Click here to edit the title (max. 160 characters)." })].concat(toConsumableArray(get(CreateForumThreadModal.prototype.__proto__ || Object.getPrototypeOf(CreateForumThreadModal.prototype), "render", this).call(this)));
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.doneButton.addClickListener(function () {
                _this2.createForumThread();
            });
        }
    }, {
        key: "routeToThread",
        value: function routeToThread(forumThreadId) {
            // TODO: add the temp forum title
            Router.changeURL(["forum", forumThreadId, "title"]);
        }
    }, {
        key: "createForumThread",
        value: function createForumThread() {
            var _this3 = this;

            var request = {
                forumId: this.options.forumId,
                title: this.titleInput.getValue(),
                message: this.markupEditor.getValue()
            };

            Ajax.postJSON("/forum/create_forum_thread/", request).then(function (data) {
                _this3.routeToThread(data.forumThreadId);
                _this3.titleInput.setValue("");
                _this3.markupEditor.setValue("");
                _this3.markupEditor.redraw();
                _this3.hide();
            });
        }
    }]);
    return CreateForumThreadModal;
}(MarkupEditorModal);

var CreateForumThreadButton = (_dec$43 = registerStyle(ButtonStyle$1), _dec$43(_class$95 = function (_Button) {
    inherits(CreateForumThreadButton, _Button);

    function CreateForumThreadButton() {
        classCallCheck(this, CreateForumThreadButton);
        return possibleConstructorReturn(this, (CreateForumThreadButton.__proto__ || Object.getPrototypeOf(CreateForumThreadButton)).apply(this, arguments));
    }

    createClass(CreateForumThreadButton, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.button);
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            if (!options.faIcon) {
                options.label = options.label || UI.T("Preview");
            }
            options.level = options.level || Level.PRIMARY;
            options.size = options.size || Size.LARGE;
            get(CreateForumThreadButton.prototype.__proto__ || Object.getPrototypeOf(CreateForumThreadButton.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getModalClass",
        value: function getModalClass() {
            return CreateForumThreadModal;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            get(CreateForumThreadButton.prototype.__proto__ || Object.getPrototypeOf(CreateForumThreadButton.prototype), "onMount", this).call(this);
            this.addClickListener(function () {
                if (!USER.isAuthenticated) {
                    LoginModal.show();
                    return;
                }
                _this5.getModalClass().show({
                    forumId: _this5.options.forumId,
                    classMap: ChatMarkupRenderer.classMap
                });
            });
        }
    }]);
    return CreateForumThreadButton;
}(Button)) || _class$95);

var DeleteForumThreadModal = function (_ActionModal) {
    inherits(DeleteForumThreadModal, _ActionModal);

    function DeleteForumThreadModal() {
        classCallCheck(this, DeleteForumThreadModal);
        return possibleConstructorReturn(this, (DeleteForumThreadModal.__proto__ || Object.getPrototypeOf(DeleteForumThreadModal)).apply(this, arguments));
    }

    createClass(DeleteForumThreadModal, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Delete forum thread");
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return UI.T("Delete");
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                UI.T("Are you sure you want to delete thread"),
                " \"" + this.options.forumThread.title + "\"?"
            );
        }
    }, {
        key: "action",
        value: function action() {
            this.options.forumThread.deleteThread();
            this.hide();
        }
    }]);
    return DeleteForumThreadModal;
}(ActionModal);

var DeleteForumThreadButton = ActionModalButton(DeleteForumThreadModal);

var ForumThreadReply = function (_UI$Element) {
    inherits(ForumThreadReply, _UI$Element);

    function ForumThreadReply() {
        classCallCheck(this, ForumThreadReply);
        return possibleConstructorReturn(this, (ForumThreadReply.__proto__ || Object.getPrototypeOf(ForumThreadReply)).apply(this, arguments));
    }

    createClass(ForumThreadReply, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            // attr.addClass(forumThreadReplyStyle.mainClass);
        }
    }, {
        key: "getMessageInstance",
        value: function getMessageInstance() {
            return this.options.messageInstance;
        }
    }, {
        key: "render",
        value: function render() {
            var messageInstance = this.getMessageInstance();
            var deleteMessage = void 0;
            var editMessage = void 0;
            var editAndDeleteButtons = UI.createElement("span", null);

            if (USER.isSuperUser || USER.id === messageInstance.userId) {
                deleteMessage = UI.createElement(DeleteThreadReplyButton, {
                    faIcon: "trash",
                    level: Level.DANGER,
                    className: forumThreadPanelStyle.deleteButton,
                    modalOptions: { messageInstance: messageInstance } });
                editMessage = UI.createElement(EditThreadReplyButton, {
                    faIcon: "pencil",
                    level: Level.INFO,
                    messageInstance: messageInstance,
                    forumThreadPanel: this,
                    className: forumThreadPanelStyle.editButton });
                editAndDeleteButtons = UI.createElement(
                    "div",
                    { className: forumThreadPanelStyle.editDeleteButtons, style: { width: "auto" } },
                    editMessage,
                    deleteMessage
                );
            }

            return [UI.createElement(
                "div",
                { className: forumThreadPanelStyle.fullPost },
                UI.createElement(
                    "div",
                    { className: forumThreadPanelStyle.author,
                        style: {
                            fontSize: "1em",
                            paddingLeft: "12px",
                            display: "flex",
                            justifyContent: "space-between",
                            alignItems: "center"
                        } },
                    UI.createElement(UserHandle, { id: messageInstance.userId, style: {
                            textTransform: "initial",
                            fontSize: "1.1em"
                        } }),
                    UI.createElement(TimePassedSpan, { timeStamp: messageInstance.getDate(), style: {
                            color: "#262626 !important",
                            paddingRight: "12px"
                        } })
                ),
                UI.createElement(ChatMarkupRenderer, { ref: this.refLink("postContent" + messageInstance.id), value: messageInstance.getContent(), className: forumThreadPanelStyle.message }),
                UI.createElement(
                    "div",
                    { className: forumThreadPanelStyle.bottomPanel },
                    editAndDeleteButtons,
                    UI.createElement(CommentVotingWidgetWithThumbs, { height: 40, balanceColor: "#313534", notVoteColor: "#313534", message: messageInstance, className: forumThreadPanelStyle.voting })
                )
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.attachEventListener(this.getMessageInstance(), "messageDelete", function () {
                _this8.hide();
            });
            this.attachEventListener(this.getMessageInstance(), "messageEdit", function () {
                _this8.redraw();
            });
        }
    }]);
    return ForumThreadReply;
}(UI.Element);

var ForumThreadPanel = (_dec2$17 = registerStyle(ForumThreadPanelStyle), _dec2$17(_class2$16 = function (_Panel) {
    inherits(ForumThreadPanel, _Panel);

    function ForumThreadPanel() {
        classCallCheck(this, ForumThreadPanel);
        return possibleConstructorReturn(this, (ForumThreadPanel.__proto__ || Object.getPrototypeOf(ForumThreadPanel)).apply(this, arguments));
    }

    createClass(ForumThreadPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.mainClass);
        }
    }, {
        key: "returnToMainForum",
        value: function returnToMainForum() {
            Router.changeURL(this.getMainForumURL());
        }
    }, {
        key: "getMainForumURL",
        value: function getMainForumURL() {
            return "/forum/";
        }
    }, {
        key: "getForumThreadState",
        value: function getForumThreadState() {
            var _this10 = this;

            var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NOOP_FUNCTION;

            var request = {
                forumThreadId: this.options.forumThread.id
            };

            Ajax.postJSON("/forum/forum_thread_state/", request).then(callback, function (error) {
                _this10.returnToMainForum();
                ErrorHandlers.showErrorAlert(error);
            });
        }
    }, {
        key: "getForumThread",
        value: function getForumThread() {
            return this.options.forumThread;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.title },
                UI.createElement(Link, { href: this.getMainForumURL(), className: this.styleSheet.backButton,
                    value: UI.createElement("span", { className: "fa fa-arrow-left", style: {
                            paddingRight: "10px",
                            fontSize: ".8em",
                            color: "#333"
                        } }) }),
                this.getForumThread().getTitle()
            )];
        }
    }, {
        key: "getAuthor",
        value: function getAuthor() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.author },
                UI.T("written by"),
                "\xA0",
                UI.createElement(UserHandle, { id: this.getForumThread().authorId, style: {
                        textTransform: "initial"
                    } }),
                "\xA0",
                UI.createElement(TimePassedSpan, { timeStamp: this.getForumThread().getTimeAdded(), style: { color: "#262626 !important" } })
            );
        }
    }, {
        key: "getMessage",
        value: function getMessage() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.message },
                UI.createElement(ChatMarkupRenderer, { ref: this.refLink("content"), value: this.getForumThread().getContentMessage().getContent(), style: { height: "auto" } })
            );
        }
    }, {
        key: "getNumReplies",
        value: function getNumReplies(postsLength) {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.numReplies },
                UI.createElement(
                    "span",
                    { style: { "font-weight": "bold" } },
                    postsLength
                ),
                "\xA0",
                "replies in this thread" + (postsLength == 0 ? ", be the first one to comment" : "")
            )];
        }
    }, {
        key: "getVoting",
        value: function getVoting() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.voting },
                UI.createElement(CommentVotingWidgetWithThumbs, { height: 40, balanceColor: "#313534", notVoteColor: "#313534", message: this.getForumThread().getContentMessage(), style: { "margin-left": "0" } })
            );
        }
    }, {
        key: "render",
        value: function render() {
            var _this11 = this;

            if (!this.options.forumThread.isLoaded()) {
                this.getForumThreadState(function () {
                    _this11.redraw();
                    _this11.initializeListeners();
                });
                return UI.createElement(ConcentricCirclesLoadingScreen, null);
            }

            var replies = [];
            var spaceBetween = void 0;
            var forumThread = this.options.forumThread;

            // sort the forum replies by the activity date
            var forumThreadMessages = Array.from(forumThread.getMessageThread().getMessages());
            forumThreadMessages.sort(function (a, b) {
                return a.getDate() - b.getDate();
            });

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = forumThreadMessages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var messageInstance = _step.value;

                    if (messageInstance !== forumThread.getContentMessage()) {
                        replies.push(UI.createElement(ForumThreadReply, { className: this.styleSheet.replies, messageInstance: messageInstance }));
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (replies.length) {
                spaceBetween = UI.createElement("div", { style: {
                        height: "60px",
                        borderBottom: "1px solid #ddd",
                        width: "90%",
                        maxWidth: "1200px",
                        margin: "0 auto"
                    } });
            }

            var deleteButton = void 0;
            var editButton = void 0;
            var editAndDeleteButtons = void 0;

            if (USER.isSuperUser || USER.id === this.getForumThread().authorId) {
                deleteButton = UI.createElement(DeleteForumThreadButton, { faIcon: "trash",
                    level: Level.DANGER,
                    className: this.styleSheet.deleteButton,
                    modalOptions: {
                        forumThread: this.getForumThread()
                    } });
                editButton = UI.createElement(EditThreadReplyButton, { faIcon: "pencil",
                    level: Level.INFO,
                    className: this.styleSheet.editButton,
                    messageInstance: this.getForumThread().getContentMessage() });
                editAndDeleteButtons = UI.createElement(
                    "div",
                    { className: this.styleSheet.editDeleteButtons },
                    editButton,
                    deleteButton
                );
            }

            return [UI.createElement(
                "div",
                { style: { marginBottom: "60px" } },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.header },
                    this.getTitle(),
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.replyButtonDiv },
                        this.getAuthor(),
                        UI.createElement(CreateThreadReplyButton, {
                            label: UI.T("REPLY"),
                            className: this.styleSheet.replyButton,
                            size: Size.DEFAULT,
                            forumThreadId: forumThread.id,
                            forumThread: this.getForumThread(),
                            classMap: ChatMarkupRenderer.classMap
                        })
                    )
                ),
                UI.createElement("div", { style: { width: "90%", maxWidth: "1200px", margin: "0 auto", height: "3px", backgroundColor: "#333", marginTop: "10px" } }),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.fullPost },
                    this.getMessage(),
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.bottomPanel },
                        this.getNumReplies(replies.length),
                        this.getVoting()
                    ),
                    editAndDeleteButtons
                ),
                spaceBetween,
                replies
            )];
        }
    }, {
        key: "deleteThread",
        value: function deleteThread() {
            this.getForumThread().deleteThread();
        }
    }, {
        key: "initializeListeners",
        value: function initializeListeners() {
            var _this12 = this;

            // These listeners need to be attached after the ForumThread is loaded in the js state
            this.getForumThread().getMessageThread().addListener("newMessage", function () {
                _this12.redraw();
            });
            this.getForumThread().getMessageThread().addListener("deleteMessage", function () {
                _this12.redraw();
            });
            this.getForumThread().getContentMessage().addEventListener("messageEdit", function () {
                _this12.content.setValue(_this12.getForumThread().getContentMessage().getContent());
                _this12.content.redraw();
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this13 = this;

            // This applies only for a newly created forum thread, since the listeners from
            // render do not get attached when the thread is already in the state.

            if (this.options.forumThread.isLoaded()) {
                this.initializeListeners();
            }

            this.getForumThread().addDeleteListener(function () {
                _this13.returnToMainForum();
            });
        }
    }]);
    return ForumThreadPanel;
}(Panel)) || _class2$16);

var _dec$44, _class$96, _dec2$18, _class2$17, _dec3$6, _class3$29, _dec4$1, _class4$5;

var ForumThreadHeader = (_dec$44 = registerStyle(ForumThreadHeaderStyle), _dec$44(_class$96 = function (_UI$Element) {
    inherits(ForumThreadHeader, _UI$Element);

    function ForumThreadHeader() {
        classCallCheck(this, ForumThreadHeader);
        return possibleConstructorReturn(this, (ForumThreadHeader.__proto__ || Object.getPrototypeOf(ForumThreadHeader)).apply(this, arguments));
    }

    createClass(ForumThreadHeader, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.mainClass);
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.tagsTitle },
                UI.T("Title")
            );
        }
    }, {
        key: "getAuthor",
        value: function getAuthor() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.tagsAuthor },
                UI.T("Author")
            );
        }
    }, {
        key: "getReplies",
        value: function getReplies() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.tagsReplies },
                UI.T("Replies")
            );
        }
    }, {
        key: "getViews",
        value: function getViews() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.tagsViews },
                UI.T("Views")
            );
        }
    }, {
        key: "getVotes",
        value: function getVotes() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.tagsVotes },
                UI.T("Score")
            );
        }
    }, {
        key: "getActivity",
        value: function getActivity() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.tagsActivity },
                UI.T("Active")
            );
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getTitle(), this.getAuthor(), this.getReplies(), this.getViews(), this.getVotes(), this.getActivity()];
        }
    }]);
    return ForumThreadHeader;
}(UI.Element)) || _class$96);

var ForumThreadPreview = (_dec2$18 = registerStyle(ForumThreadPreviewStyle), _dec2$18(_class2$17 = function (_ChatMarkupRenderer) {
    inherits(ForumThreadPreview, _ChatMarkupRenderer);

    function ForumThreadPreview() {
        classCallCheck(this, ForumThreadPreview);
        return possibleConstructorReturn(this, (ForumThreadPreview.__proto__ || Object.getPrototypeOf(ForumThreadPreview)).apply(this, arguments));
    }

    createClass(ForumThreadPreview, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.forumThreadPreview);
        }
    }]);
    return ForumThreadPreview;
}(ChatMarkupRenderer)) || _class2$17);

var ForumThreadBubble = (_dec3$6 = registerStyle(ForumThreadBubbleStyle), _dec3$6(_class3$29 = function (_UI$Element2) {
    inherits(ForumThreadBubble, _UI$Element2);

    function ForumThreadBubble() {
        classCallCheck(this, ForumThreadBubble);
        return possibleConstructorReturn(this, (ForumThreadBubble.__proto__ || Object.getPrototypeOf(ForumThreadBubble)).apply(this, arguments));
    }

    createClass(ForumThreadBubble, [{
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(ForumThreadBubble.prototype.__proto__ || Object.getPrototypeOf(ForumThreadBubble.prototype), "getNodeAttributes", this).call(this);
            attr.addClass(this.styleSheet.mainClass);
            // couldn't figure out how to solve this easier and better
            // if (this.options.isPinned) {
            //     attr.addClass(String(forumThreadBubbleStyle.backgroundColorPinnedInstances));
            // } else if (this.options.color == 0) {
            //     attr.addClass(String(forumThreadBubbleStyle.backgroundColorOddInstances));
            // } else {
            //     attr.addClass(String(forumThreadBubbleStyle.backgroundColorEvenInstances));
            // }
            return attr;
        }
    }, {
        key: "getHref",
        value: function getHref() {
            return "/forum/" + this.getForumThread().id + "/" + slugify(this.getForumThread().getTitle());
        }
    }, {
        key: "getForumThread",
        value: function getForumThread() {
            return this.options.forumThread;
        }
    }, {
        key: "getThreadTitle",
        value: function getThreadTitle() {
            var _this4 = this;

            var pinned = "";
            if (this.getForumThread().isPinned()) {
                pinned = UI.createElement("span", { className: "fa fa-thumb-tack " + this.styleSheet.pinnedIcon, "aria-hidden": "true", style: { paddingTop: "0", lineHeight: "20px", height: "20px" } });
            }
            var forumThread = this.getForumThread();
            return [UI.createElement(
                "div",
                { className: this.styleSheet.threadTitleAndPreview },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.threadTitle,
                        style: { paddingBottom: function paddingBottom() {
                                if (forumThread.getContentMessage().content) {
                                    return _this4.styleSheet.titlePaddingBottom;
                                }
                                return "0";
                            } } },
                    pinned,
                    UI.createElement(Link, { style: { "text-decoration": "none", "color": "inherit", "font-size": "14px", "text-align": "justify" }, href: this.getHref(),
                        value: UI.createElement(
                            "span",
                            { className: this.styleSheet.threadTitleSpan },
                            this.getForumThread().getTitle()
                        ) })
                ),
                UI.createElement(ForumThreadPreview, { value: this.getForumThread().getContentMessage().content })
            )];
        }
    }, {
        key: "getThreadAuthor",
        value: function getThreadAuthor() {
            return [UI.createElement(
                "span",
                { className: this.styleSheet.threadAuthor },
                UI.createElement(UserHandle, { id: this.getForumThread().authorId, style: {
                        "line-height": "normal",
                        wordBreak: "break-word"
                    } })
            )];
        }
    }, {
        key: "getThreadReplies",
        value: function getThreadReplies() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.threadReplies },
                UI.createElement(Link, { style: {
                        "text-decoration": "none",
                        "color": "inherit"
                    }, href: this.getHref(), value: UI.createElement(
                        "span",
                        { className: this.styleSheet.threadRepliesSpan },
                        this.getForumThread().getNumReplies()
                    ) })
            )];
        }
    }, {
        key: "getThreadViews",
        value: function getThreadViews() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.threadViews },
                this.getForumThread().numViews
            )];
        }
    }, {
        key: "getThreadVotes",
        value: function getThreadVotes() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.threadVotes },
                this.getForumThread().getVotesBalance()
            )];
        }
    }, {
        key: "getThreadActivity",
        value: function getThreadActivity() {
            var threadActivity = this.getForumThread().getLastActive();
            /* TODO @mihaic, this should support custom color option (but I didn't want to change stem files on my own). check UIPrimitives.jsx line 400 */
            return [UI.createElement(
                "div",
                { className: this.styleSheet.threadActivity },
                UI.createElement(TimePassedSpan, { timeStamp: threadActivity })
            )];
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getThreadTitle(), this.getThreadAuthor(), this.getThreadReplies(), this.getThreadViews(), this.getThreadVotes(), this.getThreadActivity()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            get(ForumThreadBubble.prototype.__proto__ || Object.getPrototypeOf(ForumThreadBubble.prototype), "onMount", this).call(this);
            this.getForumThread().addUpdateListener(function () {
                _this5.redraw();
            });
            this.getForumThread().addDeleteListener(function () {
                _this5.hide();
            });
        }
    }]);
    return ForumThreadBubble;
}(UI.Element)) || _class3$29);

var ForumThreadList = function (_UI$Element3) {
    inherits(ForumThreadList, _UI$Element3);

    function ForumThreadList() {
        classCallCheck(this, ForumThreadList);
        return possibleConstructorReturn(this, (ForumThreadList.__proto__ || Object.getPrototypeOf(ForumThreadList)).apply(this, arguments));
    }

    createClass(ForumThreadList, [{
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(ForumThreadList.prototype.__proto__ || Object.getPrototypeOf(ForumThreadList.prototype), "getNodeAttributes", this).call(this);
            attr.setStyle({
                width: "90%",
                margin: "0 auto",
                marginTop: "10px",
                marginBottom: "60px"
                // boxShadow: "0px 0px 10px #ddd", // TODO: Do we want this?
            });
            return attr;
        }
    }, {
        key: "getBubbleClass",
        value: function getBubbleClass() {
            return ForumThreadBubble;
        }
    }, {
        key: "render",
        value: function render() {
            var forumThreads = Array.from(this.options.forum.getForumThreads());

            forumThreads.sort(function (a, b) {
                if (a.isPinned() && b.isPinned()) {
                    return b.getPinIndex() - a.getPinIndex();
                }
                if (a.isPinned()) {
                    return -1;
                }
                if (b.isPinned()) {
                    return 1;
                }
                return b.lastActive - a.lastActive;
            });

            var result = [];
            var color = 1;
            result.push(UI.createElement(ForumThreadHeader, null));
            var Bubble = this.getBubbleClass();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = forumThreads[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var forumThread = _step.value;

                    result.push(UI.createElement(Bubble, { forumThread: forumThread, color: color, isPinned: forumThread.isPinned() }));
                    if (!forumThread.isPinned()) {
                        color = !color;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return result;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            get(ForumThreadList.prototype.__proto__ || Object.getPrototypeOf(ForumThreadList.prototype), "onMount", this).call(this);
            this.options.forum.addListener("newForumThread", function () {
                _this7.redraw();
            });
        }
    }]);
    return ForumThreadList;
}(UI.Element);

var ForumPanel = (_dec4$1 = registerStyle(ForumPanelStyle), _dec4$1(_class4$5 = function (_Panel) {
    inherits(ForumPanel, _Panel);

    function ForumPanel() {
        classCallCheck(this, ForumPanel);
        return possibleConstructorReturn(this, (ForumPanel.__proto__ || Object.getPrototypeOf(ForumPanel)).apply(this, arguments));
    }

    createClass(ForumPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.mainClass);
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.title },
                this.options.forum.name
            );
        }
    }, {
        key: "getButton",
        value: function getButton() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.buttonParent },
                UI.createElement(CreateForumThreadButton, {
                    label: "NEW POST",
                    className: this.styleSheet.button,
                    size: Size.DEFAULT,
                    forumId: this.options.forum.id
                })
            );
        }
    }, {
        key: "getForumThreadList",
        value: function getForumThreadList() {
            return UI.createElement(ForumThreadList, { forum: this.options.forum });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.header },
                this.getTitle(),
                this.getButton()
            ), this.getForumThreadList()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            this.attachListener(ForumThreadStore, "create", function () {
                return _this9.redraw();
            });
            this.attachListener(ForumThreadStore, "delete", function () {
                return _this9.redraw();
            });
        }
    }]);
    return ForumPanel;
}(Panel)) || _class4$5);

var DelayedForumPanel = function (_StateDependentElemen) {
    inherits(DelayedForumPanel, _StateDependentElemen);

    function DelayedForumPanel() {
        classCallCheck(this, DelayedForumPanel);
        return possibleConstructorReturn(this, (DelayedForumPanel.__proto__ || Object.getPrototypeOf(DelayedForumPanel)).apply(this, arguments));
    }

    createClass(DelayedForumPanel, [{
        key: "importState",
        value: function importState(data) {
            get(DelayedForumPanel.prototype.__proto__ || Object.getPrototypeOf(DelayedForumPanel.prototype), "importState", this).call(this, data);
            this.options.forum = ForumStore.get(this.options.forumId);
        }
    }]);
    return DelayedForumPanel;
}(StateDependentElement(ForumPanel));

var DelayedForumThreadPanel = function (_StateDependentElemen2) {
    inherits(DelayedForumThreadPanel, _StateDependentElemen2);

    function DelayedForumThreadPanel() {
        classCallCheck(this, DelayedForumThreadPanel);
        return possibleConstructorReturn(this, (DelayedForumThreadPanel.__proto__ || Object.getPrototypeOf(DelayedForumThreadPanel)).apply(this, arguments));
    }

    createClass(DelayedForumThreadPanel, [{
        key: "beforeRedrawNotLoaded",

        // TODO: must be able to specify if URL is POST or GET in StateDependentElement
        value: function beforeRedrawNotLoaded() {
            var _this12 = this;

            Ajax.postJSON("/forum/forum_thread_state/", {
                forumThreadId: this.options.forumThreadId
            }).then(function (data) {
                _this12.importState(data);
                _this12.setLoaded();
            }, function () {});
        }
    }, {
        key: "importState",
        value: function importState(data) {
            get(DelayedForumThreadPanel.prototype.__proto__ || Object.getPrototypeOf(DelayedForumThreadPanel.prototype), "importState", this).call(this, data);
            this.options.forumThread = ForumThreadStore.get(this.options.forumThreadId);
        }
    }]);
    return DelayedForumThreadPanel;
}(StateDependentElement(ForumThreadPanel));

var ForumRoute = function (_Route) {
    inherits(ForumRoute, _Route);
    createClass(ForumRoute, [{
        key: "getSubroutes",
        value: function getSubroutes() {
            return [new Route(["%s", "%s"], function (options) {
                var forumThreadId = options.args[options.args.length - 2];

                var forumThread = ForumThreadStore.get(forumThreadId);

                if (forumThread) {
                    return UI.createElement(ForumThreadPanel, { forumThread: forumThread });
                } else {
                    return UI.createElement(DelayedForumThreadPanel, { forumThreadId: forumThreadId });
                }
            })];
        }
    }]);

    function ForumRoute() {
        var expr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "forum";
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, ForumRoute);

        var _this13 = possibleConstructorReturn(this, (ForumRoute.__proto__ || Object.getPrototypeOf(ForumRoute)).call(this, expr, DelayedForumPanel, [], options));

        _this13.subroutes = _this13.getSubroutes();
        return _this13;
    }

    return ForumRoute;
}(Route);

var TaskType = function TaskType(id, name) {
    classCallCheck(this, TaskType);

    this.id = id;
    this.toString = function () {
        return name;
    };
};

var taskTypes = [new TaskType(0, "Batch"), new TaskType(1, "Interactive")];

function translateArticle(article, language, ownerId, modal) {
    var request = {
        name: "Translation for " + article.name + " in " + language.name,
        baseArticleId: article.id,
        dependency: article.dependency,
        languageId: language.id,
        isPublic: article.isPublic,
        markup: article.markup,
        userCreatedId: ownerId
    };
    Ajax.postJSON("/create_article/", request).then(function (data) {
        return modal.hide();
    }, function (error) {
        return modal.messageArea.showMessage(error.message, "red");
    });
}

var TranslateModal = function (_ActionModal) {
    inherits(TranslateModal, _ActionModal);

    function TranslateModal() {
        classCallCheck(this, TranslateModal);
        return possibleConstructorReturn(this, (TranslateModal.__proto__ || Object.getPrototypeOf(TranslateModal)).apply(this, arguments));
    }

    createClass(TranslateModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Add translation";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(UI.TextElement, { ref: "text", value: "Translate statement and solution" }), UI.createElement(
                Form,
                { style: { marginTop: "10px" } },
                UI.createElement(
                    FormField,
                    { ref: "languageFormField", label: "Language" },
                    UI.createElement(Select, { ref: "languageSelect", options: Language.all() })
                ),
                UI.createElement(
                    FormField,
                    { ref: "ownerFormField", label: "Assign to user" },
                    UI.createElement(TextInput, { ref: "ownerFormInput", value: USER.id })
                )
            )];
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this2 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this2.hide();
                    } }),
                UI.createElement(Button, { level: Level.PRIMARY, label: "Add translation",
                    onClick: function onClick() {
                        return _this2.addTranslation();
                    } })
            )];
        }
    }, {
        key: "setTask",
        value: function setTask(evalTask) {
            this.evalTask = evalTask;
            this.text.setValue("Translate statement and solution for " + this.evalTask.longName + ":");
        }
    }, {
        key: "addTranslation",
        value: function addTranslation() {
            var language = this.languageSelect.get();
            var ownerId = this.ownerFormInput.getValue();
            var statementId = this.evalTask.statementArticleId;
            var solutionId = this.evalTask.solutionArticleId;
            translateArticle(ArticleStore.get(statementId), language, ownerId, this);
            if (solutionId) translateArticle(ArticleStore.get(solutionId), language, ownerId, this);
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(TranslateModal.prototype.__proto__ || Object.getPrototypeOf(TranslateModal.prototype), "hide", this).call(this);
        }
    }]);
    return TranslateModal;
}(ActionModal);

var CreateEvalTaskModal = function (_ActionModal2) {
    inherits(CreateEvalTaskModal, _ActionModal2);

    function CreateEvalTaskModal() {
        classCallCheck(this, CreateEvalTaskModal);
        return possibleConstructorReturn(this, (CreateEvalTaskModal.__proto__ || Object.getPrototypeOf(CreateEvalTaskModal)).apply(this, arguments));
    }

    createClass(CreateEvalTaskModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Create task";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                Form,
                { style: { marginTop: "10px" } },
                UI.createElement(
                    FormField,
                    { ref: "urlNameFormField", label: "URL name" },
                    UI.createElement(TextInput, { ref: "urlNameInput", value: "" })
                ),
                UI.createElement(
                    FormField,
                    { ref: "longNameFormField", label: "Long name" },
                    UI.createElement(TextInput, { ref: "longNameInput", value: "" })
                ),
                UI.createElement(
                    FormField,
                    { ref: "typeFormField", label: "Type" },
                    UI.createElement(Select, { ref: "typeSelect", options: taskTypes })
                ),
                UI.createElement(
                    FormField,
                    { ref: "timeLimitFormField", label: "Time limit (ms)" },
                    UI.createElement(TextInput, { ref: "timeLimitInput", value: "1000" })
                ),
                UI.createElement(
                    FormField,
                    { ref: "memoryLimitFormField", label: "Memory limit (MB)" },
                    UI.createElement(TextInput, { ref: "memoryLimitInput", value: "256" })
                )
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this4 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(Button, { level: Level.PRIMARY, label: "Create task", onClick: function onClick() {
                    return _this4.createTask();
                } })];
        }
    }, {
        key: "createTask",
        value: function createTask() {
            var _this5 = this;

            var urlName = this.urlNameInput.getValue();
            var longName = this.longNameInput.getValue();
            var type = this.typeSelect.get().id;
            var timeLimit = this.timeLimitInput.getValue();
            var memoryLimit = this.memoryLimitInput.getValue() * 1024;
            var request = {
                urlName: urlName,
                longName: longName,
                type: type,
                timeLimit: timeLimit,
                memoryLimit: memoryLimit
            };
            Ajax.postJSON("/eval/create_eval_task/", request).then(function () {
                return window.location.pathname = "/task/" + urlName + "/edit/";
            }, function (error) {
                return _this5.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(CreateEvalTaskModal.prototype.__proto__ || Object.getPrototypeOf(CreateEvalTaskModal.prototype), "hide", this).call(this);
        }
    }]);
    return CreateEvalTaskModal;
}(ActionModal);

var EvalTaskTable = function (_SortableTable) {
    inherits(EvalTaskTable, _SortableTable);

    function EvalTaskTable() {
        classCallCheck(this, EvalTaskTable);
        return possibleConstructorReturn(this, (EvalTaskTable.__proto__ || Object.getPrototypeOf(EvalTaskTable)).apply(this, arguments));
    }

    createClass(EvalTaskTable, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(EvalTaskTable.prototype.__proto__ || Object.getPrototypeOf(EvalTaskTable.prototype), "setOptions", this).call(this, options);
            this.resetColumnSortingOrder();
        }
    }, {
        key: "resetColumnSortingOrder",
        value: function resetColumnSortingOrder() {
            this.columnSortingOrder = [this.columns[0]];
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var _this7 = this;

            var cellStyle = {
                textAlign: "left",
                verticalAlign: "middle"
            };
            var headerStyle = {
                textAlign: "left",
                verticalAlign: "middle"
            };
            var columns = [{
                value: function value(evalTask) {
                    return evalTask.id;
                },
                headerName: "ID",
                headerStyle: headerStyle,
                cellStyle: cellStyle,
                sortDescending: true
            }, {
                value: function value(evalTask) {
                    return UI.createElement(Link, { href: "/task/" + evalTask.urlName + "/edit/", value: evalTask.longName });
                },
                rawValue: function rawValue(evalTask) {
                    return evalTask.urlName;
                },
                headerName: "Task",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(evalTask) {
                    return taskTypes[evalTask.type].toString();
                },
                headerName: "Type",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(evalTask) {
                    return Formatter.cpuTime(evalTask.timeLimit / 1000);
                },
                rawValue: function rawValue(evalTask) {
                    return evalTask.timeLimit;
                },
                headerName: "Time limit",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(evalTask) {
                    return Formatter.memory(evalTask.memoryLimit * 1024);
                },
                rawValue: function rawValue(evalTask) {
                    return evalTask.memoryLimit;
                },
                headerName: "Memory limit",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(evalTask) {
                    return UI.createElement(Button, { level: Level.PRIMARY, label: "Translate", onClick: function onClick() {
                            _this7.parent.translateModal.show();
                            _this7.parent.translateModal.setTask(evalTask);
                        } });
                },
                headerName: "Translate",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }];
            get(EvalTaskTable.prototype.__proto__ || Object.getPrototypeOf(EvalTaskTable.prototype), "setColumns", this).call(this, columns);
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            var evalTasks = EvalTaskStore.all().filter(function (evalTask) {
                return evalTask.canBeEditedByUser();
            });
            return this.sortEntries(evalTasks);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            get(EvalTaskTable.prototype.__proto__ || Object.getPrototypeOf(EvalTaskTable.prototype), "onMount", this).call(this);
            this.attachUpdateListener(EvalTaskStore, function () {
                _this8.redraw();
            });
        }
    }]);
    return EvalTaskTable;
}(SortableTable);

var EvalTaskManager = function (_Panel) {
    inherits(EvalTaskManager, _Panel);

    function EvalTaskManager() {
        classCallCheck(this, EvalTaskManager);
        return possibleConstructorReturn(this, (EvalTaskManager.__proto__ || Object.getPrototypeOf(EvalTaskManager)).apply(this, arguments));
    }

    createClass(EvalTaskManager, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                title: "Task manager"
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(EvalTaskManager.prototype.__proto__ || Object.getPrototypeOf(EvalTaskManager.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.SMALL);
        }
    }, {
        key: "render",
        value: function render() {
            var _this10 = this;

            return [UI.createElement(
                "div",
                { className: "pull-left" },
                UI.createElement(
                    "h4",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        this.options.title
                    )
                )
            ), UI.createElement(
                "div",
                { className: "pull-right" },
                UI.createElement(Button, { level: Level.PRIMARY, label: "Create eval task",
                    onClick: function onClick() {
                        return _this10.createEvalTaskModal.show();
                    },
                    style: { marginTop: "5px", marginBottom: "5px" } })
            ), UI.createElement(EvalTaskTable, { ref: "table" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(EvalTaskManager.prototype.__proto__ || Object.getPrototypeOf(EvalTaskManager.prototype), "onMount", this).call(this);

            this.getEvalTasks();

            this.translateModal = UI.createElement(TranslateModal, { parent: this });

            this.createEvalTaskModal = UI.createElement(CreateEvalTaskModal, { parent: this });
        }
    }, {
        key: "getEvalTasks",
        value: function getEvalTasks() {
            var _this11 = this;

            Ajax.getJSON("/eval/get_available_tasks/", {}).then(function () {
                return _this11.table.redraw();
            });
        }
    }]);
    return EvalTaskManager;
}(Panel);

var TaskChecker = function (_StoreObject) {
    inherits(TaskChecker, _StoreObject);

    function TaskChecker() {
        classCallCheck(this, TaskChecker);
        return possibleConstructorReturn(this, (TaskChecker.__proto__ || Object.getPrototypeOf(TaskChecker)).apply(this, arguments));
    }

    createClass(TaskChecker, [{
        key: "getWorkspaces",
        value: function getWorkspaces() {
            return this.workspaceIds.map(function (id) {
                return WorkspaceStore.get(id);
            });
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }]);
    return TaskChecker;
}(StoreObject);

var TaskCheckerStoreClass = function (_GenericObjectStore) {
    inherits(TaskCheckerStoreClass, _GenericObjectStore);

    function TaskCheckerStoreClass() {
        classCallCheck(this, TaskCheckerStoreClass);
        return possibleConstructorReturn(this, (TaskCheckerStoreClass.__proto__ || Object.getPrototypeOf(TaskCheckerStoreClass)).call(this, "TaskChecker", TaskChecker));
    }

    createClass(TaskCheckerStoreClass, [{
        key: "allIncludingDefault",
        value: function allIncludingDefault() {
            var all = this.all();
            all.splice(0, 0, {
                name: "------",
                id: 0,
                workspaceIds: [],
                toString: function toString() {
                    return "------";
                }
            });
            return all;
        }
    }]);
    return TaskCheckerStoreClass;
}(GenericObjectStore);

var TaskCheckerStore = new TaskCheckerStoreClass();

var FlashableButton = function (_Button) {
    inherits(FlashableButton, _Button);

    function FlashableButton() {
        classCallCheck(this, FlashableButton);
        return possibleConstructorReturn(this, (FlashableButton.__proto__ || Object.getPrototypeOf(FlashableButton)).apply(this, arguments));
    }

    createClass(FlashableButton, [{
        key: "flash",
        value: function flash(level) {
            var _this2 = this;

            var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;

            var originalLevel = this.getLevel();
            this.setLevel(level);
            setTimeout(function () {
                _this2.setLevel(originalLevel);
            }, timeout);
        }
    }]);
    return FlashableButton;
}(Button);

var OriginalContestEditor = function (_UI$Element) {
    inherits(OriginalContestEditor, _UI$Element);

    function OriginalContestEditor() {
        classCallCheck(this, OriginalContestEditor);
        return possibleConstructorReturn(this, (OriginalContestEditor.__proto__ || Object.getPrototypeOf(OriginalContestEditor)).apply(this, arguments));
    }

    createClass(OriginalContestEditor, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(OriginalContestEditor.prototype.__proto__ || Object.getPrototypeOf(OriginalContestEditor.prototype), "setOptions", this).call(this, options);
            ///Creating the contest list and adding a dummy contest, for no contest
            this.contests = ContestStore.all();
            var c = new Contest();c.id = 0;c.longName = "-----";
            this.contests.insert(0, c);
            this.selected = ContestStore.get(this.options.evalTask.originalContestId) || c;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                "Original Contest"
            ), UI.createElement(
                "div",
                null,
                UI.createElement(Select, { ref: "originalContestSelect", options: this.contests,
                    selected: this.selected }),
                UI.createElement(FlashableButton, { ref: "saveButton", level: Level.PRIMARY, size: Size.SMALL,
                    style: { marginLeft: "10px" }, faIcon: "floppy-o" })
            )];
        }
    }, {
        key: "saveOriginalContest",
        value: function saveOriginalContest(id) {
            var _this4 = this;

            var request = {
                originalContestChanged: true,
                originalContestId: id
            };

            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", request).then(function () {
                return _this4.saveButton.flash(Level.SUCCESS);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.saveButton.addClickListener(function () {
                var newContest = _this5.contests[_this5.originalContestSelect.getIndex()];
                if (_this5.originalContestSelect.getIndex() === 0) {
                    _this5.saveOriginalContest(null);
                } else {
                    _this5.saveOriginalContest(newContest.id);
                }
            });
        }
    }]);
    return OriginalContestEditor;
}(UI.Element);

var tagOptions = TagStore.all().sort(function (a, b) {
    if (a.toString() < b.toString()) {
        return -1;
    }
    if (a.toString() > b.toString()) {
        return 1;
    }
    return 0;
});

var TagEditor = function (_UI$Element2) {
    inherits(TagEditor, _UI$Element2);

    function TagEditor() {
        classCallCheck(this, TagEditor);
        return possibleConstructorReturn(this, (TagEditor.__proto__ || Object.getPrototypeOf(TagEditor)).apply(this, arguments));
    }

    createClass(TagEditor, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(TagEditor.prototype.__proto__ || Object.getPrototypeOf(TagEditor.prototype), "setOptions", this).call(this, options);
            var tags = this.options.evalTask.tagIds || [];
            this.index = tags.length;
            this.tags = [];
            for (var i = 0; i < tags.length; i += 1) {
                this.tags.push(UI.createElement(
                    "div",
                    { ref: this.refLink("tag" + i), style: { "margin-top": "10px" } },
                    UI.createElement(Select, { style: { height: "29.09px" }, options: tagOptions, selected: TagStore.get(tags[i]) }),
                    UI.createElement(Button, { ref: this.refLink("minusButton" + i), style: { marginLeft: "6px" },
                        level: Level.DANGER, faIcon: "minus", size: Size.SMALL })
                ));
            }
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                { style: { "margin-right": "10px", "margin-bottom": "3px" } },
                "Tags"
            ), this.tags, UI.createElement(
                ButtonGroup,
                { style: { marginTop: "10px" }, ref: "save" },
                UI.createElement(Button, { ref: "plusButton", level: Level.SUCCESS, faIcon: "plus", size: Size.SMALL }),
                UI.createElement(FlashableButton, { ref: "saveButton", level: Level.PRIMARY, faIcon: "floppy-o", size: Size.SMALL })
            )];
        }
    }, {
        key: "saveTags",
        value: function saveTags() {
            var _this7 = this;

            var tagIds = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.tags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var tag = _step.value;

                    tagIds.push(tag.options.children[0].get().id);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var request = {
                tagsChanged: true,
                tagIds: tagIds
            };
            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", request).then(function () {
                return _this7.saveButton.flash(Level.SUCCESS);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.saveButton.addClickListener(function () {
                _this8.saveTags();
            });
            for (var i = 0; i < this.index; i += 1) {
                this["minusButton" + i].addClickListener(function (event) {
                    for (var j = 0; j < _this8.tags.length; j += 1) {
                        if (event.path.indexOf(_this8.tags[j].node) !== -1) {
                            _this8.tags.splice(j, 1);
                            _this8.redraw();
                            break;
                        }
                    }
                });
            }
            this.plusButton.addClickListener(function () {
                var newTag = UI.createElement(
                    "div",
                    { ref: _this8.refLink("tag" + _this8.index), style: { "margin-top": "10px" } },
                    UI.createElement(Select, { style: { height: "29.09px" }, options: tagOptions }),
                    UI.createElement(Button, { ref: _this8.refLink("minusButton" + _this8.index), style: { marginLeft: "6px" },
                        level: Level.DANGER, faIcon: "minus", size: Size.SMALL })
                );
                _this8.tags.push(newTag);
                _this8.redraw();
                _this8["minusButton" + _this8.index].addClickListener(function (event) {
                    for (var j = 0; j < _this8.tags.length; j += 1) {
                        if (event.path.indexOf(_this8.tags[j].node) !== -1) {
                            _this8.tags.splice(j, 1);
                            _this8.redraw();
                            break;
                        }
                    }
                });
                _this8.index += 1;
            });
        }
    }]);
    return TagEditor;
}(UI.Element);

var CheckerEditor = function (_UI$Element3) {
    inherits(CheckerEditor, _UI$Element3);

    function CheckerEditor() {
        classCallCheck(this, CheckerEditor);
        return possibleConstructorReturn(this, (CheckerEditor.__proto__ || Object.getPrototypeOf(CheckerEditor)).apply(this, arguments));
    }

    createClass(CheckerEditor, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                "Task checker"
            ), UI.createElement(
                "div",
                null,
                UI.createElement(Select, { ref: "checkerSelect", options: TaskCheckerStore.allIncludingDefault(),
                    selected: TaskCheckerStore.get(this.options.evalTask.checkerId) }),
                UI.createElement(FlashableButton, { ref: "saveButton", level: Level.PRIMARY, size: Size.SMALL,
                    style: { marginLeft: "10px" }, faIcon: "floppy-o" })
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    FlashableButton,
                    { ref: "cachebustButton", level: Level.PRIMARY, style: { marginTop: "10px" } },
                    "Clear eval cache"
                )
            )];
        }
    }, {
        key: "saveChecker",
        value: function saveChecker() {
            var _this10 = this;

            var request = {
                checkerChanged: true,
                checkerId: this.checkerSelect.get().id
            };
            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", request).then(function () {
                return _this10.saveButton.flash(Level.SUCCESS);
            });
        }
    }, {
        key: "cachebust",
        value: function cachebust() {
            var _this11 = this;

            Ajax.postJSON("/eval/checker/cache_bust/", {
                evalTaskId: this.options.evalTask.id
            }).then(function () {
                return _this11.cachebustButton.flash(Level.SUCCESS);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            this.saveButton.addClickListener(function () {
                _this12.saveChecker();
            });
            this.cachebustButton.addClickListener(function () {
                _this12.cachebust();
            });
        }
    }]);
    return CheckerEditor;
}(UI.Element);

var DifficultyEditor = function (_UI$Element4) {
    inherits(DifficultyEditor, _UI$Element4);

    function DifficultyEditor() {
        classCallCheck(this, DifficultyEditor);
        return possibleConstructorReturn(this, (DifficultyEditor.__proto__ || Object.getPrototypeOf(DifficultyEditor)).apply(this, arguments));
    }

    createClass(DifficultyEditor, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                "Difficulty"
            ), UI.createElement(
                "div",
                null,
                UI.createElement(Select, { ref: "difficultySelect", options: Difficulty.all(),
                    selected: Difficulty.get(EvalTaskStatisticsStore.getByEvalTaskId(this.options.evalTask.id).evalTaskDifficulty) }),
                UI.createElement(FlashableButton, { ref: "saveButton", level: Level.PRIMARY, size: Size.SMALL,
                    style: { marginLeft: "10px" }, faIcon: "floppy-o" })
            )];
        }
    }, {
        key: "saveDifficulty",
        value: function saveDifficulty() {
            var _this14 = this;

            var request = {
                evalTaskId: this.options.evalTask.id,
                difficulty: this.difficultySelect.get().id
            };
            Ajax.postJSON("/eval/change_task_difficulty/", request).then(function () {
                return _this14.saveButton.flash(Level.SUCCESS);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this15 = this;

            this.saveButton.addClickListener(function () {
                _this15.saveDifficulty();
            });
        }
    }]);
    return DifficultyEditor;
}(UI.Element);

var BroadcastButton = function (_UI$Element5) {
    inherits(BroadcastButton, _UI$Element5);

    function BroadcastButton() {
        classCallCheck(this, BroadcastButton);
        return possibleConstructorReturn(this, (BroadcastButton.__proto__ || Object.getPrototypeOf(BroadcastButton)).apply(this, arguments));
    }

    createClass(BroadcastButton, [{
        key: "render",
        value: function render() {
            var _this17 = this;

            return [UI.createElement(
                "h3",
                null,
                "Task Update"
            ), UI.createElement(AjaxButton, { ref: "broadcastButton", level: Level.PRIMARY, onClick: function onClick() {
                    _this17.broadcast();
                },
                statusOptions: ["Update task for users", { faIcon: "spinner fa-spin", label: " broadcasting ..." }, "Success", "Failed"] })];
        }
    }, {
        key: "broadcast",
        value: function broadcast() {
            this.broadcastButton.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", {
                broadcast: true
            });
        }
    }]);
    return BroadcastButton;
}(UI.Element);

var TaskNameEditor = function (_UI$Element6) {
    inherits(TaskNameEditor, _UI$Element6);

    function TaskNameEditor() {
        classCallCheck(this, TaskNameEditor);
        return possibleConstructorReturn(this, (TaskNameEditor.__proto__ || Object.getPrototypeOf(TaskNameEditor)).apply(this, arguments));
    }

    createClass(TaskNameEditor, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                "Task name"
            ), UI.createElement(
                Form,
                { style: { maxWidth: "300px", margin: 0 } },
                UI.createElement(
                    FormField,
                    { ref: "urlNameFormField", label: "URL Name", style: { margin: 0 } },
                    UI.createElement(TextInput, { ref: "urlNameFormInput", style: { paddingLeft: "4px" },
                        value: this.options.evalTask.urlName })
                ),
                UI.createElement(
                    FormField,
                    { ref: "longNameFormField", label: "Long Name", style: { margin: 0 } },
                    UI.createElement(TextInput, { ref: "longNameFormInput", style: { paddingLeft: "4px" },
                        value: this.options.evalTask.longName })
                ),
                UI.createElement(FlashableButton, { ref: "saveButton", level: Level.PRIMARY, faIcon: "save" })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this19 = this;

            this.saveButton.addClickListener(function () {
                var request = {
                    nameChanged: true,
                    urlName: _this19.urlNameFormInput.getValue(),
                    longName: _this19.longNameFormInput.getValue()
                };
                Ajax.postJSON("/task/" + _this19.options.evalTask.urlName + "/edit/", request).then(function () {
                    return location.reload();
                });
            });
        }
    }]);
    return TaskNameEditor;
}(UI.Element);

var GeneralPanel = function (_Panel) {
    inherits(GeneralPanel, _Panel);

    function GeneralPanel() {
        classCallCheck(this, GeneralPanel);
        return possibleConstructorReturn(this, (GeneralPanel.__proto__ || Object.getPrototypeOf(GeneralPanel)).apply(this, arguments));
    }

    createClass(GeneralPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return "General";
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(TaskNameEditor, { evalTask: this.options.evalTask }), UI.createElement(CheckerEditor, { evalTask: this.options.evalTask }), UI.createElement(BroadcastButton, { evalTask: this.options.evalTask, style: { marginTop: "20px" } }), UI.createElement(OriginalContestEditor, { evalTask: this.options.evalTask }), UI.createElement(TagEditor, { evalTask: this.options.evalTask, style: { marginTop: "10px" } }), UI.createElement(DifficultyEditor, { evalTask: this.options.evalTask })];
        }
    }]);
    return GeneralPanel;
}(Panel);

var StatementPanel = function (_Panel) {
    inherits(StatementPanel, _Panel);

    function StatementPanel() {
        classCallCheck(this, StatementPanel);
        return possibleConstructorReturn(this, (StatementPanel.__proto__ || Object.getPrototypeOf(StatementPanel)).apply(this, arguments));
    }

    createClass(StatementPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return "Statement";
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(ArticleEditor, { articleId: this.options.evalTask.statementArticleId });
        }
    }]);
    return StatementPanel;
}(Panel);

function UpdateLabel(label, message) {
    label.node.textContent = message;
    label.show();

    setTimeout(function () {
        label.hide();
    }, 5000);
}

var TestCaseRow = function (_CollapsibleTableRow) {
    inherits(TestCaseRow, _CollapsibleTableRow);

    function TestCaseRow() {
        classCallCheck(this, TestCaseRow);
        return possibleConstructorReturn(this, (TestCaseRow.__proto__ || Object.getPrototypeOf(TestCaseRow)).apply(this, arguments));
    }

    createClass(TestCaseRow, [{
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(TestCaseRow.prototype.__proto__ || Object.getPrototypeOf(TestCaseRow.prototype), "onMount", this).call(this);

            this.isExampleCheckbox.addClickListener(function () {
                _this2.markChanged();
            });

            this.isPretestCheckbox.addClickListener(function () {
                _this2.markChanged();
            });

            this.previewButton.addClickListener(function () {
                // TODO: should be something different here, only mark as changed if content changes
                _this2.markChanged();
            });

            this.saveButton.addClickListener(function () {
                _this2.saveTest();
            });

            this.deleteButton.addClickListener(function () {
                console.log("Deleting test ", _this2.options.entry);
                _this2.deleteTest();
            });
            this.downloadButton.addClickListener(function () {
                _this2.downloadTest();
            });
        }
    }, {
        key: "downloadTest",
        value: function downloadTest() {
            var test = this.options.entry;
            var request = {
                testId: test.id,
                downloadTest: true
            };
            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", request).then(function (data) {
                var delay = 0;
                if (data.input) {
                    var file1 = new Blob([data.input], { type: 'text/plain;charset=utf-8' });
                    FileSaver.saveAs(file1, 'input.txt');
                    delay += 1000;
                }
                if (data.output) {
                    setTimeout(function () {
                        var file2 = new Blob([data.output], { type: 'text/plain;charset=utf-8' });
                        FileSaver.saveAs(file2, 'output.txt');
                    }, delay);
                    delay += 1000;
                }
                if (data.extra) {
                    setTimeout(function () {
                        var file3 = new Blob([data.extra], { type: 'text/plain;charset=utf-8' });
                        FileSaver.saveAs(file3, 'extra.txt');
                    }, delay);
                }
            });
        }
    }, {
        key: "filePanel",
        value: function filePanel(title, content, panelStyle) {
            return UI.createElement(
                Panel,
                { style: panelStyle },
                UI.createElement(
                    "div",
                    { style: { height: "20px", paddingLeft: "10px", boxSizing: "border-box", backgroundColor: "white" } },
                    title
                ),
                UI.createElement(StaticCodeHighlighter, { style: { width: "100%", height: "150px" }, value: content })
            );
        }
    }, {
        key: "renderCollapsible",
        value: function renderCollapsible() {
            var entry = this.options.entry;
            var panelStyle = { height: "170px", width: "33.33%", display: "inline-block" };

            var panels = [this.filePanel(" Input", entry.input, panelStyle), this.filePanel(" Judge output", entry.output, panelStyle), this.filePanel(" Extra", JSON.stringify(entry.extra), panelStyle)];

            return UI.createElement(
                Panel,
                { className: "section" + entry.testNumber, key: entry.testNumber, orientation: Orientation.HORIZONTAL,
                    style: { height: panelStyle.height, width: "100%", padding: "5px" } },
                UI.createElement(
                    SectionDivider$$1,
                    { style: { height: "100%" }, orientation: Orientation.HORIZONTAL },
                    panels
                )
            );
        }
    }, {
        key: "markChanged",
        value: function markChanged() {
            this.setStyle("background-color", "lightblue");
        }
    }, {
        key: "markUnchanged",
        value: function markUnchanged() {
            this.setStyle("background-color", "white");
        }
    }, {
        key: "saveTest",
        value: function saveTest() {
            var _this3 = this;

            var test = this.options.entry;
            var isPretest = this.isPretestCheckbox.node.checked;
            var isExample = this.isExampleCheckbox.node.checked;
            var comment = this.previewButton.options.getValue() || "";

            var request = {
                testId: test.id,
                isPretest: isPretest,
                isExample: isExample,
                comment: comment
            };

            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", request).then(function (data) {
                return _this3.markUnchanged();
            });
        }
    }, {
        key: "deleteTest",
        value: function deleteTest() {
            var _this4 = this;

            var test = this.options.entry;

            var request = {
                testId: test.id,
                deleteTest: true
            };

            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", request).then(function (data) {
                return _this4.parent.redraw();
            });
        }
    }]);
    return TestCaseRow;
}(CollapsibleTableRow);

var TestCaseTable = function (_CollapsibleTable) {
    inherits(TestCaseTable, _CollapsibleTable);

    function TestCaseTable(options) {
        classCallCheck(this, TestCaseTable);

        var _this5 = possibleConstructorReturn(this, (TestCaseTable.__proto__ || Object.getPrototypeOf(TestCaseTable)).call(this, options));

        _this5.addListener("testDeleted", function () {});
        return _this5;
    }

    createClass(TestCaseTable, [{
        key: "getRowClass",
        value: function getRowClass() {
            return TestCaseRow;
        }
    }, {
        key: "getRowOptions",
        value: function getRowOptions(entry) {
            var options = get(TestCaseTable.prototype.__proto__ || Object.getPrototypeOf(TestCaseTable.prototype), "getRowOptions", this).call(this, entry);
            options.evalTask = this.options.evalTask;
            return options;
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var _this6 = this;

            var numberStyle = {
                textAlign: "right"
            };

            get(TestCaseTable.prototype.__proto__ || Object.getPrototypeOf(TestCaseTable.prototype), "setColumns", this).call(this, [{
                value: function value(entry) {
                    return entry.index;
                },
                headerName: "Test ID",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return entry.id;
                },
                headerName: "DB ID",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return entry.inputSize;
                },
                headerName: "Input size",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return entry.outputSize;
                },
                headerName: "Output size",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return entry.extraSize;
                },
                headerName: "Extra size",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return UI.createElement(CheckboxInput, { checked: entry.isExample, ref: "isExampleCheckbox" });
                },
                headerName: "Is example",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return UI.createElement(CheckboxInput, { checked: entry.isPretest, ref: "isPretestCheckbox" });
                },
                headerName: "Is pretest",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    //TODO: duplicated from ChatWidget.renderMessageBox, refactor to common class (MessageBox)
                    var chatInputStyle = {
                        display: "inline-block",
                        overflow: "auto",
                        resize: "none",
                        height: "46px",
                        "vertical-align": "top"
                    };

                    var entryMessageInputRef = "messageInput" + entry.id;

                    return UI.createElement(
                        "div",
                        null,
                        UI.createElement(TextArea, { ref: _this6.refLink(entryMessageInputRef), style: chatInputStyle,
                            value: entry.comment || "" }),
                        UI.createElement(PreviewMarkupButton, { ref: "previewButton", size: Size.DEFAULT, level: Level.DEFAULT,
                            getValue: function getValue() {
                                return _this6[entryMessageInputRef].getValue();
                            },
                            setValue: function setValue(value) {
                                _this6[entryMessageInputRef].setValue(value);
                                _this6[entryMessageInputRef].node.focus();
                            }
                        })
                    );
                },
                headerName: "Comment",
                sortDescending: true
            }, {
                value: function value(entry) {
                    return entry.customTimeLimit;
                },
                headerName: "Custom TL",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return entry.customMemoryLimit;
                },
                headerName: "Custom ML",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return entry.lastModified;
                },
                headerName: "Last modified",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return UI.createElement(
                        ButtonGroup,
                        { level: Level.INFO, size: Size.SMALL },
                        UI.createElement(Button, { ref: "saveButton", label: "Save" }),
                        UI.createElement(Button, { ref: "downloadButton", label: "Download" }),
                        UI.createElement(Button, { ref: "deleteButton", label: "Delete", level: Level.DANGER })
                    );
                },
                headerName: "Actions",
                sortDescending: true
            }]);
        }
    }, {
        key: "getEntryKey",
        value: function getEntryKey(entry, index) {
            return index;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            var evalTask = this.options.evalTask;
            return [].concat(evalTask.exampleTests, evalTask.systemTests);
        }
    }]);
    return TestCaseTable;
}(CollapsibleTable);

var TestsPanel = function (_Panel) {
    inherits(TestsPanel, _Panel);

    function TestsPanel() {
        classCallCheck(this, TestsPanel);
        return possibleConstructorReturn(this, (TestsPanel.__proto__ || Object.getPrototypeOf(TestsPanel)).apply(this, arguments));
    }

    createClass(TestsPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return "Tests";
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(FileInput, { ref: "testInputField", multipleFiles: true, fileTypes: ".in,.ok,.json,.zip" }), UI.createElement(Button, { ref: "uploadTestsButton", label: "Upload tests", level: Level.PRIMARY, style: { margin: "5px" } }), UI.createElement("label", { ref: "testsStatusLabel", className: "hidden", style: { color: "grey", fontStyle: "italic", margin: "5px" } }), UI.createElement(TestCaseTable, { ref: "testsTable", evalTask: this.options.evalTask })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.uploadTestsButton.addClickListener(function () {
                _this8.uploadTests();
            });
        }
    }, {
        key: "uploadTests",
        value: function uploadTests() {
            var _this9 = this;

            var formData = new FormData();
            var filesToUpload = this.testInputField.getFiles();

            if (filesToUpload.length === 0) {
                UpdateLabel(this.testsStatusLabel, "No files selected for upload.");
                return;
            }

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = filesToUpload[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var file = _step.value;

                    if (file.size > 1e8) {
                        UpdateLabel(this.testsStatusLabel, "File " + file.name + " too large. Skipping it.");
                        continue;
                    }
                    formData.append(file.name, file);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", formData).then(function () {
                _this9.testsTable.redraw();
                UpdateLabel(_this9.testsStatusLabel, "Successfully uploaded tests.");
            });
        }
    }]);
    return TestsPanel;
}(Panel);

var AbstractUsernameAutocomplete = function (_Dispatchable) {
    inherits(AbstractUsernameAutocomplete, _Dispatchable);

    function AbstractUsernameAutocomplete() {
        classCallCheck(this, AbstractUsernameAutocomplete);
        return possibleConstructorReturn(this, (AbstractUsernameAutocomplete.__proto__ || Object.getPrototypeOf(AbstractUsernameAutocomplete)).apply(this, arguments));
    }

    createClass(AbstractUsernameAutocomplete, null, [{
        key: "requestNewUsers",
        value: function requestNewUsers(prefix, callback) {
            var _this2 = this;

            Ajax.getJSON(PublicUserStore.options.fetchURL, {
                usernamePrefix: prefix
            }).then(function (data) {
                var userIds = (data.state.publicuser || []).map(function (user) {
                    return user.id;
                });
                _this2.usernamePrefixCache.set(prefix, userIds);
                callback(userIds);
            }, function () {});
        }
    }, {
        key: "loadUsersForPrefix",
        value: function loadUsersForPrefix(prefix, callback) {
            if (!prefix.length) {
                callback([]);
                return;
            }
            if (!this.usernamePrefixCache) {
                this.usernamePrefixCache = new Map();
            }
            if (this.usernamePrefixCache.has(prefix)) {
                callback(this.usernamePrefixCache.get(prefix));
                return;
            }
            for (var i = 1; i < prefix.length; i += 1) {
                var partialPrefix = prefix.substring(0, i);
                if (this.usernamePrefixCache.has(partialPrefix) && this.usernamePrefixCache.get(partialPrefix).length === 0) {
                    callback([]);
                    return;
                }
            }
            this.requestNewUsers(prefix, callback);
        }
    }]);
    return AbstractUsernameAutocomplete;
}(Dispatchable);

var AutocompleteWindow = function (_VolatileFloatingWind) {
    inherits(AutocompleteWindow, _VolatileFloatingWind);

    function AutocompleteWindow() {
        classCallCheck(this, AutocompleteWindow);
        return possibleConstructorReturn(this, (AutocompleteWindow.__proto__ || Object.getPrototypeOf(AutocompleteWindow)).apply(this, arguments));
    }

    createClass(AutocompleteWindow, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("z-index", "9999");
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                direction: Direction.UP,
                userDivHeight: 25,
                maxHeight: 300,
                highlightColor: "rgb(230, 230, 230)"
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign(this.getDefaultOptions(), options);
            var height = Math.min(options.maxHeight, options.userIds.length * options.userDivHeight);
            options.offsets = getOffset(options.parentNode);
            options.style = Object.assign({
                marginBottom: "5px",
                border: "1px solid black",
                position: "absolute",
                backgroundColor: "white",
                maxHeight: options.maxHeight + "px",
                overflow: "auto",
                boxShadow: "0 6px 12px rgba(0,0,0,.175)",
                top: options.offsets.top - height + "px",
                left: options.offsets.left + "px"
            }, options.style || {});
            if (options.direction === Direction.DOWN) {
                options.style.top = parseInt(options.style.top) + height + parseInt(getComputedStyle(options.parentNode, "height")) + "px";
            }
            get(AutocompleteWindow.prototype.__proto__ || Object.getPrototypeOf(AutocompleteWindow.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "render",
        value: function render() {
            this.userDivs = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.userIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var userId = _step.value;

                    this.userDivs.push(UI.createElement(
                        "div",
                        { userId: userId, style: {
                                "padding": "0 5px",
                                "border": "1px solid grey",
                                "height": this.options.userDivHeight + "px",
                                "line-height": this.options.userDivHeight + "px",
                                "cursor": "pointer"
                            } },
                        UI.createElement(UserHandle, { userId: userId, disableClick: true })
                    ));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return this.userDivs;
        }
    }, {
        key: "moveIndex",
        value: function moveIndex(delta) {
            var index = this.currentIndex;
            index += delta;
            if (index === this.userDivs.length) {
                index -= this.userDivs.length;
            }
            if (index < 0) {
                index += this.userDivs.length;
            }
            this.setCurrentIndex(index);
        }
    }, {
        key: "getCurrentUserId",
        value: function getCurrentUserId() {
            return this.userDivs[this.currentIndex].options.userId;
        }
    }, {
        key: "setCurrentIndex",
        value: function setCurrentIndex(index) {
            if (this.hasOwnProperty("currentIndex")) {
                this.userDivs[this.currentIndex].setStyle("background-color", "white");
            }
            this.currentIndex = index;
            this.userDivs[this.currentIndex].setStyle("background-color", this.options.highlightColor);
            this.scrollTo(index);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.setCurrentIndex(0);

            var _loop = function _loop(i) {
                _this4.userDivs[i].addNodeListener("mouseover", function () {
                    _this4.setCurrentIndex(i);
                });
                _this4.userDivs[i].addClickListener(function () {
                    if (_this4.options.onChooseUser) {
                        _this4.options.onChooseUser(_this4.getCurrentUserId());
                    }
                });
            };

            for (var i = 0; i < this.userDivs.length; i += 1) {
                _loop(i);
            }
        }
    }, {
        key: "scrollTo",
        value: function scrollTo(index) {
            if (this.node && this.options.userDivHeight * this.userDivs.length > this.options.maxHeight) {
                this.node.scrollTop = Math.max(this.node.scrollTop, this.options.userDivHeight * (index + 1) - this.options.maxHeight);
                this.node.scrollTop = Math.min(this.node.scrollTop, this.options.userDivHeight * index);
            }
        }

        // These two methods are here in order to avoid code duplication. The "obj" argument is
        // the class whose method these functions should theoretically be (AtMentionPlugin or UserChoiceField)

        // Called whenever the class has a list of users that should be displayed in an AutocompleteWindow,
        // above the "inputField" DOM Node

    }], [{
        key: "handleAutocomplete",
        value: function handleAutocomplete(obj, userIds, inputField) {
            if (obj.autocompleteWindow && obj.autocompleteWindow.node) {
                obj.autocompleteWindow.destroyNode();
            }
            if (userIds.length === 0) {
                obj.duringAutocomplete = false;
                return;
            }
            obj.duringAutocomplete = true;
            obj.autocompleteWindow = AutocompleteWindow.create(document.body, {
                parentNode: inputField,
                userIds: userIds,
                onChooseUser: function onChooseUser(userId) {
                    obj.duringAutocomplete = false;
                    obj.autocompleteUser(userId);
                }
            });
        }

        // Called whenever there is a keydown event on the inputField that has a window attached, treats the cases
        // of Enter, Escape and Up/Down arrows, modifying the attached window as needed.

    }, {
        key: "handleKeydownEvent",
        value: function handleKeydownEvent(obj, event) {
            if (event.key === "Enter" || event.keyCode === 13) {
                // Enter key
                if (obj.duringAutocomplete) {
                    obj.duringAutocomplete = false;
                    obj.autocompleteUser(obj.autocompleteWindow.getCurrentUserId());
                    event.preventDefault();
                }
            }
            if (event.keyCode === 27) {
                // Escape key
                obj.duringAutocomplete = false;
                obj.dispatch("autocomplete", []);
            }
            if (event.keyCode === 38 || event.keyCode === 40) {
                // Up and down arrows
                if (obj.autocompleteWindow) {
                    obj.autocompleteWindow.moveIndex(event.keyCode - 39);
                    event.preventDefault();
                    event.stopPropagation();
                }
            }
        }
    }]);
    return AutocompleteWindow;
}(VolatileFloatingWindow);

var UserInputField = function (_UI$Element) {
    inherits(UserInputField, _UI$Element);

    function UserInputField() {
        classCallCheck(this, UserInputField);
        return possibleConstructorReturn(this, (UserInputField.__proto__ || Object.getPrototypeOf(UserInputField)).apply(this, arguments));
    }

    createClass(UserInputField, [{
        key: "render",
        value: function render() {
            return [UI.createElement(TextInput, { ref: "usernameInput" }), UI.createElement(Button, { ref: "submitButton", level: Level.PRIMARY, size: Size.EXTRA_SMALL,
                faIcon: "check", style: { marginLeft: "5px" } }), UI.createElement(TemporaryMessageArea, { ref: "errorArea" })];
        }
    }, {
        key: "getUserId",
        value: function getUserId() {
            var username = this.usernameInput.getValue();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = PublicUserStore.all()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var user = _step2.value;

                    if (user.name === username || user.username === username) {
                        return user.id;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return parseInt(username);
        }
    }, {
        key: "autocompleteUser",
        value: function autocompleteUser(userId) {
            this.usernameInput.setValue(PublicUserStore.get(userId).username);
            this.dispatch("autocomplete", []);
        }
    }, {
        key: "clear",
        value: function clear() {
            this.usernameInput.setValue("");
            this.duringAutocomplete = false;
            this.dispatch("autocomplete", []);
        }
    }, {
        key: "handleChange",
        value: function handleChange() {
            var _this6 = this;

            var prefix = this.usernameInput.getValue();
            AbstractUsernameAutocomplete.loadUsersForPrefix(prefix, function (userIds) {
                _this6.dispatch("autocomplete", userIds);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            this.usernameInput.addNodeListener("keydown", function (event) {
                AutocompleteWindow.handleKeydownEvent(_this7, event);
            });
            this.usernameInput.addNodeListener("input", function () {
                _this7.handleChange();
            });
            this.addListener("autocomplete", function (userIds) {
                AutocompleteWindow.handleAutocomplete(_this7, userIds, _this7.usernameInput);
            });

            this.submitButton.addClickListener(function () {
                if (_this7.getUserId()) {
                    _this7.dispatch("user", _this7.getUserId());
                } else {
                    _this7.errorArea.showMessage("Invalid username. Please try again.");
                }
            });
        }
    }]);
    return UserInputField;
}(UI.Element);

var TestersTable = function (_Table) {
    inherits(TestersTable, _Table);

    function TestersTable() {
        classCallCheck(this, TestersTable);
        return possibleConstructorReturn(this, (TestersTable.__proto__ || Object.getPrototypeOf(TestersTable)).apply(this, arguments));
    }

    createClass(TestersTable, [{
        key: "getEntries",
        value: function getEntries() {
            var _this2 = this;

            return ContestUserStore.all().filter(function (user) {
                return user.contestId === _this2.options.evalTask.defaultContestId;
            });
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var numberCellStyle = {
                textAlign: "right"
            };

            get(TestersTable.prototype.__proto__ || Object.getPrototypeOf(TestersTable.prototype), "setColumns", this).call(this, [{
                value: function value(user, index) {
                    return index;
                },
                headerName: "#",
                cellStyle: numberCellStyle,
                headerStyle: numberCellStyle
            }, {
                value: function value(user) {
                    return UI.createElement(UserHandle, { id: user.userId });
                },
                headerName: "User"
            }, {
                value: function value(user) {
                    return user.totalScore || 0;
                },
                headerName: "Score",
                cellStyle: numberCellStyle,
                headerStyle: numberCellStyle
            }, {
                value: function value(user) {
                    return user.numSubmissions || 0;
                },
                headerName: "Num submissions",
                cellStyle: numberCellStyle,
                headerStyle: numberCellStyle
            }]);
        }
    }]);
    return TestersTable;
}(Table);

var TestersPanel = function (_Panel) {
    inherits(TestersPanel, _Panel);

    function TestersPanel() {
        classCallCheck(this, TestersPanel);
        return possibleConstructorReturn(this, (TestersPanel.__proto__ || Object.getPrototypeOf(TestersPanel)).apply(this, arguments));
    }

    createClass(TestersPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return "Testers";
        }
    }, {
        key: "render",
        value: function render() {
            var contestLink = "/contest/" + this.options.evalTask.getDefaultContest().name + "/";
            return [UI.createElement(
                "h4",
                null,
                "Besides the admins, the following people can test this task:"
            ), UI.createElement(
                "h5",
                null,
                "Link: ",
                UI.createElement(Link, { href: location.origin + contestLink, value: location.origin + contestLink })
            ), UI.createElement(TestersTable, { evalTask: this.options.evalTask, ref: "testersTable" }), UI.createElement(
                "h4",
                { style: { marginTop: "20px" } },
                "Give access to a new user:"
            ), UI.createElement(UserInputField, { ref: "userInputField" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            ContestUserStore.addCreateListener(function () {
                _this4.testersTable.redraw();
            });
            this.attachListener(this.userInputField, "user", function (userId) {
                _this4.userInputField.clear();
                Ajax.postJSON("/contest/external_register/", {
                    contestId: _this4.options.evalTask.defaultContestId,
                    userId: userId
                }).then(function () {
                    return _this4.testersTable.redraw();
                });
            });
        }
    }]);
    return TestersPanel;
}(Panel);

var EditorialPanel = function (_Panel) {
    inherits(EditorialPanel, _Panel);

    function EditorialPanel() {
        classCallCheck(this, EditorialPanel);
        return possibleConstructorReturn(this, (EditorialPanel.__proto__ || Object.getPrototypeOf(EditorialPanel)).apply(this, arguments));
    }

    createClass(EditorialPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return "Editorial";
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                display: "flex",
                height: "100%",
                flexDirection: "column"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var evalTask = this.options.evalTask;
            if (evalTask.getHiddenSolutionArticle()) {
                var button = void 0;
                if (!evalTask.solutionArticleId) {
                    button = UI.createElement(Button, { label: "Publish solution article", level: Level.WARNING,
                        onClick: function onClick() {
                            _this2.publishSolutionArticle();
                        } });
                } else {
                    button = UI.createElement(Button, { label: "Unpublish solution article", level: Level.WARNING,
                        onClick: function onClick() {
                            _this2.unpublishSolutionArticle();
                        } });
                }
                return [UI.createElement(
                    ButtonGroup,
                    null,
                    button,
                    UI.createElement(Button, { style: { marginLeft: "20px" }, label: "Delete hidden solution article",
                        onClick: function onClick() {
                            _this2.deleteHiddenSolutionArticle();
                        },
                        level: Level.DANGER })
                ), UI.createElement(ArticleEditor, { ref: "solutionEditor", articleId: evalTask.hiddenSolutionArticleId, style: { flex: "1" } })];
            } else {
                return [UI.createElement(
                    "h2",
                    null,
                    "The task doesn't have a solution article, click bellow to create one"
                ), UI.createElement(Button, { label: "Create hidden solution article", onClick: function onClick() {
                        _this2.createHiddenSolutionArticle();
                    } })];
            }
        }
    }, {
        key: "unpublishSolutionArticle",
        value: function unpublishSolutionArticle() {
            var _this3 = this;

            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", {
                unpublishSolutionArticle: true
            }).then(function () {
                delete _this3.options.evalTask.solutionArticleId;
                _this3.redraw();
            });
        }
    }, {
        key: "publishSolutionArticle",
        value: function publishSolutionArticle() {
            var _this4 = this;

            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", {
                publishSolutionArticle: true
            }).then(function () {
                return _this4.redraw();
            });
        }
    }, {
        key: "createHiddenSolutionArticle",
        value: function createHiddenSolutionArticle() {
            var _this5 = this;

            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", {
                createHiddenSolutionArticle: true
            }).then(function (data) {
                _this5.options.evalTask.hiddenSolutionArticleId = parseInt(data.hiddenSolutionArticleId);
                _this5.redraw();
            });
        }
    }, {
        key: "deleteHiddenSolutionArticle",
        value: function deleteHiddenSolutionArticle() {
            alert("Can't handle this now");
        }
    }]);
    return EditorialPanel;
}(Panel);

var TemplateCellEditor = function (_UI$Element) {
    inherits(TemplateCellEditor, _UI$Element);

    function TemplateCellEditor() {
        classCallCheck(this, TemplateCellEditor);
        return possibleConstructorReturn(this, (TemplateCellEditor.__proto__ || Object.getPrototypeOf(TemplateCellEditor)).apply(this, arguments));
    }

    createClass(TemplateCellEditor, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                boxShadow: "0px 0px 4px #555",
                padding: "10px 2px",
                marginBottom: "5px",
                marginTop: "5px",
                marginLeft: "3px",
                borderRadius: "4px"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var types = [{
                toString: function toString() {
                    return "collapsed";
                }
            }, {
                toString: function toString() {
                    return "collapsible";
                }
            }, {
                toString: function toString() {
                    return "uncollapsible";
                }
            }, {
                toString: function toString() {
                    return "editable";
                }
            }];
            var selected = (this.options.initialValue || { type: "editable" }).type;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = types[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var type = _step.value;

                    if (type.toString() === selected) {
                        selected = type;
                        break;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return [UI.createElement(Select, { ref: "typeSelect", options: types, style: { "margin-bottom": "10px", "padding": "5px", "background-color": "white" }, selected: selected }), UI.createElement(Button, { ref: "removeButton", level: Level.DANGER, faIcon: "minus", style: { "display": "inline-block", "margin-left": "20px" } }), UI.createElement(CodeEditor, { ref: "codeEditor", maxLines: 10, value: (this.options.initialValue || { lines: [] }).lines.join("\n"),
                fontSize: "15", aceMode: this.options.aceMode })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(TemplateCellEditor.prototype.__proto__ || Object.getPrototypeOf(TemplateCellEditor.prototype), "onMount", this).call(this);
            this.removeButton.addClickListener(function () {
                _this2.parent.dispatch("removeTemplateElement", _this2);
                _this2.options.editor.dispatch("change");
            });
            this.typeSelect.addChangeListener(function () {
                _this2.options.editor.dispatch("change");
            });
            this.codeEditor.addAceChangeListener(function () {
                setTimeout(function () {
                    _this2.options.editor.dispatch("change");
                });
            });
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return {
                type: this.typeSelect.get().toString(),
                lines: this.codeEditor.getValue().replace(/\r/, "").split("\n")
            };
        }
    }]);
    return TemplateCellEditor;
}(UI.Element);

var AddTemplateCellButton = function (_Button) {
    inherits(AddTemplateCellButton, _Button);

    function AddTemplateCellButton() {
        classCallCheck(this, AddTemplateCellButton);
        return possibleConstructorReturn(this, (AddTemplateCellButton.__proto__ || Object.getPrototypeOf(AddTemplateCellButton)).apply(this, arguments));
    }

    createClass(AddTemplateCellButton, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(AddTemplateCellButton.prototype.__proto__ || Object.getPrototypeOf(AddTemplateCellButton.prototype), "getDefaultOptions", this).call(this), {
                level: Level.SUCCESS,
                faIcon: "plus"
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(AddTemplateCellButton.prototype.__proto__ || Object.getPrototypeOf(AddTemplateCellButton.prototype), "onMount", this).call(this);
            this.addClickListener(function () {
                var editor = _this4.parent;
                var index = editor.addButtons.indexOf(_this4);
                var language = _this4.options.editor.options.language;
                var templateEditor = UI.createElement(TemplateCellEditor, { initialValue: "", aceMode: language.aceMode,
                    editor: _this4.options.editor });
                var addButton = UI.createElement(AddTemplateCellButton, { editor: _this4.options.editor });
                templateEditor.mount(editor, _this4.node);
                addButton.mount(editor, templateEditor.node);
                editor.options.children.splice(2 * index, 0, addButton, templateEditor);
                editor.addButtons.splice(index, 0, addButton);
                editor.templateEditors.splice(index, 0, templateEditor);
            });
        }
    }]);
    return AddTemplateCellButton;
}(Button);

var LanguageTemplateEditor = function (_UI$Element2) {
    inherits(LanguageTemplateEditor, _UI$Element2);

    function LanguageTemplateEditor() {
        classCallCheck(this, LanguageTemplateEditor);
        return possibleConstructorReturn(this, (LanguageTemplateEditor.__proto__ || Object.getPrototypeOf(LanguageTemplateEditor)).apply(this, arguments));
    }

    createClass(LanguageTemplateEditor, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(LanguageTemplateEditor.prototype.__proto__ || Object.getPrototypeOf(LanguageTemplateEditor.prototype), "setOptions", this).call(this, options);
            this.templates = this.options.evalTask.enforcedTemplates[this.options.language.id] || [];
        }
    }, {
        key: "render",
        value: function render() {
            this.options.children = [];
            this.templateEditors = [];
            this.addButtons = [];
            var addButton = void 0;
            for (var i = 0; i < this.templates.length; i += 1) {
                var templateEditor = UI.createElement(TemplateCellEditor, { initialValue: this.templates[i], aceMode: this.options.language.aceMode,
                    editor: this.options.editor });
                addButton = UI.createElement(AddTemplateCellButton, { editor: this.options.editor });
                this.addButtons.push(addButton);
                this.templateEditors.push(templateEditor);

                this.options.children.push(addButton);
                this.options.children.push(templateEditor);
            }
            addButton = UI.createElement(AddTemplateCellButton, { editor: this.options.editor });
            this.addButtons.push(addButton);
            this.options.children.push(addButton);
            return this.options.children;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            get(LanguageTemplateEditor.prototype.__proto__ || Object.getPrototypeOf(LanguageTemplateEditor.prototype), "onMount", this).call(this);
            this.addListener("removeTemplateElement", function (template) {
                var index = _this6.templateEditors.indexOf(template);
                var button = _this6.addButtons[index];
                var templateEditor = _this6.templateEditors[index];
                _this6.addButtons.splice(index, 1);
                _this6.templateEditors.splice(index, 1);
                _this6.eraseChild(button);
                _this6.eraseChild(templateEditor);
            });
        }
    }, {
        key: "getParsedArray",
        value: function getParsedArray() {
            var template = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.templateEditors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var templateEditor = _step2.value;

                    template.push(templateEditor.getValue());
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return template;
        }
    }]);
    return LanguageTemplateEditor;
}(UI.Element);

var LanguageTab = function (_UI$Element3) {
    inherits(LanguageTab, _UI$Element3);

    function LanguageTab() {
        classCallCheck(this, LanguageTab);
        return possibleConstructorReturn(this, (LanguageTab.__proto__ || Object.getPrototypeOf(LanguageTab)).apply(this, arguments));
    }

    createClass(LanguageTab, [{
        key: "render",
        value: function render() {
            return [UI.createElement(LanguageTemplateEditor, { style: { "width": "50%", "padding-right": "10px", "float": "left", height: "100%", overflow: "auto" },
                ref: "languageTemplateEditor", editor: this,
                evalTask: this.options.evalTask, language: this.options.language }), UI.createElement(
                "div",
                { style: { "display": "inline-block", "width": "50%", "float": "right", height: "100%", overflow: "hidden" } },
                UI.createElement(StaticCodeHighlighter, { ref: "codeRenderer", fontSize: "15", aceMode: this.options.language.aceMode, style: { height: "100%" } })
            ), UI.createElement("div", { style: { "clear": "both" } })];
        }
    }, {
        key: "getParsedArray",
        value: function getParsedArray() {
            return this.languageTemplateEditor.getParsedArray();
        }
    }, {
        key: "checkTemplate",
        value: function checkTemplate(evalTask, language) {
            var template = evalTask.enforcedTemplates[language.id] || [];
            if (template.length === 0) {
                return "Empty template!";
            }
            for (var i = 0; i < template.length; i += 1) {
                if (i > 0 && template[i].type === "editable" && template[i - 1].type === "editable") {
                    return "There should not be two editable areas in a row!";
                }
                if (template[i].lines.length === 1 && template[i].type !== "editable") {
                    return "There should be at least one \\n character in every uneditable area.";
                }
            }
            if (template[0].type === "editable") {
                return "The first block should not be editable";
            }
            if (template[template.length - 1].type === "editable") {
                return "The last block should not be editable";
            }
            return null;
        }
    }, {
        key: "updateCodeRenderer",
        value: function updateCodeRenderer(evalTask) {
            var session = this.codeRenderer.ace.getSession();
            this.folds = this.folds || [];
            this.foldLines = this.foldLines || [];
            this.markers = this.markers || [];

            if (session.folds) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = session.folds[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var fold = _step3.value;

                        session.removeFold(fold);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.markers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var marker = _step4.value;

                    this.codeRenderer.removeMarker(marker);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.folds = [];
            this.markers = [];
            var error = this.checkTemplate(evalTask, this.options.language);
            if (error) {
                this.codeRenderer.setValue(error);
            } else {
                var code = evalTask.getTemplate(this.options.language);
                this.codeRenderer.setValue(code);
                var template = evalTask.enforcedTemplates[this.options.language.id] || [];
                this.ranges = updateAceRanges(template, code, this.markers, this.folds, session, true);
            }
        }
    }, {
        key: "updateFoldingMethod",
        value: function updateFoldingMethod() {
            var _this8 = this;

            var session = this.codeRenderer.ace.getSession();
            session.on("changeFold", function (edit) {
                if (!edit.data || _this8.codeRenderer.getValue() === "") {
                    return;
                }
                if (edit.action === "remove") {
                    for (var i = 0; i < _this8.folds.length; i += 1) {
                        if (edit.data === _this8.folds[i]) {
                            _this8.folds[i] = { isFolded: false };
                            decorateUncollapsed(session, _this8.ranges[i].start.row);
                        }
                    }
                }
            });
            this.codeRenderer.ace.on("gutterclick", function (event) {
                var row = event.getDocumentPosition().row;
                for (var i = 0; i < _this8.ranges.length; i += 1) {
                    if (_this8.ranges[i].start.row === row) {
                        if (_this8.folds[i] && _this8.folds[i].isFolded) {
                            session.removeFold(_this8.folds[i]);
                            _this8.folds[i] = { isFolded: false };
                            decorateUncollapsed(session, _this8.ranges[i]);
                        } else if (_this8.folds[i] && !_this8.folds[i].isFolded) {
                            var Range = CodeEditor.AceRange;
                            _this8.folds[i] = session.addFold("...", new Range(_this8.ranges[i].start.row, _this8.ranges[i].start.column, _this8.ranges[i].end.row - 1, 10000));
                            _this8.folds[i].isFolded = true;
                            decorateCollapsed(session, _this8.ranges[i]);
                        }
                    }
                }
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            if (!window.ace) {
                CodeEditor.requireAce(function () {
                    _this9.onMount();
                });
                return;
            }
            var evalTask = this.options.evalTask;
            evalTask.enforcedTemplates = evalTask.enforcedTemplates || {};
            evalTask.enforcedTemplates[this.options.language.id] = this.languageTemplateEditor.getParsedArray();
            this.updateCodeRenderer(evalTask);
            this.updateFoldingMethod();
            this.addListener("change", function () {
                var evalTask = _this9.options.evalTask;
                evalTask.enforcedTemplates = evalTask.enforcedTemplates || {};
                evalTask.enforcedTemplates[_this9.options.language.id] = _this9.languageTemplateEditor.getParsedArray();
                _this9.updateCodeRenderer(evalTask);
            });
        }
    }]);
    return LanguageTab;
}(UI.Element);

var TemplatesPanel = function (_Panel) {
    inherits(TemplatesPanel, _Panel);

    function TemplatesPanel() {
        classCallCheck(this, TemplatesPanel);
        return possibleConstructorReturn(this, (TemplatesPanel.__proto__ || Object.getPrototypeOf(TemplatesPanel)).apply(this, arguments));
    }

    createClass(TemplatesPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return "Templates";
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                display: "flex",
                flexDirection: "column"
            });
        }
    }, {
        key: "render",
        value: function render() {
            if (this.options.evalTask.hasEnforcedTemplates()) {
                this.languageTabs = [];
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = ProgrammingLanguage.all()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var language = _step5.value;

                        this.languageTabs.push(UI.createElement(LanguageTab, { style: { "width": "100%", height: "100%" }, language: language, evalTask: this.options.evalTask }));
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }

                return [UI.createElement(
                    ButtonGroup,
                    null,
                    UI.createElement(Select, { ref: "languageSelect", options: ProgrammingLanguage.all(), style: { "margin": "20px", "padding": "5px", "background-color": "white" } }),
                    UI.createElement(
                        Button,
                        { ref: "saveButton", style: { display: "inline-block" }, level: Level.PRIMARY },
                        "Save"
                    )
                ), UI.createElement(
                    Switcher,
                    { ref: "languageSwitcher", style: { flex: "1", height: "100%", display: "flex" } },
                    this.languageTabs
                )];
            }
            return [UI.createElement(
                "h2",
                null,
                "The task doesn't have any enforced templates, click bellow to create them"
            ), UI.createElement(Button, { ref: this.refLink("createButton"), label: "Turn task to enforced-template task" })];
        }
    }, {
        key: "save",
        value: function save() {
            var _this11 = this;

            var json = {};
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.languageTabs[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var languageTab = _step6.value;

                    var value = languageTab.getParsedArray();
                    if (value.length) {
                        json[languageTab.options.language.id] = value;
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            this.options.evalTask.enforcedTemplates = json;
            var request = {
                enforcedTemplatesChanged: true,
                enforcedTemplates: JSON.stringify(json)
            };
            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", request).then(function () {
                _this11.saveButton.setLevel(Level.SUCCESS);
                setTimeout(function () {
                    _this11.saveButton.setLevel(Level.PRIMARY);
                }, 1500);
            });
        }
    }, {
        key: "getChildTab",
        value: function getChildTab(languageId) {
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.languageTabs[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var languageTab = _step7.value;

                    if (languageTab.options.language.id === languageId) {
                        return languageTab;
                    }
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            return null;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            get(TemplatesPanel.prototype.__proto__ || Object.getPrototypeOf(TemplatesPanel.prototype), "onMount", this).call(this);
            if (this.createButton) {
                this.createButton.addClickListener(function () {
                    _this12.options.evalTask.enforcedTemplates = {};
                    _this12.redraw();
                    _this12.saveButton.addClickListener(function () {
                        _this12.save();
                    });
                    _this12.languageSelect.addChangeListener(function () {
                        _this12.languageSwitcher.setActive(_this12.getChildTab(_this12.languageSelect.get().id));
                    });
                });
            }
            if (this.saveButton) {
                this.saveButton.addClickListener(function () {
                    _this12.save();
                });
                this.languageSelect.addChangeListener(function () {
                    _this12.languageSwitcher.setActive(_this12.getChildTab(_this12.languageSelect.get().id));
                });
            }
        }
    }]);
    return TemplatesPanel;
}(Panel);

function parseTime(time) {
    if (time === "") {
        return 0;
    }
    if (time[time.length - 1] === "s" || time[time.length - 1] === "S") {
        return parseFloat(time.substr(0, time.length - 1)) * 1000;
    }
    return parseFloat(time) || 0;
}

function parseMemory(memory) {
    if (memory === "") {
        return 0;
    }
    if (memory.length >= 2 && memory.substring(memory.length - 2, memory.length).toUpperCase() === "MB") {
        return 1024 * parseFloat(memory.substring(0, memory.length - 2));
    }
    return parseFloat(memory) || 0;
}

var ComputedTimeSpan = function (_UI$Element) {
    inherits(ComputedTimeSpan, _UI$Element);

    function ComputedTimeSpan() {
        classCallCheck(this, ComputedTimeSpan);
        return possibleConstructorReturn(this, (ComputedTimeSpan.__proto__ || Object.getPrototypeOf(ComputedTimeSpan)).apply(this, arguments));
    }

    createClass(ComputedTimeSpan, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "span";
        }
    }, {
        key: "getComputedTime",
        value: function getComputedTime() {
            var evalTask = this.options.evalTask;
            var language = this.options.language;
            var limits = evalTask.programmingLanguageLimits || {};
            var defaultTime = void 0;
            var limitsPanel = this.options.table.options.ref.parent;
            if (limitsPanel.timeLimitInput) {
                defaultTime = parseTime(limitsPanel.timeLimitInput.getValue()) || 0;
            } else {
                defaultTime = evalTask.timeLimit;
            }

            var timeRatio = void 0;
            var timeRatioInput = this.options.table["timeRatio" + language.id];
            if (timeRatioInput && timeRatioInput.wasChanged) {
                timeRatio = parseFloat(timeRatioInput.getValue());
            } else if (limits[language.id] && limits[language.id].timeRatio) {
                timeRatio = limits[language.id].timeRatio;
            } else if (language.timeRatio) {
                timeRatio = language.timeRatio;
            } else {
                timeRatio = 1;
            }

            var extraTime = void 0;
            var extraTimeInput = this.options.table["extraTime" + language.id];
            if (extraTimeInput && extraTimeInput.wasChanged) {
                extraTime = parseTime(extraTimeInput.getValue());
            } else if (limits[language.id] && limits[language.id].extraTime) {
                extraTime = limits[language.id].extraTime;
            } else if (language.extraTime) {
                extraTime = language.extraTime;
            } else {
                extraTime = 0;
            }

            return defaultTime * timeRatio + extraTime + "ms";
        }
    }, {
        key: "render",
        value: function render() {
            return this.getComputedTime();
        }
    }]);
    return ComputedTimeSpan;
}(UI.Element);

var ComputedMemorySpan = function (_UI$Element2) {
    inherits(ComputedMemorySpan, _UI$Element2);

    function ComputedMemorySpan() {
        classCallCheck(this, ComputedMemorySpan);
        return possibleConstructorReturn(this, (ComputedMemorySpan.__proto__ || Object.getPrototypeOf(ComputedMemorySpan)).apply(this, arguments));
    }

    createClass(ComputedMemorySpan, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "span";
        }
    }, {
        key: "getComputedMemory",
        value: function getComputedMemory() {
            var language = this.options.language;
            var evalTask = this.options.evalTask;
            var limits = evalTask.programmingLanguageLimits || {};

            var defaultMemory = void 0;
            var limitsPanel = this.options.table.options.ref.parent;
            if (limitsPanel.memoryLimitInput) {
                defaultMemory = parseMemory(limitsPanel.memoryLimitInput.getValue()) || 0;
            } else {
                defaultMemory = evalTask.memoryLimit;
            }

            var extraMemory = void 0;
            var extraMemoryInput = this.options.table["extraMemory" + language.id];
            if (extraMemoryInput && extraMemoryInput.wasChanged) {
                extraMemory = parseMemory(extraMemoryInput.getValue());
            } else if (limits[language.id] && limits[language.id].extraMemory) {
                extraMemory = limits[language.id].extraMemory;
            } else if (language.extraMemory) {
                extraMemory = language.extraMemory;
            } else {
                extraMemory = 0;
            }

            return defaultMemory + extraMemory + "kb";
        }
    }, {
        key: "render",
        value: function render() {
            return this.getComputedMemory();
        }
    }]);
    return ComputedMemorySpan;
}(UI.Element);

var LanguageTableRow = function (_TableRow) {
    inherits(LanguageTableRow, _TableRow);

    function LanguageTableRow() {
        classCallCheck(this, LanguageTableRow);
        return possibleConstructorReturn(this, (LanguageTableRow.__proto__ || Object.getPrototypeOf(LanguageTableRow)).apply(this, arguments));
    }

    createClass(LanguageTableRow, [{
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            var table = this.parent.parent;
            var checkbox = table["save" + this.options.entry.id];
            if (checkbox.node.checked) {
                this.setStyle("background-color", "#87ACCC");
            }
            checkbox.addChangeListener(function () {
                if (checkbox.node.checked) {
                    _this4.setStyle("background-color", "#87ACCC");
                } else {
                    _this4.setStyle("background-color", "");
                }
            });
        }
    }]);
    return LanguageTableRow;
}(TableRow);

var TimeLimitsTable = function (_Table) {
    inherits(TimeLimitsTable, _Table);

    function TimeLimitsTable() {
        classCallCheck(this, TimeLimitsTable);
        return possibleConstructorReturn(this, (TimeLimitsTable.__proto__ || Object.getPrototypeOf(TimeLimitsTable)).apply(this, arguments));
    }

    createClass(TimeLimitsTable, [{
        key: "getRowClass",
        value: function getRowClass() {
            return LanguageTableRow;
        }
    }, {
        key: "getEntryKey",
        value: function getEntryKey(entry, index) {
            return index;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return ProgrammingLanguage.all();
        }
    }, {
        key: "getExtraMemory",
        value: function getExtraMemory(id) {
            var evalTask = this.options.evalTask;
            var limits = evalTask.programmingLanguageLimits || {};
            if (limits[id] && limits[id]["extraMemory"]) {
                return [limits[id]["extraMemory"], true];
            }
            return [0, false];
        }
    }, {
        key: "getExtraTime",
        value: function getExtraTime(id) {
            var evalTask = this.options.evalTask;
            var limits = evalTask.programmingLanguageLimits || {};
            if (limits[id] && limits[id]["extraTime"]) {
                return [limits[id]["extraTime"], true];
            }
            return [0, false];
        }
    }, {
        key: "getTimeRatio",
        value: function getTimeRatio(id) {
            var evalTask = this.options.evalTask;
            var limits = evalTask.programmingLanguageLimits || {};
            if (limits[id] && limits[id]["timeRatio"]) {
                return [limits[id]["timeRatio"], true];
            }
            return [1, false];
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var _this6 = this;

            var numberStyle = {
                textAlign: "center"
            };

            get(TimeLimitsTable.prototype.__proto__ || Object.getPrototypeOf(TimeLimitsTable.prototype), "setColumns", this).call(this, [{
                value: function value(entry) {
                    var checked = false;
                    if (_this6.getExtraMemory(entry.id)[1] || _this6.getExtraTime(entry.id)[1] || _this6.getTimeRatio(entry.id)[1]) {
                        checked = true;
                    }
                    return UI.createElement(CheckboxInput, { ref: _this6.refLink("save" + entry.id), checked: checked });
                },
                headerName: "Save to DB",
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return entry.name;
                },
                headerName: "Language",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    var ratio = void 0,
                        wasChanged = void 0;

                    var _getTimeRatio = _this6.getTimeRatio(entry.id);

                    var _getTimeRatio2 = slicedToArray(_getTimeRatio, 2);

                    ratio = _getTimeRatio2[0];
                    wasChanged = _getTimeRatio2[1];

                    var bgColor = "";
                    if (wasChanged) {
                        bgColor = "rgba(255,190,0,0.8)";
                    }
                    var timeRatioField = UI.createElement(TextInput, { ref: _this6.refLink("timeRatio" + entry.id), value: ratio, style: { "background-color": bgColor } });
                    timeRatioField.wasChanged = wasChanged;
                    return timeRatioField;
                },
                headerName: "Time limit ratio",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    var extraTime = void 0,
                        wasChanged = void 0;

                    var _getExtraTime = _this6.getExtraTime(entry.id);

                    var _getExtraTime2 = slicedToArray(_getExtraTime, 2);

                    extraTime = _getExtraTime2[0];
                    wasChanged = _getExtraTime2[1];

                    var bgColor = "";
                    if (wasChanged) {
                        bgColor = "rgba(255,190,0,0.8)";
                    }
                    var extraTimeField = UI.createElement(TextInput, { ref: _this6.refLink("extraTime" + entry.id), value: extraTime, style: { "background-color": bgColor } });
                    extraTimeField.wasChanged = wasChanged;
                    return extraTimeField;
                },
                headerName: "Extra time",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return UI.createElement(ComputedTimeSpan, { ref: _this6.refLink("computedTime" + entry.id), table: _this6,
                        language: entry, evalTask: _this6.options.evalTask });
                },
                headerName: "Computed Time",
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    var extraMemory = void 0,
                        wasChanged = void 0;

                    var _getExtraMemory = _this6.getExtraMemory(entry.id);

                    var _getExtraMemory2 = slicedToArray(_getExtraMemory, 2);

                    extraMemory = _getExtraMemory2[0];
                    wasChanged = _getExtraMemory2[1];

                    var bgColor = "";
                    if (wasChanged) {
                        bgColor = "rgba(255,190,0,0.8)";
                    }
                    var extraMemoryField = UI.createElement(TextInput, { ref: _this6.refLink("extraMemory" + entry.id), value: extraMemory, style: { "background-color": bgColor } });
                    extraMemoryField.wasChanged = wasChanged;
                    return extraMemoryField;
                },
                headerName: "Extra memory",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return UI.createElement(ComputedMemorySpan, { ref: _this6.refLink("computedMemory" + entry.id), table: _this6,
                        language: entry, evalTask: _this6.options.evalTask });
                },
                headerName: "Computed Memory",
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }]);
        }
    }]);
    return TimeLimitsTable;
}(Table);

var LimitsPanel = function (_Panel) {
    inherits(LimitsPanel, _Panel);

    function LimitsPanel() {
        classCallCheck(this, LimitsPanel);
        return possibleConstructorReturn(this, (LimitsPanel.__proto__ || Object.getPrototypeOf(LimitsPanel)).apply(this, arguments));
    }

    createClass(LimitsPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return "Limits";
        }
    }, {
        key: "render",
        value: function render() {
            var _this8 = this;

            var evalTask = this.options.evalTask;
            return [UI.createElement(
                "div",
                { style: { padding: "20px" } },
                UI.createElement(
                    Form,
                    null,
                    UI.createElement(
                        FormField,
                        { ref: "timeLimit", label: "Default Time Limit" },
                        UI.createElement(TextInput, { ref: "timeLimitInput", value: evalTask.timeLimit })
                    ),
                    UI.createElement(
                        FormField,
                        { ref: "memoryLimit", label: "Default Memory Limit" },
                        UI.createElement(TextInput, { ref: "memoryLimitInput", value: evalTask.memoryLimit })
                    )
                )
            ), UI.createElement(TimeLimitsTable, { ref: "limitsTable", evalTask: evalTask }), UI.createElement(
                "div",
                { className: "text-center" },
                UI.createElement(Button, { ref: "saveLimitsButton", level: Level.PRIMARY,
                    label: "Save changes", onClick: function onClick() {
                        _this8.saveChanges();
                    }
                }),
                UI.createElement(TemporaryMessageArea, { ref: "saveStatus" })
            )];
        }
    }, {
        key: "saveChanges",
        value: function saveChanges() {
            var _this9 = this;

            var timeLimit = parseTime(this.timeLimitInput.getValue());
            var memoryLimit = parseMemory(this.memoryLimitInput.getValue());

            if (timeLimit >= 30000 || memoryLimit >= 1024 * 8192) {
                this.saveStatus.showMessage("Failed, invalid default limits!", "red");
                return;
            }

            var limits = {};
            var languages = ProgrammingLanguage.all();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = languages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var language = _step.value;

                    if (!this.limitsTable["save" + language.id].node.checked) {
                        continue;
                    }
                    var timeRatioField = this.limitsTable["timeRatio" + language.id];
                    var timeRatio = parseTime(timeRatioField.getValue());
                    var extraTimeField = this.limitsTable["extraTime" + language.id];
                    var extraTime = parseTime(extraTimeField.getValue());
                    var extraMemoryField = this.limitsTable["extraMemory" + language.id];
                    var extraMemory = parseMemory(extraMemoryField.getValue());

                    if (timeLimit * timeRatio + extraTime >= 30000 || memoryLimit + extraMemory >= 1024 * 8192) {
                        this.saveStatus.showMessage("Failed, invalid limits for " + language.name, "red");
                        return;
                    }
                    limits[language.id] = {};
                    if (extraTimeField.wasChanged) {
                        limits[language.id].extraTime = extraTime;
                    }
                    if (extraMemoryField.wasChanged) {
                        limits[language.id].extraMemory = extraMemory;
                    }
                    if (timeRatioField.wasChanged) {
                        limits[language.id].timeRatio = timeRatio;
                    }
                    if (Object.keys(limits[language.id]).length === 0) {
                        delete limits[language.id];
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var request = {
                limitsChanged: true,
                timeLimit: timeLimit,
                memoryLimit: memoryLimit,
                programmingLanguageLimits: JSON.stringify(limits)
            };
            Ajax.postJSON("/task/" + this.options.evalTask.urlName + "/edit/", request).then(function (data) {
                return _this9.saveStatus.showMessage("Limits changed");
            }, function (error) {
                return _this9.saveStatus.showMessage(error.message, "red");
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var table = this.limitsTable;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                var _loop = function _loop() {
                    var language = _step2.value;

                    table["timeRatio" + language.id].addNodeListener("input", function () {
                        table["timeRatio" + language.id].wasChanged = true;
                        table["timeRatio" + language.id].setStyle("background-color", "rgba(255,190,0,0.8");
                        table["computedTime" + language.id].redraw();
                    });
                    table["extraTime" + language.id].addNodeListener("input", function () {
                        table["extraTime" + language.id].wasChanged = true;
                        table["extraTime" + language.id].setStyle("background-color", "rgba(255,190,0,0.8");
                        table["computedTime" + language.id].redraw();
                    });
                    table["extraMemory" + language.id].addNodeListener("input", function () {
                        table["extraMemory" + language.id].wasChanged = true;
                        table["extraMemory" + language.id].setStyle("background-color", "rgba(255,190,0,0.8");
                        table["computedMemory" + language.id].redraw();
                    });
                };

                for (var _iterator2 = ProgrammingLanguage.all()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.timeLimitInput.addNodeListener("input", function () {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = ProgrammingLanguage.all()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var language = _step3.value;

                        table["computedTime" + language.id].redraw();
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            });
            this.memoryLimitInput.addNodeListener("input", function () {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = ProgrammingLanguage.all()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var language = _step4.value;

                        table["computedMemory" + language.id].redraw();
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            });
        }
    }]);
    return LimitsPanel;
}(Panel);

var ReevalModal = function (_ActionModal) {
    inherits(ReevalModal, _ActionModal);

    function ReevalModal() {
        classCallCheck(this, ReevalModal);
        return possibleConstructorReturn(this, (ReevalModal.__proto__ || Object.getPrototypeOf(ReevalModal)).apply(this, arguments));
    }

    createClass(ReevalModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Re-eval";
        }
    }, {
        key: "getCloseName",
        value: function getCloseName() {
            return "Cancel";
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return "Are you sure you want to re-evaluate ALL jobs?";
        }
    }, {
        key: "getMessage",
        value: function getMessage() {
            if (EvalJobStore.jobCount === 0) {
                return "No jobs to re-evaluate!";
            }
            if (EvalJobStore.jobCount === 1) {
                return "One job will be re-evaluated";
            }
            return EvalJobStore.jobCount + " jobs will be re-evaluated";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [this.getMessage(), UI.createElement(
                "div",
                null,
                "Programming Language: ",
                UI.createElement(Select, { options: ["-----"].concat(toConsumableArray(ProgrammingLanguage.all())), ref: "languageSelect" })
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this2 = this;

            var request = {
                evalTaskId: this.options.evalTask.id,
                job: "all"
            };
            var programmingLanguage = this.languageSelect.get();
            if (programmingLanguage.id) {
                request.programmingLanguageId = programmingLanguage.id;
            }
            Ajax.postJSON("/eval/reeval/", request).then(function (data) {
                return _this2.hide();
            }, function (error) {
                return _this2.messageArea.showMessage(error.message, "red", 4000);
            });
        }
    }]);
    return ReevalModal;
}(ActionModal);

var ReevalButton = ActionModalButton(ReevalModal);

var SubmissionSummaryWithReeval = function (_UI$Element) {
    inherits(SubmissionSummaryWithReeval, _UI$Element);

    function SubmissionSummaryWithReeval() {
        classCallCheck(this, SubmissionSummaryWithReeval);
        return possibleConstructorReturn(this, (SubmissionSummaryWithReeval.__proto__ || Object.getPrototypeOf(SubmissionSummaryWithReeval)).apply(this, arguments));
    }

    createClass(SubmissionSummaryWithReeval, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("display", "flex");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(Button, { ref: this.refLink("reevalButton"), level: Level.DEFAULT, style: {
                    margin: "8px",
                    marginTop: "5px"
                }, faIcon: "rotate-left" }), UI.createElement(
                "div",
                { style: { display: "inline-block" } },
                UI.createElement(SubmissionSummary, { key: this.options.evalJob.id, evalJob: this.options.evalJob })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.reevalButton.addClickListener(function () {
                if (_this4.options.evalJob.getStatus() === EvalJob.Status.DONE) {
                    Ajax.postJSON("/eval/reeval/", {
                        evalTaskId: _this4.options.evalJob.evalTaskId,
                        job: _this4.options.evalJob.id
                    });
                }
            });
        }
    }]);
    return SubmissionSummaryWithReeval;
}(UI.Element);

var ReevalDoneModal = function (_Modal) {
    inherits(ReevalDoneModal, _Modal);

    function ReevalDoneModal() {
        classCallCheck(this, ReevalDoneModal);
        return possibleConstructorReturn(this, (ReevalDoneModal.__proto__ || Object.getPrototypeOf(ReevalDoneModal)).apply(this, arguments));
    }

    createClass(ReevalDoneModal, [{
        key: "render",
        value: function render() {
            return "All " + this.options.jobCount + " submissions have been enqueued successfully.";
        }
    }]);
    return ReevalDoneModal;
}(Modal);

var SubmissionSummaryPanelWithReeval = function (_SubmissionSummaryPan) {
    inherits(SubmissionSummaryPanelWithReeval, _SubmissionSummaryPan);

    function SubmissionSummaryPanelWithReeval() {
        classCallCheck(this, SubmissionSummaryPanelWithReeval);
        return possibleConstructorReturn(this, (SubmissionSummaryPanelWithReeval.__proto__ || Object.getPrototypeOf(SubmissionSummaryPanelWithReeval)).apply(this, arguments));
    }

    createClass(SubmissionSummaryPanelWithReeval, [{
        key: "getSubmissionSummary",
        value: function getSubmissionSummary(evalJob) {
            return UI.createElement(SubmissionSummaryWithReeval, { evalJob: evalJob, key: evalJob.id });
        }
    }, {
        key: "fetchEvalJobs",
        value: function fetchEvalJobs(requestCount) {
            get(SubmissionSummaryPanelWithReeval.prototype.__proto__ || Object.getPrototypeOf(SubmissionSummaryPanelWithReeval.prototype), "fetchEvalJobs", this).call(this, true);
        }
    }]);
    return SubmissionSummaryPanelWithReeval;
}(SubmissionSummaryPanel);

var SubmissionsPanel = function (_Panel) {
    inherits(SubmissionsPanel, _Panel);

    function SubmissionsPanel() {
        classCallCheck(this, SubmissionsPanel);
        return possibleConstructorReturn(this, (SubmissionsPanel.__proto__ || Object.getPrototypeOf(SubmissionsPanel)).apply(this, arguments));
    }

    createClass(SubmissionsPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return "Submissions";
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                ReevalButton,
                { modalOptions: { evalTask: this.options.evalTask }, style: { margin: "15px", marginLeft: "8px" }, level: Level.WARNING },
                "Re-eval all submissions"
            ), UI.createElement(SubmissionSummaryPanelWithReeval, { filters: { evalTaskId: this.options.evalTask.id } })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            GlobalState.registerStream("evaljobs");
            this.attachListener(EvalJobStore, "reevalDone", function (event) {
                if (event.data.evalTaskId === _this8.options.evalTask.id) {
                    ReevalDoneModal.show({ jobCount: event.data.jobCount });
                }
            });
        }
    }]);
    return SubmissionsPanel;
}(Panel);

var PreviewPanel = function (_Panel) {
    inherits(PreviewPanel, _Panel);

    function PreviewPanel() {
        classCallCheck(this, PreviewPanel);
        return possibleConstructorReturn(this, (PreviewPanel.__proto__ || Object.getPrototypeOf(PreviewPanel)).apply(this, arguments));
    }

    createClass(PreviewPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                textAlign: "center",
                paddingTop: "10px"
            });
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return "Preview";
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(ContestTaskPanel, { style: { textAlign: "initial" }, enableSubrouter: false,
                contestTaskId: this.options.evalTask.defaultContestTaskId });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(PreviewPanel.prototype.__proto__ || Object.getPrototypeOf(PreviewPanel.prototype), "onMount", this).call(this);
            this.addListener("show", function () {
                _this2.redraw();
            });
        }
    }]);
    return PreviewPanel;
}(Panel);

var _class$97, _descriptor$40, _descriptor2$35;

function _initDefineProp$41(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$42(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var EvalTaskEditorTabAreaStyle = (_class$97 = function (_MinimalistTabAreaSty) {
    inherits(EvalTaskEditorTabAreaStyle, _MinimalistTabAreaSty);

    function EvalTaskEditorTabAreaStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, EvalTaskEditorTabAreaStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = EvalTaskEditorTabAreaStyle.__proto__ || Object.getPrototypeOf(EvalTaskEditorTabAreaStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$41(_this, "activeTab", _descriptor$40, _this), _initDefineProp$41(_this, "tab", _descriptor2$35, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return EvalTaskEditorTabAreaStyle;
}(MinimalistTabAreaStyle), _descriptor$40 = _applyDecoratedDescriptor$42(_class$97.prototype, "activeTab", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "rgba(51,122,183,1)",
            borderTop: "1px solid rgba(51,122,183,1) !important",
            borderLeft: "1px solid rgba(51,122,183,1) !important",
            borderRight: "1px solid rgba(51,122,183,1) !important",
            borderTopLeftRadius: "7px",
            borderTopRightRadius: "7px",
            backgroundColor: "rgba(51, 122, 183, 0.15)"
        };
    }
}), _descriptor2$35 = _applyDecoratedDescriptor$42(_class$97.prototype, "tab", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "1.2em"
        };
    }
}), _class$97);

var EvalTaskEditorTabArea = function (_TabArea) {
    inherits(EvalTaskEditorTabArea, _TabArea);

    function EvalTaskEditorTabArea() {
        classCallCheck(this, EvalTaskEditorTabArea);
        return possibleConstructorReturn(this, (EvalTaskEditorTabArea.__proto__ || Object.getPrototypeOf(EvalTaskEditorTabArea)).apply(this, arguments));
    }

    createClass(EvalTaskEditorTabArea, [{
        key: "getTitleArea",
        value: function getTitleArea(tabTitles) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = tabTitles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var tabTitle = _step.value;

                    tabTitle.options.style = {
                        flex: 1,
                        textAlign: "center"
                    };
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return UI.createElement(
                "div",
                { ref: "titleArea", className: this.styleSheet.nav,
                    style: { display: "flex", borderBottom: "1px solid rgba(51,122,183,1) !important" } },
                tabTitles
            );
        }
    }, {
        key: "getStyleSheet",
        value: function getStyleSheet() {
            return EvalTaskEditorTabAreaStyle.getInstance();
        }
    }]);
    return EvalTaskEditorTabArea;
}(TabArea);

var EvalTaskEditor = function (_UI$Element) {
    inherits(EvalTaskEditor, _UI$Element);

    function EvalTaskEditor() {
        classCallCheck(this, EvalTaskEditor);
        return possibleConstructorReturn(this, (EvalTaskEditor.__proto__ || Object.getPrototypeOf(EvalTaskEditor)).apply(this, arguments));
    }

    createClass(EvalTaskEditor, [{
        key: "getLocations",
        value: function getLocations() {
            return [["general", GeneralPanel], ["statement", StatementPanel], ["tests", TestsPanel], ["editorial", EditorialPanel], ["limits", LimitsPanel], ["templates", TemplatesPanel], ["submissions", SubmissionsPanel], ["testers", TestersPanel], ["preview", PreviewPanel]];
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(EvalTaskEditor.prototype.__proto__ || Object.getPrototypeOf(EvalTaskEditor.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                height: "100%",
                display: "flex",
                flexDirection: "column"
            });
            attr.addClass(GlobalStyle.Container.SMALL);
        }
    }, {
        key: "getEvalTask",
        value: function getEvalTask() {
            return EvalTaskStore.all().find(function (evalTask) {
                return evalTask.urlName === Router.parseURL()[1];
            });
        }
    }, {
        key: "getUrlPrefix",
        value: function getUrlPrefix(urlPart) {
            var url = "/task/" + this.getEvalTask().urlName + "/edit/";
            if (urlPart) {
                url += urlPart + "/";
            }
            return url;
        }
    }, {
        key: "render",
        value: function render() {
            var evalTask = this.getEvalTask();
            var panels = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getLocations()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _step2$value = slicedToArray(_step2.value, 2),
                        location = _step2$value[0],
                        PanelClass = _step2$value[1];

                    panels.push(UI.createElement(PanelClass, { evalTask: evalTask, ref: location + "Panel",
                        tabHref: this.getUrlPrefix(location), style: { height: "100%" } }));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return [UI.createElement(
                "h2",
                null,
                "Task \"",
                evalTask.longName,
                "\" (id=",
                evalTask.id,
                ")"
            ), UI.createElement(
                EvalTaskEditorTabArea,
                { style: { flex: "1" } },
                panels
            )];
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            // check if it's not loaded
            if (!this.generalPanel) {
                this.initialUrlParts = urlParts;
                return;
            }
            var urlPart = urlParts[0] || "general";
            if (this[urlPart + "Panel"]) {
                this[urlPart + "Panel"].dispatch("show");
            } else {
                Router.changeURL(this.getUrlPrefix());
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.setURL(this.initialUrlParts);
            delete this.initialUrlParts;
            var evalTask = this.getEvalTask();
            GlobalState.registerStream("contest-" + evalTask.defaultContestId + "-scores");
            GlobalState.registerStream("contest-" + evalTask.defaultContestId + "-announcements");
            GlobalState.registerStream("contest-" + evalTask.defaultContestId + "-scoreevents");
        }
    }]);
    return EvalTaskEditor;
}(UI.Element);

var WorkspaceNameSpan = function (_UI$Element) {
    inherits(WorkspaceNameSpan, _UI$Element);

    function WorkspaceNameSpan() {
        classCallCheck(this, WorkspaceNameSpan);
        return possibleConstructorReturn(this, (WorkspaceNameSpan.__proto__ || Object.getPrototypeOf(WorkspaceNameSpan)).apply(this, arguments));
    }

    createClass(WorkspaceNameSpan, [{
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.button.addClickListener(function () {
                _this2.options.ref.parent.dispatch("changeWorkspace", _this2.options.workspace);
            });
            this.remove.addClickListener(function () {
                _this2.options.ref.parent.dispatch("removeWorkspace", _this2.options.workspace);
            });
        }
    }, {
        key: "highlight",
        value: function highlight() {
            this.options.highlighted = true;
            this.button.setLevel(Level.SUCCESS);
        }
    }, {
        key: "unhighlight",
        value: function unhighlight() {
            this.options.highlighted = false;
            this.button.setLevel(Level.INFO);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(Button, { ref: "remove", faIcon: "minus", style: {
                    "display": "inline-block",
                    "margin-right": "5px"
                }, level: Level.DANGER }), UI.createElement(
                Button,
                { level: this.options.highlighted ? Level.SUCCESS : Level.INFO, size: Size.EXTRA_SMALL,
                    ref: "button", style: { "font-size": "1.4em", "display": "inline-block" } },
                this.options.workspace.name || "Anonymous Workspace"
            )];
        }
    }]);
    return WorkspaceNameSpan;
}(UI.Element);

var Checker = function (_CollapsiblePanel) {
    inherits(Checker, _CollapsiblePanel);

    function Checker() {
        classCallCheck(this, Checker);
        return possibleConstructorReturn(this, (Checker.__proto__ || Object.getPrototypeOf(Checker)).apply(this, arguments));
    }

    createClass(Checker, [{
        key: "getTitle",
        value: function getTitle() {
            return this.options.checker.name || "No name checker";
        }
    }, {
        key: "render",
        value: function render() {
            var children = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.checker.getWorkspaces()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var workspace = _step.value;

                    children.push(UI.createElement(WorkspaceNameSpan, { ref: "workspace-" + workspace.id, style: { "margin": "20px" }, workspace: workspace }));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return [UI.createElement(
                "div",
                { style: { "width": "40%", "display": "inline-block" }, ref: "workspaceListArea" },
                children,
                UI.createElement(
                    "div",
                    { style: { "margin-top": "10px" }, ref: "addWorkspaceArea" },
                    UI.createElement(Button, { level: Level.PRIMARY, ref: "addWorkspaceButton",
                        faIcon: "plus", style: { "margin-left": "20px" } }),
                    UI.createElement(TextInput, { placeholder: "id", ref: "newWorkspaceId", style: { "padding-left": "5px", "margin-left": "5px" } })
                )
            ), UI.createElement(
                "div",
                { ref: "workspaceArea", style: { "width": "55%", "margin-left": "5%", "height": "400px", "display": "inline-block", "float": "right" } },
                UI.createElement(
                    Switcher,
                    { ref: "workspaceSwitcher", style: { "height": "100%" } },
                    UI.createElement("div", { ref: "emptyWorkspaceChild" })
                )
            )];
        }
    }, {
        key: "linkWorkspace",
        value: function linkWorkspace(id) {
            var _this4 = this;

            Ajax.postJSON("/eval/checker/edit", {
                "addWorkspace": true,
                "checkerId": this.options.checker.id,
                "workspaceId": id
            }).then(function (data) {
                return _this4.redraw();
            });
        }
    }, {
        key: "unlinkWorkspace",
        value: function unlinkWorkspace(id) {
            var _this5 = this;

            Ajax.postJSON("/eval/checker/edit", {
                "removeWorkspace": true,
                "checkerId": this.options.checker.id,
                "workspaceId": id
            }).then(function () {
                _this5.redraw();
                _this5.workspaceSwitcher.setActive(_this5.emptyWorkspaceChild);
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.workspaceIDEMap = new Map();
            this.addWorkspaceButton.addClickListener(function () {
                var id = parseInt(_this6.newWorkspaceId.getValue());
                if (!isNaN(id) && id) {
                    _this6.linkWorkspace(id);
                }
            });
            this.addListener("changeWorkspace", function (workspace) {
                if (!_this6.workspaceIDEMap.has(workspace)) {
                    _this6.workspaceIDEMap.set(workspace, UI.createElement(WorkspaceIDE, { workspace: workspace, plugins: PluginTypes.CHECKER, key: Math.random() }));
                    _this6.workspaceSwitcher.appendChild(_this6.workspaceIDEMap.get(workspace));
                }
                _this6.workspaceSwitcher.setActive(_this6.workspaceIDEMap.get(workspace));
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = _this6.options.checker.getWorkspaces()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var workspace2 = _step2.value;

                        if (workspace2 === workspace) {
                            _this6["workspace-" + workspace2.id].highlight();
                        } else {
                            _this6["workspace-" + workspace2.id].unhighlight();
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            });
            this.addListener("removeWorkspace", function (workspace) {
                _this6.unlinkWorkspace(workspace.id);
            });
        }
    }]);
    return Checker;
}(CollapsiblePanel);

var AddCheckerModal = function (_ActionModal) {
    inherits(AddCheckerModal, _ActionModal);

    function AddCheckerModal() {
        classCallCheck(this, AddCheckerModal);
        return possibleConstructorReturn(this, (AddCheckerModal.__proto__ || Object.getPrototypeOf(AddCheckerModal)).apply(this, arguments));
    }

    createClass(AddCheckerModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "New Checker";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "div",
                { style: { "display": "inline-block", "margin-right": "10px" } },
                "Checker Name:"
            ), UI.createElement(TextInput, { placeholder: "name", ref: "nameInputArea", style: { "padding-left": "5px" } })];
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this8 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: this.getCloseName(), onClick: function onClick() {
                        return _this8.hide();
                    }, style: { "margin-right": "10px" } }),
                ",",
                this.getActionButton()
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this9 = this;

            Ajax.postJSON("/eval/checker/create", {
                "checkerName": this.nameInputArea.getValue()
            }).then(function () {
                _this9.hide();
                Dispatcher.Global.dispatch("newChecker");
            });
        }
    }]);
    return AddCheckerModal;
}(ActionModal);

var AddCheckerButton = ActionModalButton(AddCheckerModal);

var CachebustModal = function (_ActionModal2) {
    inherits(CachebustModal, _ActionModal2);

    function CachebustModal() {
        classCallCheck(this, CachebustModal);
        return possibleConstructorReturn(this, (CachebustModal.__proto__ || Object.getPrototypeOf(CachebustModal)).apply(this, arguments));
    }

    createClass(CachebustModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Bust Eval Cache";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return "Are you sure? This action may take a long time";
        }
    }, {
        key: "action",
        value: function action() {
            Ajax.postJSON("/eval/checker/cache_bust/", {});
        }
    }]);
    return CachebustModal;
}(ActionModal);

var CachebustButton = ActionModalButton(CachebustModal);

var CheckerManager = function (_UI$Element2) {
    inherits(CheckerManager, _UI$Element2);

    function CheckerManager() {
        classCallCheck(this, CheckerManager);
        return possibleConstructorReturn(this, (CheckerManager.__proto__ || Object.getPrototypeOf(CheckerManager)).apply(this, arguments));
    }

    createClass(CheckerManager, [{
        key: "render",
        value: function render() {
            var checkerDivs = [];
            var checkers = TaskCheckerStore.all();
            checkers.sort(function (a, b) {
                return b.id - a.id;
            });
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = checkers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var checker = _step3.value;

                    checkerDivs.push(UI.createElement(Checker, { checker: checker, ref: "checker" + checker.id, style: { "margin": "30px" } }));
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return [UI.createElement(
                AddCheckerButton,
                { ref: this.refLink("addChecker"), level: Level.SUCCESS,
                    style: { "margin-left": "30px" } },
                "New Checker"
            ), UI.createElement(
                CachebustButton,
                { ref: this.refLink("cachebustButton"), level: Level.DANGER,
                    style: { "display": "inline-block", "margin-left": "20px" } },
                "Bust Eval Cache"
            ), checkerDivs];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            this.attachListener(Dispatcher.Global, "newChecker", function () {
                _this12.redraw();
            });
        }
    }]);
    return CheckerManager;
}(UI.Element);

var _class$98, _descriptor$41;

function _initDefineProp$42(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$43(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DropdownListStyle = (_class$98 = function (_StyleSheet) {
    inherits(DropdownListStyle, _StyleSheet);

    function DropdownListStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, DropdownListStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = DropdownListStyle.__proto__ || Object.getPrototypeOf(DropdownListStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$42(_this, "default", _descriptor$41, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return DropdownListStyle;
}(StyleSheet), _descriptor$41 = _applyDecoratedDescriptor$43(_class$98.prototype, "default", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            ">*": {
                padding: "7px",
                cursor: "pointer",
                backgroundColor: "#eeeeee",
                width: "100%",
                ":hover": {
                    backgroundColor: "#dddddd"
                }
            }
        };
    }
}), _class$98);

function computeDFSCoordsUndirected(graph) {
    var startNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var box = graph.getBox();
    var finalCoords = new Map();
    var visited = new Set();
    var subtreeWidth = new Map();
    var level = new Map();
    var sons = new Map();
    var marginUp = 30;
    var marginDown = 80;
    var buildDfsTree = function buildDfsTree(node) {
        var father = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

        // Calculate the level of current node
        if (father === -1) {
            level.set(node, 0);
        } else {
            level.set(node, level.get(father) + 1);
        }

        // Go through the incident edges to find node's sons
        sons.set(node, []);
        visited.add(node);
        var edges = node.getIncidentEdges();
        for (var i = 0; i < edges.length; i += 1) {
            var neighbour = edges[i].getTarget() === node ? edges[i].getSource() : edges[i].getTarget();

            // If it's a son, call recursively
            if (!visited.has(neighbour)) {
                sons.get(node).push(neighbour);
                buildDfsTree(neighbour, node);
            }
        }
    };

    var computeSubtreeWidth = function computeSubtreeWidth(node) {
        subtreeWidth.set(node, 0);

        // Width of a subtree is the sum of widths of the root's sons
        var currentSons = sons.get(node);
        for (var i = 0; i < currentSons.length; i += 1) {
            computeSubtreeWidth(currentSons[i]);
            subtreeWidth.set(node, subtreeWidth.get(node) + subtreeWidth.get(currentSons[i]));
        }

        // Leaf: width = 1
        if (subtreeWidth.get(node) === 0) {
            subtreeWidth.set(node, 1);
        }
    };

    var computeFinalX = function computeFinalX(node, leftX, rightX) {
        if (!finalCoords.has(node)) {
            finalCoords.set(node, {});
        }
        // Place node at the center of its given interval
        finalCoords.get(node).x = (leftX + rightX) / 2;

        // Assign to each son an interval proportional to its width
        var unitLen = (rightX - leftX) / subtreeWidth.get(node);
        var sonLeftX = leftX;
        var currentSons = sons.get(node);
        for (var i = 0; i < currentSons.length; i += 1) {
            computeFinalX(currentSons[i], sonLeftX, sonLeftX + unitLen * subtreeWidth.get(currentSons[i]));
            sonLeftX += unitLen * subtreeWidth.get(currentSons[i]);
        }
    };
    var computeFinalY = function computeFinalY() {
        // Calculate the depth of the lowest node of the tree
        var depth = 1;
        for (var i = 0; i < graph.nodes.length; i += 1) {
            depth = Math.max(depth, 1 + level.get(graph.nodes[i]));
        }

        // Calculate the space I can leave between two levels of nodes
        var levelDiff = void 0;
        if (depth > 1) {
            levelDiff = (box.height - marginUp - marginDown) / (depth - 1);
        } else {
            levelDiff = 0;
        }

        // Assign the y of every node proportional to its level
        for (var _i = 0; _i < graph.nodes.length; _i += 1) {
            var node = graph.nodes[_i];
            if (!finalCoords.has(node)) {
                finalCoords.set(node, {});
            }
            finalCoords.get(node).y = box.y + marginUp + levelDiff * level.get(node);
        }
    };

    // Simulate a DFS to build the tree
    if (startNode) {
        buildDfsTree(startNode);

        // Calculate the maximum number of vertices on any level
        // of a node's subtree
        computeSubtreeWidth(startNode);

        // Compute the final coordinates of the nodes
        computeFinalX(startNode, box.x, box.x + box.width);
    } else {
        var treeWidth = 0;
        var roots = [];
        for (var i = 0; i < graph.nodes.length; i += 1) {
            if (!visited.has(graph.nodes[i])) {
                buildDfsTree(graph.nodes[i]);

                computeSubtreeWidth(graph.nodes[i]);
                treeWidth += subtreeWidth.get(graph.nodes[i]);
                roots.push(graph.nodes[i]);
            }
        }
        var unitLen = box.width / treeWidth;
        var sonLeftX = box.x;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = roots[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var root = _step.value;

                var sonRightX = sonLeftX + unitLen * subtreeWidth.get(root);
                computeFinalX(root, sonLeftX, sonRightX);
                sonLeftX = sonRightX;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    computeFinalY();

    return finalCoords;
}

function computeDFSCoordsDirected(graph) {
    var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var box = graph.getBox();
    var finalCoords = new Map();
    var visited = new Set();
    var subtreeWidth = new Map();
    var level = new Map();
    var sons = new Map();
    target.nodeFathers = new Map();
    var marginUp = 30;
    var marginDown = 80;

    // Build the same tree as the DFS Player
    var buildDfsTree = function buildDfsTree(node) {
        var father = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

        if (father === -1) {
            level.set(node, 0);
        } else {
            level.set(node, level.get(father) + 1);
            target.nodeFathers.set(node, father);
        }
        sons.set(node, []);
        visited.add(node);
        var edges = node.getIncidentEdges();
        for (var i = 0; i < edges.length; i += 1) {
            if (edges[i].getTarget() === node) {
                continue;
            }
            var neighbour = edges[i].getTarget();
            if (!visited.has(neighbour)) {
                sons.get(node).push(neighbour);
                buildDfsTree(neighbour, node);
            }
        }
    };

    var computeSubtreeWidth = function computeSubtreeWidth(node) {
        subtreeWidth.set(node, 0);

        var currentSons = sons.get(node);
        for (var i = 0; i < currentSons.length; i += 1) {
            computeSubtreeWidth(currentSons[i]);
            subtreeWidth.set(node, subtreeWidth.get(node) + subtreeWidth.get(currentSons[i]));
        }
        if (subtreeWidth.get(node) === 0) {
            subtreeWidth.set(node, 1);
        }
    };
    var computeFinalX = function computeFinalX(node, leftX, rightX) {
        if (!finalCoords.has(node)) {
            finalCoords.set(node, {});
        }
        finalCoords.get(node).x = (leftX + rightX) / 2;

        var unitLen = (rightX - leftX) / subtreeWidth.get(node);
        var sonLeftX = leftX;
        var currentSons = sons.get(node);
        for (var i = 0; i < currentSons.length; i += 1) {
            computeFinalX(currentSons[i], sonLeftX, sonLeftX + unitLen * subtreeWidth.get(currentSons[i]));
            sonLeftX += unitLen * subtreeWidth.get(currentSons[i]);
        }
    };
    var computeFinalY = function computeFinalY() {
        var depth = 1;
        for (var i = 0; i < graph.nodes.length; i += 1) {
            depth = Math.max(depth, 1 + level.get(graph.nodes[i]));
        }
        var levelDiff = void 0;
        if (depth > 1) {
            levelDiff = (box.height - marginUp - marginDown) / (depth - 1);
        } else {
            levelDiff = 0;
        }
        for (var _i2 = 0; _i2 < graph.nodes.length; _i2 += 1) {
            var node = graph.nodes[_i2];
            if (!finalCoords.has(node)) {
                finalCoords.set(node, {});
            }
            finalCoords.get(node).y = box.y + marginUp + levelDiff * level.get(node);
        }
    };

    target.roots = [];
    var treeWidth = 0;
    for (var i = 0; i < graph.nodes.length; i += 1) {
        if (!visited.has(graph.nodes[i])) {
            target.roots.push(graph.nodes[i]);
            buildDfsTree(graph.nodes[i]);
        }
    }
    for (var _i3 = 0; _i3 < target.roots.length; _i3 += 1) {
        computeSubtreeWidth(target.roots[_i3]);
        treeWidth += subtreeWidth.get(target.roots[_i3]);
    }
    var unitLen = box.width / treeWidth;
    var sonLeftX = box.x;

    // Get the x coordinates of each root's subtree
    for (var _i4 = 0; _i4 < target.roots.length; _i4 += 1) {
        var sonRightX = sonLeftX + unitLen * subtreeWidth.get(target.roots[_i4]);
        computeFinalX(target.roots[_i4], sonLeftX, sonRightX);
        sonLeftX = sonRightX;
    }

    // Compute each node's y coordinate
    computeFinalY();

    return finalCoords;
}

var _dec$45, _class$99;

var GraphCodeEditor = function (_CodeEditor) {
    inherits(GraphCodeEditor, _CodeEditor);

    function GraphCodeEditor() {
        classCallCheck(this, GraphCodeEditor);
        return possibleConstructorReturn(this, (GraphCodeEditor.__proto__ || Object.getPrototypeOf(GraphCodeEditor)).apply(this, arguments));
    }

    createClass(GraphCodeEditor, [{
        key: "onDelayedMount",
        value: function onDelayedMount() {
            get(GraphCodeEditor.prototype.__proto__ || Object.getPrototypeOf(GraphCodeEditor.prototype), "onDelayedMount", this).call(this);
            this.getAce().renderer.setOption('showLineNumbers', false);
        }
    }]);
    return GraphCodeEditor;
}(CodeEditor);

var GraphInputPanel = function (_Panel) {
    inherits(GraphInputPanel, _Panel);

    function GraphInputPanel() {
        classCallCheck(this, GraphInputPanel);
        return possibleConstructorReturn(this, (GraphInputPanel.__proto__ || Object.getPrototypeOf(GraphInputPanel)).apply(this, arguments));
    }

    createClass(GraphInputPanel, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(GraphInputPanel.prototype.__proto__ || Object.getPrototypeOf(GraphInputPanel.prototype), "setOptions", this).call(this, options);
            this.nodes = new Map();
            this.edges = new Map();
        }
    }, {
        key: "getNodeString",
        value: function getNodeString(node) {
            return node.getLabel();
        }
    }, {
        key: "getEdgeString",
        value: function getEdgeString(edge) {
            return edge.getSource().getLabel() + " " + edge.getTarget().getLabel() + (edge.getLabel() ? " " + edge.getLabel() : "");
        }
    }, {
        key: "addNode",
        value: function addNode(node) {
            if (this.nodes.has(node)) {
                return;
            }
            var line = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.nodes.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var value = _step.value;
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = value[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var otherLine = _step4.value;

                            line = Math.max(otherLine + 1, line);
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.nodes.set(node, [line]);
            if (line === 0) {
                this.graphDataEditor.append(this.getNodeString(node) + "\n");
            } else {
                this.graphDataEditor.insertAtLine(line, "\n" + this.getNodeString(node));
            }
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.edges.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var edge = _step2.value;

                    if (this.edges.get(edge) >= line) {
                        this.edges.set(edge, this.edges.get(edge) + 1);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.nodes.keys()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var otherNode = _step3.value;

                    if (otherNode !== node) {
                        var lines = this.nodes.get(otherNode);
                        for (var i = 0; i < lines.length; i += 1) {
                            if (lines[i] >= line) {
                                lines[i] += 1;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.nodeCountEditor.setValue(this.graph.nodes.length.toString());
        }
    }, {
        key: "addEdge",
        value: function addEdge(edge) {
            var line = 0;
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.edges.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var value = _step5.value;

                    line = Math.max(line, value + 1);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.nodes.values()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var _value = _step6.value;
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;

                    try {
                        for (var _iterator7 = _value[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var otherLine = _step7.value;

                            line = Math.max(otherLine + 1, line);
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            this.edges.set(edge, line);
            this.graphDataEditor.append(this.getEdgeString(edge) + "\n");
        }
    }, {
        key: "deleteNode",
        value: function deleteNode(node) {
            if (!this.nodes.has(node)) {
                return;
            }
            var lines = this.nodes.get(node);
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = lines[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var line = _step8.value;
                    var _iteratorNormalCompletion9 = true;
                    var _didIteratorError9 = false;
                    var _iteratorError9 = undefined;

                    try {
                        for (var _iterator9 = this.edges.keys()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                            var edge = _step9.value;

                            if (this.edges.get(edge) >= line) {
                                this.edges.set(edge, this.edges.get(edge) - 1);
                            }
                        }
                    } catch (err) {
                        _didIteratorError9 = true;
                        _iteratorError9 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion9 && _iterator9.return) {
                                _iterator9.return();
                            }
                        } finally {
                            if (_didIteratorError9) {
                                throw _iteratorError9;
                            }
                        }
                    }

                    var _iteratorNormalCompletion10 = true;
                    var _didIteratorError10 = false;
                    var _iteratorError10 = undefined;

                    try {
                        for (var _iterator10 = this.nodes.keys()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                            var otherNode = _step10.value;

                            if (otherNode !== node) {
                                var otherNodeLines = this.nodes.get(otherNode);
                                for (var i = 0; i < otherNodeLines.length; i += 1) {
                                    if (otherNodeLines[i] >= line) {
                                        otherNodeLines[i] -= 1;
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError10 = true;
                        _iteratorError10 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion10 && _iterator10.return) {
                                _iterator10.return();
                            }
                        } finally {
                            if (_didIteratorError10) {
                                throw _iteratorError10;
                            }
                        }
                    }

                    this.graphDataEditor.removeLine(line);
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            this.nodes.delete(node);
            this.nodeCountEditor.setValue(this.graph.nodes.length.toString());
        }
    }, {
        key: "deleteEdge",
        value: function deleteEdge(edge) {
            if (!this.edges.has(edge)) {
                return;
            }
            var line = this.edges.get(edge);
            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
                for (var _iterator11 = this.edges.keys()[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var otherEdge = _step11.value;

                    if (this.edges.get(otherEdge) >= line) {
                        this.edges.set(otherEdge, this.edges.get(otherEdge) - 1);
                    }
                }
            } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion11 && _iterator11.return) {
                        _iterator11.return();
                    }
                } finally {
                    if (_didIteratorError11) {
                        throw _iteratorError11;
                    }
                }
            }

            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = undefined;

            try {
                for (var _iterator12 = this.nodes.values()[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                    var lines = _step12.value;

                    for (var i = 0; i < lines.length; i += 1) {
                        if (lines[i] >= line) {
                            lines[i] -= 1;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion12 && _iterator12.return) {
                        _iterator12.return();
                    }
                } finally {
                    if (_didIteratorError12) {
                        throw _iteratorError12;
                    }
                }
            }

            this.graphDataEditor.removeLine(line);
            this.edges.delete(edge);
        }
    }, {
        key: "changeNodeLabel",
        value: function changeNodeLabel(node) {
            var lines = this.nodes.get(node) || [];
            var _iteratorNormalCompletion13 = true;
            var _didIteratorError13 = false;
            var _iteratorError13 = undefined;

            try {
                for (var _iterator13 = lines[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                    var line = _step13.value;

                    this.graphDataEditor.replaceLine(line, this.getNodeString(node) + "\n");
                }
            } catch (err) {
                _didIteratorError13 = true;
                _iteratorError13 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion13 && _iterator13.return) {
                        _iterator13.return();
                    }
                } finally {
                    if (_didIteratorError13) {
                        throw _iteratorError13;
                    }
                }
            }

            var _iteratorNormalCompletion14 = true;
            var _didIteratorError14 = false;
            var _iteratorError14 = undefined;

            try {
                for (var _iterator14 = node.getIncidentEdges()[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                    var edge = _step14.value;

                    var edgeLine = this.edges.get(edge);
                    this.graphDataEditor.replaceLine(edgeLine, this.getEdgeString(edge) + "\n");
                }
            } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion14 && _iterator14.return) {
                        _iterator14.return();
                    }
                } finally {
                    if (_didIteratorError14) {
                        throw _iteratorError14;
                    }
                }
            }
        }
    }, {
        key: "changeEdgeLabel",
        value: function changeEdgeLabel(edge) {
            var line = this.edges.get(edge);
            if (!line) {
                return;
            }
            this.graphDataEditor.replaceLine(line, this.getEdgeString(edge) + "\n");
        }
    }, {
        key: "setNewData",
        value: function setNewData(data) {
            var _this3 = this;

            this.nodes.clear();
            this.edges.clear();
            var lines = data.split("\n");

            var getGraphData = function getGraphData() {
                var annotations = [];

                var userNodes = [];
                var userEdges = [];

                for (var index = 0; index < lines.length; index += 1) {
                    var dataString = lines[index];
                    var graphElements = void 0;
                    var sourceLabel = void 0,
                        targetLabel = void 0,
                        costLabel = void 0;
                    try {
                        graphElements = consoleTokenizer(dataString);
                    } catch (message) {
                        if (typeof message === "string") {
                            annotations.push({
                                row: index,
                                column: 1,
                                text: message,
                                type: "error"
                            });
                        }
                    }
                    if (graphElements == null) {
                        continue;
                    }
                    sourceLabel = graphElements.length >= 1 ? graphElements[0] : null;
                    targetLabel = graphElements.length >= 2 ? graphElements[1] : null;
                    costLabel = graphElements.length >= 3 ? graphElements[2] : "";

                    if (graphElements.length === 1) {
                        if (userNodes.indexOf(sourceLabel) === -1) {
                            userNodes.push(sourceLabel);
                        }
                    } else if (graphElements.length === 2 || graphElements.length === 3) {
                        // Self loops are not allowed
                        if (sourceLabel == targetLabel) {
                            continue;
                        }
                        // Add source label in user nodes set
                        if (userNodes.indexOf(sourceLabel) === -1) {
                            userNodes.push(sourceLabel);
                        }
                        // Add target label in user nodes set
                        if (userNodes.indexOf(targetLabel) === -1) {
                            userNodes.push(targetLabel);
                        }

                        // Insert the edge in edge array
                        userEdges.push({
                            source: sourceLabel,
                            target: targetLabel,
                            cost: costLabel
                        });
                    } else if (graphElements.length > 3) {
                        annotations.push({
                            row: index,
                            column: 1,
                            text: "No more than 4 elements allowed",
                            type: "error"
                        });
                    }
                }
                _this3.graphDataEditor.setAnnotations(annotations);

                return [userNodes, userEdges];
            };

            var deleteBadEdges = function deleteBadEdges(edges) {
                // Use a copy, as elements will be deleted from userEdges array to allow multiple edges support.
                var userEdgesCopy = edges.clone();

                // Find the graph edges that should be deleted
                for (var i = 0; i < _this3.graph.edges.length; i += 1) {
                    var edge = _this3.graph.edges[i];

                    var sourceLabel = edge.getSource().getLabel();
                    var targetLabel = edge.getTarget().getLabel();
                    var costLabel = edge.getLabel();
                    var edgeExists = false;

                    // Check if the edge exists and insert it in the bad edges array if it doesn't
                    for (var j = 0; j < userEdgesCopy.length; j += 1) {
                        if (sourceLabel == userEdgesCopy[j].source && targetLabel == userEdgesCopy[j].target && costLabel === userEdgesCopy[j].cost) {
                            edgeExists = true;
                            userEdgesCopy.splice(j, 1);
                            break;
                        }
                    }
                    if (!edgeExists) {
                        _this3.graph.removeEdge(edge);
                        i -= 1;
                    }
                }
            };

            var deleteBadNodes = function deleteBadNodes(nodes) {
                // Find the graph nodes that should be deleted
                for (var i = 0; i < _this3.graph.nodes.length; i += 1) {
                    var node = _this3.graph.nodes[i];
                    var nodeExists = false;

                    // Check if the node exists
                    for (var j = 0; j < nodes.length; j += 1) {
                        if (node.getLabel() == nodes[j]) {
                            nodeExists = true;
                            break;
                        }
                    }
                    if (!nodeExists) {
                        _this3.graph.removeNode(node);
                        i -= 1;
                    }
                }
            };

            var createNewNodes = function createNewNodes(nodes) {
                var _iteratorNormalCompletion15 = true;
                var _didIteratorError15 = false;
                var _iteratorError15 = undefined;

                try {
                    for (var _iterator15 = nodes[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                        var nodeString = _step15.value;

                        var nodeExists = false;
                        // Check if the node exists
                        var _iteratorNormalCompletion16 = true;
                        var _didIteratorError16 = false;
                        var _iteratorError16 = undefined;

                        try {
                            for (var _iterator16 = _this3.graph.nodes[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                                var node = _step16.value;

                                if (nodeString == node.getLabel()) {
                                    nodeExists = true;
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError16 = true;
                            _iteratorError16 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion16 && _iterator16.return) {
                                    _iterator16.return();
                                }
                            } finally {
                                if (_didIteratorError16) {
                                    throw _iteratorError16;
                                }
                            }
                        }

                        if (!nodeExists) {
                            _this3.graph.addNode(UI.createElement(GraphNode, { data: {
                                    label: nodeString
                                } }));
                        }
                    }
                } catch (err) {
                    _didIteratorError15 = true;
                    _iteratorError15 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion15 && _iterator15.return) {
                            _iterator15.return();
                        }
                    } finally {
                        if (_didIteratorError15) {
                            throw _iteratorError15;
                        }
                    }
                }
            };

            var createNewEdges = function createNewEdges(edges) {
                var edgeArrayCopy = _this3.graph.edges.clone();

                var _iteratorNormalCompletion17 = true;
                var _didIteratorError17 = false;
                var _iteratorError17 = undefined;

                try {
                    for (var _iterator17 = edges[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                        var edge = _step17.value;


                        // Check if the edge exists
                        var appears = false;
                        for (var i = 0; i < edgeArrayCopy.length; i += 1) {
                            if (edge.source == edgeArrayCopy[i].getSource().getLabel() && edge.target == edgeArrayCopy[i].getTarget().getLabel() && edge.cost == edgeArrayCopy[i].getLabel()) {
                                edgeArrayCopy.splice(i, 1);
                                appears = true;
                                break;
                            }
                        }
                        if (!appears) {
                            var sourceIndex = void 0,
                                targetIndex = void 0;
                            // Find index of the source
                            for (var _i = 0; _i < _this3.graph.nodes.length; _i += 1) {
                                if (_this3.graph.nodes[_i].getLabel() == edge.source) {
                                    sourceIndex = _i;
                                }
                                if (_this3.graph.nodes[_i].getLabel() == edge.target) {
                                    targetIndex = _i;
                                }
                            }
                            // Create the new edge
                            _this3.graph.addEdge(UI.createElement(GraphEdge, { data: {
                                    source: sourceIndex,
                                    target: targetIndex
                                },
                                label: edge.cost,
                                directed: _this3.graph.isDirected() }));
                        }
                    }
                } catch (err) {
                    _didIteratorError17 = true;
                    _iteratorError17 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion17 && _iterator17.return) {
                            _iterator17.return();
                        }
                    } finally {
                        if (_didIteratorError17) {
                            throw _iteratorError17;
                        }
                    }
                }
            };

            // Set the view mode to force to allow smooth creation/deletion of elements
            this.graph.enterDrawMode();

            var graphData = getGraphData(),
                nodes = void 0,
                edges = void 0;
            if (!graphData) {
                nodes = edges = [];
            } else {
                nodes = graphData[0];
                edges = graphData[1];
            }
            deleteBadEdges(edges);
            deleteBadNodes(nodes);
            createNewNodes(nodes);
            createNewEdges(edges);

            this.graph.removeListeners();
            this.graph.enterForceMode();

            // Update the node count input
            this.nodeCountEditor.setValue(this.graph.nodes.length.toString());

            // Recalculate the nodes and edges lines
            for (var i = 0; i < lines.length; i += 1) {
                var tokens = void 0;
                try {
                    tokens = consoleTokenizer(lines[i]);
                } catch (message) {
                    continue;
                }
                if (tokens.length === 0) {
                    continue;
                }
                if (tokens.length === 1) {
                    var _iteratorNormalCompletion18 = true;
                    var _didIteratorError18 = false;
                    var _iteratorError18 = undefined;

                    try {
                        for (var _iterator18 = this.graph.nodes[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                            var node = _step18.value;

                            if (node.getLabel().toString() == tokens[0]) {
                                if (!this.nodes.has(node)) {
                                    this.nodes.set(node, []);
                                }
                                this.nodes.get(node).push(i);
                            }
                        }
                    } catch (err) {
                        _didIteratorError18 = true;
                        _iteratorError18 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion18 && _iterator18.return) {
                                _iterator18.return();
                            }
                        } finally {
                            if (_didIteratorError18) {
                                throw _iteratorError18;
                            }
                        }
                    }
                } else {
                    var _iteratorNormalCompletion19 = true;
                    var _didIteratorError19 = false;
                    var _iteratorError19 = undefined;

                    try {
                        for (var _iterator19 = this.graph.edges[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
                            var edge = _step19.value;

                            if (tokens[0] != edge.getSource().getLabel()) {
                                continue;
                            }
                            if (tokens[1] != edge.getTarget().getLabel()) {
                                continue;
                            }
                            if (tokens.length === 3 && tokens[2] != edge.getLabel()) {
                                continue;
                            }
                            if (this.edges.has(edge)) {
                                continue;
                            }
                            this.edges.set(edge, i);
                            break;
                        }
                    } catch (err) {
                        _didIteratorError19 = true;
                        _iteratorError19 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion19 && _iterator19.return) {
                                _iterator19.return();
                            }
                        } finally {
                            if (_didIteratorError19) {
                                throw _iteratorError19;
                            }
                        }
                    }
                }
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.nodeCountEditor.setReadOnly(true);
            this.nodeCountEditor.setAceOptions({
                autoScrollEditorIntoView: false,
                highlightActiveLine: false
            });

            this.addListener("changeInput", function (data) {
                _this4._selfChanged = true;
                switch (data.type) {
                    case "newNode":
                        _this4.addNode(data.node);
                        break;
                    case "newEdge":
                        _this4.addEdge(data.edge);
                        break;
                    case "deleteNode":
                        var _iteratorNormalCompletion20 = true;
                        var _didIteratorError20 = false;
                        var _iteratorError20 = undefined;

                        try {
                            for (var _iterator20 = data.node.getIncidentEdges()[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                                var edge = _step20.value;

                                _this4.deleteEdge(edge);
                            }
                        } catch (err) {
                            _didIteratorError20 = true;
                            _iteratorError20 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion20 && _iterator20.return) {
                                    _iterator20.return();
                                }
                            } finally {
                                if (_didIteratorError20) {
                                    throw _iteratorError20;
                                }
                            }
                        }

                        _this4.deleteNode(data.node);
                        break;
                    case "deleteEdge":
                        _this4.deleteEdge(data.edge);
                        break;
                    case "changeNodeLabel":
                        _this4.changeNodeLabel(data.node);
                        break;
                    case "changeEdgeLabel":
                        _this4.changeEdgeLabel(data.edge);
                        break;
                }
                _this4._selfChanged = false;
            });

            this._timeout = null;
            this.graphDataEditor.addAceSessionChangeListener(function () {
                /// If the change is created by editing the graph
                if (_this4._selfChanged) {
                    return;
                }
                _this4.graph.pauseForce();
                if (_this4._timeout) {
                    clearTimeout(_this4._timeout);
                }
                _this4._timeout = setTimeout(function () {
                    _this4.setNewData(_this4.graphDataEditor.getValue());
                    _this4.graph.unpauseForce();
                    _this4._timeout = null;
                }, 500);
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "label",
                null,
                " Node Count: "
            ), UI.createElement(GraphCodeEditor, { ref: "nodeCountEditor", value: "", style: { width: "100%", height: "17px" } }), UI.createElement(
                "label",
                null,
                " Graph Data: "
            ), UI.createElement(GraphCodeEditor, { ref: "graphDataEditor", value: "", style: { width: "100%", height: "300px" } })];
        }
    }]);
    return GraphInputPanel;
}(Panel);

var GraphEditorLegend = (_dec$45 = registerStyle(DropdownListStyle), _dec$45(_class$99 = function (_Panel2) {
    inherits(GraphEditorLegend, _Panel2);

    function GraphEditorLegend() {
        classCallCheck(this, GraphEditorLegend);
        return possibleConstructorReturn(this, (GraphEditorLegend.__proto__ || Object.getPrototypeOf(GraphEditorLegend)).apply(this, arguments));
    }

    createClass(GraphEditorLegend, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { ref: "Force" },
                UI.createElement(
                    "h4",
                    null,
                    "Force mode"
                ),
                UI.createElement(
                    "p",
                    null,
                    "In this mode, there is a gravitation pull that acts on the nodes and keeps them in the center of the drawing area. Also, the nodes exert a force on each other, making the whole graph look and act like real objects in space."
                ),
                UI.createElement(
                    "p",
                    null,
                    "Ways you can interact with the graph:"
                ),
                UI.createElement(
                    "ul",
                    null,
                    UI.createElement(
                        "li",
                        null,
                        "Nodes support drag and drop."
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "At the end of the drop the node becomes fixed."
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "You can fix/unfix a node by simple click."
                    )
                )
            ), UI.createElement(
                "div",
                { ref: "Draw" },
                UI.createElement(
                    "h4",
                    null,
                    "Draw mode"
                ),
                UI.createElement(
                    "p",
                    null,
                    "This mode allows you to draw new nodes and/or edges."
                ),
                UI.createElement(
                    "p",
                    null,
                    "Ways you can interact with the graph:"
                ),
                UI.createElement(
                    "ul",
                    null,
                    UI.createElement(
                        "li",
                        null,
                        "Clicking anywhere on the graph canvas creates a new node."
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "Clicking on a node starts the drawing process of a new edge."
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "To cancel the new edge, click anywhere on the canvas."
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "To finish drawing the edge, click on the desired neighbour."
                    )
                )
            ), UI.createElement(
                "div",
                { ref: "Edit" },
                UI.createElement(
                    "h4",
                    null,
                    "Edit mode"
                ),
                UI.createElement(
                    "p",
                    null,
                    "This mode allows you to edit nodes' labels and edges' costs."
                ),
                UI.createElement(
                    "p",
                    null,
                    "Ways you can interact with the graph:"
                ),
                UI.createElement(
                    "ul",
                    null,
                    UI.createElement(
                        "li",
                        null,
                        "Click on a node label to change it. Now you can start typing in order to edit the label. Click anywhere or press Enter to finish editing."
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "Click on an edge to change it's cost. Now you can start typing in order to edit the cost. Click anywhere or press Enter to finish editing."
                    )
                )
            ), UI.createElement(
                "div",
                { ref: "Delete" },
                UI.createElement(
                    "h4",
                    null,
                    "Delete mode"
                ),
                UI.createElement(
                    "p",
                    null,
                    "This mode allows you to delete nodes and/or edges."
                ),
                UI.createElement(
                    "p",
                    null,
                    "Ways you can interact with the graph:"
                ),
                UI.createElement(
                    "ul",
                    null,
                    UI.createElement(
                        "li",
                        null,
                        "Click on a node to delete it"
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "Click on an edge to delete it."
                    )
                )
            ), UI.createElement(
                "div",
                { ref: "Config", style: { "padding-left": "20px" } },
                UI.createElement(
                    "div",
                    { style: { "margin-top": "20px" } },
                    UI.createElement(
                        "div",
                        { HTMLtitle: "Set the size of nodes",
                            className: "fa fa-question-circle", style: { "margin-right": "3px" } },
                        " "
                    ),
                    UI.createElement(
                        "div",
                        { style: { width: "50%", display: "inline-block" } },
                        "Node radius:"
                    ),
                    UI.createElement(NumberInput, { ref: "nodeSize", min: "3", max: "25", value: "19",
                        style: { display: "inline-block", width: "30%", "padding-left": "3px" } })
                ),
                UI.createElement(
                    "div",
                    { style: { "margin-top": "20px" } },
                    UI.createElement(
                        "div",
                        { HTMLtitle: "How much nodes connected by an edge attract each other",
                            className: "fa fa-question-circle", style: { "margin-right": "3px" } },
                        " "
                    ),
                    UI.createElement(
                        "div",
                        { style: { width: "50%", display: "inline-block" } },
                        "Edge ideal length:"
                    ),
                    UI.createElement(NumberInput, { ref: "edgeIdealLength", min: "40", max: "200", value: "140",
                        style: { display: "inline-block", width: "30%", "padding-left": "3px" } })
                ),
                UI.createElement(
                    "div",
                    { style: { "margin-top": "20px" } },
                    UI.createElement(
                        "div",
                        { style: { width: "50%", display: "inline-block" } },
                        "Node background:"
                    ),
                    UI.createElement(Select, { ref: "nodeFillSelect", options: ["white", "red", "blue", "black", "purple", "orange", "green"] })
                ),
                UI.createElement(
                    "div",
                    { style: { "margin-top": "20px" } },
                    UI.createElement(
                        "div",
                        { style: { width: "50%", display: "inline-block" } },
                        "Node color:"
                    ),
                    UI.createElement(Select, { ref: "nodeStrokeSelect", selected: "black",
                        options: ["white", "red", "blue", "black", "purple", "orange", "green"] })
                ),
                UI.createElement(
                    "div",
                    { style: { "margin-top": "20px" } },
                    UI.createElement(
                        "div",
                        { style: { width: "50%", display: "inline-block" } },
                        "Edge color:"
                    ),
                    UI.createElement(Select, { ref: "edgeColorSelect", selected: "black",
                        options: ["white", "red", "blue", "black", "purple", "orange", "green"] })
                ),
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        Button,
                        { ref: "runCommandButton", level: Level.INFO, style: { "border-radius": "0" } },
                        "Run Command"
                    ),
                    UI.createElement(
                        "div",
                        { ref: "commandsList", style: { width: "8.2em" }, className: this.styleSheet.default + " hidden" },
                        UI.createElement(
                            "div",
                            { ref: "fixAllNodesButton" },
                            "Fix all nodes"
                        ),
                        UI.createElement(
                            "div",
                            { ref: "unfixAllNodesButton" },
                            "Unfix all nodes"
                        ),
                        UI.createElement(
                            "div",
                            { ref: "treeButton" },
                            "Arrange as tree"
                        )
                    )
                )
            )];
        }
    }, {
        key: "showMode",
        value: function showMode() {
            this.Force.hide();
            this.Draw.hide();
            this.Edit.hide();
            this.Delete.hide();
            this.Config.hide();
            this[this.options.viewMode].show();
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.showMode();
            this.addListener("changeLegend", function (value) {
                _this6.options.viewMode = value;
                _this6.showMode();
            });
            this.nodeSize.addNodeListener("change", function () {
                _this6.graph.dispatch("changeNodeRadius", parseInt(_this6.nodeSize.getValue()));
            });
            this.edgeIdealLength.addNodeListener("change", function () {
                _this6.graph.dispatch("changeEdgeIdealLength", parseInt(_this6.edgeIdealLength.getValue()));
            });
            this.nodeFillSelect.addNodeListener("change", function () {
                _this6.graph.dispatch("changeNodeFill", _this6.nodeFillSelect.get());
            });
            this.nodeStrokeSelect.addNodeListener("change", function () {
                _this6.graph.dispatch("changeNodeStroke", _this6.nodeStrokeSelect.get());
            });
            this.edgeColorSelect.addNodeListener("change", function () {
                _this6.graph.dispatch("changeEdgeColor", _this6.edgeColorSelect.get());
            });

            this.runCommandButton.addClickListener(function () {
                _this6.commandsList.toggleClass("hidden");
            });

            this.treeButton.addClickListener(function () {
                _this6.graph.dispatch("viewTree");
            });
            this.fixAllNodesButton.addClickListener(function () {
                var _iteratorNormalCompletion21 = true;
                var _didIteratorError21 = false;
                var _iteratorError21 = undefined;

                try {
                    for (var _iterator21 = _this6.graph.nodes[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
                        var node = _step21.value;

                        node.setFixed(true);
                    }
                } catch (err) {
                    _didIteratorError21 = true;
                    _iteratorError21 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion21 && _iterator21.return) {
                            _iterator21.return();
                        }
                    } finally {
                        if (_didIteratorError21) {
                            throw _iteratorError21;
                        }
                    }
                }
            });
            this.unfixAllNodesButton.addClickListener(function () {
                var _iteratorNormalCompletion22 = true;
                var _didIteratorError22 = false;
                var _iteratorError22 = undefined;

                try {
                    for (var _iterator22 = _this6.graph.nodes[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
                        var node = _step22.value;

                        node.setFixed(false);
                    }
                } catch (err) {
                    _didIteratorError22 = true;
                    _iteratorError22 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion22 && _iterator22.return) {
                            _iterator22.return();
                        }
                    } finally {
                        if (_didIteratorError22) {
                            throw _iteratorError22;
                        }
                    }
                }

                _this6.graph.runForces();
            });
        }
    }]);
    return GraphEditorLegend;
}(Panel)) || _class$99);

var EditableGraph = function (_Graph) {
    inherits(EditableGraph, _Graph);

    function EditableGraph() {
        classCallCheck(this, EditableGraph);
        return possibleConstructorReturn(this, (EditableGraph.__proto__ || Object.getPrototypeOf(EditableGraph)).apply(this, arguments));
    }

    createClass(EditableGraph, [{
        key: "setOptions",
        value: function setOptions(options) {
            options.nodeRadius = GraphNode.prototype.getDefaultOptions().circleAttr.radius;
            get(EditableGraph.prototype.__proto__ || Object.getPrototypeOf(EditableGraph.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "removeListeners",
        value: function removeListeners() {
            var _iteratorNormalCompletion23 = true;
            var _didIteratorError23 = false;
            var _iteratorError23 = undefined;

            try {
                for (var _iterator23 = this.nodes[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
                    var node = _step23.value;

                    node.removeClickListener(node.click);
                    if (this.mode === "Edit" || this.mode === "Draw") {
                        node.addClickListener(node._fixNodeCallback);
                    }
                }
            } catch (err) {
                _didIteratorError23 = true;
                _iteratorError23 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion23 && _iterator23.return) {
                        _iterator23.return();
                    }
                } finally {
                    if (_didIteratorError23) {
                        throw _iteratorError23;
                    }
                }
            }

            var _iteratorNormalCompletion24 = true;
            var _didIteratorError24 = false;
            var _iteratorError24 = undefined;

            try {
                for (var _iterator24 = this.edges[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                    var edge = _step24.value;

                    edge.removeClickListener(edge.click);
                }
            } catch (err) {
                _didIteratorError24 = true;
                _iteratorError24 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion24 && _iterator24.return) {
                        _iterator24.return();
                    }
                } finally {
                    if (_didIteratorError24) {
                        throw _iteratorError24;
                    }
                }
            }

            if (this.mode === "Draw") {
                this.parent.removeClickListener(this.parent.click);
            }
        }
    }, {
        key: "enterForceMode",
        value: function enterForceMode() {
            this.unpauseForce();
            this.mode = "Force";
        }
    }, {
        key: "enterDrawMode",
        value: function enterDrawMode() {
            var _this8 = this;

            this.mode = "Draw";
            this.pauseForce();

            var nodeClickFunc = function nodeClickFunc(node) {
                var _iteratorNormalCompletion25 = true;
                var _didIteratorError25 = false;
                var _iteratorError25 = undefined;

                try {
                    for (var _iterator25 = _this8.nodes[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
                        var otherNode = _step25.value;

                        otherNode.removeClickListener(otherNode.click);
                    }
                    // start an edge draw
                } catch (err) {
                    _didIteratorError25 = true;
                    _iteratorError25 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion25 && _iterator25.return) {
                            _iterator25.return();
                        }
                    } finally {
                        if (_didIteratorError25) {
                            throw _iteratorError25;
                        }
                    }
                }

                var line = UI.createElement(SVG.Line, { x1: node.x, x2: node.x, y1: node.y, y2: node.y });
                line.mount(_this8.parent, _this8.node);

                var offsets = _this8.parent.node.getBoundingClientRect();
                var moveLine = function moveLine(event) {
                    if (line.node) {
                        line.setAttribute("x2", Device.getEventX(event) - offsets.left);
                        line.setAttribute("y2", Device.getEventY(event) - offsets.top);
                    }
                };
                window.addEventListener("mousemove", moveLine);

                var finishEdgeDraw = function finishEdgeDraw(event) {
                    var _iteratorNormalCompletion26 = true;
                    var _didIteratorError26 = false;
                    var _iteratorError26 = undefined;

                    try {
                        for (var _iterator26 = _this8.nodes[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
                            var target = _step26.value;

                            if (target !== node && (event.target === target.circle.node || event.target === target.label.node)) {
                                var edge = _this8.addEdge(UI.createElement(GraphEdge, { data: { source: _this8.nodes.indexOf(node),
                                        target: _this8.nodes.indexOf(target) }, directed: _this8.isDirected() }));
                                _this8.dispatch("changeInput", {
                                    type: "newEdge",
                                    edge: edge
                                });
                                break;
                            }
                        }
                    } catch (err) {
                        _didIteratorError26 = true;
                        _iteratorError26 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion26 && _iterator26.return) {
                                _iterator26.return();
                            }
                        } finally {
                            if (_didIteratorError26) {
                                throw _iteratorError26;
                            }
                        }
                    }

                    _this8.parent.removeClickListener(finishEdgeDraw);
                    window.removeEventListener("mousemove", moveLine);
                    line.destroyNode();
                    var _iteratorNormalCompletion27 = true;
                    var _didIteratorError27 = false;
                    var _iteratorError27 = undefined;

                    try {
                        for (var _iterator27 = _this8.nodes[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
                            var otherNode = _step27.value;

                            otherNode.addClickListener(otherNode.click);
                        }
                    } catch (err) {
                        _didIteratorError27 = true;
                        _iteratorError27 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion27 && _iterator27.return) {
                                _iterator27.return();
                            }
                        } finally {
                            if (_didIteratorError27) {
                                throw _iteratorError27;
                            }
                        }
                    }
                };
                _this8.parent.addClickListener(finishEdgeDraw);
            };

            this.parent.click = function (event) {
                if (event.target !== _this8.parent.node) {
                    return;
                }
                var offsets = _this8.parent.node.getBoundingClientRect();
                var node = _this8.addNode(UI.createElement(GraphNode, { data: {
                        center: {
                            x: Device.getEventX(event) - offsets.left,
                            y: Device.getEventY(event) - offsets.top
                        },
                        label: _this8.getNextLabel()
                    }
                }));
                node.removeClickListener(node._fixNodeCallback);
                node.click = function () {
                    nodeClickFunc(node);
                };
                node.addClickListener(node.click);

                _this8.dispatch("changeInput", {
                    type: "newNode",
                    node: node
                });
            };
            this.parent.addClickListener(this.parent.click);
            var _iteratorNormalCompletion28 = true;
            var _didIteratorError28 = false;
            var _iteratorError28 = undefined;

            try {
                var _loop = function _loop() {
                    var node = _step28.value;

                    node.removeClickListener(node._fixNodeCallback);
                    node.click = function () {
                        nodeClickFunc(node);
                    };
                    node.addClickListener(node.click);
                };

                for (var _iterator28 = this.nodes[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError28 = true;
                _iteratorError28 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion28 && _iterator28.return) {
                        _iterator28.return();
                    }
                } finally {
                    if (_didIteratorError28) {
                        throw _iteratorError28;
                    }
                }
            }
        }
    }, {
        key: "enterEditMode",
        value: function enterEditMode() {
            var _this9 = this;

            this.mode = "Edit";
            this.pauseForce();
            var _iteratorNormalCompletion29 = true;
            var _didIteratorError29 = false;
            var _iteratorError29 = undefined;

            try {
                var _loop2 = function _loop2() {
                    var node = _step29.value;

                    node.click = function () {
                        var oldLabel = node.getLabel();
                        node.setLabel("");
                        _this9.dispatch("needTextArea", {
                            coords: node.getCenter(),
                            initialValue: oldLabel,
                            target: node
                        });
                        node.addListener("doneEditing", function (value) {
                            var _iteratorNormalCompletion31 = true;
                            var _didIteratorError31 = false;
                            var _iteratorError31 = undefined;

                            try {
                                for (var _iterator31 = _this9.nodes[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
                                    var otherNode = _step31.value;

                                    if (otherNode !== node && otherNode.getLabel() == value) {
                                        value = _this9.getNextLabel();
                                        break;
                                    }
                                }
                            } catch (err) {
                                _didIteratorError31 = true;
                                _iteratorError31 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion31 && _iterator31.return) {
                                        _iterator31.return();
                                    }
                                } finally {
                                    if (_didIteratorError31) {
                                        throw _iteratorError31;
                                    }
                                }
                            }

                            node.setLabel(value);
                            _this9.dispatch("changeInput", {
                                type: "changeNodeLabel",
                                node: node
                            });
                        });
                    };
                    node.addClickListener(node.click);
                    node.removeClickListener(node._fixNodeCallback);
                };

                for (var _iterator29 = this.nodes[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
                    _loop2();
                }
            } catch (err) {
                _didIteratorError29 = true;
                _iteratorError29 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion29 && _iterator29.return) {
                        _iterator29.return();
                    }
                } finally {
                    if (_didIteratorError29) {
                        throw _iteratorError29;
                    }
                }
            }

            var _iteratorNormalCompletion30 = true;
            var _didIteratorError30 = false;
            var _iteratorError30 = undefined;

            try {
                var _loop3 = function _loop3() {
                    var edge = _step30.value;

                    edge.click = function (event) {
                        event.stopPropagation();
                        event.preventDefault();
                        if (edge._clicked) {
                            return;
                        }
                        edge._clicked = true;
                        setTimeout(function () {
                            edge._clicked = false;
                        }, 20);
                        var oldLabel = edge.getLabel() || "";
                        edge.setLabel("");
                        _this9.dispatch("needTextArea", {
                            coords: { x: edge.costLabel.getX(), y: edge.costLabel.getY() },
                            initialValue: oldLabel,
                            target: edge
                        });
                        edge.addListener("doneEditing", function (value) {
                            edge.setLabel(value);
                            _this9.dispatch("changeInput", {
                                type: "changeEdgeLabel",
                                edge: edge
                            });
                        });
                    };
                    edge.addClickListener(edge.click);
                };

                for (var _iterator30 = this.edges[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
                    _loop3();
                }
            } catch (err) {
                _didIteratorError30 = true;
                _iteratorError30 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion30 && _iterator30.return) {
                        _iterator30.return();
                    }
                } finally {
                    if (_didIteratorError30) {
                        throw _iteratorError30;
                    }
                }
            }
        }
    }, {
        key: "enterDeleteMode",
        value: function enterDeleteMode() {
            var _this10 = this;

            this.mode = "Delete";
            this.pauseForce();
            var _iteratorNormalCompletion32 = true;
            var _didIteratorError32 = false;
            var _iteratorError32 = undefined;

            try {
                var _loop4 = function _loop4() {
                    var node = _step32.value;

                    node.click = function () {
                        _this10.dispatch("changeInput", {
                            type: "deleteNode",
                            node: node
                        });
                        _this10.removeNode(node);
                    };
                    node.addClickListener(node.click);
                };

                for (var _iterator32 = this.nodes[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                    _loop4();
                }
            } catch (err) {
                _didIteratorError32 = true;
                _iteratorError32 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion32 && _iterator32.return) {
                        _iterator32.return();
                    }
                } finally {
                    if (_didIteratorError32) {
                        throw _iteratorError32;
                    }
                }
            }

            var _iteratorNormalCompletion33 = true;
            var _didIteratorError33 = false;
            var _iteratorError33 = undefined;

            try {
                var _loop5 = function _loop5() {
                    var edge = _step33.value;

                    edge.click = function () {
                        _this10.dispatch("changeInput", {
                            type: "deleteEdge",
                            edge: edge
                        });
                        _this10.removeEdge(edge);
                    };
                    edge.addClickListener(edge.click);
                };

                for (var _iterator33 = this.edges[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                    _loop5();
                }
            } catch (err) {
                _didIteratorError33 = true;
                _iteratorError33 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion33 && _iterator33.return) {
                        _iterator33.return();
                    }
                } finally {
                    if (_didIteratorError33) {
                        throw _iteratorError33;
                    }
                }
            }
        }
    }, {
        key: "dispatchInitialGraphData",
        value: function dispatchInitialGraphData() {
            var _iteratorNormalCompletion34 = true;
            var _didIteratorError34 = false;
            var _iteratorError34 = undefined;

            try {
                for (var _iterator34 = this.nodes[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
                    var _node = _step34.value;

                    this.dispatch("changeInput", {
                        type: "newNode",
                        node: _node
                    });
                }
            } catch (err) {
                _didIteratorError34 = true;
                _iteratorError34 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion34 && _iterator34.return) {
                        _iterator34.return();
                    }
                } finally {
                    if (_didIteratorError34) {
                        throw _iteratorError34;
                    }
                }
            }

            var _iteratorNormalCompletion35 = true;
            var _didIteratorError35 = false;
            var _iteratorError35 = undefined;

            try {
                for (var _iterator35 = this.edges[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
                    var _edge = _step35.value;

                    this.dispatch("changeInput", {
                        type: "newEdge",
                        edge: _edge
                    });
                }
            } catch (err) {
                _didIteratorError35 = true;
                _iteratorError35 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion35 && _iterator35.return) {
                        _iterator35.return();
                    }
                } finally {
                    if (_didIteratorError35) {
                        throw _iteratorError35;
                    }
                }
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            get(EditableGraph.prototype.__proto__ || Object.getPrototypeOf(EditableGraph.prototype), "onMount", this).call(this);
            this.addListener("resize", function () {
                var oldHeight = _this11.getBox().height,
                    oldWidth = _this11.getBox().width;
                _this11.setBox({
                    x: 20,
                    y: 20,
                    height: _this11.parent.getHeight() - 40,
                    width: _this11.parent.getWidth() - 40
                });
                _this11.options.gravityCenterXPercentage = 0.5;
                _this11.options.gravityCenterYPercentage = 0.5;
                _this11.options.gravityCenter = {
                    x: _this11.parent.getWidth() / 2,
                    y: _this11.parent.getHeight() / 2
                };
                var _iteratorNormalCompletion36 = true;
                var _didIteratorError36 = false;
                var _iteratorError36 = undefined;

                try {
                    for (var _iterator36 = _this11.nodes[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {
                        var _node2 = _step36.value;

                        _node2.setCenter({
                            x: _node2.getCenter().x * _this11.getBox().width / oldWidth,
                            y: _node2.getCenter().y * _this11.getBox().height / oldHeight
                        });
                    }
                } catch (err) {
                    _didIteratorError36 = true;
                    _iteratorError36 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion36 && _iterator36.return) {
                            _iterator36.return();
                        }
                    } finally {
                        if (_didIteratorError36) {
                            throw _iteratorError36;
                        }
                    }
                }
            });

            this.enterForceMode();
            this.addListener("changeViewMode", function (view) {
                _this11.removeListeners();
                switch (view) {
                    case "Force":
                        _this11.enterForceMode();
                        break;
                    case "Draw":
                        _this11.enterDrawMode();
                        break;
                    case "Edit":
                        _this11.enterEditMode();
                        break;
                    case "Delete":
                        _this11.enterDeleteMode();
                }
            });
            this.addListener("changeDirected", function (value) {
                if (value === "directed") {
                    _this11.setDirected(true);
                } else {
                    _this11.setDirected(false);
                }
            });
            this.addListener("changeIndexType", function (value) {
                _this11.options.indexType = value;
                _this11.populateNodeData();
                for (var i = 0; i < _this11.nodes.length; i += 1) {
                    _this11.nodes[i].setLabel(_this11.options.nodes[i].label);
                    _this11.dispatch("changeInput", {
                        type: "changeNodeLabel",
                        node: _this11.nodes[i]
                    });
                }
            });

            this.addListener("changeNodeRadius", function (value) {
                value = Math.max(value, 3);
                value = Math.min(value, 30);
                _this11.setNodeRadius(value);
            });
            this.addListener("changeEdgeIdealLength", function (value) {
                value = Math.max(value, 40);
                _this11.setIdealEdgeDistance(value);
            });
            this.addListener("changeNodeFill", function (value) {
                _this11.options.nodeFill = value;
                var _iteratorNormalCompletion37 = true;
                var _didIteratorError37 = false;
                var _iteratorError37 = undefined;

                try {
                    for (var _iterator37 = _this11.nodes[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {
                        var _node3 = _step37.value;

                        _node3.setInnerColor(value);
                    }
                } catch (err) {
                    _didIteratorError37 = true;
                    _iteratorError37 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion37 && _iterator37.return) {
                            _iterator37.return();
                        }
                    } finally {
                        if (_didIteratorError37) {
                            throw _iteratorError37;
                        }
                    }
                }
            });
            this.addListener("changeNodeStroke", function (value) {
                _this11.options.nodeStroke = value;
                var _iteratorNormalCompletion38 = true;
                var _didIteratorError38 = false;
                var _iteratorError38 = undefined;

                try {
                    for (var _iterator38 = _this11.nodes[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {
                        var _node4 = _step38.value;

                        _node4.setColor(value);
                    }
                } catch (err) {
                    _didIteratorError38 = true;
                    _iteratorError38 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion38 && _iterator38.return) {
                            _iterator38.return();
                        }
                    } finally {
                        if (_didIteratorError38) {
                            throw _iteratorError38;
                        }
                    }
                }
            });
            this.addListener("changeEdgeColor", function (value) {
                _this11.options.edgeColor = value;
                var _iteratorNormalCompletion39 = true;
                var _didIteratorError39 = false;
                var _iteratorError39 = undefined;

                try {
                    for (var _iterator39 = _this11.edges[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {
                        var _edge2 = _step39.value;

                        _edge2.setColor(value);
                    }
                } catch (err) {
                    _didIteratorError39 = true;
                    _iteratorError39 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion39 && _iterator39.return) {
                            _iterator39.return();
                        }
                    } finally {
                        if (_didIteratorError39) {
                            throw _iteratorError39;
                        }
                    }
                }
            });

            this.addListener("viewTree", function () {
                var coords = _this11.getDFSCoords();
                var _iteratorNormalCompletion40 = true;
                var _didIteratorError40 = false;
                var _iteratorError40 = undefined;

                try {
                    for (var _iterator40 = _this11.nodes[Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {
                        var _node5 = _step40.value;

                        _node5.setFixed(true);
                        _node5.setCenter(coords.get(_node5));
                    }
                } catch (err) {
                    _didIteratorError40 = true;
                    _iteratorError40 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion40 && _iterator40.return) {
                            _iterator40.return();
                        }
                    } finally {
                        if (_didIteratorError40) {
                            throw _iteratorError40;
                        }
                    }
                }
            });
        }
    }, {
        key: "getDFSCoords",
        value: function getDFSCoords() {
            if (this.isDirected()) {
                return computeDFSCoordsDirected(this);
            }
            return computeDFSCoordsUndirected(this);
        }
    }, {
        key: "setNodeRadius",
        value: function setNodeRadius(value) {
            this.options.nodeRadius = value;
            var _iteratorNormalCompletion41 = true;
            var _didIteratorError41 = false;
            var _iteratorError41 = undefined;

            try {
                for (var _iterator41 = this.nodes[Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {
                    var _node6 = _step41.value;

                    _node6.setRadius(value);
                }
            } catch (err) {
                _didIteratorError41 = true;
                _iteratorError41 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion41 && _iterator41.return) {
                        _iterator41.return();
                    }
                } finally {
                    if (_didIteratorError41) {
                        throw _iteratorError41;
                    }
                }
            }
        }
    }, {
        key: "setIdealEdgeDistance",
        value: function setIdealEdgeDistance(value) {
            this.options.idealEdgeDistance = value;
            this.runForces();
        }
    }, {
        key: "getNextLabel",
        value: function getNextLabel() {
            var v = [];
            var _iteratorNormalCompletion42 = true;
            var _didIteratorError42 = false;
            var _iteratorError42 = undefined;

            try {
                for (var _iterator42 = this.nodes[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {
                    var _node7 = _step42.value;

                    v.push(parseInt(_node7.getLabel()));
                }
            } catch (err) {
                _didIteratorError42 = true;
                _iteratorError42 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion42 && _iterator42.return) {
                        _iterator42.return();
                    }
                } finally {
                    if (_didIteratorError42) {
                        throw _iteratorError42;
                    }
                }
            }

            var start = 1;
            if (this.getIndexType() === "0") {
                start = 0;
            }
            for (var i = start;; i += 1) {
                if (v.indexOf(i) === -1) {
                    return i;
                }
            }
        }
    }]);
    return EditableGraph;
}(Graph);

var GraphEditor = function (_UIElement) {
    inherits(GraphEditor, _UIElement);

    function GraphEditor() {
        classCallCheck(this, GraphEditor);
        return possibleConstructorReturn(this, (GraphEditor.__proto__ || Object.getPrototypeOf(GraphEditor)).apply(this, arguments));
    }

    createClass(GraphEditor, [{
        key: "onMount",
        value: function onMount() {
            var _this13 = this;

            setTimeout(function () {
                _this13.resize(window.innerHeight - 200, window.innerWidth * 80 / 100 - 700);
                // dispatching the original graph data
                _this13.graph.dispatchInitialGraphData();
            }, 0);

            window.addEventListener("resize", function () {
                _this13.resize(window.innerHeight - 200, window.innerWidth * 80 / 100 - 700);
            });

            this.inputPanel.graph = this.graph;
            this.editorLegend.graph = this.graph;

            // toggle buttons (Directed/Undirected, IndexType, View Mode)
            this.toggleDirected.addListener("setIndex", function (event) {
                _this13.graph.dispatch("changeDirected", event.value.toLocaleLowerCase());
            });

            this.toggleIndexType.addListener("setIndex", function (event) {
                if (event.value === "0-index") {
                    event.value = "0";
                } else if (event.value === "1-index") {
                    event.value = "1";
                } else if (event.value === "Custom Labels") {
                    event.value = "custom";
                }
                _this13.graph.dispatch("changeIndexType", event.value);
            });

            this.toggleViewMode.addListener("setIndex", function (event) {
                _this13.editorLegend.dispatch("changeLegend", event.value);
                if (event.value === "Config") {
                    event.value = "Force";
                }
                _this13.graph.dispatch("changeViewMode", event.value);
            });

            // in edit mode, the graph may request a text area
            // since the SVG cannot have a text input child
            // the text area must come from here
            this.graph.addListener("needTextArea", function (data) {
                if (_this13._editing) {
                    _this13._editTarget.dispatch("doneEditing", _this13.textArea.getValue());
                }
                _this13._editing = true;
                _this13._editTarget = data.target;
                _this13.textArea.setStyle("display", "inline");
                _this13.textArea.setStyle("left", data.coords.x - 10 + "px");
                _this13.textArea.setStyle("top", data.coords.y - 10 + "px");
                _this13.textArea.setValue(data.initialValue);
                _this13.textArea.node.focus();
                _this13.textArea.node.select();
                var finishEvent = function finishEvent() {
                    data.target.dispatch("doneEditing", _this13.textArea.getValue());
                    _this13.textArea.setStyle("display", "none");
                    _this13.textArea.removeNodeListener("keypress", keypressEventWrapper);
                    window.removeEventListener("click", finishEvent);
                    _this13._editing = false;
                };
                var keypressEventWrapper = function keypressEventWrapper(event) {
                    if (event.keyCode === 13) {
                        finishEvent();
                    }
                };
                _this13.textArea.addNodeListener("keypress", keypressEventWrapper);
                window.addEventListener("click", finishEvent);
            });
            // This is so the window listeners do not trigger
            this.textArea.addClickListener(function (event) {
                event.stopPropagation();
            });

            // changes in graph in draw, edit or delete
            this.graph.addListener("changeInput", function (data) {
                _this13.inputPanel.dispatch("changeInput", data);
            });

            // Exporting starts here
            this.exportToPngButton.addClickListener(function () {
                _this13.exportToPng();
            });

            this.exportToMarkupButton.addClickListener(function () {
                var markup = _this13.graph.getMarkup();
                if (_this13.markupArea.options.isHidden) {
                    _this13.markupArea.show();
                    _this13.markupArea.options.isHidden = false;
                }
                _this13.markupArea.setValue(markup);
                _this13.markupArea.node.focus();
                _this13.markupArea.node.select();
                _this13.markupArea.node.scrollTop = 0;
            });
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                "nodes": [{ "name": "0", "x": 120, "y": 150 }, { "name": "1", "x": 350, "y": 300 }, { "name": "2", "x": 50, "y": 50 }, { "name": "3", "x": 350, "y": 50 }, { "name": "4", "x": 50, "y": 300 }, { "name": "5", "x": 270, "y": 150 }],
                "edges": [{ "source": 0, "target": 2 }, { "source": 0, "target": 4 }, { "source": 0, "target": 5 }, { "source": 1, "target": 4 }, { "source": 1, "target": 5 }, { "source": 2, "target": 3 }, { "source": 2, "target": 4 }, { "source": 4, "target": 5 }]
            };
        }
    }, {
        key: "resize",
        value: function resize(newHeight, newWidth) {
            newWidth = Math.max(newWidth, 300);
            newHeight = Math.max(newHeight, 300);
            newHeight = newWidth = Math.min(newHeight, newWidth);
            this.widgetBlock.setStyle("width", newWidth + 700 + "px");
            this.graphBlock.setStyle("width", newWidth + "px");
            this.graphBlock.setStyle("height", newHeight + "px");
            this.svgBlock.setStyle("width", newWidth + "px");
            this.svgBlock.setStyle("height", newHeight + "px");
            this.svg.setAttribute("width", newWidth + "px");
            this.svg.setAttribute("height", newHeight + "px");
            this.graph.dispatch("resize");
        }
    }, {
        key: "exportToPng",
        value: function exportToPng() {
            var _this14 = this;

            // data will be the svg DOM node, serialized as a string
            var data = new XMLSerializer().serializeToString(this.svg.node);
            // this is to make the background color white instead of transparent
            data = data.replace("<svg", "<svg style='background-color: white;'");

            var DOMURL = window.URL || window.webkitURL || window;
            var svgBlob = new Blob([data], { type: 'image/svg+xml;charset=utf-8' });
            var url = DOMURL.createObjectURL(svgBlob);
            var image = document.createElement('img');
            image.onload = function () {
                var canvas = document.createElement("canvas");
                var context = canvas.getContext('2d');
                canvas.height = _this14.svg.getHeight();
                canvas.width = _this14.svg.getWidth();
                context.drawImage(image, 0, 0);
                DOMURL.revokeObjectURL(url);
                var imageURI = canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');
                var a = document.createElement("a");
                a.setAttribute("download", "graph.png");
                a.setAttribute("href", imageURI);
                a.setAttribute("target", "_blank");
                a.dispatchEvent(new MouseEvent("click", {
                    view: window,
                    bubbles: false,
                    cancelable: true
                }));
            };
            image.src = url;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { ref: "widgetBlock", style: { margin: "0 auto" } },
                UI.createElement(
                    "div",
                    { style: { width: "320px", display: "inline-block", "margin-right": "30px", float: "left" } },
                    UI.createElement(
                        "div",
                        { className: "text-center" },
                        UI.createElement(RadioButtonGroup, { level: Level.PRIMARY, ref: "toggleDirected", givenOptions: ["Undirected", "Directed"] })
                    ),
                    UI.createElement(GraphInputPanel, { ref: "inputPanel", style: { "margin-top": "30px" } })
                ),
                UI.createElement(
                    "div",
                    { ref: "graphBlock", style: { width: "600px", display: "inline-block" } },
                    UI.createElement(
                        "div",
                        { className: "text-center" },
                        UI.createElement(RadioButtonGroup, { level: Level.PRIMARY, ref: "toggleIndexType", givenOptions: ["0-index", "1-index", "Custom Labels"] })
                    ),
                    UI.createElement(
                        "div",
                        { ref: "svgBlock", style: {
                                "width": "100%",
                                height: "500px",
                                "border": "1px solid black",
                                "border-radius": "5px",
                                "margin-top": "30px",
                                "position": "relative" } },
                        UI.createElement(
                            SVG.SVGRoot,
                            { ref: "svg", width: "100%", height: "100%" },
                            UI.createElement(EditableGraph, { ref: "graph", nodes: this.options.nodes, edges: this.options.edges })
                        ),
                        UI.createElement(TextInput, { ref: "textArea", style: { "position": "absolute", "display": "none",
                                "height": "25px", "line-height": "25px",
                                "width": "45px" } })
                    )
                ),
                UI.createElement(
                    "div",
                    { style: { width: "320px", display: "inline-block", "margin-left": "30px", float: "right" } },
                    UI.createElement(
                        "div",
                        { className: "text-center" },
                        UI.createElement(RadioButtonGroup, { level: Level.PRIMARY, ref: "toggleViewMode", givenOptions: ["Force", "Draw", "Edit", "Delete", "Config"] })
                    ),
                    UI.createElement(GraphEditorLegend, { ref: "editorLegend", viewMode: "Force",
                        style: { "border": "1px solid black",
                            "border-radius": "5px",
                            "margin-top": "30px",
                            "padding": "10px",
                            "min-height": "400px" } }),
                    UI.createElement(
                        ButtonGroup,
                        { style: { marginTop: "5px" } },
                        UI.createElement(
                            Button,
                            { ref: "exportToPngButton", level: Level.INFO },
                            "Download as PNG"
                        ),
                        UI.createElement(
                            Button,
                            { ref: "exportToMarkupButton", level: Level.INFO },
                            "Generate Markup"
                        )
                    ),
                    UI.createElement(TextArea, { ref: "markupArea", isHidden: true, className: "hidden", style: { width: "100%", marginTop: "10px", minHeight: "100px" } })
                )
            )];
        }
    }]);
    return GraphEditor;
}(UIElement);

function ascending (a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector (compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function left(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }
      return lo;
    },
    right: function right(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }
      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return ascending(f(d), x);
  };
}

var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;

var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function ticks (start, stop, count) {
    var reverse,
        i = -1,
        n,
        ticks,
        step;

    stop = +stop, start = +start, count = +count;
    if (start === stop && count > 0) return [start];
    if (reverse = stop < start) n = start, start = stop, stop = n;
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

    if (step > 0) {
        start = Math.ceil(start / step);
        stop = Math.floor(stop / step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) {
            ticks[i] = (start + i) * step;
        }
    } else {
        start = Math.floor(start * step);
        stop = Math.ceil(stop * step);
        ticks = new Array(n = Math.ceil(start - stop + 1));
        while (++i < n) {
            ticks[i] = (start - i) / step;
        }
    }

    if (reverse) ticks.reverse();

    return ticks;
}

function tickIncrement(start, stop, count) {
    var step = (stop - start) / Math.max(0, count),
        power = Math.floor(Math.log(step) / Math.LN10),
        error = step / Math.pow(10, power);
    return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count),
        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
        error = step0 / step1;
    if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
}

var prefix = "$";

function Map$1() {}

Map$1.prototype = map$1.prototype = {
  constructor: Map$1,
  has: function has(key) {
    return prefix + key in this;
  },
  get: function get(key) {
    return this[prefix + key];
  },
  set: function set(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function remove(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function clear() {
    for (var property in this) {
      if (property[0] === prefix) delete this[property];
    }
  },
  keys: function keys() {
    var keys = [];
    for (var property in this) {
      if (property[0] === prefix) keys.push(property.slice(1));
    }return keys;
  },
  values: function values() {
    var values = [];
    for (var property in this) {
      if (property[0] === prefix) values.push(this[property]);
    }return values;
  },
  entries: function entries() {
    var entries = [];
    for (var property in this) {
      if (property[0] === prefix) entries.push({ key: property.slice(1), value: this[property] });
    }return entries;
  },
  size: function size() {
    var size = 0;
    for (var property in this) {
      if (property[0] === prefix) ++size;
    }return size;
  },
  empty: function empty() {
    for (var property in this) {
      if (property[0] === prefix) return false;
    }return true;
  },
  each: function each(f) {
    for (var property in this) {
      if (property[0] === prefix) f(this[property], property.slice(1), this);
    }
  }
};

function map$1(object, f) {
  var map = new Map$1();

  // Copy constructor.
  if (object instanceof Map$1) object.each(function (value, key) {
    map.set(key, value);
  });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;

      if (f == null) while (++i < n) {
        map.set(i, object[i]);
      } else while (++i < n) {
        map.set(f(o = object[i], i, object), o);
      }
    }

    // Convert object to map.
    else if (object) for (var key in object) {
        map.set(key, object[key]);
      }return map;
}

function Set$1() {}

var proto = map$1.prototype;

Set$1.prototype = set$1.prototype = {
  constructor: Set$1,
  has: proto.has,
  add: function add(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set$1(object, f) {
  var set = new Set$1();

  // Copy constructor.
  if (object instanceof Set$1) object.each(function (value) {
    set.add(value);
  });

  // Otherwise, assume it’s an array.
  else if (object) {
      var i = -1,
          n = object.length;
      if (f == null) while (++i < n) {
        set.add(object[i]);
      } else while (++i < n) {
        set.add(f(object[i], i, object));
      }
    }

  return set;
}

var array$1 = Array.prototype;

var map$3 = array$1.map;
var slice$1 = array$1.slice;

function define (constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) {
    prototype[key] = definition[key];
  }return prototype;
}

function Color$1() {}

var _darker = 0.7;
var _brighter = 1 / _darker;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex3 = /^#([0-9a-f]{3})$/,
    reHex6 = /^#([0-9a-f]{6})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color$1, color$2, {
  displayable: function displayable() {
    return this.rgb().displayable();
  },
  toString: function toString() {
    return this.rgb() + "";
  }
});

function color$2(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1)) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
  : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color$1)) o = color$2(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color$1, {
  brighter: function brighter(k) {
    k = k == null ? _brighter : Math.pow(_brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function darker(k) {
    k = k == null ? _darker : Math.pow(_darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function rgb() {
    return this;
  },
  displayable: function displayable() {
    return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
  },
  toString: function toString() {
    var a = this.opacity;a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
  }
}));

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color$1)) o = color$2(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color$1, {
  brighter: function brighter(k) {
    k = k == null ? _brighter : Math.pow(_brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function darker(k) {
    k = k == null ? _darker : Math.pow(_darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

var Kn = 18,
    Xn = 0.950470,
    // D65 standard referent
Yn = 1,
    Zn = 1.088830,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) {
    var h = o.h * deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var b = rgb2xyz(o.r),
      a = rgb2xyz(o.g),
      l = rgb2xyz(o.b),
      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

define(Lab, lab, extend(Color$1, {
  brighter: function brighter(k) {
    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function darker(k) {
    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function rgb$$1() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    y = Yn * lab2xyz(y);
    x = Xn * lab2xyz(x);
    z = Zn * lab2xyz(z);
    return new Rgb(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
    xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function xyz2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2xyz(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hcl, hcl, extend(Color$1, {
  brighter: function brighter(k) {
    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
  },
  darker: function darker(k) {
    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
  },
  rgb: function rgb$$1() {
    return labConvert(this).rgb();
  }
}));

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Cubehelix, cubehelix, extend(Color$1, {
  brighter: function brighter$$1(k) {
    k = k == null ? _brighter : Math.pow(_brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function darker$$1(k) {
    k = k == null ? _darker : Math.pow(_darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function rgb$$1() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }
}));

function constant$1 (x) {
  return function () {
    return x;
  };
}

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$1(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
}

var interpolateRgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb$$1(start, end) {
    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb$$1.gamma = rgbGamma;

  return rgb$$1;
})(1);

function array$2 (a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) {
    x[i] = interpolateValue(a[i], b[i]);
  }for (; i < nb; ++i) {
    c[i] = b[i];
  }return function (t) {
    for (i = 0; i < na; ++i) {
      c[i] = x[i](t);
    }return c;
  };
}

function date (a, b) {
  var d = new Date();
  return a = +a, b -= a, function (t) {
    return d.setTime(a + b * t), d;
  };
}

function interpolateNumber (a, b) {
  return a = +a, b -= a, function (t) {
    return a + b * t;
  };
}

function object (a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || (typeof a === "undefined" ? "undefined" : _typeof(a)) !== "object") a = {};
  if (b === null || (typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = interpolateValue(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) {
      c[k] = i[k](t);
    }return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function interpolateString (a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({ i: i, x: interpolateNumber(am, bm) });
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) {
      s[(o = q[i]).i] = o.x(t);
    }return s.join("");
  });
}

function interpolateValue (a, b) {
    var t = typeof b === "undefined" ? "undefined" : _typeof(b),
        c;
    return b == null || t === "boolean" ? constant$1(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color$2(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color$2 ? interpolateRgb : b instanceof Date ? date : Array.isArray(b) ? array$2 : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
}

function interpolateRound (a, b) {
  return a = +a, b -= a, function (t) {
    return Math.round(a + b * t);
  };
}

var degrees = 180 / Math.PI;

var identity$1 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

function decompose (a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var cssNode, cssRoot, cssView, svgNode;

function parseCss(value) {
  if (value === "none") return identity$1;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return identity$1;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$1;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function (t) {
      var i = -1,
          n = q.length,
          o;
      while (++i < n) {
        s[(o = q[i]).i] = o.x(t);
      }return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
function interpolateZoom (p0, p1) {
  var ux0 = p0[0],
      uy0 = p0[1],
      w0 = p0[2],
      ux1 = p1[0],
      uy1 = p1[1],
      w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function i(t) {
      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
    };
  }

  // General case.
  else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function i(t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
      };
    }

  i.duration = S * 1000;

  return i;
}

function cubehelix$1(hue$$1) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix$$1(start, end) {
      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix$$1.gamma = cubehelixGamma;

    return cubehelix$$1;
  }(1);
}

cubehelix$1(hue);
var cubehelixLong = cubehelix$1(nogamma);

function constant$2 (x) {
  return function () {
    return x;
  };
}

function number$1 (x) {
  return +x;
}

var unit = [0, 1];

function deinterpolateLinear(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : constant$2(b);
}

function deinterpolateClamp(deinterpolate) {
  return function (a, b) {
    var d = deinterpolate(a = +a, b = +b);
    return function (x) {
      return x <= a ? 0 : x >= b ? 1 : d(x);
    };
  };
}

function reinterpolateClamp(reinterpolate) {
  return function (a, b) {
    var r = reinterpolate(a = +a, b = +b);
    return function (t) {
      return t <= 0 ? a : t >= 1 ? b : r(t);
    };
  };
}

function bimap(domain, range$$1, deinterpolate, reinterpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range$$1[0],
      r1 = range$$1[1];
  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range$$1, deinterpolate, reinterpolate) {
  var j = Math.min(domain.length, range$$1.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range$$1 = range$$1.slice().reverse();
  }

  while (++i < j) {
    d[i] = deinterpolate(domain[i], domain[i + 1]);
    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
  }

  return function (x) {
    var i = bisectRight(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());
}

// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
function continuous(deinterpolate, reinterpolate) {
  var domain = unit,
      range$$1 = unit,
      interpolate$$1 = interpolateValue,
      clamp = false,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
  }

  scale.invert = function (y) {
    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range$$1 = slice$1.call(_), rescale()) : range$$1.slice();
  };

  scale.rangeRound = function (_) {
    return range$$1 = slice$1.call(_), interpolate$$1 = interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
  };

  return rescale();
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function formatDecimal (x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i,
      coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}

function exponent (x) {
  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup (grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals (numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}

function formatDefault (x, p) {
  x = x.toPrecision(p);

  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (x[i]) {
      case ".":
        i0 = i1 = i;break;
      case "0":
        if (i0 === 0) i0 = i;i1 = i;break;
      case "e":
        break out;
      default:
        if (i0 > 0) i0 = 0;break;
    }
  }

  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
}

var prefixExponent;

function formatPrefixAuto (x, p) {
    var d = formatDecimal(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1],
        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
        n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded (x, p) {
    var d = formatDecimal(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "": formatDefault,
  "%": function _(x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function b(x) {
    return Math.round(x).toString(2);
  },
  "c": function c(x) {
    return x + "";
  },
  "d": function d(x) {
    return Math.round(x).toString(10);
  },
  "e": function e(x, p) {
    return x.toExponential(p);
  },
  "f": function f(x, p) {
    return x.toFixed(p);
  },
  "g": function g(x, p) {
    return x.toPrecision(p);
  },
  "o": function o(x) {
    return Math.round(x).toString(8);
  },
  "p": function p(x, _p) {
    return formatRounded(x * 100, _p);
  },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function X(x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function x(_x) {
    return Math.round(_x).toString(16);
  }
};

// [[fill]align][sign][symbol][0][width][,][.precision][type]
var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  return new FormatSpecifier(specifier);
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

  var match,
      fill = match[1] || " ",
      align = match[2] || ">",
      sign = match[3] || "-",
      symbol = match[4] || "",
      zero = !!match[5],
      width = match[6] && +match[6],
      comma = !!match[7],
      precision = match[8] && +match[8].slice(1),
      type = match[9] || "";

  // The "n" type is an alias for ",g".
  if (type === "n") comma = true, type = "g";

  // Map invalid types to the default format.
  else if (!formatTypes[type]) type = "";

  // If zero fill is specified, padding goes after sign and before digits.
  if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";

  this.fill = fill;
  this.align = align;
  this.sign = sign;
  this.symbol = symbol;
  this.zero = zero;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type;
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + this.type;
};

function identity$2 (x) {
  return x;
}

var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function formatLocale (locale) {
  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$2,
      currency = locale.currency,
      decimal = locale.decimal,
      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$2,
      percent = locale.percent || "%";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        type = specifier.type;

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = !type || /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Perform the initial formatting.
        var valueNegative = value < 0;
        value = formatType(Math.abs(value), precision);

        // If a negative value rounds to zero during formatting, treat as positive.
        if (valueNegative && +value === 0) valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? sign === "(" ? sign : "-" : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);break;
        default:
          value = padding + valuePrefix + value + valueSuffix;break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;
var format;
var formatPrefix;

defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed (step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix (step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound (step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

function tickFormat (domain, count, specifier) {
  var start = domain[0],
      stop = domain[domain.length - 1],
      step = tickStep(start, stop, count == null ? 10 : count),
      precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
        return formatPrefix(specifier, value);
      }
    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }
    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }
  return format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    return tickFormat(domain(), count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;

    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = tickIncrement(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = tickIncrement(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = tickIncrement(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear$1() {
  var scale = continuous(deinterpolateLinear, interpolateNumber);

  scale.copy = function () {
    return copy(scale, linear$1());
  };

  return linearish(scale);
}

function nice (domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

var t0$1 = new Date(),
    t1$1 = new Date();

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do {
      range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    } while (previous < start && start < stop);
    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) {
        date.setTime(date - 1);
      }
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0$1.setTime(+start), t1$1.setTime(+end);
      floori(t0$1), floori(t1$1);
      return Math.floor(count(t0$1, t1$1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}

var millisecond = newInterval(function () {
  // noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

var second = newInterval(function (date) {
  date.setTime(Math.floor(date / durationSecond) * durationSecond);
}, function (date, step) {
  date.setTime(+date + step * durationSecond);
}, function (start, end) {
  return (end - start) / durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});

var minute = newInterval(function (date) {
  date.setTime(Math.floor(date / durationMinute) * durationMinute);
}, function (date, step) {
  date.setTime(+date + step * durationMinute);
}, function (start, end) {
  return (end - start) / durationMinute;
}, function (date) {
  return date.getMinutes();
});

var hour = newInterval(function (date) {
  var offset = date.getTimezoneOffset() * durationMinute % durationHour;
  if (offset < 0) offset += durationHour;
  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
}, function (date, step) {
  date.setTime(+date + step * durationHour);
}, function (start, end) {
  return (end - start) / durationHour;
}, function (date) {
  return date.getHours();
});

var day = newInterval(function (date) {
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function (date) {
  return date.getDate() - 1;
});

function weekday(i) {
  return newInterval(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var month = newInterval(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});

var year = newInterval(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var utcMinute = newInterval(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * durationMinute);
}, function (start, end) {
  return (end - start) / durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});

var utcHour = newInterval(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * durationHour);
}, function (start, end) {
  return (end - start) / durationHour;
}, function (date) {
  return date.getUTCHours();
});

var utcDay = newInterval(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});

function utcWeekday(i) {
  return newInterval(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcMonth = newInterval(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});

var utcYear = newInterval(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return { y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0 };
}

function formatLocale$1(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function (string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day$$1;
      if (i != string.length) return null;

      // If a UNIX timestamp is specified, return it.
      if ("Q" in d) return new Date(d.Q);

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newYear(d.y)), day$$1 = week.getUTCDay();
          week = day$$1 > 4 || day$$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = newDate(newYear(d.y)), day$$1 = week.getDay();
          week = day$$1 > 4 || day$$1 === 0 ? monday.ceil(week) : monday(week);
          week = day.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function format(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function () {
        return specifier;
      };
      return f;
    },
    parse: function parse(specifier) {
      var p = newParse(specifier += "", localDate);
      p.toString = function () {
        return specifier;
      };
      return p;
    },
    utcFormat: function utcFormat(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function () {
        return specifier;
      };
      return f;
    },
    utcParse: function utcParse(specifier) {
      var p = newParse(specifier, utcDate);
      p.toString = function () {
        return specifier;
      };
      return p;
    }
  };
}

var pads = { "-": "", "_": " ", "0": "0" },
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {},
      i = -1,
      n = names.length;
  while (++i < n) {
    map[names[i].toLowerCase()] = i;
  }return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0] * 1000, i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + day.count(year(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day$$1 = d.getDay();
  return day$$1 === 0 ? 7 : day$$1;
}

function formatWeekNumberSunday(d, p) {
  return pad(sunday.count(year(d), d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day$$1 = d.getDay();
  d = day$$1 >= 4 || day$$1 === 0 ? thursday(d) : thursday.ceil(d);
  return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(monday.count(year(d), d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear(d), d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day$$1 = d.getUTCDay();
  d = day$$1 >= 4 || day$$1 === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale$1;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;

defaultLocale$1({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  timeFormat = locale$1.format;
  timeParse = locale$1.parse;
  utcFormat = locale$1.utcFormat;
  utcParse = locale$1.utcParse;
  return locale$1;
}

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
    return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

var durationSecond$1 = 1000,
    durationMinute$1 = durationSecond$1 * 60,
    durationHour$1 = durationMinute$1 * 60,
    durationDay$1 = durationHour$1 * 24,
    durationWeek$1 = durationDay$1 * 7,
    durationMonth = durationDay$1 * 30,
    durationYear = durationDay$1 * 365;

function date$1(t) {
  return new Date(t);
}

function number$2(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
  var scale = continuous(deinterpolateLinear, interpolateNumber),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  var tickIntervals = [[second$$1, 1, durationSecond$1], [second$$1, 5, 5 * durationSecond$1], [second$$1, 15, 15 * durationSecond$1], [second$$1, 30, 30 * durationSecond$1], [minute$$1, 1, durationMinute$1], [minute$$1, 5, 5 * durationMinute$1], [minute$$1, 15, 15 * durationMinute$1], [minute$$1, 30, 30 * durationMinute$1], [hour$$1, 1, durationHour$1], [hour$$1, 3, 3 * durationHour$1], [hour$$1, 6, 6 * durationHour$1], [hour$$1, 12, 12 * durationHour$1], [day$$1, 1, durationDay$1], [day$$1, 2, 2 * durationDay$1], [week, 1, durationWeek$1], [month$$1, 1, durationMonth], [month$$1, 3, 3 * durationMonth], [year$$1, 1, durationYear]];

  function tickFormat(date$$1) {
    return (second$$1(date$$1) < date$$1 ? formatMillisecond : minute$$1(date$$1) < date$$1 ? formatSecond : hour$$1(date$$1) < date$$1 ? formatMinute : day$$1(date$$1) < date$$1 ? formatHour : month$$1(date$$1) < date$$1 ? week(date$$1) < date$$1 ? formatDay : formatWeek : year$$1(date$$1) < date$$1 ? formatMonth : formatYear)(date$$1);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10;

    // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = bisector(function (i) {
        return i[2];
      }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = tickStep(start / durationYear, stop / durationYear, interval);
        interval = year$$1;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max(tickStep(start, stop, interval), 1);
        interval = millisecond$$1;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1);
  };

  scale.ticks = function (interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale;
  };

  scale.copy = function () {
    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
  };

  return scale;
}

function scaleTime () {
  return calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
}

function colors$1 (s) {
  return s.match(/.{6}/g).map(function (x) {
    return "#" + x;
  });
}

colors$1("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

colors$1("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

colors$1("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

colors$1("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

var rainbow = cubehelix();

function ramp(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

ramp(colors$1("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

var magma = ramp(colors$1("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp(colors$1("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp(colors$1("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

var xhtml = "http://www.w3.org/1999/xhtml";

var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace (name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? { space: namespaces[prefix], local: name } : name;
}

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator (name) {
  var fullname = namespace(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

function none() {}

function selector (selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}

function selection_select (select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function empty() {
  return [];
}

function selectorAll (selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}

function selection_selectAll (select) {
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection(subgroups, parents);
}

var matcher = function matcher(selector) {
  return function () {
    return this.matches(selector);
  };
};

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!element.matches) {
    var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
    matcher = function matcher(selector) {
      return function () {
        return vendorMatches.call(this, selector);
      };
    };
  }
}

var matcher$1 = matcher;

function selection_filter (match) {
  if (typeof match !== "function") match = matcher$1(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function sparse (update) {
  return new Array(update.length);
}

function selection_enter () {
  return new Selection(this._enter || this._groups.map(sparse), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function appendChild(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function insertBefore(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function querySelector(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function querySelectorAll(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

function constant$3 (x) {
  return function () {
    return x;
  };
}

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function selection_data (value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = constant$3(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength) {}
        previous._next = next || null;
      }
    }
  }

  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

function selection_exit () {
  return new Selection(this._exit || this._groups.map(sparse), this._parents);
}

function selection_merge (selection$$1) {

  for (var groups0 = this._groups, groups1 = selection$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection(merges, this._parents);
}

function selection_order () {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort (compare) {
  if (!compare) compare = ascending$1;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new Selection(sortgroups, this._parents).order();
}

function ascending$1(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call () {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes () {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}

function selection_node () {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size () {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}

function selection_empty () {
  return !this.node();
}

function selection_each (callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr (name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

function defaultView (node) {
    return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
    node.document && node // node is a Window
    || node.defaultView; // node is a Document
}

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function selection_style (name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function selection_property (name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function add(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function remove(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function contains(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;
  while (++i < n) {
    list.add(names[i]);
  }
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;
  while (++i < n) {
    list.remove(names[i]);
  }
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function selection_classed (name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;
    while (++i < n) {
      if (!list.contains(names[i])) return false;
    }return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text (value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html (value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

function raise$1() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise () {
  return this.each(raise$1);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower () {
  return this.each(lower);
}

function selection_append (name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}

function selection_insert (name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove () {
  return this.each(remove);
}

function selection_cloneShallow() {
  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
}

function selection_cloneDeep() {
  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
}

function selection_clone (deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum (value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

var filterEvents = {};

var event$1 = null;

if (typeof document !== "undefined") {
  var element$1 = document.documentElement;
  if (!("onmouseenter" in element$1)) {
    filterEvents = { mouseenter: "mouseover", mouseleave: "mouseout" };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;
    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function (event1) {
    var event0 = event$1; // Events can be reentrant (e.g., focus).
    event$1 = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      event$1 = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name: name };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = { type: typename.type, name: typename.name, value: value, listener: listener, capture: capture };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function selection_on (typename, value, capture) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) {
    this.each(on(typenames[i], value, capture));
  }return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event$1;
  event1.sourceEvent = event$1;
  event$1 = event1;
  try {
    return listener.apply(that, args);
  } finally {
    event$1 = event0;
  }
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch (type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}

var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: selection_select,
  selectAll: selection_selectAll,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  merge: selection_merge,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch
};

function select (selector) {
    return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}

function sourceEvent () {
  var current = event$1,
      source;
  while (source = current.sourceEvent) {
    current = source;
  }return current;
}

function point$1 (node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}

function mouse (node) {
  var event = sourceEvent();
  if (event.changedTouches) event = event.changedTouches[0];
  return point$1(node, event);
}

function touch (node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point$1(node, touch);
    }
  }

  return null;
}

var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function moveTo(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function lineTo(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function quadraticCurveTo(x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function arcTo(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) {}

      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21;

            // If the start tangent is not coincident with (x0,y0), line to.
            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function arc(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau + tau;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function rect(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function toString() {
    return this._;
  }
};

function constant$4 (x) {
  return function constant() {
    return x;
  };
}

var pi$1 = Math.PI;

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0:
        this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;
      case 1:
        this._point = 2; // proceed
      default:
        this._context.lineTo(x, y);break;
    }
  }
};

function curveLinear (context) {
  return new Linear(context);
}

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}

function line () {
  var x$$1 = x,
      y$$1 = y,
      defined = constant$4(true),
      context = null,
      curve = curveLinear,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }
      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$4(+_), line) : x$$1;
  };

  line.y = function (_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$4(+_), line) : y$$1;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$4(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

function area () {
  var x0 = x,
      x1 = null,
      y0 = constant$4(0),
      y1 = y,
      defined = constant$4(true),
      context = null,
      curve = curveLinear,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$4(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$4(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$4(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$4(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$4(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$4(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$4(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}

function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function _point$3(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function areaStart() {
    this._line = 0;
  },
  areaEnd: function areaEnd() {
    this._line = NaN;
  },
  lineStart: function lineStart() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function lineEnd() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);break;
      case 3:
        _point$3(this, this._t0, slope2(this, this._t0));break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function point(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0:
        this._point = 1;this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);break;
      case 1:
        this._point = 2;break;
      case 2:
        this._point = 3;_point$3(this, slope2(this, t1 = slope3(this, x, y)), t1);break;
      default:
        _point$3(this, this._t0, t1 = slope3(this, x, y));break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function moveTo(x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function closePath() {
    this._context.closePath();
  },
  lineTo: function lineTo(x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

var noop$1 = { value: function value() {} };

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames$1(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return { type: t, name: name };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function on(typename, callback) {
    var _ = this._,
        T = parseTypenames$1(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) {
        if ((t = (typename = T[i]).type) && (t = get$1(_[t], typename.name))) return t;
      }return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set$3(_[t], typename.name, callback);else if (callback == null) for (t in _) {
        _[t] = set$3(_[t], typename.name, null);
      }
    }

    return this;
  },
  copy: function copy() {
    var copy = {},
        _ = this._;
    for (var t in _) {
      copy[t] = _[t].slice();
    }return new Dispatch(copy);
  },
  call: function call(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
      args[i] = arguments[i + 2];
    }if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
      t[i].value.apply(that, args);
    }
  },
  apply: function apply(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
      t[i].value.apply(that, args);
    }
  }
};

function get$1(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set$3(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({ name: name, value: callback });
  return type;
}

function noevent () {
  event$1.preventDefault();
  event$1.stopImmediatePropagation();
}

function nodrag (view) {
  var root = view.document.documentElement,
      selection$$1 = select(view).on("dragstart.drag", noevent, true);
  if ("onselectstart" in root) {
    selection$$1.on("selectstart.drag", noevent, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection$$1 = select(view).on("dragstart.drag", null);
  if (noclick) {
    selection$$1.on("click.drag", noevent, true);
    setTimeout(function () {
      selection$$1.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root) {
    selection$$1.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
    setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function restart(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function stop() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead,
      e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function timeout$1 (callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function (elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

var emptyOn = dispatch("start", "end", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

function schedule (node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create$1(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get$2(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set$4(node, id) {
  var schedule = get$2(node, id);
  if (schedule.state > STARTING) throw new Error("too late; already started");
  return schedule;
}

function get$2(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create$1(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return timeout$1(start);

      // Interrupt the active transition, if any.
      // Dispatch the interrupt event.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions. No interrupt event is dispatched
      // because the cancelled transitions never started. Note that this also
      // removes this transition from the pending list!
      else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          delete schedules[i];
        }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    timeout$1(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(null, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) {
      return;
    } // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}

function interrupt (node, name) {
  var schedules = node.__transition,
      schedule$$1,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule$$1 = schedules[i]).name !== name) {
      empty = false;continue;
    }
    active = schedule$$1.state > STARTING && schedule$$1.state < ENDING;
    schedule$$1.state = ENDED;
    schedule$$1.timer.stop();
    if (active) schedule$$1.on.call("interrupt", node, node.__data__, schedule$$1.index, schedule$$1.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}

function selection_interrupt (name) {
  return this.each(function () {
    interrupt(this, name);
  });
}

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule$$1 = set$4(this, id),
        tween = schedule$$1.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule$$1.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule$$1 = set$4(this, id),
        tween = schedule$$1.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name: name, value: value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule$$1.tween = tween1;
  };
}

function transition_tween (name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = get$2(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function () {
    var schedule$$1 = set$4(this, id);
    (schedule$$1.value || (schedule$$1.value = {}))[name] = value.apply(this, arguments);
  });

  return function (node) {
    return get$2(node, id).value[name];
  };
}

function interpolate (a, b) {
    var c;
    return (typeof b === "number" ? interpolateNumber : b instanceof color$2 ? interpolateRgb : (c = color$2(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
}

function attrRemove$1(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS$1(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant$1(name, interpolate$$1, value1) {
  var value00, interpolate0;
  return function () {
    var value0 = this.getAttribute(name);
    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1);
  };
}

function attrConstantNS$1(fullname, interpolate$$1, value1) {
  var value00, interpolate0;
  return function () {
    var value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1);
  };
}

function attrFunction$1(name, interpolate$$1, value) {
  var value00, value10, interpolate0;
  return function () {
    var value0,
        value1 = value(this);
    if (value1 == null) return void this.removeAttribute(name);
    value0 = this.getAttribute(name);
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
  };
}

function attrFunctionNS$1(fullname, interpolate$$1, value) {
  var value00, value10, interpolate0;
  return function () {
    var value0,
        value1 = value(this);
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
  };
}

function transition_attr (name, value) {
  var fullname = namespace(name),
      i = fullname === "transform" ? interpolateTransformSvg : interpolate;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value + ""));
}

function attrTweenNS(fullname, value) {
  function tween() {
    var node = this,
        i = value.apply(node, arguments);
    return i && function (t) {
      node.setAttributeNS(fullname.space, fullname.local, i(t));
    };
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  function tween() {
    var node = this,
        i = value.apply(node, arguments);
    return i && function (t) {
      node.setAttribute(name, i(t));
    };
  }
  tween._value = value;
  return tween;
}

function transition_attrTween (name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

function delayFunction(id, value) {
  return function () {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function () {
    init(this, id).delay = value;
  };
}

function transition_delay (value) {
  var id = this._id;

  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get$2(this.node(), id).delay;
}

function durationFunction(id, value) {
  return function () {
    set$4(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function () {
    set$4(this, id).duration = value;
  };
}

function transition_duration (value) {
  var id = this._id;

  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get$2(this.node(), id).duration;
}

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    set$4(this, id).ease = value;
  };
}

function transition_ease (value) {
  var id = this._id;

  return arguments.length ? this.each(easeConstant(id, value)) : get$2(this.node(), id).ease;
}

function transition_filter (match) {
  if (typeof match !== "function") match = matcher$1(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition$1(subgroups, this._parents, this._name, this._id);
}

function transition_merge (transition$$1) {
  if (transition$$1._id !== this._id) throw new Error();

  for (var groups0 = this._groups, groups1 = transition$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition$1(merges, this._parents, this._name, this._id);
}

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0,
      on1,
      sit = start(name) ? init : set$4;
  return function () {
    var schedule$$1 = sit(this, id),
        on = schedule$$1.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule$$1.on = on1;
  };
}

function transition_on (name, listener) {
  var id = this._id;

  return arguments.length < 2 ? get$2(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;
    for (var i in this.__transition) {
      if (+i !== id) return;
    }if (parent) parent.removeChild(this);
  };
}

function transition_remove () {
  return this.on("end.remove", removeFunction(this._id));
}

function transition_select (select$$1) {
  var name = this._name,
      id = this._id;

  if (typeof select$$1 !== "function") select$$1 = selector(select$$1);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get$2(node, id));
      }
    }
  }

  return new Transition$1(subgroups, this._parents, name, id);
}

function transition_selectAll (select$$1) {
  var name = this._name,
      id = this._id;

  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$2(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition$1(subgroups, parents, name, id);
}

var Selection$1 = selection.prototype.constructor;

function transition_selection () {
  return new Selection$1(this._groups, this._parents);
}

function styleRemove$1(name, interpolate$$1) {
    var value00, value10, interpolate0;
    return function () {
        var value0 = styleValue(this, name),
            value1 = (this.style.removeProperty(name), styleValue(this, name));
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
    };
}

function styleRemoveEnd(name) {
    return function () {
        this.style.removeProperty(name);
    };
}

function styleConstant$1(name, interpolate$$1, value1) {
    var value00, interpolate0;
    return function () {
        var value0 = styleValue(this, name);
        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value1);
    };
}

function styleFunction$1(name, interpolate$$1, value) {
    var value00, value10, interpolate0;
    return function () {
        var value0 = styleValue(this, name),
            value1 = value(this);
        if (value1 == null) value1 = (this.style.removeProperty(name), styleValue(this, name));
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
    };
}

function transition_style (name, value, priority) {
    var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
    return value == null ? this.styleTween(name, styleRemove$1(name, i)).on("end.style." + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === "function" ? styleFunction$1(name, i, tweenValue(this, "style." + name, value)) : styleConstant$1(name, i, value + ""), priority);
}

function styleTween(name, value, priority) {
  function tween() {
    var node = this,
        i = value.apply(node, arguments);
    return i && function (t) {
      node.style.setProperty(name, i(t), priority);
    };
  }
  tween._value = value;
  return tween;
}

function transition_styleTween (name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

function textConstant$1(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction$1(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function transition_text (value) {
  return this.tween("text", typeof value === "function" ? textFunction$1(tweenValue(this, "text", value)) : textConstant$1(value == null ? "" : value + ""));
}

function transition_transition () {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get$2(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition$1(groups, this._parents, name, id1);
}

var id = 0;

function Transition$1(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return selection().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = selection.prototype;

Transition$1.prototype = transition.prototype = {
  constructor: Transition$1,
  select: transition_select,
  selectAll: transition_selectAll,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease
};

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var pi$2 = Math.PI;

var tau$2 = 2 * Math.PI;

var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = now(), defaultTiming;
    }
  }
  return timing;
}

function selection_transition (name) {
  var id, timing;

  if (name instanceof Transition$1) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition$1(groups, this._parents, name, id);
}

selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;

function constant$6 (x) {
  return function () {
    return x;
  };
}

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function scale(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function translate(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function apply(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function applyX(x) {
    return x * this.k + this.x;
  },
  applyY: function applyY(y) {
    return y * this.k + this.y;
  },
  invert: function invert(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function invertX(x) {
    return (x - this.x) / this.k;
  },
  invertY: function invertY(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function rescaleX(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function rescaleY(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function toString() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};

var identity$5 = new Transform(1, 0, 0);

function nopropagation$1() {
  event$1.stopImmediatePropagation();
}

function noevent$1 () {
  event$1.preventDefault();
  event$1.stopImmediatePropagation();
}

// Ignore right-click, since that should open the context menu.
function defaultFilter$1() {
  return !event$1.button;
}

function defaultExtent() {
  var e = this,
      w,
      h;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    w = e.width.baseVal.value;
    h = e.height.baseVal.value;
  } else {
    w = e.clientWidth;
    h = e.clientHeight;
  }
  return [[0, 0], [w, h]];
}

function defaultTransform() {
  return this.__zoom || identity$5;
}

function defaultWheelDelta() {
  return -event$1.deltaY * (event$1.deltaMode ? 120 : 1) / 500;
}

function defaultTouchable$1() {
  return "ontouchstart" in this;
}

function defaultConstrain(transform$$1, extent, translateExtent) {
  var dx0 = transform$$1.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform$$1.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform$$1.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform$$1.invertY(extent[1][1]) - translateExtent[1][1];
  return transform$$1.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}

function zoom () {
  var filter = defaultFilter$1,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable$1,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = interpolateZoom,
      gestures = [],
      listeners = dispatch("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection$$1) {
    selection$$1.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function (collection, transform$$1) {
    var selection$$1 = collection.selection ? collection.selection() : collection;
    selection$$1.property("__zoom", defaultTransform);
    if (collection !== selection$$1) {
      schedule(collection, transform$$1);
    } else {
      selection$$1.interrupt().each(function () {
        gesture(this, arguments).start().zoom(null, typeof transform$$1 === "function" ? transform$$1.apply(this, arguments) : transform$$1).end();
      });
    }
  };

  zoom.scaleBy = function (selection$$1, k) {
    zoom.scaleTo(selection$$1, function () {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    });
  };

  zoom.scaleTo = function (selection$$1, k) {
    zoom.transform(selection$$1, function () {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = centroid(e),
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    });
  };

  zoom.translateBy = function (selection$$1, x, y) {
    zoom.transform(selection$$1, function () {
      return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function (selection$$1, x, y) {
    zoom.transform(selection$$1, function () {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p = centroid(e);
      return constrain(identity$5.translate(p[0], p[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
    });
  };

  function scale(transform$$1, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform$$1.k ? transform$$1 : new Transform(k, transform$$1.x, transform$$1.y);
  }

  function translate(transform$$1, p0, p1) {
    var x = p0[0] - p1[0] * transform$$1.k,
        y = p0[1] - p1[1] * transform$$1.k;
    return x === transform$$1.x && y === transform$$1.y ? transform$$1 : new Transform(transform$$1.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition$$1, transform$$1, center) {
    transition$$1.on("start.zoom", function () {
      gesture(this, arguments).start();
    }).on("interrupt.zoom end.zoom", function () {
      gesture(this, arguments).end();
    }).tween("zoom", function () {
      var that = this,
          args = arguments,
          g = gesture(that, args),
          e = extent.apply(that, args),
          p = center || centroid(e),
          w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
          a = that.__zoom,
          b = typeof transform$$1 === "function" ? transform$$1.apply(that, args) : transform$$1,
          i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function (t) {
        if (t === 1) t = b; // Avoid rounding error on end.
        else {
            var l = i(t),
                k = w / l[2];t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
          }
        g.zoom(null, t);
      };
    });
  }

  function gesture(that, args) {
    for (var i = 0, n = gestures.length, g; i < n; ++i) {
      if ((g = gestures[i]).that === that) {
        return g;
      }
    }
    return new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.index = -1;
    this.active = 0;
    this.extent = extent.apply(that, args);
  }

  Gesture.prototype = {
    start: function start() {
      if (++this.active === 1) {
        this.index = gestures.push(this) - 1;
        this.emit("start");
      }
      return this;
    },
    zoom: function zoom(key, transform$$1) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform$$1.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform$$1.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform$$1.invert(this.touch1[0]);
      this.that.__zoom = transform$$1;
      this.emit("zoom");
      return this;
    },
    end: function end() {
      if (--this.active === 0) {
        gestures.splice(this.index, 1);
        this.index = -1;
        this.emit("end");
      }
      return this;
    },
    emit: function emit(type) {
      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = mouse(this);

    // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    }

    // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return;

      // Otherwise, capture the mouse point and location at the start.
      else {
          g.mouse = [p, t.invert(p)];
          interrupt(this);
          g.start();
        }

    noevent$1();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        v = select(event$1.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = mouse(this),
        x0 = event$1.clientX,
        y0 = event$1.clientY;

    nodrag(event$1.view);
    nopropagation$1();
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt(this);
    g.start();

    function mousemoved() {
      noevent$1();
      if (!g.moved) {
        var dx = event$1.clientX - x0,
            dy = event$1.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event$1.view, g.moved);
      noevent$1();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = mouse(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (event$1.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);

    noevent$1();
    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);else select(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        touches$$1 = event$1.changedTouches,
        started,
        n = touches$$1.length,
        i,
        t,
        p;

    nopropagation$1();
    for (i = 0; i < n; ++i) {
      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true;else if (!g.touch1) g.touch1 = p;
    }

    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
    if (touchstarting) {
      touchstarting = clearTimeout(touchstarting);
      if (!g.touch1) {
        g.end();
        p = select(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
        return;
      }
    }

    if (started) {
      touchstarting = setTimeout(function () {
        touchstarting = null;
      }, touchDelay);
      interrupt(this);
      g.start();
    }
  }

  function touchmoved() {
    var g = gesture(this, arguments),
        touches$$1 = event$1.changedTouches,
        n = touches$$1.length,
        i,
        t,
        p,
        l;

    noevent$1();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    for (i = 0; i < n; ++i) {
      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0],
          l0 = g.touch0[1],
          p1 = g.touch1[0],
          l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    var g = gesture(this, arguments),
        touches$$1 = event$1.changedTouches,
        n = touches$$1.length,
        i,
        t;

    nopropagation$1();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches$$1[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else g.end();
  }

  zoom.wheelDelta = function (_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant$6(+_), zoom) : wheelDelta;
  };

  zoom.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$6(!!_), zoom) : filter;
  };

  zoom.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$6(!!_), zoom) : touchable;
  };

  zoom.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$6([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function (_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function (_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function (_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function (_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function (_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}



var d3 = Object.freeze({
	scaleLinear: linear$1,
	scaleTime: scaleTime,
	select: select,
	get event () { return event$1; },
	customEvent: customEvent,
	line: line,
	area: area,
	zoom: zoom,
	zoomIdentity: identity$5
});

var LinePlot = function (_SVG$Path) {
    inherits(LinePlot, _SVG$Path);

    function LinePlot() {
        classCallCheck(this, LinePlot);
        return possibleConstructorReturn(this, (LinePlot.__proto__ || Object.getPrototypeOf(LinePlot)).apply(this, arguments));
    }

    createClass(LinePlot, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                d: "",
                fill: "none",
                stroke: "darkgrey",
                strokeWidth: 1.5,
                interpolation: "linear"
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            Object.assign(options, this.options.plotOptions);
            get(LinePlot.prototype.__proto__ || Object.getPrototypeOf(LinePlot.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(LinePlot.prototype.__proto__ || Object.getPrototypeOf(LinePlot.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("d", this.getLineData());
            attr.setAttribute("clip-path", this.options.chart.clipPath);
            return attr;
        }
    }, {
        key: "getLineData",
        value: function getLineData() {
            var _this2 = this;

            this.linePathGenerator = line().x(function (data) {
                return _this2.options.chart.xAxisOptions.scale(_this2.options.plotOptions.xCoordinateAlias(data));
            }).y(function (data) {
                return _this2.options.chart.yAxisOptions.scale(_this2.options.plotOptions.yCoordinateAlias(data));
            });
            return this.linePathGenerator(this.options.plotOptions.pointsAlias(this.options.data));
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.options.chart.addZoomListener(function () {
                _this3.redraw();
            });
        }
    }]);
    return LinePlot;
}(SVG.Path);

var PointPlotElement = function (_SVG$Circle) {
    inherits(PointPlotElement, _SVG$Circle);

    function PointPlotElement() {
        classCallCheck(this, PointPlotElement);
        return possibleConstructorReturn(this, (PointPlotElement.__proto__ || Object.getPrototypeOf(PointPlotElement)).apply(this, arguments));
    }

    createClass(PointPlotElement, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                center: { x: 0, y: 0 },
                radius: 5,
                fill: "grey",
                strokeWidth: 0.5,
                stroke: "darkgrey"
            };
        }
    }, {
        key: "redraw",
        value: function redraw() {
            //this.options.center = {
            //    x: this.options.xAxisScale(this.options.xCoordinateAlias(this.options.data)),
            //    y: this.options.yAxisScale(this.options.yCoordinateAlias(this.options.data))
            //};
            this.translate(this.options.xAxisScale(this.options.xCoordinateAlias(this.options.data)), this.options.yAxisScale(this.options.yCoordinateAlias(this.options.data)));
            get(PointPlotElement.prototype.__proto__ || Object.getPrototypeOf(PointPlotElement.prototype), "redraw", this).call(this);
        }
    }]);
    return PointPlotElement;
}(SVG.Circle);

var PointPlot = function PointPlot(PointPlotElementClass) {
    return function (_SVG$Group) {
        inherits(PointPlot, _SVG$Group);

        function PointPlot() {
            classCallCheck(this, PointPlot);
            return possibleConstructorReturn(this, (PointPlot.__proto__ || Object.getPrototypeOf(PointPlot)).apply(this, arguments));
        }

        createClass(PointPlot, [{
            key: "getNodeAttributes",
            value: function getNodeAttributes() {
                var attr = get(PointPlot.prototype.__proto__ || Object.getPrototypeOf(PointPlot.prototype), "getNodeAttributes", this).call(this);
                attr.setAttribute("clip-path", this.options.chart.clipPath);
                return attr;
            }
        }, {
            key: "getPoints",
            value: function getPoints() {
                this.points = [];
                this.pointsData = this.options.plotOptions.pointsAlias(this.options.data);
                for (var i = 0; i < this.pointsData.length; i += 1) {
                    this.points[i] = UI.createElement(PointPlotElementClass, _extends({ ref: this.refLinkArray("points", i) }, this.options.plotOptions, {
                        data: this.pointsData[i],
                        xAxisScale: this.options.chart.xAxisOptions.scale,
                        yAxisScale: this.options.chart.yAxisOptions.scale }));
                }
                return this.points;
            }
        }, {
            key: "render",
            value: function render() {
                return [].concat(toConsumableArray(this.getPoints()));
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this3 = this;

                this.options.chart.addZoomListener(function () {
                    _this3.redraw();
                });
            }
        }]);
        return PointPlot;
    }(SVG.Group);
};

var BasePointPlot = PointPlot(PointPlotElement);

// TODO: write own custom Scale

// TODO: This file desperately needs a refactoring.

var AxisTick = function (_SVG$Group) {
    inherits(AxisTick, _SVG$Group);

    function AxisTick() {
        classCallCheck(this, AxisTick);
        return possibleConstructorReturn(this, (AxisTick.__proto__ || Object.getPrototypeOf(AxisTick)).apply(this, arguments));
    }

    createClass(AxisTick, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                gridLineLength: 0,
                axisLineLength: 6,
                gridLineStroke: "rgba(255, 255, 255, .7)",
                labelPadding: 6,
                labelStrokeWidth: 0.5,
                labelFontFamily: "'Helvetica Neue', Helvetica, Arial, sans-serif"
            };
        }
    }, {
        key: "getLabel",
        value: function getLabel() {
            var labelOptions = {
                text: "" + this.options.label,
                strokeWidth: this.options.labelStrokeWidth
            };
            if (this.options.orientation === Direction.DOWN) {
                Object.assign(labelOptions, {
                    textAnchor: "middle",
                    dy: ".71em",
                    y: this.options.labelPadding + this.options.axisLineLength
                });
            } else if (this.options.orientation === Direction.LEFT) {
                Object.assign(labelOptions, {
                    textAnchor: "end",
                    dy: ".35em",
                    x: -1 * (this.options.labelPadding + this.options.axisLineLength)
                });
            }
            return UI.createElement(SVG.Text, _extends({ ref: this.refLink("label") }, labelOptions));
        }
    }, {
        key: "getGridLine",
        value: function getGridLine() {
            var gridLineOptions = {
                fill: this.options.gridLineStroke,
                stroke: this.options.gridLineStroke
            };
            if (this.axisPosition === this.options.scale.range()[0]) {
                return;
            }
            if (this.options.orientation === Direction.DOWN) {
                Object.assign(gridLineOptions, {
                    y2: -1 * this.options.chartOptions.height
                });
            } else if (this.options.orientation === Direction.LEFT) {
                Object.assign(gridLineOptions, {
                    x2: this.options.chartOptions.width
                });
            }
            return UI.createElement(SVG.Line, _extends({ ref: this.refLink("gridLine") }, gridLineOptions));
        }
    }, {
        key: "getAxisLine",
        value: function getAxisLine() {
            var axisLineOptions = {};
            if (this.options.orientation === Direction.DOWN) {
                Object.assign(axisLineOptions, {
                    y2: this.options.axisLineLength
                });
            } else if (this.options.orientation === Direction.LEFT) {
                Object.assign(axisLineOptions, {
                    x2: -1 * this.options.axisLineLength
                });
            }
            return UI.createElement(SVG.Line, _extends({ ref: this.refLink("axisLine") }, axisLineOptions));
        }
    }, {
        key: "render",
        value: function render() {
            this.axisPosition = this.options.scale(this.options.value);

            if (this.options.orientation === Direction.DOWN) {
                this.translate(this.axisPosition, 0);
            } else if (this.options.orientation === Direction.LEFT) {
                this.translate(0, this.axisPosition);
            }

            return [this.getGridLine(), this.getAxisLine(), this.getLabel()];
        }
    }, {
        key: "showGridLine",
        value: function showGridLine() {
            if (this.axisPosition === this.options.scale.range()[0]) {
                this.gridLine.hide();
            } else {
                this.gridLine.show();
            }
        }
    }, {
        key: "hideGridLine",
        value: function hideGridLine() {
            this.gridLine.hide();
        }
    }]);
    return AxisTick;
}(SVG.Group);

var BasicAxis = function (_SVG$Group2) {
    inherits(BasicAxis, _SVG$Group2);

    function BasicAxis() {
        classCallCheck(this, BasicAxis);
        return possibleConstructorReturn(this, (BasicAxis.__proto__ || Object.getPrototypeOf(BasicAxis)).apply(this, arguments));
    }

    createClass(BasicAxis, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                labelFormatFunction: function labelFormatFunction(x) {
                    return x;
                }
            };
        }
    }, {
        key: "getAxisLine",
        value: function getAxisLine() {
            var axisLineOptions = {};
            if (this.options.orientation === Direction.DOWN) {
                Object.assign(axisLineOptions, {
                    x2: this.options.chartOptions.width
                });
                this.axisLength = this.options.chartOptions.width;
            } else if (this.options.orientation === Direction.LEFT) {
                Object.assign(axisLineOptions, {
                    y2: this.options.chartOptions.height
                });
                this.axisLength = this.options.chartOptions.height;
            }
            return UI.createElement(SVG.Line, _extends({ ref: this.refLink("axisLine") }, axisLineOptions));
        }
    }, {
        key: "getTicks",
        value: function getTicks() {
            this.ticks = [];
            this.tickValues = this.options.scale.ticks(this.options.ticks);
            for (var i = 0; i < this.tickValues.length; i += 1) {
                var tickValue = this.tickValues[i];
                this.ticks[i] = UI.createElement(AxisTick, { ref: this.refLinkArray("ticks", i), chartOptions: this.options.chartOptions,
                    scale: this.options.scale, orientation: this.options.orientation,
                    value: tickValue, label: this.options.labelFormatFunction(tickValue) });
            }
            return this.ticks;
        }
    }, {
        key: "render",
        value: function render() {
            if (this.options.orientation === Direction.DOWN) {
                this.translate(0, this.options.chartOptions.height);
            }

            return [].concat(toConsumableArray(this.getTicks()), [this.getAxisLine()]);
        }
    }, {
        key: "showGridLines",
        value: function showGridLines() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.ticks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var tick = _step.value;

                    tick.showGridLine();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "hideGridLines",
        value: function hideGridLines() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.ticks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var tick = _step2.value;

                    tick.hideGridLine();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }]);
    return BasicAxis;
}(SVG.Group);

var BasicChart = function (_SVG$Group3) {
    inherits(BasicChart, _SVG$Group3);

    function BasicChart() {
        classCallCheck(this, BasicChart);
        return possibleConstructorReturn(this, (BasicChart.__proto__ || Object.getPrototypeOf(BasicChart)).apply(this, arguments));
    }

    createClass(BasicChart, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                enableZoom: true,
                margin: {
                    top: 20,
                    bottom: 30,
                    left: 50,
                    right: 20
                },
                domainPadding: [0],
                xAxisDomain: [0, 160],
                yAxisDomain: [0, 100],
                xAxisScaleType: "linear",
                yAxisScaleType: "linear",
                cursorStyle: "move"
            };
        }
    }, {
        key: "normalizePadding",
        value: function normalizePadding(padding) {
            if (!Array.isArray(padding)) {
                return null;
            }

            if (padding.length === 1) {
                return [padding[0], padding[0], padding[0], padding[0]];
            } else if (padding.length === 2) {
                return [padding[0], padding[1], padding[0], padding[1]];
            } else if (padding.length === 3) {
                return [padding[0], padding[1], padding[2], padding[1]];
            } else if (padding.length === 4) {
                return padding;
            } else {
                error("BasicChart.normalizePadding receives invalid padding array: ", padding);
                return null;
            }
        }
    }, {
        key: "getPaddedDomain",
        value: function getPaddedDomain(domain, padding) {
            var domainLength = domain[1] - domain[0];
            return [domain[0] - padding[0] * domainLength, domain[1] + padding[1] * domainLength];
        }
    }, {
        key: "getScaleType",
        value: function getScaleType(type) {
            if (type === "linear") {
                return linear$1();
            } else if (type === "time") {
                return scaleTime();
            }
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(BasicChart.prototype.__proto__ || Object.getPrototypeOf(BasicChart.prototype), "setOptions", this).call(this, options);

            this.options.chartOptions.width -= this.options.margin.left + this.options.margin.right;
            this.options.chartOptions.height -= this.options.margin.top + this.options.margin.bottom;

            this.options.domainPadding = this.normalizePadding(this.options.domainPadding);
            this.options.xAxisDomain = this.getPaddedDomain(this.options.xAxisDomain, [this.options.domainPadding[3], this.options.domainPadding[1]]);
            this.options.yAxisDomain = this.getPaddedDomain(this.options.yAxisDomain, [this.options.domainPadding[2], this.options.domainPadding[0]]);

            this.xAxisOptions = {
                orientation: Direction.DOWN,
                ticks: 8,
                scale: this.getScaleType(this.options.xAxisScaleType).domain(this.options.xAxisDomain).range([0, this.options.chartOptions.width])
            };
            this._initialXScale = this.xAxisOptions.scale.copy();
            if (this.options.xAxisLabelFormatFunction) {
                this.xAxisOptions.labelFormatFunction = this.options.xAxisLabelFormatFunction;
            }
            this.yAxisOptions = {
                orientation: Direction.LEFT,
                ticks: 5,
                scale: this.getScaleType(this.options.yAxisScaleType).domain(this.options.yAxisDomain).range([this.options.chartOptions.height, 0])
            };
            this._initialYScale = this.yAxisOptions.scale.copy();
            if (this.options.yAxisLabelFormatFunction) {
                this.yAxisOptions.labelFormatFunction = this.options.yAxisLabelFormatFunction;
            }
        }
    }, {
        key: "getBackground",
        value: function getBackground() {
            return UI.createElement(SVG.Group, { ref: this.refLink("background") });
        }
    }, {
        key: "getAxes",
        value: function getAxes() {
            return [UI.createElement(BasicAxis, _extends({ ref: this.refLink("xAxis"), chartOptions: this.options.chartOptions }, this.xAxisOptions)), UI.createElement(BasicAxis, _extends({ ref: this.refLink("yAxis"), chartOptions: this.options.chartOptions }, this.yAxisOptions))];
        }
    }, {
        key: "render",
        value: function render() {
            var interactiveLayer = UI.createElement(SVG.Rect, { ref: this.refLink("interactiveLayer"), height: this.options.chartOptions.height,
                width: this.options.chartOptions.width, style: { cursor: this.options.cursorStyle }, opacity: 0 });
            // Add a clipPath
            var clipPathDef = UI.createElement(
                SVG.Defs,
                { ref: "defs" },
                UI.createElement(
                    SVG.ClipPath,
                    { id: "chartClipPath" + uniqueId(this) },
                    UI.createElement(SVG.Rect, { width: this.options.chartOptions.width, height: this.options.chartOptions.height })
                )
            );
            this.clipPath = "url(#chartClipPath" + uniqueId(this) + ")";

            this.translate(this.options.margin.left, this.options.margin.right);

            return [this.getBackground()].concat(toConsumableArray(this.getAxes()), [interactiveLayer], toConsumableArray(get(BasicChart.prototype.__proto__ || Object.getPrototypeOf(BasicChart.prototype), "render", this).call(this)), [clipPathDef]);
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var _this4 = this;

            this.options.children.forEach(function (child) {
                child.options.chart = _this4;
            });
            get(BasicChart.prototype.__proto__ || Object.getPrototypeOf(BasicChart.prototype), "redraw", this).call(this);
        }
    }, {
        key: "initZoom",
        value: function initZoom() {
            var _this5 = this;

            this.options.applyZoom = true;
            var zoomNode = select(this.interactiveLayer.node);
            this.zoomListener = function () {
                if (_this5.options.applyZoom) {
                    _this5.xAxisOptions.scale = event$1.transform.rescaleX(_this5._initialXScale);
                    _this5.yAxisOptions.scale = event$1.transform.rescaleY(_this5._initialYScale);
                    _this5.redraw();
                    if (!event$1.sourceEvent) {
                        // Custom zoom event
                        _this5.interactiveLayer.node.__zoom = event$1.transform;
                    }
                }
            };

            this.zoomBehavior = zoom().on("zoom", this.zoomListener);
            zoomNode.call(this.zoomBehavior);
        }
    }, {
        key: "disableZoom",
        value: function disableZoom() {
            this.options.applyZoom = false;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            if (this.options.enableZoom) {
                this.initZoom();
            }
        }
    }, {
        key: "addZoomListener",
        value: function addZoomListener(func) {
            this.addListener("zoom", func);
        }
    }]);
    return BasicChart;
}(SVG.Group);

var TimeChart = function (_BasicChart) {
    inherits(TimeChart, _BasicChart);

    function TimeChart() {
        classCallCheck(this, TimeChart);
        return possibleConstructorReturn(this, (TimeChart.__proto__ || Object.getPrototypeOf(TimeChart)).apply(this, arguments));
    }

    createClass(TimeChart, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(TimeChart.prototype.__proto__ || Object.getPrototypeOf(TimeChart.prototype), "getDefaultOptions", this).call(this), {
                xAxisScaleType: "time",
                paddingXOnNoPoints: 1000 * 60 * 60 * 24 * 30 * 3,
                paddingYOnNoPoints: 50,
                zoomScaleExtent: [1, 20]
            });
        }
    }, {
        key: "getTimeFormat",
        value: function getTimeFormat() {
            return function (unixTime) {
                var date = new StemDate(unixTime);
                var formatTypes = [{ name: "Seconds", continueSubdivisionOnValue: 0, format: "HH:mm:ss" }, { name: "Minutes", continueSubdivisionOnValue: 0, format: "HH:mm" }, { name: "Hours", continueSubdivisionOnValue: 0, format: "HH:mm" }, { name: "Date", continueSubdivisionOnValue: 1, format: "DD/MMM" }, { name: "Month", continueSubdivisionOnValue: 0, format: "MMM" }];

                for (var i = 0; i < formatTypes.length; i += 1) {
                    // TODO: this is a bit hacky, should be cleaner (maybe included in Date)
                    var subdivisionValue = date["get" + formatTypes[i].name]();
                    if (subdivisionValue !== formatTypes[i].continueSubdivisionOnValue) {
                        return date.format(formatTypes[i].format);
                    }
                }

                return date.format("YYYY");
            };
        }
    }, {
        key: "getMinMaxDomain",
        value: function getMinMaxDomain(points, coordinateAlias, padding) {
            var domain = [coordinateAlias(points[0]), coordinateAlias(points[0])];
            points.forEach(function (point) {
                domain[0] = Math.min(domain[0], coordinateAlias(point));
                domain[1] = Math.max(domain[1], coordinateAlias(point));
            });
            if (domain[0] === domain[1]) {
                domain[0] -= padding;
                domain[1] += padding;
            }
            return domain;
        }
    }, {
        key: "defaultXNoPoints",
        value: function defaultXNoPoints() {
            var padding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.paddingXOnNoPoints;

            return [+StemDate.now() - padding, +StemDate.now() + padding];
        }
    }, {
        key: "getXAxisDomain",
        value: function getXAxisDomain(points, coordinateAlias) {
            var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.paddingXOnNoPoints;

            if (!Array.isArray(points) || points.length === 0) {
                return this.defaultXNoPoints(padding);
            }
            return this.getMinMaxDomain(points, coordinateAlias, padding);
        }
    }, {
        key: "defaultYNoPoints",
        value: function defaultYNoPoints(padding) {
            return [-padding, padding];
        }
    }, {
        key: "getYAxisDomain",
        value: function getYAxisDomain(points, coordinateAlias) {
            var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.paddingYOnNoPoints;

            if (!Array.isArray(points) || points.length === 0) {
                return this.defaultYNoPoints(padding);
            }
            return this.getMinMaxDomain(points, coordinateAlias, padding);
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            options.xAxisLabelFormatFunction = this.getTimeFormat();

            // TODO: This REALLY needs a refactoring.
            var paddingXOnNoPoints = options.paddingXOnNoPoints;
            if (paddingXOnNoPoints == null) {
                paddingXOnNoPoints = this.getDefaultOptions().paddingXOnNoPoints;
            }
            var paddingYOnNoPoints = options.paddingYOnNoPoints;
            if (paddingYOnNoPoints == null) {
                paddingYOnNoPoints = this.getDefaultOptions().paddingYOnNoPoints;
            }

            options.xAxisDomain = this.getXAxisDomain(options.plotOptions.pointsAlias(options.data), options.plotOptions.xCoordinateAlias, paddingXOnNoPoints);
            options.yAxisDomain = this.getYAxisDomain(options.plotOptions.pointsAlias(options.data), options.plotOptions.yCoordinateAlias, paddingYOnNoPoints);
            get(TimeChart.prototype.__proto__ || Object.getPrototypeOf(TimeChart.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "initZoom",
        value: function initZoom() {
            var _this7 = this;

            var infinite = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            this.options.applyZoom = true;
            var zoomNode = select(this.interactiveLayer.node);
            this.zoomListener = function () {
                if (_this7.options.applyZoom) {
                    var x = event$1.transform.x,
                        y = event$1.transform.y,
                        k = event$1.transform.k;
                    event$1.transform.x = Math.min(0, Math.max(x, _this7.options.chartOptions.width * (1 - k)));
                    event$1.transform.y = Math.min(0, Math.max(y, _this7.options.chartOptions.height * (1 - k)));
                    _this7.xAxisOptions.scale = event$1.transform.rescaleX(_this7._initialXScale);
                    _this7.yAxisOptions.scale = event$1.transform.rescaleY(_this7._initialYScale);
                    _this7.redraw();
                    _this7.interactiveLayer.node.__zoom = event$1.transform;
                }
            };
            this.zoomBehavior = zoom();
            if (!infinite) {
                this.zoomBehavior = this.zoomBehavior.scaleExtent(this.options.zoomScaleExtent);
            }
            this.zoomBehavior = this.zoomBehavior.on("zoom", this.zoomListener);
            zoomNode.call(this.zoomBehavior);

            // Simulate a center zoom
            var factor = 1.2;
            var centerZoom = {
                k: factor,
                x: this.options.chartOptions.width / 2 * (1 - factor),
                y: this.options.chartOptions.height / 2 * (1 - factor)
            };
            centerZoom.__proto__ = identity$5.__proto__;
            customEvent({
                transform: centerZoom
            }, this.zoomListener, zoomNode);
        }
    }]);
    return TimeChart;
}(BasicChart);

var ChartSVG = function (_SVG$SVGRoot) {
    inherits(ChartSVG, _SVG$SVGRoot);

    function ChartSVG() {
        classCallCheck(this, ChartSVG);
        return possibleConstructorReturn(this, (ChartSVG.__proto__ || Object.getPrototypeOf(ChartSVG)).apply(this, arguments));
    }

    createClass(ChartSVG, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(ChartSVG.prototype.__proto__ || Object.getPrototypeOf(ChartSVG.prototype), "setOptions", this).call(this, options);
            this.chartOptions = {
                height: options.height || 500,
                width: options.width || 790
            };
            this.plotOptions = {
                pointsAlias: function pointsAlias(data) {
                    return data.points;
                },
                xCoordinateAlias: function xCoordinateAlias(data) {
                    return data.x;
                },
                yCoordinateAlias: function yCoordinateAlias(data) {
                    return data.y;
                }
            };
            this.data = {
                points: [{ "x": 30, "y": 60, "label": "A" }, { "x": 100, "y": 55, "label": "C" }, { "x": 130, "y": 55, "label": "E" }, { "x": 115, "y": 20, "label": "D" }, { "x": 75, "y": 70, "label": "B" }]
            };

            // Benchmark - 400 points 26 FPS, 1000 points 13 FPS
            //this.data = {
            //    points: []
            //};
            //for (let i = 0; i <= 400; i += 1) {
            //    this.data.points.push({x: Math.random() * 200, y: Math.random() * 100});
            //}
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(ChartSVG.prototype.__proto__ || Object.getPrototypeOf(ChartSVG.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("height", this.chartOptions.height);
            attr.setAttribute("width", this.chartOptions.width);
            return attr;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                BasicChart,
                { chartOptions: Object.assign({}, this.chartOptions),
                    xAxisDomain: this.options.xDomain,
                    yAxisDomain: this.options.yDomain },
                UI.createElement(LinePlot, { plotOptions: this.plotOptions, data: this.data }),
                UI.createElement(BasePointPlot, { plotOptions: this.plotOptions, data: this.data })
            )];
        }
    }]);
    return ChartSVG;
}(SVG.SVGRoot);

function formatCoord(value, scale) {
    var decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

    var size = Math.abs(scale.domain()[0] - scale.domain()[1]);
    //not very ethic way of doing this, but it should work fine...
    if (decimals === -1) {
        //default
        var d = 0;
        if (size > 1000) {
            d = 0;
        } else if (size > 1) {
            var exp = 0,
                pwr = 1;
            while (pwr < size) {
                exp += 1;
                pwr *= 10;
            }
            d = 4 - exp;
        } else {
            var _exp = 0,
                _pwr = 1;
            while (_pwr * 0.1 > size) {
                _exp += 1;
                _pwr *= 0.1;
            }
            d = 3 + _exp;
        }
        value = "" + value.toFixed(d);
    } else {
        value = "" + value.toFixed(decimals);
    }
    while (value.indexOf(".") !== -1 && value.endsWith('0')) {
        value = value.slice(0, value.length - 1);
    }
    if (value.endsWith('.')) {
        value = value.slice(0, value.length - 1);
    }
    return value;
}

function scaleCoord(scale, dataCoord) {
    var d = scale.domain();
    var r = scale.range();
    return r[0] + (r[1] - r[0]) * (dataCoord - d[0]) / (d[1] - d[0]);
}

function getLineAndSegmIntersection(a, b, c, x1, y1, x2, y2) {
    if (x1 === x2) {
        if (Math.abs(b) < 0.000001) {
            return undefined;
        }
        var y = -(a * x1 + c) / b;
        if (Math.min(y1, y2) > y || Math.max(y1, y2) < y) {
            return undefined;
        }
        return {
            x: x1,
            y: y
        };
    }
    if (Math.abs(a) < 0.000001) {
        return undefined;
    }
    var x = -(b * y1 + c) / a;
    if (Math.min(x1, x2) > x || Math.max(x1, x2) < x) {
        return undefined;
    }
    return {
        x: x,
        y: y1
    };
}

function getLineAndRectIntersection(a, b, c, rectX, rectY) {
    var p1 = getLineAndSegmIntersection(a, b, c, rectX[0], rectY[0], rectX[0], rectY[1]);
    var p2 = getLineAndSegmIntersection(a, b, c, rectX[1], rectY[0], rectX[1], rectY[1]);
    var p3 = getLineAndSegmIntersection(a, b, c, rectX[0], rectY[0], rectX[1], rectY[0]);
    var p4 = getLineAndSegmIntersection(a, b, c, rectX[0], rectY[1], rectX[1], rectY[1]);
    if (p1) {
        if (p2) {
            return [p1.x, p1.y, p2.x, p2.y];
        }
        if (p3) {
            return [p1.x, p1.y, p3.x, p3.y];
        }
        if (p4) {
            return [p1.x, p1.y, p4.x, p4.y];
        }
        return [p1.x, p1.y, p1.x, p1.y];
    }
    if (p2) {
        if (p3) {
            return [p2.x, p2.y, p3.x, p3.y];
        }
        if (p4) {
            return [p2.x, p2.y, p4.x, p4.y];
        }
        return [p2.x, p2.y, p2.x, p2.y];
    }
    if (p3) {
        if (p4) {
            return [p3.x, p3.y, p4.x, p4.y];
        }
        return [p3.x, p3.y, p3.x, p3.y];
    }
    if (p4) {
        return [p4.x, p4.y, p4.x, p4.y];
    }
    return [0, 0, 0, 0];
}

var InvisibleCircleClass = DoubleClickable(Draggable(SVG.Circle));

var DraggablePointWithCoords = function (_SVG$Group) {
    inherits(DraggablePointWithCoords, _SVG$Group);

    function DraggablePointWithCoords() {
        classCallCheck(this, DraggablePointWithCoords);
        return possibleConstructorReturn(this, (DraggablePointWithCoords.__proto__ || Object.getPrototypeOf(DraggablePointWithCoords)).apply(this, arguments));
    }

    createClass(DraggablePointWithCoords, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(DraggablePointWithCoords.prototype.__proto__ || Object.getPrototypeOf(DraggablePointWithCoords.prototype), "setOptions", this).call(this, options);
            this.options.center = {};
            this.options.center.x = this.options.data.x / this.getXScale();
            this.options.center.y = this.options.data.y / this.getYScale();
        }
    }, {
        key: "getXScale",
        value: function getXScale() {
            var scale = this.options.chart.xAxisOptions.scale;
            return Math.abs(scale.domain()[1] - scale.domain()[0]) / Math.abs(scale.range()[1] - scale.range()[0]);
        }
    }, {
        key: "getYScale",
        value: function getYScale() {
            var scale = this.options.chart.yAxisOptions.scale;
            return Math.abs(scale.domain()[1] - scale.domain()[0]) / Math.abs(scale.range()[1] - scale.range()[0]);
        }
    }, {
        key: "formatCoords",
        value: function formatCoords() {
            var x = this.options.data.x;
            var y = this.options.data.y;
            var decimals = -1;
            if (this.options.widget) {
                decimals = this.options.widget.decimals;
            }
            x = formatCoord(x, this.options.chart.xAxisOptions.scale, decimals);
            y = formatCoord(y, this.options.chart.yAxisOptions.scale, decimals);
            return (this.options.label ? this.options.data.label : "") + (this.options.coords ? "(" + x + "," + y + ")" : "");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(SVG.Circle, { ref: "realPoint", radius: "5", fill: this.options.color || "black", parent: this,
                style: { cursor: "move" }, center: this.options.center }), UI.createElement(SVG.Text, { ref: "coords", textAnchor: "left", x: this.options.center.x + 4, y: this.options.center.y + 10, style: { "-webkit-user-select": "none" },
                text: this.formatCoords() }), UI.createElement(SVG.Line, { ref: "lineDown", x1: this.options.center.x, y1: this.options.center.y,
                strokeWidth: 1, strokeDasharray: "3,3", stroke: "grey", fill: "grey",
                x2: this.options.center.x, y2: this.options.chart.yAxisOptions.scale.range()[0] }), UI.createElement(SVG.Line, { ref: "lineLeft", x1: this.options.center.x, y1: this.options.center.y,
                strokeWidth: 1, strokeDasharray: "3,3", stroke: "grey", fill: "grey",
                x2: this.options.chart.xAxisOptions.scale.range()[0], y2: this.options.center.y }),
            //the circle we actually use for drags and clicks
            UI.createElement(InvisibleCircleClass, { ref: "point", opacity: "0", fill: "transparent", radius: "15", style: { cursor: "move" }, parent: this,
                stroke: "red", strokeWidth: "2",
                center: this.options.center, editable: this.options.editable })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.point.addNodeListener("mouseover", function () {
                _this2.point.setOpacity(1);
            });
            this.point.addNodeListener("mouseout", function () {
                _this2.point.setOpacity(0);
            });
            this.realPoint.addNodeListener("mouseover", function () {
                _this2.point.setOpacity(1);
            });
            this.realPoint.addNodeListener("mouseout", function () {
                _this2.point.setOpacity(0);
            });

            this.addClickListener(function (event) {
                _this2.clickFunc();
                event.stopPropagation();
                event.preventDefault();
            });

            if (this.options.editable) {
                this.dragFunc = {
                    onStart: function onStart() {
                        _this2.dragging = true;
                        _this2.prevCoords = _this2.options.coords;
                    },
                    onDrag: function onDrag(deltaX, deltaY) {
                        _this2.showCoords(false);
                        _this2.dragged = true;
                        _this2.options.data.x += deltaX * _this2.getXScale();
                        _this2.options.data.y -= deltaY * _this2.getYScale();
                        _this2.options.center.x += deltaX;
                        _this2.options.center.y -= deltaY;
                        if (_this2.hasPopup) {
                            _this2.popup.hide();
                            _this2.hasPopup = false;
                        }
                        _this2.redraw();
                    },
                    onEnd: function onEnd() {
                        if (_this2.dragging && _this2.dragged) {
                            _this2.options.coords = _this2.prevCoords;
                            var decimals = -1;
                            if (_this2.options.widget && _this2.options.widget.hasOwnProperty("decimals")) {
                                decimals = _this2.options.widget.decimals;
                            }
                            _this2.options.data.x = parseFloat(formatCoord(_this2.options.data.x, _this2.options.chart.xAxisOptions.scale, decimals));
                            _this2.options.data.y = parseFloat(formatCoord(_this2.options.data.y, _this2.options.chart.yAxisOptions.scale, decimals));
                            _this2.redraw();
                            _this2.dispatch("dataChanged");
                            _this2.hasPopup = true;
                            _this2.dragged = false;
                            setTimeout(function () {
                                _this2.hasPopup = false;
                            }, 0);
                        }
                        _this2.dragging = false;
                    }
                };
                this.point.addDragListener(this.dragFunc);
            }
        }
    }, {
        key: "redraw",
        value: function redraw() {
            this.options.center = {
                x: scaleCoord(this.options.chart.xAxisOptions.scale, this.options.data.x),
                y: scaleCoord(this.options.chart.yAxisOptions.scale, this.options.data.y)
            };
            if (this.coords) {
                this.coords.options.text = this.formatCoords();
            }
            get(DraggablePointWithCoords.prototype.__proto__ || Object.getPrototypeOf(DraggablePointWithCoords.prototype), "redraw", this).call(this);
            if (!this.options.coords && !this.options.label) {
                this.node.removeChild(this.coords.node);
            }
            if (!this.options.OxParallel) {
                this.node.removeChild(this.lineLeft.node);
            }
            if (!this.options.OyParallel) {
                this.node.removeChild(this.lineDown.node);
            }
            if (this.hasPopup) {
                if (this.popup.isInDocument()) {
                    this.popup.setCenter(this.getPopupPosition());
                }
                if (!this.isPopupVisible()) {
                    this.popup.hide();
                }
            }
        }
    }, {
        key: "showCoords",
        value: function showCoords() {
            var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (!this.options.coords) {
                this.options.coords = true;
                if (prev) {
                    this.prevCoords = true;
                }
                this.redraw();
            }
        }
    }, {
        key: "hideCoords",
        value: function hideCoords() {
            var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (this.options.coords) {
                this.options.coords = false;
                if (prev) {
                    this.prevCoords = false;
                }
                this.redraw();
            }
        }
    }, {
        key: "showLabel",
        value: function showLabel() {
            if (!this.options.label) {
                this.options.label = true;
                this.redraw();
            }
        }
    }, {
        key: "hideLabel",
        value: function hideLabel() {
            if (this.options.label) {
                this.options.label = false;
                this.redraw();
            }
        }
    }, {
        key: "showOxParallel",
        value: function showOxParallel() {
            if (!this.options.OxParallel) {
                this.options.OxParallel = true;
                this.redraw();
            }
        }
    }, {
        key: "hideOxParallel",
        value: function hideOxParallel() {
            if (this.options.OxParallel) {
                this.options.OxParallel = false;
                this.redraw();
            }
        }
    }, {
        key: "showOyParallel",
        value: function showOyParallel() {
            if (!this.options.OyParallel) {
                this.options.OyParallel = true;
                this.redraw();
            }
        }
    }, {
        key: "hideOyParallel",
        value: function hideOyParallel() {
            if (this.options.OyParallel) {
                this.options.OyParallel = false;
                this.redraw();
            }
        }
    }, {
        key: "changeLabelFunc",
        value: function changeLabelFunc() {
            var _this3 = this;

            this.popup.setTitle(UI.createElement(TextInput, { ref: this.refLink("inputLabel"), value: this.options.data.label, style: { width: "60px" } }));
            this.inputLabel.node.focus();
            this.inputLabel.node.select();
            var func = function func() {
                _this3.options.data.label = _this3.inputLabel.getValue().trim();
                _this3.dispatch("dataChanged");
                _this3.popup.setTitle(_this3.getPopupTitle());
                _this3.changeLabel.addClickListener(function (event) {
                    event.stopPropagation();
                    _this3.changeLabelFunc();
                });

                if (_this3.coords) {
                    _this3.coords.options.text = _this3.formatCoords();
                    _this3.coords.redraw();
                }
                if (!Device.supportsEvent("click")) {
                    window.removeEventListener("touchstart", func);
                } else {
                    window.removeEventListener("click", func);
                }
                _this3.popup.removeClickListener(func);
            };
            this.inputLabel.node.addEventListener("keypress", function (event) {
                var key = event.which || event.keyCode;
                if (key === 13) {
                    // 13 is enter
                    func();
                }
            });
            if (!Device.supportsEvent("click")) {
                window.addEventListener("touchstart", func);
            } else {
                window.addEventListener("click", func);
            }
            this.inputLabel.addClickListener(function (event) {
                event.stopPropagation();
            });
            ///a timeout is needed in order to actually change the current state of the title,
            ///otherwise the click on the edit button itself will trigger, changing it back
            setTimeout(function () {
                _this3.popup.addClickListener(func);
            }, 0);
        }
    }, {
        key: "clickFunc",
        value: function clickFunc() {
            var _this4 = this;

            var changeLabel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (this.hasPopup) {
                if (this.popup) {
                    this.popup.hide();
                }
                this.hasPopup = false;
            } else {
                if (!this.dragged) {
                    this.popup = Popup.create(document.body, Object.assign({
                        title: this.getPopupTitle(),
                        children: this.getPopupContent(),
                        transitionTime: 300,
                        titleFontSize: "9pt",
                        contentFontSize: "9pt",
                        style: {
                            maxWidth: "270px"
                        }
                    }, this.getPopupPosition()));
                    this.seeCoordsButton.addClickListener(function () {
                        if (_this4.seeCoordsButton.getValue()) {
                            _this4.showCoords();
                        } else {
                            _this4.hideCoords();
                        }
                    });
                    this.seeLabelButton.addClickListener(function () {
                        if (_this4.seeLabelButton.getValue()) {
                            _this4.showLabel();
                        } else {
                            _this4.hideLabel();
                        }
                    });
                    this.seeOxButton.addClickListener(function () {
                        if (_this4.seeOxButton.getValue()) {
                            _this4.showOxParallel();
                        } else {
                            _this4.hideOxParallel();
                        }
                    });
                    this.seeOyButton.addClickListener(function () {
                        if (_this4.seeOyButton.getValue()) {
                            _this4.showOyParallel();
                        } else {
                            _this4.hideOyParallel();
                        }
                    });

                    this.changeLabel.addClickListener(function () {
                        _this4.changeLabelFunc();
                    });
                    this.hasPopup = true;

                    if (changeLabel) {
                        this.changeLabelFunc();
                        this.inputLabel.node.focus();
                        this.inputLabel.node.select();
                    }
                }
            }
        }
    }, {
        key: "getPopupTitle",
        value: function getPopupTitle() {
            var decimals = -1;
            if (this.options.widget) {
                decimals = this.options.widget.decimals || -1;
            }
            return [this.options.data.label + " (" + formatCoord(this.options.data.x, this.options.chart.xAxisOptions.scale, decimals) + ", " + formatCoord(this.options.data.y, this.options.chart.yAxisOptions.scale, decimals) + ")", UI.createElement(
                "div",
                { ref: this.refLink("changeLabel"), className: "pull-right", style: { marginRight: "4px", marginLeft: "4px" } },
                UI.createElement("i", { className: "fa fa-pencil-square-o", "aria-hidden": "true", style: { cursor: "pointer" } })
            )];
        }
    }, {
        key: "getPopupContent",
        value: function getPopupContent() {
            return [UI.createElement(
                Form,
                null,
                UI.createElement(
                    FormField,
                    { label: "Coordinates", style: { display: "inline", float: "initial" } },
                    UI.createElement(CheckboxInput, { ref: this.refLink("seeCoordsButton"), value: this.options.coords })
                ),
                UI.createElement(
                    FormField,
                    { label: "Point Label", style: { display: "inline", float: "initial" } },
                    UI.createElement(CheckboxInput, { ref: this.refLink("seeLabelButton"), value: this.options.label })
                ),
                UI.createElement(
                    FormField,
                    { label: "Parallel to Ox", style: { display: "inline", float: "initial" } },
                    UI.createElement(CheckboxInput, { ref: this.refLink("seeOxButton"), value: this.options.OxParallel })
                ),
                UI.createElement(
                    FormField,
                    { label: "Parallel to Oy", style: { display: "inline", float: "initial" } },
                    UI.createElement(CheckboxInput, { ref: this.refLink("seeOyButton"), value: this.options.OyParallel })
                )
            )];
        }
    }, {
        key: "getPopupPosition",
        value: function getPopupPosition() {
            var boundingRect = this.point.getBoundingClientRect();
            return {
                x: boundingRect.left + boundingRect.width / 2,
                y: boundingRect.bottom - boundingRect.height * 0.1
            };
        }
    }, {
        key: "isPopupVisible",
        value: function isPopupVisible() {
            var chartBoundingRect = this.parent.options.chart.interactiveLayer.getBoundingClientRect();
            var popupPosition = this.getPopupPosition();
            return chartBoundingRect.left <= popupPosition.x && popupPosition.x <= chartBoundingRect.right && chartBoundingRect.top <= popupPosition.y && popupPosition.y <= chartBoundingRect.bottom;
        }
    }]);
    return DraggablePointWithCoords;
}(SVG.Group);

var GeometryLine = function (_SVG$Line) {
    inherits(GeometryLine, _SVG$Line);

    function GeometryLine() {
        classCallCheck(this, GeometryLine);
        return possibleConstructorReturn(this, (GeometryLine.__proto__ || Object.getPrototypeOf(GeometryLine)).apply(this, arguments));
    }

    createClass(GeometryLine, [{
        key: "redraw",
        value: function redraw() {
            var xScale = this.options.chart.xAxisOptions.scale;
            var yScale = this.options.chart.yAxisOptions.scale;
            var intersection = getLineAndRectIntersection(this.options.data.a, this.options.data.b, this.options.data.c, xScale.domain(), yScale.domain());
            this.options.x1 = scaleCoord(xScale, intersection[0]);
            this.options.y1 = scaleCoord(yScale, intersection[1]);
            this.options.x2 = scaleCoord(xScale, intersection[2]);
            this.options.y2 = scaleCoord(yScale, intersection[3]);
            get(GeometryLine.prototype.__proto__ || Object.getPrototypeOf(GeometryLine.prototype), "redraw", this).call(this);
        }
    }]);
    return GeometryLine;
}(SVG.Line);

var GeometrySegment = function (_SVG$Line2) {
    inherits(GeometrySegment, _SVG$Line2);

    function GeometrySegment() {
        classCallCheck(this, GeometrySegment);
        return possibleConstructorReturn(this, (GeometrySegment.__proto__ || Object.getPrototypeOf(GeometrySegment)).apply(this, arguments));
    }

    createClass(GeometrySegment, [{
        key: "redraw",
        value: function redraw() {
            var xScale = this.options.chart.xAxisOptions.scale;
            var yScale = this.options.chart.yAxisOptions.scale;
            this.options.x1 = scaleCoord(xScale, this.options.data.x1);
            this.options.y1 = scaleCoord(yScale, this.options.data.y1);
            this.options.x2 = scaleCoord(xScale, this.options.data.x2);
            this.options.y2 = scaleCoord(yScale, this.options.data.y2);
            get(GeometrySegment.prototype.__proto__ || Object.getPrototypeOf(GeometrySegment.prototype), "redraw", this).call(this);
        }
    }]);
    return GeometrySegment;
}(SVG.Line);

var GeometryPolygon = function (_SVG$Group2) {
    inherits(GeometryPolygon, _SVG$Group2);

    function GeometryPolygon() {
        classCallCheck(this, GeometryPolygon);
        return possibleConstructorReturn(this, (GeometryPolygon.__proto__ || Object.getPrototypeOf(GeometryPolygon)).apply(this, arguments));
    }

    createClass(GeometryPolygon, [{
        key: "render",
        value: function render() {
            var segments = [];
            for (var i = 1; i < this.points.length; i += 1) {
                segments.push(UI.createElement(SVG.Line, { x1: this.points[i - 1].x, y1: this.points[i - 1].y, x2: this.points[i].x, y2: this.points[i].y }));
            }
            segments.push(UI.createElement(SVG.Line, { x1: this.points[this.points.length - 1].x, y1: this.points[this.points.length - 1].y,
                x2: this.points[0].x, y2: this.points[0].y }));
            return segments;
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var xScale = this.options.chart.xAxisOptions.scale;
            var yScale = this.options.chart.yAxisOptions.scale;
            this.points = this.points || [];
            this.points.splice(0, this.points.length);
            for (var i = 0; i < this.options.data.length; i += 1) {
                this.points.push({
                    x: scaleCoord(xScale, this.options.data[i].x),
                    y: scaleCoord(yScale, this.options.data[i].y)
                });
            }
            get(GeometryPolygon.prototype.__proto__ || Object.getPrototypeOf(GeometryPolygon.prototype), "redraw", this).call(this);
        }
    }]);
    return GeometryPolygon;
}(SVG.Group);

var GeometryCircle = function (_SVG$Circle) {
    inherits(GeometryCircle, _SVG$Circle);

    function GeometryCircle() {
        classCallCheck(this, GeometryCircle);
        return possibleConstructorReturn(this, (GeometryCircle.__proto__ || Object.getPrototypeOf(GeometryCircle)).apply(this, arguments));
    }

    createClass(GeometryCircle, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(GeometryCircle.prototype.__proto__ || Object.getPrototypeOf(GeometryCircle.prototype), "getDefaultOptions", this).call(this), {
                fill: "none",
                stroke: "black"
            });
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var xScale = this.options.chart.xAxisOptions.scale;
            var yScale = this.options.chart.yAxisOptions.scale;
            this.options.center.x = scaleCoord(xScale, this.options.data.x);
            this.options.center.y = scaleCoord(yScale, this.options.data.y);
            var range = Math.abs(yScale.range()[1] - yScale.range()[0]);
            var domain = Math.abs(yScale.domain()[1] - yScale.domain()[0]);
            this.options.radius = this.options.data.r * range / domain;
            get(GeometryCircle.prototype.__proto__ || Object.getPrototypeOf(GeometryCircle.prototype), "redraw", this).call(this);
        }
    }]);
    return GeometryCircle;
}(SVG.Circle);

var dropdownList = DropdownListStyle.getInstance();

var defaultData = {
    points: [{ "x": 30, "y": 60, "label": "A" }, { "x": 100, "y": 55, "label": "C" }, { "x": 130, "y": 55, "label": "E" }, { "x": 115, "y": 20, "label": "D" }, { "x": 75, "y": 70, "label": "B" }],
    lines: [{ a: 1, b: 1, c: 0 }],
    segments: [{ "x1": 5, "y1": 7, "x2": 15, y2: 20 }],
    circles: [{ "x": 25, "y": 25, "r": 15 }],
    polygons: [[{ "x": 25, "y": 25 }, { "x": 40, "y": 40 }, { "x": 40, "y": 0 }]]
};

var decimalOptions = [{
    value: -1,
    toString: function toString() {
        return "Auto";
    }
}, {
    value: 0,
    toString: function toString() {
        return "None";
    }
}, {
    value: 1,
    toString: function toString() {
        return "One";
    }
}, {
    value: 2,
    toString: function toString() {
        return "Two";
    }
}, {
    value: 3,
    toString: function toString() {
        return "Three";
    }
}, {
    value: 4,
    toString: function toString() {
        return "Four";
    }
}, {
    value: 5,
    toString: function toString() {
        return "Five";
    }
}, {
    value: 6,
    toString: function toString() {
        return "Six";
    }
}];

var objects = ["point", "segment", "line", "circle", "polygon"];
var objectClasses = [DraggablePointWithCoords, GeometrySegment, GeometryLine, GeometryCircle, GeometryPolygon];

var Stringifier = function () {
    function Stringifier() {
        classCallCheck(this, Stringifier);
    }

    createClass(Stringifier, null, [{
        key: "c",
        value: function c(value) {
            return formatCoord(parseFloat(value), this.scale, this.decimals);
        }
    }, {
        key: "point",
        value: function point(_point) {
            var text = this.c(_point.x) + " " + this.c(_point.y);
            if (_point.label) {
                text += " " + _point.label;
            }
            return text + "\n";
        }
    }, {
        key: "line",
        value: function line$$1(_line) {
            return "Line " + this.c(_line.a) + " " + this.c(_line.b) + " " + this.c(_line.c) + "\n";
        }
    }, {
        key: "segment",
        value: function segment(_segment) {
            return "Segment " + this.c(_segment.x1) + " " + this.c(_segment.y1) + " " + this.c(_segment.x2) + " " + this.c(_segment.y2) + "\n";
        }
    }, {
        key: "circle",
        value: function circle(_circle) {
            return "Circle " + this.c(_circle.x) + " " + this.c(_circle.y) + " " + this.c(_circle.r) + "\n";
        }
    }, {
        key: "polygon",
        value: function polygon(_polygon) {
            var text = "Polygon\n";
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _polygon[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var point = _step.value;

                    text += this.c(point.x) + " " + this.c(point.y) + "\n";
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            text += "...\n";
            return text;
        }
    }]);
    return Stringifier;
}();

Stringifier.decimals = -1;
Stringifier.scale = {
    domain: function domain() {
        return [0, 160];
    }
};

function getGeometryText(data) {
    var text = "";
    for (var i = 0; i < objects.length; i += 1) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = (data[objects[i] + "s"] || [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var obj = _step2.value;

                text += Stringifier[objects[i]](obj);
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
    }
    return text;
}

function Plot(BaseClass, className) {
    var ClassPlot = function (_SVG$Group) {
        inherits(ClassPlot, _SVG$Group);

        function ClassPlot() {
            classCallCheck(this, ClassPlot);
            return possibleConstructorReturn(this, (ClassPlot.__proto__ || Object.getPrototypeOf(ClassPlot)).apply(this, arguments));
        }

        createClass(ClassPlot, [{
            key: "getNodeAttributes",
            value: function getNodeAttributes() {
                var attr = get(ClassPlot.prototype.__proto__ || Object.getPrototypeOf(ClassPlot.prototype), "getNodeAttributes", this).call(this);
                attr.setAttribute("clip-path", this.options.chart.clipPath);
                return attr;
            }
        }, {
            key: "render",
            value: function render() {
                this[className + "s"] = [];
                for (var i = 0; i < this.options.data[className + "s"].length; i += 1) {
                    this[className + "s"][i] = UI.createElement(BaseClass, { ref: this.refLinkArray(className + "s", i),
                        data: this.options.data[className + "s"][i], coords: false, label: true,
                        chart: this.options.chart, widget: this.options.widget,
                        editable: this.options.editable });
                }
                return this[className + "s"];
            }
        }, {
            key: "redraw",
            value: function redraw() {
                if (!this[className + "s"]) {
                    get(ClassPlot.prototype.__proto__ || Object.getPrototypeOf(ClassPlot.prototype), "redraw", this).call(this);
                } else {
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = this[className + "s"][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var element = _step3.value;

                            element.redraw();
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }
                }
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this2 = this;

                this.options.chart.addZoomListener(function () {
                    _this2.redraw();
                });
            }
        }, {
            key: "remove",
            value: function remove(element) {
                var newElements = [];
                for (var i = 0; i < this[className + "s"].length; i += 1) {
                    if (this[className + "s"][i] !== element) {
                        newElements.push(this[className + "s"][i]);
                    }
                }
                delete this[className + "s"];
                this[className + "s"] = newElements;
                element.destroyNode();
            }
        }]);
        return ClassPlot;
    }(SVG.Group);

    return ClassPlot;
}
var PlotClasses = [];
for (var i = 0; i < objects.length; i += 1) {
    PlotClasses.push(Plot(objectClasses[i], objects[i]));
}

var CSAGeometryWidgetSVG = function (_ChartSVG) {
    inherits(CSAGeometryWidgetSVG, _ChartSVG);

    function CSAGeometryWidgetSVG() {
        classCallCheck(this, CSAGeometryWidgetSVG);
        return possibleConstructorReturn(this, (CSAGeometryWidgetSVG.__proto__ || Object.getPrototypeOf(CSAGeometryWidgetSVG)).apply(this, arguments));
    }

    createClass(CSAGeometryWidgetSVG, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                editable: false,
                points: defaultData.points,
                lines: defaultData.lines,
                segments: defaultData.segments,
                circles: defaultData.circles,
                polygons: defaultData.polygons,
                xDomain: [0, 160],
                yDomain: [0, 100],
                width: 320,
                height: 200
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(CSAGeometryWidgetSVG.prototype.__proto__ || Object.getPrototypeOf(CSAGeometryWidgetSVG.prototype), "setOptions", this).call(this, options);
            this.chartOptions = {
                width: this.options.width + 70,
                height: this.options.height + 50
            };
            this.options.data = {};
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = objects[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var objectName = _step4.value;

                    this.options[objectName + "s"] = options[objectName + "s"] || this.options[objectName + "s"];
                    this.options.data[objectName + "s"] = this.options[objectName + "s"];
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            var plots = [];
            for (var _i = 0; _i < objects.length; _i += 1) {
                var PlotClass = PlotClasses[_i];
                plots.push(UI.createElement(PlotClass, { editable: this.options.editable, ref: this.refLink(objects[_i] + "Plot"),
                    data: this.options.data, widget: this.options.widget }));
            }
            return [UI.createElement(
                BasicChart,
                { ref: this.refLink("chart"), cursorStyle: "pointer",
                    chartOptions: Object.assign({}, this.chartOptions),
                    xAxisDomain: this.options.xDomain, yAxisDomain: this.options.yDomain },
                plots
            )];
        }
    }, {
        key: "getCoords",
        value: function getCoords() {
            var xMin = Infinity,
                xMax = -Infinity,
                yMin = Infinity,
                yMax = -Infinity;
            var ok = false;

            var update = function update(x, y) {
                ok = true;
                xMin = Math.min(xMin, x);
                yMin = Math.min(yMin, y);
                xMax = Math.max(xMax, x);
                yMax = Math.max(yMax, y);
            };

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.pointPlot.points[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var point = _step5.value;

                    update(point.options.data.x, point.options.data.y);
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = this.segmentPlot.segments[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var segm = _step6.value;

                    update(segm.options.data.x1, segm.options.data.y1);
                    update(segm.options.data.x2, segm.options.data.y2);
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.circlePlot.circles[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var circle = _step7.value;

                    update(circle.options.data.x - circle.options.data.r, circle.options.data.y - circle.options.data.r);
                    update(circle.options.data.x + circle.options.data.r, circle.options.data.y + circle.options.data.r);
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = this.polygonPlot.polygons[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var polygon = _step8.value;
                    var _iteratorNormalCompletion9 = true;
                    var _didIteratorError9 = false;
                    var _iteratorError9 = undefined;

                    try {
                        for (var _iterator9 = polygon.options.data[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                            var _point2 = _step9.value;

                            update(_point2.x, _point2.y);
                        }
                    } catch (err) {
                        _didIteratorError9 = true;
                        _iteratorError9 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion9 && _iterator9.return) {
                                _iterator9.return();
                            }
                        } finally {
                            if (_didIteratorError9) {
                                throw _iteratorError9;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            if (!ok) {
                return null;
            }
            var diffX = xMax - xMin,
                diffY = yMax - yMin;
            if (Math.abs(diffX) < 0.001 && Math.abs(diffY) <= 0.001) {
                xMin -= 0.1;xMax += 0.1;
                yMin -= 0.1;yMax += 0.1;
            } else if (Math.abs(diffX) < 0.001) {
                xMin -= 0.25 * diffY;
                xMax += 0.25 * diffY;
            } else if (Math.abs(diffY) < 0.001) {
                yMin -= 0.25 * diffX;
                yMax += 0.25 * diffX;
            }
            xMin = xMin - 0.25 * diffX;
            xMax = xMax + 0.25 * diffX;
            yMin = yMin - 0.25 * diffY;
            yMax = yMax + 0.25 * diffY;

            var chart = this.chart;
            var rangeX = Math.abs(chart.xAxisOptions.scale.range()[0] - chart.xAxisOptions.scale.range()[1]);
            var rangeY = Math.abs(chart.yAxisOptions.scale.range()[0] - chart.yAxisOptions.scale.range()[1]);

            if ((xMax - xMin) / (yMax - yMin) < rangeX / rangeY) {
                diffX = rangeX / rangeY * (yMax - yMin);
                var midX = (xMin + xMax) * 0.5;
                xMin = midX - diffX / 2;
                xMax = midX + diffX / 2;
            } else {
                diffY = rangeY / rangeX * (xMax - xMin);
                var midY = (yMin + yMax) * 0.5;
                yMin = midY - diffY / 2;
                yMax = midY + diffY / 2;
            }
            return [xMin, xMax, yMin, yMax];
        }
    }, {
        key: "setDomain",
        value: function setDomain(x1, x2, y1, y2) {
            var chart = this.chart;
            chart.options.xAxisDomain = chart.getPaddedDomain([x1, x2], [chart.options.domainPadding[3], chart.options.domainPadding[1]]);
            chart.options.yAxisDomain = chart.getPaddedDomain([y1, y2], [chart.options.domainPadding[2], chart.options.domainPadding[0]]);
            chart.xAxisOptions.scale = linear$1().domain(chart.options.xAxisDomain).range([0, chart.options.chartOptions.width]);
            chart.yAxisOptions.scale = linear$1().domain(chart.options.yAxisDomain).range([chart.options.chartOptions.height, 0]);
            chart._initialXScale = chart.xAxisOptions.scale.copy();
            chart._initialYScale = chart.yAxisOptions.scale.copy();
            chart.redraw();
            chart.interactiveLayer.node.__zoom = identity$5;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.addListener("centerPoints", function () {
                var coords = _this4.getCoords();
                if (!coords) {
                    _this4.setDomain(0, 160, 0, 100);
                } else {
                    _this4.setDomain(coords[0], coords[1], coords[2], coords[3]);
                }
            });

            var _loop = function _loop(_i2) {
                _this4.addListener("add" + objects[_i2][0].toUpperCase() + objects[_i2].slice(1, objects[_i2].length), function (options) {
                    var Class = objectClasses[_i2];
                    var object = UI.createElement(Class, _extends({}, options, { chart: _this4.chart, widget: _this4.options.widget,
                        editable: true }));
                    _this4[objects[_i2] + "Plot"][objects[_i2] + "s"].push(object);
                    object.mount(_this4[objects[_i2] + "Plot"]);
                    options[objects[_i2]] = object;
                });
            };

            for (var _i2 = 0; _i2 < objects.length; _i2 += 1) {
                _loop(_i2);
            }
            this.addListener("resize", function (height, width) {
                _this4.chartOptions = {
                    width: width + 70,
                    height: height + 50
                };
                _this4.redraw();
                _this4.chart.initZoom();
                _this4.dispatch("centerPoints");
            });
            this.addListener("inputProvided", function (data) {
                var options = {};
                _this4.dispatch("needPointOptions", options);
                for (var _i3 = 0; _i3 < objects.length; _i3 += 1) {
                    var Class = objectClasses[_i3];
                    var object = objects[_i3];
                    var newObjects = data[object + "s"] || [];
                    var oldObjects = _this4[object + "Plot"][object + "s"];
                    for (var j = 0; j < Math.min(newObjects.length, oldObjects.length); j += 1) {
                        oldObjects[j].options.data = newObjects[j];
                        oldObjects[j].redraw();
                    }
                    while (newObjects.length < oldObjects.length) {
                        _this4[object + "Plot"].remove(oldObjects[oldObjects.length - 1]);
                        oldObjects.pop();
                    }
                    for (var _j = oldObjects.length; _j < newObjects.length; _j += 1) {
                        var newObject = UI.createElement(Class, { data: newObjects[_j], chart: _this4.chart, widget: _this4.options.widget,
                            editable: _this4.options.editable });
                        if (object === "point") {
                            Object.assign(newObject.options, options);
                        }
                        oldObjects.push(newObject);
                        newObject.mount(_this4[object + "Plot"]);
                    }
                }
            });
            this.addListener("updateDomain", function (event) {
                if (event.xDomain) {
                    _this4.options.xDomain = event.xDomain;
                }
                if (event.yDomain) {
                    _this4.options.yDomain = event.yDomain;
                }
                _this4.setDomain(_this4.options.xDomain[0], _this4.options.xDomain[1], _this4.options.yDomain[0], _this4.options.yDomain[1]);
            });
        }
    }]);
    return CSAGeometryWidgetSVG;
}(ChartSVG);

var GeometryWidgetLegend = function (_Panel) {
    inherits(GeometryWidgetLegend, _Panel);

    function GeometryWidgetLegend() {
        classCallCheck(this, GeometryWidgetLegend);
        return possibleConstructorReturn(this, (GeometryWidgetLegend.__proto__ || Object.getPrototypeOf(GeometryWidgetLegend)).apply(this, arguments));
    }

    createClass(GeometryWidgetLegend, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(GeometryWidgetLegend.prototype.__proto__ || Object.getPrototypeOf(GeometryWidgetLegend.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle("position", "relative");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { className: "hidden", ref: "settings", style: { position: "absolute", zIndex: "2016", right: "80px",
                        top: "40px", boxShadow: "0 5px 15px rgba(0,0,0,.5)",
                        backgroundColor: "#fff", padding: "5px", width: "200px" } },
                UI.createElement(
                    Form,
                    null,
                    UI.createElement(
                        FormField,
                        { label: "Decimals" },
                        UI.createElement(Select, { options: decimalOptions, ref: "decimalsSelect" })
                    ),
                    UI.createElement(
                        FormField,
                        { label: "Coordinates", inline: false },
                        UI.createElement(CheckboxInput, { ref: "seeCoords" })
                    ),
                    UI.createElement(
                        FormField,
                        { label: "Point Labels", inline: false },
                        UI.createElement(CheckboxInput, { ref: "seeLabels" })
                    ),
                    UI.createElement(
                        FormField,
                        { label: "Ox parallels", inline: false },
                        UI.createElement(CheckboxInput, { ref: "seeOxParallels" })
                    ),
                    UI.createElement(
                        FormField,
                        { label: "Oy parallels", inline: false },
                        UI.createElement(CheckboxInput, { ref: "seeOyParallels" })
                    )
                )
            ), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { size: Size.SMALL, level: Level.INFO,
                    label: UI.T("View All"),
                    faIcon: "eye", ref: "viewAllButton", style: { display: "inline", marginTop: "10px" } }),
                UI.createElement(Button, { size: Size.SMALL, level: Level.INFO,
                    label: UI.T("Settings"),
                    faIcon: "bars", ref: "settingsButton", style: { display: "inline", marginTop: "10px" } })
            ), UI.createElement(
                "div",
                { style: { height: "500px", "overflow-y": "scroll" } },
                UI.createElement(
                    "h4",
                    null,
                    "Geometry Widget"
                ),
                UI.createElement(
                    "p",
                    null,
                    "Using this tool, you can easily manipulate a plane and any objects on it, like points, segments, circles, polygons and so on. You can use the export button to generate a mark-up tag that renders a copy of your plane anywhere on our website like in chats, comments or articles. The left-side text panel and the middle graphic panel are kept in sync at all times, so you can input any set of objects to draw them, or draw using the panel and then take the text version on the left."
                ),
                UI.createElement(
                    "p",
                    null,
                    "Ways you can interact with the widget:"
                ),
                UI.createElement(
                    "ul",
                    null,
                    UI.createElement(
                        "li",
                        null,
                        "Points support drag and drop."
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "You can toggle certain options for all points, or by clicking on a point you can display a menu, for that point's individual settings."
                    ),
                    UI.createElement(
                        "li",
                        null,
                        "Any point can be given a label, and it's label and coordinates can be manually changed from the same menu as above."
                    )
                )
            )];
        }
    }, {
        key: "getPointOptions",
        value: function getPointOptions() {
            return {
                coords: this.seeCoords.getValue(),
                label: this.seeLabels.getValue(),
                OxParallel: this.seeOxParallels.getValue(),
                OyParallel: this.seeOyParallels.getValue()
            };
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            var hideSettingsTab = function hideSettingsTab() {
                _this6.settings.addClass("hidden");
                document.body.removeEventListener("click", hideSettingsTab);
            };

            this.settingsButton.addClickListener(function (event) {
                if (_this6.settings.hasClass("hidden")) {
                    _this6.settings.removeClass("hidden");
                    document.body.addEventListener("click", hideSettingsTab);
                } else {
                    hideSettingsTab();
                }
                event.stopPropagation();
            });
            this.settings.addClickListener(function (event) {
                event.stopPropagation();
            });
            this.seeCoords.addClickListener(function (event) {
                var _iteratorNormalCompletion10 = true;
                var _didIteratorError10 = false;
                var _iteratorError10 = undefined;

                try {
                    for (var _iterator10 = _this6.options.svg.pointPlot.points[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                        var point = _step10.value;

                        _this6.seeCoords.getValue() ? point.showCoords() : point.hideCoords();
                    }
                } catch (err) {
                    _didIteratorError10 = true;
                    _iteratorError10 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion10 && _iterator10.return) {
                            _iterator10.return();
                        }
                    } finally {
                        if (_didIteratorError10) {
                            throw _iteratorError10;
                        }
                    }
                }

                event.stopPropagation();
            });

            this.seeLabels.setValue(true);
            this.seeLabels.addClickListener(function (event) {
                var _iteratorNormalCompletion11 = true;
                var _didIteratorError11 = false;
                var _iteratorError11 = undefined;

                try {
                    for (var _iterator11 = _this6.options.svg.pointPlot.points[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                        var point = _step11.value;

                        _this6.seeLabels.getValue() ? point.showLabel() : point.hideLabel();
                    }
                } catch (err) {
                    _didIteratorError11 = true;
                    _iteratorError11 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion11 && _iterator11.return) {
                            _iterator11.return();
                        }
                    } finally {
                        if (_didIteratorError11) {
                            throw _iteratorError11;
                        }
                    }
                }

                event.stopPropagation();
            });
            this.seeOxParallels.addClickListener(function (event) {
                var _iteratorNormalCompletion12 = true;
                var _didIteratorError12 = false;
                var _iteratorError12 = undefined;

                try {
                    for (var _iterator12 = _this6.options.svg.pointPlot.points[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                        var point = _step12.value;

                        _this6.seeOxParallels.getValue() ? point.showOxParallel() : point.hideOxParallel();
                    }
                } catch (err) {
                    _didIteratorError12 = true;
                    _iteratorError12 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion12 && _iterator12.return) {
                            _iterator12.return();
                        }
                    } finally {
                        if (_didIteratorError12) {
                            throw _iteratorError12;
                        }
                    }
                }

                event.stopPropagation();
            });
            this.seeOyParallels.addClickListener(function (event) {
                var _iteratorNormalCompletion13 = true;
                var _didIteratorError13 = false;
                var _iteratorError13 = undefined;

                try {
                    for (var _iterator13 = _this6.options.svg.pointPlot.points[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                        var point = _step13.value;

                        _this6.seeOyParallels.getValue() ? point.showOyParallel() : point.hideOyParallel();
                    }
                } catch (err) {
                    _didIteratorError13 = true;
                    _iteratorError13 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion13 && _iterator13.return) {
                            _iterator13.return();
                        }
                    } finally {
                        if (_didIteratorError13) {
                            throw _iteratorError13;
                        }
                    }
                }

                event.stopPropagation();
            });

            this.addListener("needPointOptions", function (options) {
                Object.assign(options, _this6.getPointOptions());
            });
            this.decimalsSelect.addChangeListener(function () {
                Stringifier.decimals = _this6.decimalsSelect.get().value;
                _this6.options.widget.dispatch("decimalsChange", _this6.decimalsSelect.get().value);
            });

            this.viewAllButton.addClickListener(function () {
                _this6.options.svg.dispatch("centerPoints");
            });
        }
    }]);
    return GeometryWidgetLegend;
}(Panel);

var GeometryCodeEditor = function (_CodeEditor) {
    inherits(GeometryCodeEditor, _CodeEditor);

    function GeometryCodeEditor() {
        classCallCheck(this, GeometryCodeEditor);
        return possibleConstructorReturn(this, (GeometryCodeEditor.__proto__ || Object.getPrototypeOf(GeometryCodeEditor)).apply(this, arguments));
    }

    createClass(GeometryCodeEditor, [{
        key: "setNewData",
        value: function setNewData(text) {
            var dispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var data = {
                points: [],
                segments: [],
                lines: [],
                circles: [],
                polygons: []
            };
            text = text.split('\n');
            for (var _i4 = 0; _i4 < text.length; _i4 += 1) {
                if (!text[_i4]) {
                    continue;
                }
                var tokens = void 0;
                try {
                    tokens = consoleTokenizer(text[_i4]);
                } catch (message) {
                    continue;
                }
                if (!tokens || !tokens.length) {
                    continue;
                }
                var isPoint = this.constructor.getPoint(tokens),
                    isSegment = this.constructor.getSegment(tokens),
                    isLine = this.constructor.getLine(tokens),
                    isCircle = this.constructor.getCircle(tokens);
                if (isPoint) {
                    data.points.push(isPoint);
                } else if (isSegment) {
                    data.segments.push(isSegment);
                } else if (isLine) {
                    data.lines.push(isLine);
                } else if (isCircle) {
                    data.circles.push(isCircle);
                } else {
                    if (tokens[0] === "Polygon") {
                        var j = _i4 + 1;
                        var polygon = [];
                        while (j < text.length) {
                            if (text[j] === "...") {
                                break;
                            }
                            try {
                                var point = this.constructor.getPoint(consoleTokenizer(text[j]));
                                if (point) {
                                    polygon.push(point);
                                }
                            } catch (message) {}
                            j += 1;
                        }
                        if (text[j] === "..." && polygon.length >= 3) {
                            data.polygons.push(polygon);
                        }
                        _i4 = j;
                    }
                }
            }
            if (dispatch) {
                this.dispatch("inputProvided", data);
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            get(GeometryCodeEditor.prototype.__proto__ || Object.getPrototypeOf(GeometryCodeEditor.prototype), "onMount", this).call(this);
            // Disable the indexing on the left margin
            this.setAceRendererOption('showLineNumbers', false);
            this._timeout = null;
            this.addAceSessionChangeListener(function () {
                /// If the change is created by editing the widget
                if (_this8._selfChanged) {
                    return;
                }
                if (_this8._timeout) {
                    clearTimeout(_this8._timeout);
                }
                _this8._timeout = setTimeout(function () {
                    _this8.setNewData(_this8.getValue());
                    _this8._timeout = null;
                }, 500);
            });

            this.addListener("addObject", function (type, object) {
                _this8._selfChanged = true;
                var text = Stringifier[type](object.options.data);
                var editor = _this8.ace;
                var column = editor.session.getLine(0).length;
                editor.gotoLine(0, column);
                _this8.insert(text);
                _this8._selfChanged = false;
            });

            this.addListener("redraw", function (data) {
                _this8._selfChanged = true;
                _this8.setValue(getGeometryText(data));
                _this8._selfChanged = false;
            });
        }
    }], [{
        key: "getPoint",
        value: function getPoint(tokens) {
            if (tokens.length === 2) {
                var x = parseFloat(tokens[0]),
                    y = parseFloat(tokens[1]);
                if (!isNaN(x) && !isNaN(y)) {
                    return { x: x, y: y, label: "" };
                }
            }
            if (tokens.length === 3 && tokens[0] === "Point") {
                var _x2 = parseFloat(tokens[1]),
                    _y = parseFloat(tokens[2]);
                if (!isNaN(_x2) && !isNaN(_y)) {
                    return { x: _x2, y: _y, label: "" };
                }
            }
            if (tokens.length === 3) {
                var _x3 = parseFloat(tokens[0]),
                    _y2 = parseFloat(tokens[1]);
                if (!isNaN(_x3) && !isNaN(_y2)) {
                    return { x: _x3, y: _y2, label: tokens[2] };
                }
            }
            return null;
        }
    }, {
        key: "getSegment",
        value: function getSegment(tokens) {
            if (tokens.length === 4) {
                var x1 = parseFloat(tokens[0]),
                    y1 = parseFloat(tokens[1]),
                    x2 = parseFloat(tokens[2]),
                    y2 = parseFloat(tokens[3]);
                if (!isNaN(x1) && !isNaN(y1) && !isNaN(x2) && !isNaN(y2)) {
                    return { x1: x1, y1: y1, x2: x2, y2: y2 };
                }
            }
            if (tokens.length >= 5 && tokens[0] === "Segment") {
                var _x4 = parseFloat(tokens[1]),
                    _y3 = parseFloat(tokens[2]),
                    x3 = parseFloat(tokens[3]),
                    y3 = parseFloat(tokens[4]);
                if (!isNaN(_x4) && !isNaN(_y3) && !isNaN(x3) && !isNaN(y3)) {
                    return { x1: _x4, y1: _y3, x2: x3, y2: y3 };
                }
            }
            return null;
        }
    }, {
        key: "getLine",
        value: function getLine(tokens) {
            if (tokens.length === 3) {
                var a = parseFloat(tokens[0]),
                    b = parseFloat(tokens[1]),
                    c = parseFloat(tokens[2]);
                if (!isNaN(a) && !isNaN(b) && !isNaN(c)) {
                    return { a: a, b: b, c: c };
                }
            }
            if (tokens.length >= 4 && tokens[0] === "Line") {
                var _a = parseFloat(tokens[1]),
                    _b = parseFloat(tokens[2]),
                    _c = parseFloat(tokens[3]);
                if (!isNaN(_a) && !isNaN(_b) && !isNaN(_c)) {
                    return { a: _a, b: _b, c: _c };
                }
            }
            return null;
        }
    }, {
        key: "getCircle",
        value: function getCircle(tokens) {
            if (tokens.length === 3) {
                var x = parseFloat(tokens[0]),
                    y = parseFloat(tokens[1]),
                    r = parseFloat(tokens[2]);
                if (!isNaN(x) && !isNaN(y) && !isNaN(r)) {
                    return { x: x, y: y, r: r };
                }
            }
            if (tokens.length >= 4 && tokens[0] === "Circle") {
                var x4 = parseFloat(tokens[1]),
                    y4 = parseFloat(tokens[2]),
                    _r = parseFloat(tokens[3]);
                if (!isNaN(x4) && !isNaN(y4) && !isNaN(_r)) {
                    return { x: x4, y: y4, r: _r };
                }
            }
            return null;
        }
    }]);
    return GeometryCodeEditor;
}(CodeEditor);

var CSAGeometryWidget = function (_UI$Element) {
    inherits(CSAGeometryWidget, _UI$Element);

    function CSAGeometryWidget() {
        classCallCheck(this, CSAGeometryWidget);
        return possibleConstructorReturn(this, (CSAGeometryWidget.__proto__ || Object.getPrototypeOf(CSAGeometryWidget)).apply(this, arguments));
    }

    createClass(CSAGeometryWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { ref: "widgetBlock", style: { margin: "0 auto" } },
                UI.createElement(
                    "div",
                    { style: { width: "320px", display: "inline-block", "margin-right": "30px", float: "left" } },
                    UI.createElement(
                        "label",
                        null,
                        " Input: "
                    ),
                    UI.createElement(GeometryCodeEditor, { ref: this.refLink("textPanel"),
                        value: getGeometryText(defaultData),
                        style: { width: "100%", height: "300px" } })
                ),
                UI.createElement(
                    "div",
                    { ref: "svgBlock", style: { width: "600px", height: "500px", display: "inline-block", "position": "relative" } },
                    UI.createElement(
                        "div",
                        { style: { position: "absolute", top: "20px", left: "70px" } },
                        UI.createElement(Button, { ref: "plusButton", level: Level.INFO, faIcon: "plus", size: Size.LARGE, style: { "border-radius": "0" } }),
                        UI.createElement(
                            "div",
                            { ref: "commandsList", className: dropdownList.default + " hidden", style: { width: "3.1em" } },
                            UI.createElement(
                                "div",
                                { ref: "drawPoint", className: "fa fa-circle", style: { "text-align": "center", "height": "40px", "line-height": "25px" } },
                                " "
                            ),
                            UI.createElement(
                                "div",
                                { ref: "drawSegment", className: "fa fa-minus fa-2x", style: { "text-align": "center" } },
                                " "
                            ),
                            UI.createElement(
                                "div",
                                { ref: "drawLine", style: { "text-align": "center" } },
                                "/"
                            ),
                            UI.createElement(
                                "div",
                                { ref: "drawCircle", className: "fa fa-circle-o fa-2x", style: { "text-align": "center" } },
                                " "
                            ),
                            UI.createElement(
                                "div",
                                { ref: "drawPolygon", className: "fa fa-square-o fa-2x", style: { "text-align": "center" } },
                                " "
                            )
                        )
                    ),
                    UI.createElement(CSAGeometryWidgetSVG, _extends({ ref: "svg", textPanel: this.textPanel }, this.options, { data: defaultData, widget: this }))
                ),
                UI.createElement(
                    "div",
                    { style: { width: "320px", display: "inline-block", "margin-left": "30px", float: "right" } },
                    UI.createElement(GeometryWidgetLegend, { ref: "geometryWidgetLegend", widget: this, editable: true })
                )
            )];
        }
    }, {
        key: "resize",
        value: function resize(newHeight, newWidth) {
            newWidth = Math.max(newWidth, 500);
            newHeight = newWidth * 472.66 / 754;
            this.widgetBlock.setStyle("width", newWidth + 770 + "px");
            this.svgBlock.setStyle("width", newWidth + "px");
            this.svgBlock.setStyle("height", newHeight + "px");
            this.svg.setAttribute("width", newWidth + "px");
            this.svg.setAttribute("height", newHeight + "px");
            this.svg.dispatch("resize", newHeight, newWidth); // no clue why i need to subtract 70...
        }
    }, {
        key: "addDrawListeners",
        value: function addDrawListeners() {
            var _this10 = this;

            var startDraw = function startDraw() {
                if (_this10._isDrawing) {
                    _this10._forceEndDraw();
                }
                _this10._isDrawing = true;
                var _iteratorNormalCompletion14 = true;
                var _didIteratorError14 = false;
                var _iteratorError14 = undefined;

                try {
                    for (var _iterator14 = _this10.svg.pointPlot.points[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                        var point = _step14.value;

                        point.removeClickListener(point.clickCallback);
                        point.point.removeDragListener(point.dragFunc);
                    }
                } catch (err) {
                    _didIteratorError14 = true;
                    _iteratorError14 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion14 && _iterator14.return) {
                            _iterator14.return();
                        }
                    } finally {
                        if (_didIteratorError14) {
                            throw _iteratorError14;
                        }
                    }
                }

                document.body.style["cursor"] = "crosshair";
                _this10.svg.chart.disableZoom();
                _this10.svg.chart.interactiveLayer.setStyle("cursor", "crosshair");
            };
            var endDraw = function endDraw(type, object) {
                _this10._isDrawing = false;
                var _iteratorNormalCompletion15 = true;
                var _didIteratorError15 = false;
                var _iteratorError15 = undefined;

                try {
                    for (var _iterator15 = _this10.svg.pointPlot.points[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                        var point = _step15.value;

                        point.addClickListener(point.clickCallback);
                        point.point.addDragListener(point.dragFunc);
                    }
                } catch (err) {
                    _didIteratorError15 = true;
                    _iteratorError15 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion15 && _iterator15.return) {
                            _iterator15.return();
                        }
                    } finally {
                        if (_didIteratorError15) {
                            throw _iteratorError15;
                        }
                    }
                }

                document.body.style["cursor"] = "default";
                _this10.svg.chart.initZoom();
                _this10.svg.chart.interactiveLayer.setStyle("cursor", "move");
                if (type) {
                    _this10.textPanel.dispatch("addObject", type, object);
                }
            };
            var rect = this.svg.chart.interactiveLayer;

            var getPoint = function getPoint(event) {
                var offsets = rect.node.getBoundingClientRect();
                var xDomain = _this10.svg.chart.xAxisOptions.scale.domain();
                var yDomain = _this10.svg.chart.yAxisOptions.scale.domain();
                var xRange = _this10.svg.chart.xAxisOptions.scale.range();
                var xRangeLength = Math.abs(xRange[0] - xRange[1]);
                var yRange = _this10.svg.chart.yAxisOptions.scale.range();
                var yRangeLength = Math.abs(yRange[0] - yRange[1]);
                return {
                    x: xDomain[0] + (xDomain[1] - xDomain[0]) * (Device.getEventX(event) - offsets.left) / xRangeLength,
                    y: yDomain[1] + (yDomain[0] - yDomain[1]) * (Device.getEventY(event) - offsets.top) / yRangeLength,
                    label: ""
                };
            };

            var drawPointFunc = function drawPointFunc(event) {
                event.stopPropagation();
                startDraw();
                var options = { data: getPoint(event) };
                _this10.geometryWidgetLegend.dispatch("needPointOptions", options);
                var originalCoords = options.coords;
                options.coords = true;
                _this10.svg.dispatch("addPoint", options);
                var point = options.point;
                point.removeClickListener(point.clickCallback);
                point.point.removeDragListener(point.dragFunc);

                var movePoint = function movePoint(event) {
                    if (!point.node) {
                        return;
                    }
                    point.options.data = getPoint(event);
                    point.redraw();
                };
                var addPointCallback = function addPointCallback() {
                    window.removeEventListener("click", addPointCallback);
                    if (!originalCoords) {
                        point.hideCoords();
                    }
                    window.removeEventListener("mousemove", movePoint);
                    point.clickFunc(true);
                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    endDraw("point", point);
                    point.addListener("dataChanged", function () {
                        _this10.textPanel.dispatch("redraw", _this10.getData());
                    });
                };
                _this10._forceEndDraw = function (event) {
                    window.removeEventListener("click", addPointCallback);
                    window.removeEventListener("mousemove", movePoint);
                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    _this10.svg.pointPlot.remove(point);
                    if (event) {
                        endDraw();
                        event.preventDefault();
                        return false;
                    }
                };
                window.addEventListener("click", addPointCallback);
                window.addEventListener("mousemove", movePoint);
                window.addEventListener("contextmenu", _this10._forceEndDraw);
            };
            var drawSegmentFunc = function drawSegmentFunc(event) {
                event.stopPropagation();
                startDraw();
                var rectClickListener = function rectClickListener(event) {
                    event.stopPropagation();
                    var data = getPoint(event);
                    var options = {
                        data: {
                            x1: data.x, y1: data.y,
                            x2: data.x, y2: data.y
                        }
                    };
                    _this10.svg.dispatch("addSegment", options);
                    var segment = options.segment;
                    rect.removeClickListener(rectClickListener);

                    var moveSegmentCallback = function moveSegmentCallback(event) {
                        var newData = getPoint(event);
                        segment.options.data.x2 = newData.x;
                        segment.options.data.y2 = newData.y;
                        segment.redraw();
                    };
                    var addSegmentCallback = function addSegmentCallback() {
                        window.removeEventListener("click", addSegmentCallback);
                        window.removeEventListener("mousemove", moveSegmentCallback);
                        window.removeEventListener("contextmenu", _this10._forceEndDraw);
                        endDraw("segment", segment);
                    };

                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    _this10._forceEndDraw = function (event) {
                        window.removeEventListener("click", addSegmentCallback);
                        window.removeEventListener("mousemove", moveSegmentCallback);
                        window.removeEventListener("contextmenu", _this10._forceEndDraw);
                        _this10.svg.segmentPlot.remove(segment);
                        if (event) {
                            endDraw();
                            event.preventDefault();
                            return false;
                        }
                    };
                    window.addEventListener("click", addSegmentCallback);
                    window.addEventListener("mousemove", moveSegmentCallback);
                    window.addEventListener("contextmenu", _this10._forceEndDraw);
                };
                rect.addClickListener(rectClickListener);
                _this10._forceEndDraw = function (event) {
                    rect.removeClickListener(rectClickListener);
                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    if (event) {
                        endDraw();
                        event.preventDefault();
                        return false;
                    }
                };
                window.addEventListener("contextmenu", _this10._forceEndDraw);
            };
            var drawCircleFunc = function drawCircleFunc(event) {
                event.stopPropagation();
                startDraw();
                var rectClickListener = function rectClickListener(event) {
                    event.stopPropagation();
                    var options = { data: getPoint(event) };
                    options.data.r = 0;
                    _this10.svg.dispatch("addCircle", options);
                    var circle = options.circle;
                    rect.removeClickListener(rectClickListener);
                    var changeRadius = function changeRadius(event) {
                        var newData = getPoint(event);
                        circle.options.data.r = Math.sqrt((newData.x - circle.options.data.x) * (newData.x - circle.options.data.x) + (newData.y - circle.options.data.y) * (newData.y - circle.options.data.y));
                        circle.redraw();
                    };
                    var addCircleCallback = function addCircleCallback() {
                        window.removeEventListener("click", addCircleCallback);
                        window.removeEventListener("mousemove", changeRadius);
                        window.removeEventListener("contextmenu", _this10._forceEndDraw);
                        endDraw("circle", circle);
                    };

                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    _this10._forceEndDraw = function (event) {
                        window.removeEventListener("click", addCircleCallback);
                        window.removeEventListener("mousemove", changeRadius);
                        window.removeEventListener("contextmenu", _this10._forceEndDraw);
                        _this10.svg.circlePlot.remove(circle);
                        if (event) {
                            endDraw();
                            event.preventDefault();
                            return false;
                        }
                    };
                    window.addEventListener("click", addCircleCallback);
                    window.addEventListener("mousemove", changeRadius);
                    window.addEventListener("contextmenu", _this10._forceEndDraw);
                };
                rect.addClickListener(rectClickListener);
                _this10._forceEndDraw = function (event) {
                    rect.removeClickListener(rectClickListener);
                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    if (event) {
                        endDraw();
                        event.preventDefault();
                        return false;
                    }
                };
                window.addEventListener("contextmenu", _this10._forceEndDraw);
            };
            var drawLineFunc = function drawLineFunc(event) {
                event.stopPropagation();
                startDraw();
                var rectClickListener = function rectClickListener(event) {
                    event.stopPropagation();
                    var originalData = getPoint(event);
                    var options = {
                        data: {
                            a: 0,
                            b: 1 / originalData.y,
                            c: -1
                        }
                    };
                    _this10.svg.dispatch("addLine", options);
                    var line$$1 = options.line;
                    rect.removeClickListener(rectClickListener);

                    var changeLine = function changeLine(event) {
                        var data = getPoint(event);
                        line$$1.options.data.a = data.y - originalData.y;
                        line$$1.options.data.b = originalData.x - data.x;
                        line$$1.options.data.c = data.x * originalData.y - data.y * originalData.x;
                        line$$1.redraw();
                    };
                    var addLineCallback = function addLineCallback() {
                        window.removeEventListener("click", addLineCallback);
                        window.removeEventListener("mousemove", changeLine);
                        window.removeEventListener("contextmenu", _this10._forceEndDraw);
                        endDraw("line", line$$1);
                    };

                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    _this10._forceEndDraw = function (event) {
                        window.removeEventListener("click", addLineCallback);
                        window.removeEventListener("mousemove", changeLine);
                        window.removeEventListener("contextmenu", _this10._forceEndDraw);
                        _this10.svg.linePlot.remove(line$$1);
                        if (event) {
                            endDraw();
                            event.preventDefault();
                            return false;
                        }
                    };
                    window.addEventListener("click", addLineCallback);
                    window.addEventListener("mousemove", changeLine);
                    window.addEventListener("contextmenu", _this10._forceEndDraw);
                };
                rect.addClickListener(rectClickListener);
                _this10._forceEndDraw = function (event) {
                    rect.removeClickListener(rectClickListener);
                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    if (event) {
                        endDraw();
                        event.preventDefault();
                        return false;
                    }
                };
                window.addEventListener("contextmenu", _this10._forceEndDraw);
            };
            var drawPolygonFunc = function drawPolygonFunc(event) {
                event.stopPropagation();
                startDraw();
                var rectClickListener = function rectClickListener(event) {
                    event.stopPropagation();
                    var data = getPoint(event);
                    var options = {
                        data: [{ x: data.x, y: data.y }, { x: data.x, y: data.y }]
                    };
                    _this10.svg.dispatch("addPolygon", options);
                    var polygon = options.polygon;
                    rect.removeClickListener(rectClickListener);

                    var changePolygon = function changePolygon(event) {
                        var newData = getPoint(event);
                        polygon.options.data[polygon.options.data.length - 1].x = newData.x;
                        polygon.options.data[polygon.options.data.length - 1].y = newData.y;
                        polygon.redraw();
                    };
                    var addSegmentCallback = function addSegmentCallback(event) {
                        polygon.options.data.push(getPoint(event));
                        polygon.redraw();
                    };

                    var rightClickFunc = function rightClickFunc(event) {
                        event.preventDefault();
                        window.removeEventListener("contextmenu", rightClickFunc);
                        window.removeEventListener("click", addSegmentCallback);
                        window.removeEventListener("mousemove", changePolygon);
                        polygon.options.data.pop();
                        polygon.redraw();
                        endDraw("polygon", polygon);
                    };
                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    window.addEventListener("contextmenu", rightClickFunc);
                    window.addEventListener("click", addSegmentCallback);
                    window.addEventListener("mousemove", changePolygon);
                    _this10._forceEndDraw = function () {
                        window.removeEventListener("contextmenu", rightClickFunc);
                        window.removeEventListener("click", addSegmentCallback);
                        window.removeEventListener("mousemove", changePolygon);
                        _this10.svg.polygonPlot.remove(polygon);
                    };
                };
                rect.addClickListener(rectClickListener);
                _this10._forceEndDraw = function (event) {
                    rect.removeClickListener(rectClickListener);
                    window.removeEventListener("contextmenu", _this10._forceEndDraw);
                    if (event) {
                        endDraw();
                        event.preventDefault();
                        return false;
                    }
                };
                window.addEventListener("contextmenu", _this10._forceEndDraw);
            };

            this.drawPoint.addClickListener(drawPointFunc);
            this.drawSegment.addClickListener(drawSegmentFunc);
            this.drawCircle.addClickListener(drawCircleFunc);
            this.drawLine.addClickListener(drawLineFunc);
            this.drawPolygon.addClickListener(drawPolygonFunc);
        }
    }, {
        key: "getData",
        value: function getData() {
            var data = {
                points: [],
                segments: [],
                lines: [],
                circles: [],
                polygons: []
            };
            for (var _i5 = 0; _i5 < objects.length; _i5 += 1) {
                var _iteratorNormalCompletion16 = true;
                var _didIteratorError16 = false;
                var _iteratorError16 = undefined;

                try {
                    for (var _iterator16 = this.svg[objects[_i5] + "Plot"][objects[_i5] + "s"][Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                        var obj = _step16.value;

                        data[objects[_i5] + "s"].push(obj.options.data);
                    }
                } catch (err) {
                    _didIteratorError16 = true;
                    _iteratorError16 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion16 && _iterator16.return) {
                            _iterator16.return();
                        }
                    } finally {
                        if (_didIteratorError16) {
                            throw _iteratorError16;
                        }
                    }
                }
            }
            return data;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            this.resize(window.innerHeight - 200, window.innerWidth * 80 / 100 - 700);
            window.addEventListener("resize", function () {
                _this11.resize(window.innerHeight - 200, window.innerWidth * 80 / 100 - 700);
            });
            Stringifier.scale = this.svg.chart.xAxisOptions.scale;
            this.geometryWidgetLegend.options.svg = this.svg;
            this.decimals = -1;
            this.addListener("decimalsChange", function (decimals) {
                if (_this11.decimals !== decimals) {
                    _this11.decimals = decimals;
                    _this11.textPanel.dispatch("redraw", _this11.getData());
                    _this11.svg.pointPlot.redraw();
                }
            });
            this.textPanel.addListener("inputProvided", function (data) {
                _this11.svg.dispatch("inputProvided", data);
            });
            this.svg.addListener("needPointOptions", function (options) {
                _this11.geometryWidgetLegend.dispatch("needPointOptions", options);
            });

            var _iteratorNormalCompletion17 = true;
            var _didIteratorError17 = false;
            var _iteratorError17 = undefined;

            try {
                for (var _iterator17 = this.svg.pointPlot.points[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                    var point = _step17.value;

                    point.addListener("dataChanged", function () {
                        _this11.textPanel.dispatch("redraw", _this11.getData());
                    });
                }
            } catch (err) {
                _didIteratorError17 = true;
                _iteratorError17 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion17 && _iterator17.return) {
                        _iterator17.return();
                    }
                } finally {
                    if (_didIteratorError17) {
                        throw _iteratorError17;
                    }
                }
            }

            this.plusButton.addClickListener(function () {
                _this11.commandsList.toggleClass("hidden");
            });

            this.addDrawListeners();
        }
    }]);
    return CSAGeometryWidget;
}(UI.Element);

var C$1 = {
    DIFF_EQUAL: 0,
    DIFF_DELETE: -1,
    DIFF_INSERT: 1,
    DIFF_CHANGE: 2,
    DIFF_COMPLEX: -2
};
var Options = {
    gutterBackground: "white",
    aceTheme: { aceName: "dawn" },
    yellowBlockColor: "#FFFECC",
    yellowCurveColor: "#FFFECC",
    yellowStrokeColor: "#F8F48B",
    blueBlockColor: "#C1EBFF",
    blueCurveColor: "#C1EBFF",
    blueStrokeColor: "#6CBADE",
    redBlockColor: "#FFC1C2",
    redCurveColor: "#FFC1C2",
    redStrokeColor: "#F08D8D",
    greenBlockColor: "#C7EFCC",
    greenCurveColor: "#C7EFCC",
    greenStrokeColor: "#6FC278",
    strokeWidth: "1px",
    arrowsColor: "black"
};
var ColorStyle = {
    "-1": "red-diff ",
    "1": "green-diff ",
    "2": "blue-diff ",
    "-2": "yellow-diff "
};

var DiffGutter = function (_SVG$SVGRoot) {
    inherits(DiffGutter, _SVG$SVGRoot);

    function DiffGutter() {
        classCallCheck(this, DiffGutter);
        return possibleConstructorReturn(this, (DiffGutter.__proto__ || Object.getPrototypeOf(DiffGutter)).apply(this, arguments));
    }

    return DiffGutter;
}(SVG.SVGRoot);

var DiffWidget = function (_UI$Element) {
    inherits(DiffWidget, _UI$Element);

    function DiffWidget() {
        classCallCheck(this, DiffWidget);
        return possibleConstructorReturn(this, (DiffWidget.__proto__ || Object.getPrototypeOf(DiffWidget)).apply(this, arguments));
    }

    createClass(DiffWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                SectionDivider$$1,
                { className: "diffing-tool", ref: "sectionDivider", orientation: Orientation.HORIZONTAL, style: { height: "100%" } },
                UI.createElement(
                    "div",
                    { style: { width: "50%", height: "100%" } },
                    UI.createElement(CodeEditor, { ref: "leftCodeEditor", value: this.options.leftTextValue, readOnly: !this.options.leftEditable,
                        style: { height: "100%" } })
                ),
                UI.createElement(
                    Panel,
                    { fixed: true, ref: "diffGutterPanel", style: { display: "inline-block", height: "100%", width: "100px", overflow: "hidden" } },
                    UI.createElement(DiffGutter, { ref: "diffGutter", style: { backgroundColor: Options.gutterBackground, height: "100%", width: "100%" } })
                ),
                UI.createElement(
                    "div",
                    { style: { width: "50%", height: "100%" } },
                    UI.createElement(CodeEditor, { ref: "rightCodeEditor", value: this.options.rightTextValue, readOnly: !this.options.rightEditable,
                        style: { height: "100%" } })
                )
            ), UI.createElement(
                StyleElement,
                null,
                UI.createElement(StyleInstance, { selector: ".yellow-diff", ref: "yellowDiffStyle", attributes: { "background-color": Options.yellowBlockColor, "fill": Options.yellowCurveColor, stroke: Options.yellowStrokeColor, "border-color": Options.yellowStrokeColor + " !important", "stroke-width": Options.strokeWidth } }),
                UI.createElement(StyleInstance, { selector: ".blue-diff", ref: "blueDiffStyle", attributes: { "background-color": Options.blueBlockColor, "fill": Options.blueCurveColor, stroke: Options.blueStrokeColor, "border-color": Options.blueStrokeColor + " !important", "stroke-width": Options.strokeWidth } }),
                UI.createElement(StyleInstance, { selector: ".red-diff", ref: "redDiffStyle", attributes: { "background-color": Options.redBlockColor, "fill": Options.redCurveColor, stroke: Options.redStrokeColor, "border-color": Options.redStrokeColor + " !important", "stroke-width": Options.strokeWidth } }),
                UI.createElement(StyleInstance, { selector: ".green-diff", ref: "greenDiffStyle", attributes: { "background-color": Options.greenBlockColor, "fill": Options.greenCurveColor, stroke: Options.greenStrokeColor, "border-color": Options.greenStrokeColor + " !important", "stroke-width": Options.strokeWidth } }),
                UI.createElement(StyleInstance, { selector: ".acediff-diff.lines", attributes: { "position": "absolute", "z-index": "3" } }),
                UI.createElement(StyleInstance, { selector: ".acediff-diff.targetOnly", attributes: { "height": "0px !important", "z-index": "4", "left": "4px !important", "border-top": "1px solid", "border-bottom": "1px solid", "position": "absolute" } }),
                UI.createElement(StyleInstance, { selector: ".acediff-diff.targetOnly.top", attributes: { "top": "-2px", "border-top": "0px" } }),
                UI.createElement(StyleInstance, { selector: ".acediff-diff.targetOnly.bottom", attributes: { "border-bottom": "0px" } }),
                UI.createElement(StyleInstance, { selector: ".cursor-bar-yellow-diff", attributes: { "width": "0px", "background-color": "transparent", "border-left": "2px solid " + Options.yellowStrokeColor } }),
                UI.createElement(StyleInstance, { selector: ".cursor-bar-red-diff", attributes: { "width": "0px", "background-color": "transparent", "border-left": "2px solid " + Options.redStrokeColor } }),
                UI.createElement(StyleInstance, { selector: ".cursor-bar-green-diff", attributes: { "width": "0px", "background-color": "transparent", "border-left": "2px solid " + Options.greenStrokeColor } }),
                UI.createElement(StyleInstance, { selector: ".cursor-bar-blue-diff", attributes: { "width": "0px", "background-color": "transparent", "border-left": "2px solid " + Options.blueStrokeColor } }),
                UI.createElement(StyleInstance, { selector: ".diffing-tool .ace-dawn .ace_marker-layer .ace_active-line", attributes: { "background": "rgba(36, 87, 121, 0.15) !important", "z-index": "7", "margin-left": "4px", "opacity": "30%" } })
            )];
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                leftTextValue: "Welcome to our Diffing Tool!\n\nYou can edit both of these panels and the diff is updated live.\n\nThis block is identical in both sides.\nTherefore it is not highlighted.\n\nThis block has been deleted.\nDeleted blocks appear with color red.\n\nYellow is mostly used for partial identical content.\n\nThe blue color is used for many changes\ninside a block, so the entire block is\nconsidered changed.\n",
                rightTextValue: "Welcome to our Diffing Tool!\n\nYou can edit both of these panels and the diff is updated live.\n\nThis new block has been inserted.\nInserted blocks appear with color green.\n\nThis block is identical in both sides.\nTherefore it is not highlighted.\n\n\nYellow is used for partial identical text content.\n\nAzure denotes what is written in the left side \n(this block is to exemplify only)\n\nYou can click on the arrows in the central gutter to move changes from one part to the other.\n",
                leftEditable: true,
                rightEditable: true
            };
        }
    }, {
        key: "setLeftEditable",
        value: function setLeftEditable(leftEditable) {
            this.updateOptions({ leftEditable: leftEditable });
        }
    }, {
        key: "setRightEditable",
        value: function setRightEditable(rightEditable) {
            this.updateOptions({ rightEditable: rightEditable });
        }
    }, {
        key: "setLeftText",
        value: function setLeftText(leftTextValue) {
            this.updateOptions({ leftTextValue: leftTextValue });
        }
    }, {
        key: "setRightText",
        value: function setRightText(rightTextValue) {
            this.updateOptions({ rightTextValue: rightTextValue });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.leftCodeEditor.setAceTheme(Options.aceTheme);
            this.rightCodeEditor.setAceTheme(Options.aceTheme);
            this.rightCodeEditor.setShowGutter(false);
            this.leftCodeEditor.markers = [];
            this.rightCodeEditor.markers = [];

            this.diffGutterPanel.addNodeListener("mousewheel", function (event) {
                event.preventDefault();
                event.stopPropagation();

                _this3.leftCodeEditor.setScrollTop(_this3.leftCodeEditor.getScrollTop() + event.deltaY);
                _this3.rightCodeEditor.setScrollTop(_this3.rightCodeEditor.getScrollTop() + event.deltaY);
            });

            var initialDiffMade = false;

            this.leftCodeEditor.whenLoaded(function () {
                _this3.rightCodeEditor.whenLoaded(function () {
                    setTimeout(function () {
                        _this3.makeDiffs();
                        initialDiffMade = true;
                    });
                });
            });

            var changeBehaviour = function changeBehaviour() {
                if (initialDiffMade) {
                    _this3.makeDiffs();
                }
            };

            this.leftCodeEditor.addAceSessionEventListener("changeScrollTop", changeBehaviour);
            this.rightCodeEditor.addAceSessionEventListener("changeScrollTop", changeBehaviour);

            this.leftCodeEditor.addAceSessionChangeListener(changeBehaviour);
            this.rightCodeEditor.addAceSessionChangeListener(changeBehaviour);

            window.addEventListener("resize", changeBehaviour);
        }
    }, {
        key: "makeDiffs",
        value: function makeDiffs() {
            this.computeDiffs();
            this.createLogicalDiffs();
            this.deleteVisualDiffs();
            this.drawVisualDiffs();
        }
    }, {
        key: "computeDiffs",
        value: function computeDiffs() {
            var dmp = new diff_match_patch();
            var leftText = this.leftCodeEditor.getValue();
            var rightText = this.rightCodeEditor.getValue();
            var diff = dmp.diff_main(leftText, rightText);
            dmp.diff_cleanupSemantic(diff);
            this.diffs = diff;
        }
    }, {
        key: "createLogicalDiffs",
        value: function createLogicalDiffs() {
            var _this4 = this;

            this.diffBlocks = [];
            this.diffCurves = [];

            var myDiffs = [];

            var lastType = 0;
            this.diffs.forEach(function (chunk) {
                if (chunk[1] === "") {
                    return;
                }
                if (chunk[0] === C$1.DIFF_EQUAL) {
                    myDiffs.push({
                        type: C$1.DIFF_EQUAL,
                        leftText: chunk[1],
                        rightText: chunk[1]
                    });
                } else if (chunk[0] === C$1.DIFF_INSERT) {
                    if (lastType === C$1.DIFF_DELETE) {
                        myDiffs.last().type = C$1.DIFF_CHANGE;
                        myDiffs.last().rightText += chunk[1];
                    } else {
                        myDiffs.push({
                            type: C$1.DIFF_INSERT,
                            leftText: "",
                            rightText: chunk[1]
                        });
                    }
                } else if (chunk[0] === C$1.DIFF_DELETE) {
                    if (lastType === C$1.DIFF_INSERT) {
                        myDiffs.last().type = C$1.DIFF_CHANGE;
                        myDiffs.last().leftText += chunk[1];
                    } else {
                        myDiffs.push({
                            type: C$1.DIFF_DELETE,
                            leftText: chunk[1],
                            rightText: ""
                        });
                    }
                }
                lastType = chunk[0];
            });

            var change = {
                leftStartRow: 0,
                leftEndRow: 0,
                rightStartRow: 0,
                rightEndRow: 0
            };

            var offset = {
                leftRow: 0,
                rightRow: 0,
                leftColumn: 0,
                rightColumn: 0
            };

            var changeBegun = false;
            var type = 0;
            var changeCount = 0;

            myDiffs.forEach(function (chunk) {
                var leftText = chunk.leftText;
                var rightText = chunk.rightText;
                var leftRowsCount = leftText.split("\n").length - 1;
                var rightRowsCount = rightText.split("\n").length - 1;
                var leftColumnCount = leftText.split("\n")[leftRowsCount].length;
                var rightColumnCount = rightText.split("\n")[rightRowsCount].length;
                var oldLeftStartRow = offset.leftRow;
                var oldRightStartRow = offset.rightRow;
                var currentLeftRow = void 0;
                var currentLeftColumn = void 0;
                var currentRightRow = void 0;
                var currentRightColumn = void 0;
                var bothBlocks = true;

                if (!leftRowsCount && !leftColumnCount && !rightRowsCount && !rightColumnCount) {
                    return;
                }

                type = chunk.type;

                currentLeftRow = offset.leftRow + leftRowsCount + (leftColumnCount > 0);
                currentLeftColumn = (leftRowsCount > 0 ? leftColumnCount : offset.leftColumn + leftColumnCount) + (leftColumnCount !== 0);
                currentRightRow = offset.rightRow + rightRowsCount + (rightColumnCount > 0);
                currentRightColumn = (rightRowsCount > 0 ? rightColumnCount : offset.rightColumn + rightColumnCount) + (rightColumnCount !== 0);

                if (offset.leftColumn || offset.rightColumn) {
                    bothBlocks = false;
                }

                if (type !== C$1.DIFF_EQUAL) {
                    _this4.diffBlocks.push([type, offset.leftRow, offset.leftColumn, currentLeftRow, currentLeftColumn, offset.rightRow, offset.rightColumn, currentRightRow, currentRightColumn]);
                }

                offset.leftRow += leftRowsCount;
                offset.leftColumn = currentLeftColumn - (leftColumnCount !== 0);
                offset.rightRow += rightRowsCount;
                offset.rightColumn = currentRightColumn - (rightColumnCount !== 0);

                if (offset.leftColumn || offset.rightColumn) {
                    bothBlocks = false;
                }
                if (bothBlocks && type !== C$1.DIFF_EQUAL) {
                    _this4.diffCurves.push([type, oldLeftStartRow, offset.leftRow + (offset.leftColumn !== 0), oldRightStartRow, offset.rightRow + (offset.rightColumn !== 0)]);
                }
                if (changeBegun && ((offset.leftRow > change.leftEndRow || offset.rightRow > change.rightEndRow) && type === C$1.DIFF_EQUAL || bothBlocks)) {
                    _this4.diffCurves.push([C$1.DIFF_COMPLEX, change.leftStartRow, change.leftEndRow, change.rightStartRow, change.rightEndRow]);
                    _this4.diffBlocks.push([C$1.DIFF_COMPLEX, change.leftStartRow, 0, change.leftEndRow, 0, change.rightStartRow, 0, change.rightEndRow, 0]);
                    changeCount = 0;
                    changeBegun = false;
                } else if (!changeBegun && type !== C$1.DIFF_EQUAL && !bothBlocks) {
                    changeBegun = true;
                    changeCount = 1;
                    change.leftStartRow = oldLeftStartRow;
                    change.rightStartRow = oldRightStartRow;
                    change.leftEndRow = offset.leftRow + (offset.leftColumn !== 0);
                    change.rightEndRow = offset.rightRow + (offset.rightColumn !== 0);
                } else if (changeBegun) {
                    changeCount += 1;
                    change.leftEndRow = offset.leftRow + (offset.leftColumn !== 0);
                    change.rightEndRow = offset.rightRow + (offset.rightColumn !== 0);
                }
            });

            if (changeBegun) {
                if (changeCount !== 1 || !type) {
                    type = C$1.DIFF_COMPLEX;
                }
                this.diffCurves.push([type, change.leftStartRow, change.leftEndRow, change.rightStartRow, change.rightEndRow]);
                this.diffBlocks.push([C$1.DIFF_COMPLEX, change.leftStartRow, 0, change.leftEndRow, 0, change.rightStartRow, 0, change.rightEndRow, 0]);
            }
        }
    }, {
        key: "drawVisualDiffs",
        value: function drawVisualDiffs() {
            this.drawCurves();
            this.drawBlocks();
        }
    }, {
        key: "deleteVisualDiffs",
        value: function deleteVisualDiffs() {
            this.deleteCurves();
            this.deleteBlocks();
        }
    }, {
        key: "drawCurves",
        value: function drawCurves() {
            var _this5 = this;

            this.diffCurves.forEach(function (chunk) {
                _this5.drawDiffCurve(chunk[0], chunk[1], chunk[2], chunk[3], chunk[4]);
            });
            for (var i = 0; i < this.diffCurves.length; i += 1) {
                this.diffGutter.children[i].setAttribute("class", ColorStyle[this.diffCurves[i][0]]);
            }
            this.diffCurves.forEach(function (chunk) {
                _this5.drawArrows(chunk[0], chunk[1], chunk[2], chunk[3], chunk[4]);
            });
        }
    }, {
        key: "deleteCurves",
        value: function deleteCurves() {
            this.diffGutter.eraseAllChildren();
        }
    }, {
        key: "drawBlocks",
        value: function drawBlocks() {
            var _this6 = this;

            // In order for the yellow blocks to be at the base, we need to reverse the order we draw the blocks.
            this.diffBlocks.reverse();
            this.diffBlocks.forEach(function (chunk) {
                _this6.drawDiffBlock(_this6.leftCodeEditor, chunk[0], chunk[1], chunk[2], chunk[3], chunk[4]);
                _this6.drawDiffBlock(_this6.rightCodeEditor, chunk[0], chunk[5], chunk[6], chunk[7], chunk[8]);
            });
        }
    }, {
        key: "deleteBlocks",
        value: function deleteBlocks() {
            var _this7 = this;

            this.leftCodeEditor.markers.forEach(function (marker) {
                _this7.leftCodeEditor.removeMarker(marker);
            });
            this.rightCodeEditor.markers.forEach(function (marker) {
                _this7.rightCodeEditor.removeMarker(marker);
            });
        }
    }, {
        key: "drawArrows",
        value: function drawArrows(type, leftStartRow, leftEndRow, rightStartRow, rightEndRow, leftArrow, rightArrow) {
            var _this8 = this;

            var leftScrollTop = this.leftCodeEditor.getScrollTop();
            var rightScrollTop = this.rightCodeEditor.getScrollTop();
            var leftRowHeight = this.leftCodeEditor.getRendererLineHeight();
            var rightRowHeight = this.rightCodeEditor.getRendererLineHeight();

            var p1_x = 3;
            var p1_y = (leftStartRow * leftRowHeight - leftScrollTop + leftEndRow * leftRowHeight - leftScrollTop + 2) / 2;
            var p2_x = this.diffGutter.getWidth() - 3;
            var p2_y = (rightStartRow * rightRowHeight - rightScrollTop + rightEndRow * rightRowHeight - rightScrollTop + 2) / 2;
            var h = 5;
            var w = 5;
            var dLeft = 'M ' + p1_x + ' ' + (p1_y - h) + ' l ' + w + ' ' + h + ' l ' + -w + ' ' + h + 'm 6 0 l ' + w + ' ' + -h + ' l ' + -w + ' ' + -h;
            var rLeft = 'M ' + p1_x + ' ' + (p1_y - h) + ' l ' + (2 * w + 6) + ' 0 l 0 ' + 2 * h + ' l ' + (-2 * w - 6) + ' 0 z';
            var dRight = 'M ' + p2_x + ' ' + (p2_y - h) + ' l ' + -w + ' ' + h + ' l ' + w + ' ' + h + 'm -6 0 l ' + -w + ' ' + -h + ' l ' + w + ' ' + -h;
            var rRight = 'M ' + p2_x + ' ' + (p2_y - h) + ' l ' + (-2 * w - 6) + ' 0 l 0 ' + 2 * h + ' l ' + (2 * w + 6) + ' 0 z';

            if (this.options.rightEditable) {
                if (typeof leftArrow !== "undefined") {
                    leftArrow.options.children[0].setAttribute("d", rLeft);
                    leftArrow.options.children[1].setAttribute("d", dLeft);
                }
                this.diffGutter.appendChild(UI.createElement(
                    SVG.Group,
                    { style: { backgroundColor: "red", cursor: "hand", pointerEvents: "all" } },
                    UI.createElement(SVG.Path, { d: rLeft, style: { stroke: "transparent", fill: "transparent" } }),
                    UI.createElement(SVG.Path, { d: dLeft, style: { stroke: Options.arrowsColor, fill: "none", strokeWidth: "1.5px" } })
                ));
                this.diffGutter.children.last().addClickListener(function () {
                    var text = _this8.leftCodeEditor.getTextRange(leftStartRow, 0, leftEndRow, 0);
                    _this8.rightCodeEditor.setTextRange(rightStartRow, 0, rightEndRow, 0, text);
                });
            }

            if (this.options.leftEditable) {
                if (typeof rightArrow !== "undefined") {
                    rightArrow.options.children[0].setAttribute("d", rRight);
                    rightArrow.options.children[1].setAttribute("d", dRight);
                }
                this.diffGutter.appendChild(UI.createElement(
                    SVG.Group,
                    { style: { backgroundColor: "red", cursor: "hand", pointerEvents: "all" } },
                    UI.createElement(SVG.Path, { d: rRight, style: { stroke: "transparent", fill: "transparent" } }),
                    UI.createElement(SVG.Path, { d: dRight, style: { stroke: Options.arrowsColor, fill: "none", strokeWidth: "1.5px" } })
                ));
                this.diffGutter.children.last().addClickListener(function () {
                    var text = _this8.rightCodeEditor.getTextRange(rightStartRow, 0, rightEndRow, 0);
                    _this8.leftCodeEditor.setTextRange(leftStartRow, 0, leftEndRow, 0, text);
                });
            }
        }
    }, {
        key: "drawDiffCurve",
        value: function drawDiffCurve(type, leftStartRow, leftEndRow, rightStartRow, rightEndRow, element) {
            var leftScrollTop = this.leftCodeEditor.getScrollTop();
            var rightScrollTop = this.rightCodeEditor.getScrollTop();
            var leftRowHeight = this.leftCodeEditor.getRendererLineHeight();
            var rightRowHeight = this.rightCodeEditor.getRendererLineHeight();

            var p1_x = -1;
            var p1_y = leftStartRow * leftRowHeight - leftScrollTop + 0.5;
            var p2_x = this.diffGutter.getWidth() + 1;
            var p2_y = rightStartRow * rightRowHeight - rightScrollTop + 0.5;
            var p3_x = -1;
            var p3_y = leftEndRow * leftRowHeight - leftScrollTop + 1.5;
            var p4_x = this.diffGutter.getWidth() + 1;
            var p4_y = rightEndRow * rightRowHeight - rightScrollTop + 1.5;
            var curve1 = this.computeCurve(p1_x, p1_y, p2_x, p2_y);
            var curve2 = this.computeCurve(p4_x, p4_y, p3_x, p3_y);

            var verticalLine1 = 'L' + p2_x + ',' + p2_y + ' ' + p4_x + ',' + p4_y;
            var verticalLine2 = 'L' + p3_x + ',' + p3_y + ' ' + p1_x + ',' + p1_y;
            var d = curve1 + ' ' + verticalLine1 + ' ' + curve2 + ' ' + verticalLine2;

            if (typeof element !== "undefined") {
                element.setAttr("d", d);
                return;
            }

            var el = UI.createElement(SVG.Path, { d: d });

            this.diffGutter.appendChild(el);
        }
    }, {
        key: "drawDiffBlock",
        value: function drawDiffBlock(editor, type, startRow, startColumn, endRow, endColumn) {
            if (endRow < startRow) {
                endRow = startRow;
            }
            var classNames = "acediff-diff " + ColorStyle[type];

            if (endColumn && endRow === startRow && endColumn === startColumn) {
                endRow = startRow + 1;
                endColumn = startColumn + 2;
                classNames += " cursor-bar-" + ColorStyle[type];
            }

            if (!startColumn && !endColumn) {
                editor.markers.push(editor.addMarker(startRow, 0, startRow - 1, 1, "acediff-diff " + ColorStyle[type] + "targetOnly top", "fullLine"));
                editor.markers.push(editor.addMarker(endRow, 0, endRow - 1, 1, "acediff-diff " + ColorStyle[type] + "targetOnly bottom", "fullLine"));
            }

            classNames += endRow > startRow ? "lines" : "targetOnly";
            var option = "";
            endRow -= 1;
            endColumn -= 1;

            if (type === -2 || endRow < startRow && endColumn === -1) {
                option += "fullLine";
            }

            if (endRow < startRow && endColumn === -1) {
                editor.markers.push(editor.addMarker(startRow, startColumn, endRow, endColumn, classNames, option));
            } else if (endColumn === -1) {
                editor.markers.push(editor.addMarker(startRow, startColumn, endRow + 1, endColumn + 1, classNames, option + " text"));
            } else {
                editor.markers.push(editor.addMarker(startRow, startColumn, endRow, endColumn, classNames, option));
            }
        }
    }, {
        key: "computeCurve",
        value: function computeCurve(startX, startY, endX, endY) {
            var w = endX - startX;
            var halfWidth = startX + w / 2;

            return 'M ' + startX + ' ' + startY + ' C ' + halfWidth + ',' + startY + ' ' + halfWidth + ',' + endY + ' ' + endX + ',' + endY;
        }
    }]);
    return DiffWidget;
}(UI.Element);

var MergeWidget = function (_DiffWidget) {
    inherits(MergeWidget, _DiffWidget);

    function MergeWidget() {
        classCallCheck(this, MergeWidget);
        return possibleConstructorReturn(this, (MergeWidget.__proto__ || Object.getPrototypeOf(MergeWidget)).apply(this, arguments));
    }

    return MergeWidget;
}(DiffWidget);

var DelayedDiffWidget = function (_DelayedElement) {
    inherits(DelayedDiffWidget, _DelayedElement);

    function DelayedDiffWidget() {
        classCallCheck(this, DelayedDiffWidget);
        return possibleConstructorReturn(this, (DelayedDiffWidget.__proto__ || Object.getPrototypeOf(DelayedDiffWidget)).apply(this, arguments));
    }

    createClass(DelayedDiffWidget, [{
        key: "beforeRedrawNotLoaded",
        value: function beforeRedrawNotLoaded() {
            var _this11 = this;

            require(["DiffMatchPatch"], function () {
                _this11.setLoaded();
            });
        }
    }]);
    return DelayedDiffWidget;
}(DelayedElement(DiffWidget));

var DiffWidgetApp = function (_DelayedDiffWidget) {
    inherits(DiffWidgetApp, _DelayedDiffWidget);

    function DiffWidgetApp() {
        classCallCheck(this, DiffWidgetApp);
        return possibleConstructorReturn(this, (DiffWidgetApp.__proto__ || Object.getPrototypeOf(DiffWidgetApp)).apply(this, arguments));
    }

    createClass(DiffWidgetApp, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(DiffWidgetApp.prototype.__proto__ || Object.getPrototypeOf(DiffWidgetApp.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                paddingTop: "20px",
                marginLeft: "5%",
                width: "90%",
                height: "100%"
            });
        }
    }]);
    return DiffWidgetApp;
}(DelayedDiffWidget);

var katex = null;

var Latex = function (_UI$Element) {
    inherits(Latex, _UI$Element);

    function Latex() {
        classCallCheck(this, Latex);
        return possibleConstructorReturn(this, (Latex.__proto__ || Object.getPrototypeOf(Latex)).apply(this, arguments));
    }

    createClass(Latex, [{
        key: "setOptions",
        value: function setOptions(options) {
            if (options.children && options.children.length) {
                var value = "";
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = options.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var child = _step.value;

                        if (child instanceof UI.TextElement) {
                            value += child.getValue();
                        } else {
                            value += child.toString();
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                options.value = options.value || value;
            }
            get(Latex.prototype.__proto__ || Object.getPrototypeOf(Latex.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getNodeType",
        value: function getNodeType() {
            return "span";
        }
    }, {
        key: "updateInnerHTML",
        value: function updateInnerHTML() {
            try {
                this.node.innerHTML = katex.renderToString(this.options.value);
            } catch (e) {
                this.node.innerHTML = "Latex parse error...";
            }
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var _this2 = this;

            if (katex) {
                this.updateInnerHTML();
                return;
            }
            require(["katex"], function (_katex) {
                katex = _katex;
                _this2.updateInnerHTML();
            });
        }
    }]);
    return Latex;
}(UI.Element);

var ContestRegistererTable = function (_Table) {
    inherits(ContestRegistererTable, _Table);

    function ContestRegistererTable() {
        classCallCheck(this, ContestRegistererTable);
        return possibleConstructorReturn(this, (ContestRegistererTable.__proto__ || Object.getPrototypeOf(ContestRegistererTable)).apply(this, arguments));
    }

    createClass(ContestRegistererTable, [{
        key: "getEntries",
        value: function getEntries() {
            return ContestRegistererStore.all();
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            get(ContestRegistererTable.prototype.__proto__ || Object.getPrototypeOf(ContestRegistererTable.prototype), "setColumns", this).call(this, [{
                value: function value(registerer) {
                    return UI.createElement(Link, { value: registerer.getContest().getName(), href: "/contest/" + registerer.getContest().name });
                },
                headerName: "Name"
            }, {
                value: function value(registerer) {
                    return registerer.totalUsers;
                },
                headerName: "Participants"
            }, {
                value: function value(registerer) {
                    return registerer.usersLastMonth;
                },
                headerName: "Participants this month"
            }, {
                value: function value(registerer) {
                    return registerer.startDate ? StemDate(registerer.startDate).format("DD/MM/YYYY HH:mm") : UI.createElement(Latex, { value: "-\\infty" });
                },
                headerName: "Start date"
            }, {
                value: function value(registerer) {
                    return registerer.endDate ? StemDate(registerer.endDate).format("DD/MM/YYYY HH:mm") : UI.createElement(Latex, { value: "\\infty" });
                },
                headerName: "End date"
            }, {
                value: function value(registerer) {
                    return UI.createElement(Link, { value: "Edit contest", href: "/contest/" + registerer.getContest().name + "/edit/" });
                }
            }, {
                value: function value(registerer) {
                    return UI.createElement(Link, { value: "Invite Link", href: "/contest/invite/" + registerer.getCode() + "/" });
                }
            }]);
        }
    }]);
    return ContestRegistererTable;
}(Table);

var NewContestModal = function (_ActionModal) {
    inherits(NewContestModal, _ActionModal);

    function NewContestModal() {
        classCallCheck(this, NewContestModal);
        return possibleConstructorReturn(this, (NewContestModal.__proto__ || Object.getPrototypeOf(NewContestModal)).apply(this, arguments));
    }

    createClass(NewContestModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Custom contest creation";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "strong",
                null,
                "! Leave the Start Date and End Date empty for a contest you want open indefinitely"
            ), UI.createElement(
                Form,
                null,
                UI.createElement(
                    FormField,
                    { label: "Contest Name" },
                    UI.createElement(TextInput, { ref: "contestNameInput" })
                ),
                UI.createElement(
                    FormField,
                    { label: "Start Date" },
                    UI.createElement(DateTimePicker$$1, { ref: "startDatePicker" })
                ),
                UI.createElement(
                    FormField,
                    { label: "End Date" },
                    UI.createElement(DateTimePicker$$1, { ref: "endDatePicker" })
                ),
                UI.createElement(
                    FormField,
                    { label: "Contest Duration (hours:minutes or minutes)" },
                    UI.createElement(TextInput, { ref: "durationInput", value: "01:00" })
                )
            )];
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Create";
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(NewContestModal.prototype.__proto__ || Object.getPrototypeOf(NewContestModal.prototype), "onMount", this).call(this);

            var defaultDate = ServerTime.now().add({ minutes: 1 });
            var minutesToMilliseconds = 5 * 60 * 1000;
            var remainder = minutesToMilliseconds - defaultDate % minutesToMilliseconds;
            defaultDate.add(remainder, "milliseconds");
            this.startDatePicker.setDate(defaultDate);
            defaultDate.add({ days: 1 });
            this.endDatePicker.setDate(defaultDate);
        }
    }, {
        key: "action",
        value: function action() {
            var _this3 = this;

            var contestLongName = this.contestNameInput.getValue();
            var startDate = this.startDatePicker.getDate();
            var endDate = this.endDatePicker.getDate();

            var duration = this.durationInput.getValue();
            if (duration) {
                duration = duration.split(":");
                if (duration.length > 1) {
                    duration = 60 * 60 * 1000 * parseFloat(duration[0] || 0) + 60 * 1000 * parseFloat(duration[1] || 0);
                } else {
                    duration = 60 * 1000 * parseFloat(duration[0] || 0);
                }
            }

            if (!duration || !contestLongName) {
                this.messageArea.showMessage("Invalid data given!", "red", 3000);
                return;
            }
            if (startDate) {
                startDate = startDate.getTime();
            }
            if (endDate) {
                endDate = endDate.getTime();
            }
            if (startDate && endDate && startDate >= endDate) {
                this.messageArea.showMessage("Invalid data given!", "red", 3000);
                return;
            }
            var request = {
                duration: duration,
                contestLongName: contestLongName
            };
            if (startDate) {
                request.startTime = startDate;
            }
            if (endDate) {
                request.endTime = endDate;
            }
            Ajax.postJSON("/contest/create_custom_contest/", request).then(function () {
                _this3.options.contestManager.table.redraw();
                _this3.hide();
            }, function (error) {
                _this3.messageArea.showMessage(error.message, "red", 3000);
            });
        }
    }]);
    return NewContestModal;
}(ActionModal);

var NewContestButton = ActionModalButton(NewContestModal);

var ContestManager = function (_UI$Element) {
    inherits(ContestManager, _UI$Element);

    function ContestManager() {
        classCallCheck(this, ContestManager);
        return possibleConstructorReturn(this, (ContestManager.__proto__ || Object.getPrototypeOf(ContestManager)).apply(this, arguments));
    }

    createClass(ContestManager, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(ContestManager.prototype.__proto__ || Object.getPrototypeOf(ContestManager.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.EXTRA_SMALL);
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                NewContestButton,
                { level: Level.SUCCESS, style: { margin: "30px" }, modalOptions: { contestManager: this } },
                "New Contest"
            ), UI.createElement(ContestRegistererTable, { ref: "table" })];
        }
    }]);
    return ContestManager;
}(UI.Element);

var ContestInvitePage = function (_UI$Element) {
    inherits(ContestInvitePage, _UI$Element);

    function ContestInvitePage() {
        classCallCheck(this, ContestInvitePage);
        return possibleConstructorReturn(this, (ContestInvitePage.__proto__ || Object.getPrototypeOf(ContestInvitePage)).apply(this, arguments));
    }

    createClass(ContestInvitePage, [{
        key: "renderRegistrationMessage",
        value: function renderRegistrationMessage() {
            var contestRegisterer = ContestRegistererStore.get(this.options.contestRegistererId);
            var error = this.options.reason || "noregisterer";
            if (this.options.canRegister) {
                var name = contestRegisterer.getContest().longName;
                return [UI.createElement(
                    "div",
                    { style: { marginTop: "20px" } },
                    "Contest name: " + name.substr(0, name.length - 15)
                ), UI.createElement(
                    "div",
                    { style: { marginTop: "20px" } },
                    "Duration: " + contestRegisterer.getContest().getFormattedDuration()
                ), UI.createElement(
                    "div",
                    { style: { marginTop: "20px" } },
                    "Click the button to go to the contest page. Take care, you can only participate once!" + " The contest will start when you click the button."
                )];
            }
            if (error === "toomany") {
                return ["The owner of this contest (", UI.createElement(UserHandle, { userId: contestRegisterer.ownerId }), ") has reached his limit of contest registrations this month. Please contact ", UI.createElement(UserHandle, { userId: contestRegisterer.ownerId }), " about this error."];
            }
            if (error === "participated") {
                return "You have already participated in this contest.";
            }
            if (!USER.isAuthenticated) {
                return "You need to log-in to continue.";
            }
            return "Invalid invitation link.";
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { style: { marginTop: "50px" } },
                UI.createElement(
                    "div",
                    { style: { fontSize: "2em", padding: "0 15%" } },
                    this.renderRegistrationMessage()
                ),
                UI.createElement(
                    "div",
                    { style: { textAlign: "center" } },
                    UI.createElement(TemporaryMessageArea, { ref: "errorArea" }),
                    UI.createElement(
                        Button,
                        { level: Level.PRIMARY, size: Size.LARGE, style: { margin: "20px auto", fontSize: "1.4em" },
                            disabled: !this.options.canRegister, ref: "registerButton" },
                        "Participate"
                    )
                )
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.registerButton.addClickListener(function () {
                Ajax.postJSON("/contest/register_by_invite/", {
                    contestRegistererId: _this2.options.contestRegistererId
                }).then(function () {
                    var name = ContestRegistererStore.get(_this2.options.contestRegistererId).getContest().longName;
                    Router.changeURL(["contest", "custom-v-" + name.substr(name.length - 12), "tasks"]);
                }, function (error) {
                    _this2.registerButton.setLevel(Level.DANGER);
                    _this2.errorArea.showMessage(error.message, "red");
                    setTimeout(function () {
                        _this2.registerButton.setLevel(Level.PRIMARY);
                    }, 2000);
                });
            });
        }
    }]);
    return ContestInvitePage;
}(UI.Element);

var ContestAnnouncementList = function (_UI$Element) {
    inherits(ContestAnnouncementList, _UI$Element);

    function ContestAnnouncementList() {
        classCallCheck(this, ContestAnnouncementList);
        return possibleConstructorReturn(this, (ContestAnnouncementList.__proto__ || Object.getPrototypeOf(ContestAnnouncementList)).apply(this, arguments));
    }

    createClass(ContestAnnouncementList, [{
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "renderAnnouncement",
        value: function renderAnnouncement(announcement) {
            var formattedDate = announcement.getDate().format("HH:mm:ss");

            var title = UI.createElement(
                "div",
                null,
                formattedDate,
                " ",
                UI.createElement(
                    "strong",
                    null,
                    announcement.getTarget()
                )
            );
            return UI.createElement(
                "div",
                { style: { padding: "10px", width: "450px", maxWidth: "100%" } },
                UI.createElement(
                    CardPanel,
                    { key: announcement.id, title: title, id: "announcement" + announcement.id,
                        bodyStyle: { padding: "15px" } },
                    announcement.getMessage()
                )
            );
        }
    }, {
        key: "render",
        value: function render() {
            return this.getContest().getAnnouncements().map(this.renderAnnouncement, this);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.attachCreateListener(ContestAnnouncementStore, function (announcement) {
                if (announcement.getContest() === _this2.getContest()) {
                    _this2.redraw();
                }
            });
        }
    }]);
    return ContestAnnouncementList;
}(UI.Element);

var AnnouncementBroadcastModal = function (_Modal) {
    inherits(AnnouncementBroadcastModal, _Modal);

    function AnnouncementBroadcastModal() {
        classCallCheck(this, AnnouncementBroadcastModal);
        return possibleConstructorReturn(this, (AnnouncementBroadcastModal.__proto__ || Object.getPrototypeOf(AnnouncementBroadcastModal)).apply(this, arguments));
    }

    createClass(AnnouncementBroadcastModal, [{
        key: "render",
        value: function render() {
            var _this4 = this;

            var tasks = [{
                general: true,
                toString: function toString() {
                    return "General";
                }
            }].concat(this.options.contest.getContestTasks());

            return [UI.createElement(
                "h4",
                { className: "text-center" },
                "New announcement"
            ), UI.createElement(
                FormField,
                { label: "Task name" },
                UI.createElement(Select, { ref: "contestTaskSelect", options: tasks })
            ), UI.createElement(
                FormField,
                { label: "Message" },
                UI.createElement(TextArea, { ref: "messageInput" })
            ), UI.createElement(
                FormField,
                { label: " " },
                UI.createElement(Button, { level: Level.PRIMARY, label: UI.T("Broadcast announcement"),
                    onClick: function onClick() {
                        return _this4.broadcastAnnouncement();
                    } })
            )];
        }
    }, {
        key: "broadcastAnnouncement",
        value: function broadcastAnnouncement() {
            var _this5 = this;

            var contestTask = this.contestTaskSelect.get();

            var request = {
                contestId: this.options.contest.id,
                message: this.messageInput.getValue()
            };
            if (!contestTask.general) {
                request.contestTaskId = contestTask.id;
            }

            Ajax.postJSON("/contest/broadcast_announcement/", request).then(function () {
                return _this5.hide();
            });
        }
    }]);
    return AnnouncementBroadcastModal;
}(Modal);

var PermissionsPresets = {
    VIEW_ONLY: {
        toString: function toString() {
            return "View only";
        },
        permissions: {
            "view": true
        }
    },
    ANSWER_QUESTIONS: {
        toString: function toString() {
            return "Answer questions";
        },
        permissions: {
            "view": true,
            "answer-question": true
        }
    },
    QUESTIONS_AND_ANNOUNCEMENTS: {
        toString: function toString() {
            return "Answer questions & broadcast announcements";
        },
        permissions: {
            "view": true,
            "answer-question": true,
            "broadcast-announcement": true
        }
    },
    FULL: {
        toString: function toString() {
            return "Full permissions";
        },
        permissions: {
            "view": true,
            "edit-settings": true,
            "edit-tasks": true,
            "answer-question": true,
            "broadcast-announcement": true
        }
    },
    CUSTOM: {
        toString: function toString() {
            return "Custom";
        }
    }
};

var ContestPermissionsEditor = function (_UI$Element) {
    inherits(ContestPermissionsEditor, _UI$Element);

    function ContestPermissionsEditor() {
        classCallCheck(this, ContestPermissionsEditor);
        return possibleConstructorReturn(this, (ContestPermissionsEditor.__proto__ || Object.getPrototypeOf(ContestPermissionsEditor)).apply(this, arguments));
    }

    createClass(ContestPermissionsEditor, [{
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "removePermission",
        value: function removePermission(userId, permissionName) {
            var _this2 = this;

            var redraw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            return this.getContest().removePermission(userId.userId || userId, permissionName, function () {
                return redraw && _this2.redraw();
            });
        }
    }, {
        key: "addPermission",
        value: function addPermission(userId, permissionName) {
            var _this3 = this;

            var redraw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            return this.getContest().addPermission(userId.userId || userId, permissionName, function () {
                return redraw && _this3.redraw();
            });
        }
    }, {
        key: "togglePermission",
        value: function togglePermission(userId, permissionName) {
            var redraw = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            if (this.getContest().getUserPermission(userId.userId || userId, permissionName)) {
                this.removePermission(userId, permissionName, redraw);
            } else {
                this.addPermission(userId, permissionName, redraw);
            }
        }
    }, {
        key: "tryMatchPreset",
        value: function tryMatchPreset(userId) {
            if (this.forceCustomForUsers && this.forceCustomForUsers.has(userId)) {
                return PermissionsPresets.CUSTOM;
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.values(PermissionsPresets)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var preset = _step.value;

                    if (preset !== PermissionsPresets.CUSTOM) {
                        var permissions = preset.permissions;
                        var ok = true;
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = Object.values(Contest.ModeratedAction)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var permName = _step2.value;

                                if (this.getContest().getUserPermission(userId, permName) !== !!permissions[permName]) {
                                    ok = false;
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }

                        if (ok) {
                            return preset;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return PermissionsPresets.CUSTOM;
        }
    }, {
        key: "changeUserToPreset",
        value: function changeUserToPreset(groupMember, preset) {
            var _this4 = this;

            var userId = groupMember.userId;
            if (preset === PermissionsPresets.CUSTOM) {
                this.forceCustomForUsers = this.forceCustomForUsers || new Set();
                this.forceCustomForUsers.add(userId);
                this.redraw();
                return;
            }
            this.forceCustomForUsers && this.forceCustomForUsers.delete(userId);
            var xhrPromises = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.values(Contest.ModeratedAction)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var permName = _step3.value;

                    var shouldHavePermission = !!preset.permissions[permName];
                    if (shouldHavePermission) {
                        xhrPromises.push(this.addPermission(userId, permName, false));
                    } else {
                        xhrPromises.push(this.removePermission(userId, permName, false));
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            Promise.all(xhrPromises).then(function () {
                return _this4.redraw();
            });
        }
    }, {
        key: "getTableColumns",
        value: function getTableColumns() {
            var _this5 = this;

            var columns = [{
                value: function value(member) {
                    return UI.createElement(UserHandle, { id: member.userId });
                },
                headerName: "User"
            }, {
                value: function value(member) {
                    return UI.createElement(Select, { options: [].concat(toConsumableArray(Object.values(PermissionsPresets))),
                        selected: _this5.tryMatchPreset(member.userId),
                        ref: _this5.refLink("presetSelect" + member.id),
                        onChange: function onChange() {
                            return _this5.changeUserToPreset(member, _this5["presetSelect" + member.id].get());
                        } });
                },
                headerName: "Preset"
            }];
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                var _loop = function _loop() {
                    var permKey = _step4.value;

                    var permName = Contest.ModeratedAction[permKey];
                    var verbosePermName = Contest.VerboseModeratedAction[permKey];
                    columns.push({
                        value: function value(member) {
                            return UI.createElement(CheckboxInput, {
                                checked: _this5.getContest().getUserPermission(member.userId, permName),
                                disabled: permName === Contest.ModeratedAction.VIEW || _this5.tryMatchPreset(member.userId) !== PermissionsPresets.CUSTOM,
                                onChange: function onChange() {
                                    return _this5.togglePermission(member.userId, permName);
                                }
                            });
                        },
                        headerName: verbosePermName
                    });
                };

                for (var _iterator4 = Object.keys(Contest.ModeratedAction)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            columns.push({
                value: function value(member) {
                    return UI.createElement(Button, { level: Level.DANGER, size: Size.EXTRA_SMALL, faIcon: "minus",
                        onClick: function onClick() {
                            return _this5.removePermission(member, Contest.ModeratedAction.VIEW);
                        } });
                }
            });
            return columns;
        }
    }, {
        key: "getTableEntries",
        value: function getTableEntries() {
            return this.getContest().getPermissionGroup(Contest.ModeratedAction.VIEW).getMembers();
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(Table, { ref: "usersTable", entries: this.getTableEntries(), columns: this.getTableColumns() }), UI.createElement(
                "h4",
                { style: { marginTop: "20px" } },
                "Give access to a new user:"
            ), UI.createElement(UserInputField, { ref: "userInputField" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.attachListener(this.userInputField, "user", function (userId) {
                _this6.userInputField.clear();
                _this6.addPermission(userId, Contest.ModeratedAction.VIEW);
            });
        }
    }]);
    return ContestPermissionsEditor;
}(UI.Element);

var ContestExporter = function () {
    createClass(ContestExporter, [{
        key: "draw",
        value: function draw() {
            window.currentWidget.addClass("hidden");
            this.element.removeClass("hidden");
        }
    }, {
        key: "revert",
        value: function revert() {
            window.currentWidget.removeClass("hidden");
            this.element.destroyNode();
        }
    }, {
        key: "renderTaskArticle",
        value: function renderTaskArticle(contestTask) {
            var language = this.options.language || Language.ENGLISH;

            var articleClassMap = new MarkupClassMap(MarkupClassMap.GLOBAL, [["TaskExamples", EvalTaskExamplesTableForPDF(contestTask.getEvalTask())], ["RawHTML", RawHTML], ["ServerInputTest", ServerInputTest]]);
            var article = contestTask.getStatementArticle().getTranslation(language);
            return UI.createElement(ArticleRenderer, { article: article, classMap: articleClassMap });
        }
    }, {
        key: "renderTask",
        value: function renderTask(contestTask) {
            var evalTask = contestTask.getEvalTask();
            var taskArticle = this.renderTaskArticle(contestTask);

            return [UI.createElement(
                "div",
                { className: "text-center" },
                UI.createElement(
                    "h1",
                    null,
                    UI.T(evalTask.longName)
                )
            ), taskArticle];
        }
    }, {
        key: "renderTaskWrapped",
        value: function renderTaskWrapped(contestTask) {
            return UI.createElement(
                "div",
                { style: { pageBreakAfter: "always" } },
                this.renderTask(contestTask)
            );
        }
    }, {
        key: "render",
        value: function render() {
            var newChildren = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.contest.getContestTasks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestTask = _step.value;

                    newChildren.push(this.renderTaskWrapped(contestTask));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.element.setChildren(newChildren);
        }
    }, {
        key: "requestAllLatestTasks",
        value: function requestAllLatestTasks() {
            var xhrPromises = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.contest.getContestTasks()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var contestTask = _step2.value;

                    xhrPromises.push(Ajax.postJSON("/contest/get_contest_task/", {
                        contestTaskId: contestTask.id
                    }));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return Promise.all(xhrPromises);
        }

        // API

    }]);

    function ContestExporter(contest) {
        var _this = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, ContestExporter);

        this.contest = contest;
        this.options = options;

        this.element = UI.createElement("div", { className: "hidden" });
        this.element.mount(document.body);
        this.requestAllLatestTasks().then(function () {
            return _this.render();
        });
    }

    createClass(ContestExporter, [{
        key: "updateOptions",
        value: function updateOptions(options) {
            this.options = Object.assign(this.options, options);
            this.render();
        }
    }, {
        key: "exportToPDF",
        value: function exportToPDF() {
            var _this2 = this;

            this.draw();
            setTimeout(function () {
                print();
                _this2.revert();
            }, 0);
        }
    }]);
    return ContestExporter;
}();

function addTaskToContest(contest, options) {
    var onSuccess = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOOP_FUNCTION;
    var onError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NOOP_FUNCTION;

    var request = {
        contestId: contest.id,
        evalTaskId: options.evalTaskId,
        sourceSize: options.sourceSizeLimit || 64 * 1024
    };

    Ajax.postJSON("/contest/add_task/", request).then(onSuccess, onError);
}

var AddTaskModal = function (_ActionModal) {
    inherits(AddTaskModal, _ActionModal);

    function AddTaskModal() {
        classCallCheck(this, AddTaskModal);
        return possibleConstructorReturn(this, (AddTaskModal.__proto__ || Object.getPrototypeOf(AddTaskModal)).apply(this, arguments));
    }

    createClass(AddTaskModal, [{
        key: "getBody",
        value: function getBody() {
            var evalTasks = EvalTaskStore.all();
            return [UI.createElement(
                FormField,
                { label: "Task name" },
                UI.createElement(Select, { options: evalTasks, ref: "evalTaskSelect" })
            ), UI.createElement(
                FormField,
                { label: "Source size" },
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(NumberInput, { placeholder: "Source size", value: "10240", ref: "sourceSizeInput" }),
                    UI.createElement(
                        "div",
                        { style: { display: "inline-block", marginLeft: "4px" } },
                        "bytes"
                    )
                )
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this2 = this;

            addTaskToContest(this.options.contest, {
                evalTaskId: this.evalTaskSelect.get().id,
                sourceSizeLimit: this.sourceSizeInput.getValue()
            }, function () {
                _this2.hide();
                _this2.options.tasksTable.redraw();
            }, function (error) {
                _this2.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return AddTaskModal;
}(ActionModal);

var AddTaskButton = ActionModalButton(AddTaskModal);

var EditContestModal = function (_CreateContestModal) {
    inherits(EditContestModal, _CreateContestModal);

    function EditContestModal() {
        classCallCheck(this, EditContestModal);
        return possibleConstructorReturn(this, (EditContestModal.__proto__ || Object.getPrototypeOf(EditContestModal)).apply(this, arguments));
    }

    createClass(EditContestModal, [{
        key: "getDefaultValues",
        value: function getDefaultValues() {
            var contest = this.options.contest;
            var duration = void 0;
            if (contest.getStartTime() && contest.getEndTime()) {
                var contestDuration = new Duration((contest.getEndTime() - contest.getStartTime()) * 1000);
                duration = {
                    days: contestDuration.toDays(),
                    hours: contestDuration.getHours(),
                    minutes: contestDuration.getMinutes()
                };
            }
            return {
                contestName: contest.name,
                contestLongName: contest.longName,
                startDate: contest.getStartTime() ? new StemDate(contest.getStartTime() * 1000) : null,
                durationDays: duration.days,
                durationHours: duration.hours,
                durationMinutes: duration.minutes,
                visible: contest.isVisible,
                rated: contest.rated,
                publicSources: contest.publicSources,
                scoringId: contest.scoringId
            };
        }
    }, {
        key: "getBody",
        value: function getBody() {
            var contest = this.options.contest;
            var discussionMutedCheckbox = null;
            var chat = contest.getChat();
            if (chat) {
                discussionMutedCheckbox = UI.createElement(
                    "label",
                    { style: { marginRight: "7px" } },
                    UI.createElement(CheckboxInput, { ref: "discussionMutedCheckbox", checked: chat.getMessageThread().muted }),
                    "Mute discussion"
                );
            }

            return [].concat(toConsumableArray(get(EditContestModal.prototype.__proto__ || Object.getPrototypeOf(EditContestModal.prototype), "getBody", this).call(this)), [discussionMutedCheckbox]);
        }
    }, {
        key: "getRequest",
        value: function getRequest() {
            var request = get(EditContestModal.prototype.__proto__ || Object.getPrototypeOf(EditContestModal.prototype), "getRequest", this).call(this);
            if (typeof request === "string") {
                return request;
            }
            request.contestId = this.options.contest.id;
            if (this.options.contest.getChat()) {
                request.discussionMuted = this.discussionMutedCheckbox.getValue();
            }
            return request;
        }
    }, {
        key: "getAjaxUrl",
        value: function getAjaxUrl() {
            return "/contest/change_settings/";
        }
    }, {
        key: "getErrorMessage",
        value: function getErrorMessage() {
            return "Error in changing contest settings!!";
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return "Edit contest " + this.options.contest.longName;
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Save";
        }
    }]);
    return EditContestModal;
}(CreateContestModal);

var EditContestButton = ActionModalButton(EditContestModal);

var CreateVirtualContestModal = function (_ActionModal2) {
    inherits(CreateVirtualContestModal, _ActionModal2);

    function CreateVirtualContestModal() {
        classCallCheck(this, CreateVirtualContestModal);
        return possibleConstructorReturn(this, (CreateVirtualContestModal.__proto__ || Object.getPrototypeOf(CreateVirtualContestModal)).apply(this, arguments));
    }

    createClass(CreateVirtualContestModal, [{
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                "Create virtual contest for ",
                this.options.contest.longName,
                "?"
            );
        }
    }, {
        key: "action",
        value: function action() {
            var _this5 = this;

            if (!this.options.contest.hasFinished()) {
                window.alert("The contest has not finished yet.");
                return;
            }
            var request = {
                contestId: this.options.contest.id
            };
            Ajax.postJSON("/contest/create_virtual_contest/", request).then(function () {
                return _this5.hide();
            });
        }
    }]);
    return CreateVirtualContestModal;
}(ActionModal);

var CreateVirtualContestButton = ActionModalButton(CreateVirtualContestModal);

var AddToArchiveModal = function (_ActionModal3) {
    inherits(AddToArchiveModal, _ActionModal3);

    function AddToArchiveModal() {
        classCallCheck(this, AddToArchiveModal);
        return possibleConstructorReturn(this, (AddToArchiveModal.__proto__ || Object.getPrototypeOf(AddToArchiveModal)).apply(this, arguments));
    }

    createClass(AddToArchiveModal, [{
        key: "getBody",
        value: function getBody() {
            this.contestTasks = this.options.contest.getContestTasks();
            var taskList = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.contestTasks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var task = _step.value;

                    taskList.push(UI.createElement(
                        "li",
                        null,
                        task.longName
                    ));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return [UI.createElement(
                "p",
                null,
                "Add the following tasks to the archive?"
            ), UI.createElement(
                "ul",
                null,
                taskList
            ), UI.createElement(
                FormField,
                { label: "Which archive?" },
                UI.createElement(Select, { ref: "archiveSelect", options: ArchiveStore.all() })
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this7 = this;

            var request = {
                contestId: this.options.contest.id,
                archiveId: this.archiveSelect.get().id
            };
            this.messageArea.showMessage("Adding to archive...", "black", null);
            Ajax.postJSON("/contest/add_to_archive/", request).then(function () {
                return _this7.hide();
            });
        }
    }]);
    return AddToArchiveModal;
}(ActionModal);

var AddToArchiveButton = ActionModalButton(AddToArchiveModal);

var CreateDiscussionModal = function (_ActionModal4) {
    inherits(CreateDiscussionModal, _ActionModal4);

    function CreateDiscussionModal() {
        classCallCheck(this, CreateDiscussionModal);
        return possibleConstructorReturn(this, (CreateDiscussionModal.__proto__ || Object.getPrototypeOf(CreateDiscussionModal)).apply(this, arguments));
    }

    createClass(CreateDiscussionModal, [{
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                "Create discussion for ",
                this.options.contest.longName,
                "?"
            );
        }
    }, {
        key: "action",
        value: function action() {
            var _this9 = this;

            var request = {
                contestId: this.options.contest.id
            };
            Ajax.postJSON("/contest/create_discussion/", request).then(function () {
                return _this9.hide();
            });
        }
    }]);
    return CreateDiscussionModal;
}(ActionModal);

var CreateDiscussionButton = ActionModalButton(CreateDiscussionModal);

var DeleteContestModal = function (_ActionModal5) {
    inherits(DeleteContestModal, _ActionModal5);

    function DeleteContestModal() {
        classCallCheck(this, DeleteContestModal);
        return possibleConstructorReturn(this, (DeleteContestModal.__proto__ || Object.getPrototypeOf(DeleteContestModal)).apply(this, arguments));
    }

    createClass(DeleteContestModal, [{
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                "Delete ",
                this.options.contest.longName,
                "?"
            );
        }
    }, {
        key: "action",
        value: function action() {
            var request = {
                contestId: this.options.contest.id
            };
            Ajax.postJSON("/contest/delete/", request).then(function () {
                return window.location.replace("/contests/");
            });
        }
    }]);
    return DeleteContestModal;
}(ActionModal);

var DeleteContestButton = ActionModalButton(DeleteContestModal);

var PublishAnalysisModal = function (_ActionModal6) {
    inherits(PublishAnalysisModal, _ActionModal6);

    function PublishAnalysisModal() {
        classCallCheck(this, PublishAnalysisModal);
        return possibleConstructorReturn(this, (PublishAnalysisModal.__proto__ || Object.getPrototypeOf(PublishAnalysisModal)).apply(this, arguments));
    }

    createClass(PublishAnalysisModal, [{
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                "Publish analysis for ",
                this.options.contest.longName,
                "?"
            );
        }
    }, {
        key: "action",
        value: function action() {
            var _this12 = this;

            var request = {
                contestId: this.options.contest.id
            };
            Ajax.postJSON("/contest/publish_analysis/", request).then(function () {
                return _this12.hide();
            });
        }
    }]);
    return PublishAnalysisModal;
}(ActionModal);

var PublishAnalysisButton = ActionModalButton(PublishAnalysisModal);

var ContestAnalysisEditor = function (_UI$Element) {
    inherits(ContestAnalysisEditor, _UI$Element);

    function ContestAnalysisEditor() {
        classCallCheck(this, ContestAnalysisEditor);
        return possibleConstructorReturn(this, (ContestAnalysisEditor.__proto__ || Object.getPrototypeOf(ContestAnalysisEditor)).apply(this, arguments));
    }

    createClass(ContestAnalysisEditor, [{
        key: "render",
        value: function render() {
            var _this14 = this;

            var contest = this.options.contest;
            if (contest.getAnalysisArticle()) {
                return [UI.createElement(ArticleEditor, { ref: "solutionEditor", articleId: contest.analysisArticleId, style: { height: "600px" } })];
            } else {
                return [UI.createElement(
                    "h2",
                    null,
                    "The contest does not have an analysis article, click bellow to create one"
                ), UI.createElement(Button, { label: "Create analysis article", onClick: function onClick() {
                        _this14.createAnalysisArticle();
                    } })];
            }
        }
    }, {
        key: "createAnalysisArticle",
        value: function createAnalysisArticle() {
            var _this15 = this;

            var request = {
                contestId: this.options.contest.id,
                createAnalysisArticle: true
            };

            Ajax.postJSON("/contest/create_analysis_article/", request).then(function (data) {
                _this15.options.contest.analysisArticleId = parseInt(data.analysisArticleId);
                _this15.redraw();
            });
        }
    }]);
    return ContestAnalysisEditor;
}(UI.Element);

var PrintModal = function (_ActionModal7) {
    inherits(PrintModal, _ActionModal7);

    function PrintModal() {
        classCallCheck(this, PrintModal);
        return possibleConstructorReturn(this, (PrintModal.__proto__ || Object.getPrototypeOf(PrintModal)).apply(this, arguments));
    }

    createClass(PrintModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                FormField,
                { label: "Language:" },
                UI.createElement(Select, { options: Language.all(), ref: "languageSelect" })
            )];
        }
    }, {
        key: "getExporterOptions",
        value: function getExporterOptions() {
            return {
                language: this.languageSelect.get()
            };
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this17 = this;

            get(PrintModal.prototype.__proto__ || Object.getPrototypeOf(PrintModal.prototype), "onMount", this).call(this);
            this.exporter = new ContestExporter(this.options.contest, this.getExporterOptions());
            this.languageSelect.addNodeListener("change", function () {
                return _this17.exporter.updateOptions(_this17.getExporterOptions());
            });
        }
    }, {
        key: "action",
        value: function action() {
            this.hide();
            this.exporter.updateOptions(this.getExporterOptions());
            this.exporter.exportToPDF();
        }
    }]);
    return PrintModal;
}(ActionModal);

var PrintButton = ActionModalButton(PrintModal);

var ContestEditPanel = function (_Panel) {
    inherits(ContestEditPanel, _Panel);

    function ContestEditPanel() {
        classCallCheck(this, ContestEditPanel);
        return possibleConstructorReturn(this, (ContestEditPanel.__proto__ || Object.getPrototypeOf(ContestEditPanel)).apply(this, arguments));
    }

    createClass(ContestEditPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                height: "100%",
                display: "flex",
                flexDirection: "column",
                width: "1100px",
                maxWidth: "100%",
                margin: "0 auto",
                padding: "0 15px"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var contest = ContestStore.get(this.options.contestId);
            var tasksTable = UI.createElement(AdminContestTasksTable, { ref: "tasksTable", contest: contest });
            var createVirtualContestButton = null;
            if (!contest.virtualContestId && contest.hasFinished()) {
                createVirtualContestButton = UI.createElement(CreateVirtualContestButton, { label: "Create virtual contest",
                    modalOptions: { contest: contest } });
            }
            var createDiscussionButton = null;
            if (!contest.getChat()) {
                createDiscussionButton = UI.createElement(CreateDiscussionButton, { label: "Create discussion",
                    modalOptions: { contest: contest } });
            }
            var publishAnalysisButton = null;
            if (contest.hasFinished()) {
                publishAnalysisButton = UI.createElement(PublishAnalysisButton, { label: "Publish analysis",
                    modalOptions: { contest: contest } });
            }
            var addToArchiveButton = null,
                printButton = null;
            if (USER.isSuperUser) {
                addToArchiveButton = UI.createElement(AddToArchiveButton, { label: "Add to archive", modalOptions: { contest: contest } });
                printButton = UI.createElement(PrintButton, { label: "Print", modalOptions: { contest: contest } });
            }
            var analysisPanel = null;
            if (USER.isSuperUser) {
                analysisPanel = UI.createElement(
                    Panel,
                    { title: "Analysis", style: { height: "100%" } },
                    UI.createElement(ContestAnalysisEditor, { contest: contest, style: { height: "100%" } })
                );
            }
            var permissionsPanel = null;
            var descriptionPanel = null;
            if (USER.isSuperUser || USER.id === contest.ownerId) {
                permissionsPanel = UI.createElement(
                    Panel,
                    { title: "Permissions", style: { height: "100%" } },
                    UI.createElement(ContestPermissionsEditor, { contest: contest, style: { height: "100%" } })
                );
                if (contest.getDescriptionArticle()) {
                    descriptionPanel = UI.createElement(
                        Panel,
                        { title: "Description", style: { height: "100%" } },
                        UI.createElement(ArticleEditor, { articleId: contest.descriptionArticleId })
                    );
                }
            }
            return [UI.createElement(
                "h1",
                null,
                contest.longName
            ), UI.createElement(
                ButtonGroup,
                { level: Level.PRIMARY, style: { margin: "10px 0" } },
                UI.createElement(Button, { label: "Return to contest page",
                    onClick: function onClick() {
                        return window.location.replace("/contest/" + contest.name + "/");
                    } }),
                UI.createElement(EditContestButton, { label: "Edit contest", modalOptions: { contest: contest } }),
                createVirtualContestButton,
                addToArchiveButton,
                publishAnalysisButton,
                createDiscussionButton,
                printButton,
                UI.createElement(DeleteContestButton, { label: "Delete contest", level: Level.DANGER,
                    modalOptions: { contest: contest } })
            ), UI.createElement(
                TabArea,
                { variableHeightPanels: true, style: { flex: "1" } },
                UI.createElement(
                    Panel,
                    { title: "Tasks", active: true },
                    UI.createElement(AddTaskButton, { label: "Add task", level: Level.PRIMARY, style: { margin: "10px 0" },
                        modalOptions: { contest: contest, tasksTable: tasksTable } }),
                    tasksTable
                ),
                descriptionPanel,
                UI.createElement(
                    Panel,
                    { title: "Announcements" },
                    UI.createElement(Button, { level: Level.PRIMARY,
                        label: "Broadcast announcement",
                        style: { margin: "5px" },
                        onClick: function onClick() {
                            AnnouncementBroadcastModal.show({ contest: contest });
                        } }),
                    UI.createElement(ContestAnnouncementList, { contest: contest })
                ),
                UI.createElement(
                    Panel,
                    { title: "Questions", style: { height: "100%" } },
                    UI.createElement(AdminContestQuestionPanel, { contest: contest, style: { height: "100%" } })
                ),
                analysisPanel,
                permissionsPanel
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            GlobalState.registerStream("contest-" + this.options.contestId + "-announcements");
            GlobalState.registerStream("contest-" + this.options.contestId + "-scores");
            GlobalState.registerStream("contest-" + this.options.contestId + "-owner");
            var contest = ContestStore.get(this.options.contestId);
            var request = {};
            if (USER.isSuperUser) {
                Ajax.getJSON("/contest/fetch_archives/", request);
            }
        }
    }]);
    return ContestEditPanel;
}(Panel);

var _class$100, _descriptor$42, _descriptor2$36, _descriptor3$30, _descriptor4$27, _class3$30, _descriptor5$25, _descriptor6$21;

function _initDefineProp$43(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$44(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var ContestSummaryStyle = (_class$100 = function (_StyleSheet) {
    inherits(ContestSummaryStyle, _StyleSheet);

    function ContestSummaryStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, ContestSummaryStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ContestSummaryStyle.__proto__ || Object.getPrototypeOf(ContestSummaryStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$43(_this, "label", _descriptor$42, _this), _initDefineProp$43(_this, "statisticsPanelContainer", _descriptor2$36, _this), _this.cardPanelBodyStyle = {
            padding: "0px"
        }, _initDefineProp$43(_this, "cardPanelRow", _descriptor3$30, _this), _initDefineProp$43(_this, "title", _descriptor4$27, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return ContestSummaryStyle;
}(StyleSheet), _descriptor$42 = _applyDecoratedDescriptor$44(_class$100.prototype, "label", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "18px"
        };
    }
}), _descriptor2$36 = _applyDecoratedDescriptor$44(_class$100.prototype, "statisticsPanelContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "300px",
            maxWidth: "100%",
            marginTop: "30px"
        };
    }
}), _descriptor3$30 = _applyDecoratedDescriptor$44(_class$100.prototype, "cardPanelRow", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "space-between",
            flex: "1"
        };
    }
}), _descriptor4$27 = _applyDecoratedDescriptor$44(_class$100.prototype, "title", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginBottom: "30px",
            paddingTop: "15px",
            fontSize: "26px"
        };
    }
}), _class$100);

var ContestPanelStyle = (_class3$30 = function (_StyleSheet2) {
    inherits(ContestPanelStyle, _StyleSheet2);

    function ContestPanelStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, ContestPanelStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = ContestPanelStyle.__proto__ || Object.getPrototypeOf(ContestPanelStyle)).call.apply(_ref2, [this].concat(args))), _this2), _initDefineProp$43(_this2, "questionContainer", _descriptor5$25, _this2), _initDefineProp$43(_this2, "askQuestionButton", _descriptor6$21, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return ContestPanelStyle;
}(StyleSheet), _descriptor5$25 = _applyDecoratedDescriptor$44(_class3$30.prototype, "questionContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "920px",
            maxWidth: "100%",
            margin: "0 auto",
            paddingLeft: "10px",
            paddingRight: "10px"
        };
    }
}), _descriptor6$21 = _applyDecoratedDescriptor$44(_class3$30.prototype, "askQuestionButton", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "20px",
            marginLeft: this.themeProperties.CONTEST_QUESTION_CARD_PANEL_BODY_PADDING
        };
    }
}), _class3$30);

var _dec$46, _class$101;

var ContestSummary = (_dec$46 = registerStyle(ContestSummaryStyle), _dec$46(_class$101 = function (_UI$Element) {
    inherits(ContestSummary, _UI$Element);

    function ContestSummary() {
        classCallCheck(this, ContestSummary);
        return possibleConstructorReturn(this, (ContestSummary.__proto__ || Object.getPrototypeOf(ContestSummary)).apply(this, arguments));
    }

    createClass(ContestSummary, [{
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "getInfoLines",
        value: function getInfoLines() {
            var stats = this.getContest().getStatistics() || {};
            return [{ label: UI.T("Users Registered"), value: this.getContest().getNumUsers() || "N/A" }, { label: UI.T("Users Online"), value: stats.numUsersOnline || "N/A" }, { label: UI.T("Submissions"), value: stats.numSubmissions || "N/A" }, { label: UI.T("Example Runs"), value: stats.numExampleRuns || "N/A" }, { label: UI.T("Compiles"), value: stats.numCompiles || "N/A" }, { label: UI.T("Custom Runs"), value: stats.numCustomRuns || "N/A" }].filter(function (infoLine) {
                return infoLine.value !== "0" && infoLine.value !== "N/A";
            });
        }
    }, {
        key: "getInfo",
        value: function getInfo(showRegisterButton) {
            var _this2 = this;

            var contest = this.getContest();
            var info = [UI.createElement(
                "div",
                { className: this.styleSheet.label },
                UI.T("Start time"),
                ": ",
                contest.getFormattedStartTime()
            ), UI.createElement(
                "div",
                { className: this.styleSheet.label },
                UI.T("Duration"),
                ": ",
                contest.getFormattedDuration()
            )];

            if (showRegisterButton) {
                info.push(this.getRegisterButton());
            }

            info.push(UI.createElement(
                "div",
                { className: this.styleSheet.statisticsPanelContainer },
                UI.createElement(
                    CardPanel,
                    { title: "Contest statistics",
                        bodyStyle: this.styleSheet.cardPanelBodyStyle },
                    UI.createElement(RowList$$1, { rows: this.getInfoLines(),
                        rowParser: function rowParser(infoLine) {
                            return UI.createElement(
                                "div",
                                { className: _this2.styleSheet.cardPanelRow },
                                UI.createElement(
                                    "span",
                                    null,
                                    infoLine.label
                                ),
                                UI.createElement(
                                    "span",
                                    null,
                                    infoLine.value
                                )
                            );
                        }
                    })
                )
            ));
            return info;
        }
    }, {
        key: "getRegisterButton",
        value: function getRegisterButton() {
            var _this3 = this;

            if (!this.getContest().hasFinished()) {
                var userRegistered = this.getContest().getUser(USER.id);
                return UI.createElement(Button, { level: Level.INFO,
                    label: userRegistered ? UI.T("Registered") : UI.T("Register"),
                    onClick: function onClick() {
                        return _this3.registerUser();
                    }, style: { marginRight: "5px", marginTop: "10px" },
                    disabled: userRegistered });
            }
            if (!this.getContest().isVirtual() && this.options.baseContest) {
                //TODO: actually check if there's a virtual contest
                return UI.createElement(VirtualParticipationButton, { modalOptions: { contest: this.options.baseContest },
                    style: { marginRight: "5px", marginTop: "10px" } });
            }
        }
    }, {
        key: "getDescription",
        value: function getDescription() {
            var contest = this.getContest();
            if (contest.systemGenerated) {
                contest.description = "On CS Academy, a contest takes place every hour.\n" + "This contest is scheduled on the " + StemDate(contest.getStartTime()).format("Do of MMMM Y, at HH:mm") + " your local time";
            }
            var descriptionArticle = this.getContest().getDescriptionArticle();
            if (descriptionArticle) {
                var articleClassMap = new MarkupClassMap(ArticleRenderer.markupClassMap, [["RawHTML", RawHTML]]);
                return UI.createElement(ArticleRenderer, { style: { marginTop: "1.5em" }, article: descriptionArticle,
                    classMap: articleClassMap });
            }
            return UI.createElement(RawHTML, { style: { marginTop: "1.5em" }, __innerHTML: this.getContest().description });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.title },
                UI.T(this.getContest().getName())
            ), UI.createElement(
                "div",
                null,
                this.getInfo(true)
            ), this.getDescription()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            var contestSummaryChanges = ["startTime", "endTime", "description", "longName", "name", "numRegistered", "numUsersOnline", "numSubmissions", "numExampleRuns", "numCompiles", "numCustomRuns"];
            this.attachUpdateListener(this.getContest(), function (event) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = contestSummaryChanges[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var summaryField = _step.value;

                        if (event.data.hasOwnProperty(summaryField) || event.hasOwnProperty(summaryField)) {
                            _this4.redraw();
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            });
        }
    }, {
        key: "registerUser",
        value: function registerUser() {
            if (!USER.isAuthenticated) {
                LoginModal.show();
                return;
            }

            var request = {
                contestId: this.options.contest.id
            };

            Ajax.postJSON("/contest/register/", request);
        }
    }]);
    return ContestSummary;
}(UI.Element)) || _class$101);

var _class$102, _descriptor$43, _dec$47, _class3$31, _class4$6, _descriptor2$37, _descriptor3$31, _dec2$19, _class6$3;

function _initDefineProp$44(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$45(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var ImprovedSubmissionSummaryStyle = (_class$102 = function (_SubmissionSummarySty) {
    inherits(ImprovedSubmissionSummaryStyle, _SubmissionSummarySty);

    function ImprovedSubmissionSummaryStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, ImprovedSubmissionSummaryStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ImprovedSubmissionSummaryStyle.__proto__ || Object.getPrototypeOf(ImprovedSubmissionSummaryStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$44(_this, "submissionSummary", _descriptor$43, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return ImprovedSubmissionSummaryStyle;
}(SubmissionSummaryStyle), _descriptor$43 = _applyDecoratedDescriptor$45(_class$102.prototype, "submissionSummary", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: 0
        };
    }
}), _class$102);
var ImprovedSubmissionSummary = (_dec$47 = registerStyle(ImprovedSubmissionSummaryStyle), _dec$47(_class3$31 = function (_SubmissionSummary) {
    inherits(ImprovedSubmissionSummary, _SubmissionSummary);

    function ImprovedSubmissionSummary() {
        classCallCheck(this, ImprovedSubmissionSummary);
        return possibleConstructorReturn(this, (ImprovedSubmissionSummary.__proto__ || Object.getPrototypeOf(ImprovedSubmissionSummary)).apply(this, arguments));
    }

    createClass(ImprovedSubmissionSummary, [{
        key: "getContest",
        value: function getContest() {
            return this.getEvalJob().getContestTask().getContest();
        }
    }, {
        key: "getTimeSubmittedLabel",
        value: function getTimeSubmittedLabel() {
            var duration = new Duration({
                seconds: this.getEvalJob().timeSubmitted - this.getContest().getStartTime()
            });
            return duration.format("HH:mm:ss");
        }
    }, {
        key: "render",
        value: function render() {
            var evalJobUIHandler = new EvalJobUIHandler(this.getEvalJob());

            return UI.createElement(
                "div",
                null,
                [evalJobUIHandler.getJobIdWithExternalLink(), " (", evalJobUIHandler.getTimeSubmitted(), ") -- ", evalJobUIHandler.getStatus()]
            );
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            get(ImprovedSubmissionSummary.prototype.__proto__ || Object.getPrototypeOf(ImprovedSubmissionSummary.prototype), "onMount", this).call(this);
            this.addListener("expand", function () {
                _this3.options.contestTaskSubmissions.dispatch("expand", _this3);
            });
        }
    }]);
    return ImprovedSubmissionSummary;
}(SubmissionSummary)) || _class3$31);

var ContestTaskSubmissions = function (_UI$Element) {
    inherits(ContestTaskSubmissions, _UI$Element);

    function ContestTaskSubmissions() {
        classCallCheck(this, ContestTaskSubmissions);
        return possibleConstructorReturn(this, (ContestTaskSubmissions.__proto__ || Object.getPrototypeOf(ContestTaskSubmissions)).apply(this, arguments));
    }

    createClass(ContestTaskSubmissions, [{
        key: "jobFilter",
        value: function jobFilter(job) {
            return job.contestTaskId === this.options.contestTask.id && job.userId === USER.id && !job.onlyExamples;
        }
    }, {
        key: "getEvalJobs",
        value: function getEvalJobs() {
            var _this5 = this;

            return EvalJobStore.all().filter(function (job) {
                return _this5.jobFilter(job);
            }).sort(function (a, b) {
                return b.id - a.id;
            });
        }
    }, {
        key: "getSubmissions",
        value: function getSubmissions() {
            var _this6 = this;

            var evalJobs = this.getEvalJobs();
            if (!evalJobs.length) {
                return UI.createElement(
                    "div",
                    { style: { height: "30px", display: "flex", justifyContent: "center", alignItems: "center", fontSize: "16px" } },
                    UI.createElement(
                        "em",
                        null,
                        UI.T("No submissions for this task")
                    )
                );
            }
            return evalJobs.map(function (evalJob) {
                return UI.createElement(ImprovedSubmissionSummary, { evalJob: evalJob, contestTaskSubmissions: _this6,
                    ref: _this6.refLink("evalJob" + evalJob.id) });
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                CardPanel,
                { title: UI.createElement(
                        "span",
                        { style: { fontSize: "16px" } },
                        UI.T(this.options.contestTask.longName)
                    ),
                    size: Size.LARGE, ref: "cardPanel" },
                this.getSubmissions()
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            this.attachListener(EvalJobStore, ["create", "refresh"], function (evalJob) {
                if (_this7.jobFilter(evalJob)) {
                    _this7.redraw();
                }
            });
            this.addListener("expand", function (expandingElement) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    var _loop = function _loop() {
                        var evalJob = _step.value;

                        var submissionSummary = _this7["evalJob" + evalJob.id];
                        if (expandingElement !== submissionSummary) {
                            if (!submissionSummary.options.collapsed) {
                                setTimeout(function () {
                                    return submissionSummary.collapse();
                                }, 250);
                            }
                        }
                    };

                    for (var _iterator = _this7.getEvalJobs()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        _loop();
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            });
        }
    }]);
    return ContestTaskSubmissions;
}(UI.Element);

var ContestSubmissionsStyle = (_class4$6 = function (_StyleSheet) {
    inherits(ContestSubmissionsStyle, _StyleSheet);

    function ContestSubmissionsStyle() {
        var _ref2;

        var _temp2, _this8, _ret3;

        classCallCheck(this, ContestSubmissionsStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret3 = (_temp2 = (_this8 = possibleConstructorReturn(this, (_ref2 = ContestSubmissionsStyle.__proto__ || Object.getPrototypeOf(ContestSubmissionsStyle)).call.apply(_ref2, [this].concat(args))), _this8), _initDefineProp$44(_this8, "className", _descriptor2$37, _this8), _initDefineProp$44(_this8, "sectionContainer", _descriptor3$31, _this8), _temp2), possibleConstructorReturn(_this8, _ret3);
    }

    return ContestSubmissionsStyle;
}(StyleSheet), _descriptor2$37 = _applyDecoratedDescriptor$45(_class4$6.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "25px",
            display: "flex",
            justifyContent: "center",
            alignItems: "flex-start",
            flexWrap: "wrap",
            flexDirection: "row"
        };
    }
}), _descriptor3$31 = _applyDecoratedDescriptor$45(_class4$6.prototype, "sectionContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "12.5px",
            minWidth: "425px",
            width: "30%"
        };
    }
}), _class4$6);

var ContestSubmissions = (_dec2$19 = registerStyle(ContestSubmissionsStyle), _dec2$19(_class6$3 = function (_UI$Element2) {
    inherits(ContestSubmissions, _UI$Element2);

    function ContestSubmissions() {
        classCallCheck(this, ContestSubmissions);
        return possibleConstructorReturn(this, (ContestSubmissions.__proto__ || Object.getPrototypeOf(ContestSubmissions)).apply(this, arguments));
    }

    createClass(ContestSubmissions, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.className);
        }
    }, {
        key: "getContest",
        value: function getContest() {
            return ContestStore.get(this.options.contestId);
        }
    }, {
        key: "getContestTasks",
        value: function getContestTasks() {
            return this.getContest().getContestTasks();
        }
    }, {
        key: "render",
        value: function render() {
            var _this10 = this;

            return this.getContestTasks().map(function (contestTask) {
                return UI.createElement(
                    "div",
                    { className: _this10.styleSheet.sectionContainer },
                    UI.createElement(ContestTaskSubmissions, { contestId: _this10.options.contestId, contestTask: contestTask })
                );
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            Ajax.getJSON("/eval/get_eval_jobs/", {
                contestId: this.options.contestId,
                userId: USER.id
            });
        }
    }]);
    return ContestSubmissions;
}(UI.Element)) || _class6$3);

var EvalTasksSolutionsWidget = function (_UI$Element) {
    inherits(EvalTasksSolutionsWidget, _UI$Element);

    function EvalTasksSolutionsWidget() {
        classCallCheck(this, EvalTasksSolutionsWidget);
        return possibleConstructorReturn(this, (EvalTasksSolutionsWidget.__proto__ || Object.getPrototypeOf(EvalTasksSolutionsWidget)).apply(this, arguments));
    }

    createClass(EvalTasksSolutionsWidget, [{
        key: "setOptions",
        value: function setOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            options = Object.assign({
                lazyRender: true
            }, options);
            get(EvalTasksSolutionsWidget.prototype.__proto__ || Object.getPrototypeOf(EvalTasksSolutionsWidget.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "getEvalTaskIds",
        value: function getEvalTaskIds() {
            return this.options.evalTaskIds || [];
        }
    }, {
        key: "isLoaded",
        value: function isLoaded() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getEvalTaskIds()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var evalTaskId = _step.value;

                    if (!EvalTaskStore.get(evalTaskId)) {
                        return false;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return true;
        }
    }, {
        key: "getOverviewPanel",
        value: function getOverviewPanel() {
            if (!this.options.overviewArticleId) {
                return this.options.overview;
            }
            var articleComments = void 0;
            if (this.options.overviewDiscussionId) {
                articleComments = UI.createElement(AsyncCommentThread, { chatId: this.options.overviewDiscussionId });
            }
            return UI.createElement(
                Panel,
                { title: UI.T("Overview") },
                UI.createElement(RecursiveArticleRenderer, { articleId: this.options.overviewArticleId }),
                articleComments
            );
        }
    }, {
        key: "getTaskPanels",
        value: function getTaskPanels() {
            var panels = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getEvalTaskIds()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var evalTaskId = _step2.value;

                    var evalTask = EvalTaskStore.get(evalTaskId);
                    var articleId = evalTask.solutionArticleId;

                    if (articleId) {
                        var articleComments = void 0;
                        if (evalTask.discussionId) {
                            articleComments = UI.createElement(AsyncCommentThread, { chatId: evalTask.discussionId });
                        }
                        panels.push(UI.createElement(
                            Panel,
                            { title: evalTask.toString() },
                            UI.createElement(RecursiveArticleRenderer, { articleId: articleId }),
                            articleComments
                        ));
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return panels;
        }
    }, {
        key: "fetchEvalTasks",
        value: function fetchEvalTasks() {
            var _this2 = this;

            if (this.isLoading) {
                return;
            }
            this.isLoading = true;

            var request = {
                evalTaskIds: this.getEvalTaskIds()
            };
            Ajax.getJSON("/contest/contest_analysis/", request).then(function () {
                return _this2.redraw();
            });
        }
    }, {
        key: "render",
        value: function render() {
            if (this.isLoaded()) {
                return UI.createElement(
                    TabArea,
                    { lazyRender: this.options.lazyRender, variableHeightPanels: true },
                    unwrapArray([this.getOverviewPanel(), this.getTaskPanels()])
                );
            } else {
                this.fetchEvalTasks();
                return UI.createElement(
                    Panel,
                    { title: "Loading" },
                    UI.createElement("span", { className: "fa fa-spin fa-spinner fa-3x" })
                );
            }
        }
    }]);
    return EvalTasksSolutionsWidget;
}(UI.Element);

var ContestAnalysis = function (_UI$Element2) {
    inherits(ContestAnalysis, _UI$Element2);

    function ContestAnalysis() {
        classCallCheck(this, ContestAnalysis);
        return possibleConstructorReturn(this, (ContestAnalysis.__proto__ || Object.getPrototypeOf(ContestAnalysis)).apply(this, arguments));
    }

    createClass(ContestAnalysis, [{
        key: "render",
        value: function render() {
            var evalTaskIds = this.options.contest.getContestTasks().map(function (contestTask) {
                return contestTask.evalTaskId;
            });
            return UI.createElement(EvalTasksSolutionsWidget, { evalTaskIds: evalTaskIds,
                overviewArticleId: this.options.contest.analysisArticleId,
                overviewDiscussionId: this.options.contest.analysisDiscussionId
            });
        }
    }]);
    return ContestAnalysis;
}(UI.Element);

var AnalysisModal = function (_ActionModal) {
    inherits(AnalysisModal, _ActionModal);

    function AnalysisModal() {
        classCallCheck(this, AnalysisModal);
        return possibleConstructorReturn(this, (AnalysisModal.__proto__ || Object.getPrototypeOf(AnalysisModal)).apply(this, arguments));
    }

    createClass(AnalysisModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "p",
                null,
                UI.T("The contest analysis has been published.")
            )];
        }
    }, {
        key: "action",
        value: function action() {
            Router.changeURL(this.options.contestPanel.getURLPrefix("analysis"));
            this.hide();
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return UI.T("Go to analysis");
        }
    }, {
        key: "getCloseName",
        value: function getCloseName() {
            return UI.T("Cancel");
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }]);
    return AnalysisModal;
}(ActionModal);

var NextContestModal = function (_ActionModal) {
    inherits(NextContestModal, _ActionModal);

    function NextContestModal() {
        classCallCheck(this, NextContestModal);
        return possibleConstructorReturn(this, (NextContestModal.__proto__ || Object.getPrototypeOf(NextContestModal)).apply(this, arguments));
    }

    createClass(NextContestModal, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("This contest has finished");
        }
    }, {
        key: "getBody",
        value: function getBody() {
            var congrats = void 0;
            var contestUser = this.options.contest.getUser(USER.id);
            if (contestUser) {
                var rank = contestUser.rank;
                congrats = UI.createElement(
                    "p",
                    null,
                    UI.T("Your rank:"),
                    " ",
                    rank,
                    ". ",
                    UI.T("Congratulations!")
                );
            }
            return UI.createElement(
                "div",
                null,
                congrats,
                UI.createElement(
                    "p",
                    null,
                    UI.T("A new hourly contest will start soon!")
                ),
                UI.createElement(
                    "p",
                    null,
                    UI.T("What would you like to do?")
                )
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this2 = this;

            return UI.createElement(
                ButtonGroup,
                { level: Level.PRIMARY },
                UI.createElement(Button, { label: UI.T("Stay here"), onClick: function onClick() {
                        return _this2.hide();
                    } }),
                UI.createElement(Button, { label: UI.T("Go to homepage"), onClick: function onClick() {
                        Router.changeURL([]);
                        _this2.hide();
                    } }),
                UI.createElement(Button, { label: UI.T("Go to next contest"),
                    onClick: function onClick() {
                        Router.changeURL(["contest", _this2.options.nextContestData.name]);
                        _this2.hide();
                    } })
            );
        }
    }]);
    return NextContestModal;
}(ActionModal);

var ContestCancelledModal = function (_ActionModal2) {
    inherits(ContestCancelledModal, _ActionModal2);

    function ContestCancelledModal() {
        classCallCheck(this, ContestCancelledModal);
        return possibleConstructorReturn(this, (ContestCancelledModal.__proto__ || Object.getPrototypeOf(ContestCancelledModal)).apply(this, arguments));
    }

    createClass(ContestCancelledModal, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("This contest has been cancelled");
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "div",
                null,
                UI.createElement(
                    "p",
                    null,
                    UI.T("For an hourly contest to take place, at least one " + "person should be registered before the contest starts.")
                )
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this4 = this;

            var nextContestButton = void 0;
            if (this.options.nextContestName) {
                nextContestButton = UI.createElement(Button, { label: UI.T("Go to next contest"),
                    onClick: function onClick() {
                        Router.changeURL(["contest", _this4.options.nextContestName]);
                        _this4.hide();
                    } });
            }
            return UI.createElement(
                ButtonGroup,
                { level: Level.PRIMARY },
                UI.createElement(Button, { label: UI.T("Stay here"), onClick: function onClick() {
                        return _this4.hide();
                    } }),
                UI.createElement(Button, { label: UI.T("Go to homepage"),
                    onClick: function onClick() {
                        Router.changeURL([]);
                        _this4.hide();
                    } }),
                nextContestButton
            );
        }
    }]);
    return ContestCancelledModal;
}(ActionModal);

var ContestLoadingPage = function (_UI$Element) {
    inherits(ContestLoadingPage, _UI$Element);

    function ContestLoadingPage() {
        classCallCheck(this, ContestLoadingPage);
        return possibleConstructorReturn(this, (ContestLoadingPage.__proto__ || Object.getPrototypeOf(ContestLoadingPage)).apply(this, arguments));
    }

    createClass(ContestLoadingPage, [{
        key: "render",
        value: function render() {
            var textStyle = { textAlign: "center", marginTop: "10px", fontSize: "2em" };
            if (this.options.error) {
                return UI.createElement(
                    "div",
                    { style: textStyle },
                    this.options.error.message,
                    UI.createElement("br", null),
                    "Try refreshing the page."
                );
            }
            return [StateDependentElement.renderLoading(), UI.createElement(
                "div",
                { style: textStyle },
                "Contest is loading. Please do not refresh the page."
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            var contest = this.options.contest;

            if (contest.isVirtual()) {
                return;
            }

            if (contest.hasAnyTask()) {
                contest.dispatch("loadedManually");
                return;
            }

            var delay = (Math.max(contest.getStartTime() - ServerTime.now().unix(), 0) + 5 + Math.random() * 10) * 1000;
            this.timerId = setTimeout(function () {
                if (!contest.hasAnyTask()) {
                    Ajax.getJSON("/contest/" + contest.name + "/", {}).then(function () {
                        return contest.dispatch("loadedManually");
                    }, function (error) {
                        return _this2.updateOptions({ error: error });
                    });
                }
                delete _this2.timerId;
            }, delay);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            if (this.timerId) {
                clearTimeout(this.timerId);
            }
        }
    }]);
    return ContestLoadingPage;
}(UI.Element);

var _class$103, _descriptor$44, _descriptor2$38, _descriptor3$32, _descriptor4$28, _dec$48, _class3$32;

function _initDefineProp$45(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$46(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var ContestNotificationStyle = (_class$103 = function (_CardPanelStyle) {
    inherits(ContestNotificationStyle, _CardPanelStyle);

    function ContestNotificationStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, ContestNotificationStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ContestNotificationStyle.__proto__ || Object.getPrototypeOf(ContestNotificationStyle)).call.apply(_ref, [this].concat(args))), _this), _this.timeout = 1000, _initDefineProp$45(_this, "className", _descriptor$44, _this), _this.body = {
            width: "320px",
            padding: "10px"
        }, _initDefineProp$45(_this, "visible", _descriptor2$38, _this), _initDefineProp$45(_this, "buttonGroup", _descriptor3$32, _this), _initDefineProp$45(_this, "textBoxClass", _descriptor4$28, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return ContestNotificationStyle;
}(CardPanelStyle), _descriptor$44 = _applyDecoratedDescriptor$46(_class$103.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            boxShadow: "none",
            backgroundColor: Theme.Global.getProperty("COLOR_BACKGROUND", "#fff"),
            zIndex: 9999,
            position: "fixed",
            right: "10px",
            top: "-100px",
            opacity: "0",
            transition: this.timeout / 1000 + "s all ease",
            fontSize: "110%"
        };
    }
}), _descriptor2$38 = _applyDecoratedDescriptor$46(_class$103.prototype, "visible", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            top: "39px",
            opacity: "1"
        };
    }
}), _descriptor3$32 = _applyDecoratedDescriptor$46(_class$103.prototype, "buttonGroup", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            float: "right",
            marginBottom: "5px",
            marginRight: "-5px",
            ">*": {
                padding: "2px 4px"
            }
        };
    }
}), _descriptor4$28 = _applyDecoratedDescriptor$46(_class$103.prototype, "textBoxClass", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "block",
            cursor: "pointer",
            height: "2em",
            marginBottom: "15px",
            ":hover": {
                textDecoration: "none"
            }
        };
    }
}), _class$103);
var ContestNotification = (_dec$48 = registerStyle(ContestNotificationStyle), _dec$48(_class3$32 = function (_CardPanel) {
    inherits(ContestNotification, _CardPanel);

    function ContestNotification() {
        classCallCheck(this, ContestNotification);
        return possibleConstructorReturn(this, (ContestNotification.__proto__ || Object.getPrototypeOf(ContestNotification)).apply(this, arguments));
    }

    createClass(ContestNotification, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(ContestNotification.prototype.__proto__ || Object.getPrototypeOf(ContestNotification.prototype), "getDefaultOptions", this).call(this), {
                level: Level.WARNING,
                bodyStyle: this.styleSheet.body
            });
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(ContestNotification.prototype.__proto__ || Object.getPrototypeOf(ContestNotification.prototype), "extraNodeAttributes", this).call(this, attr);
            if (this.options.manager.notificationCount === 1) {
                attr.setStyle("boxShadow", Theme.Global.getProperty("DARK_BOX_SHADOW"));
            }
            attr.addClass(this.styleSheet.className);
        }
    }, {
        key: "show",
        value: function show() {
            this.addClass(this.styleSheet.visible);
        }
    }, {
        key: "hide",
        value: function hide() {
            var _this3 = this;

            this.removeClass(this.styleSheet.visible);
            setTimeout(function () {
                return _this3.options.manager.deleteNotification(_this3.options.data);
            }, this.styleSheet.timeout);
        }
    }, {
        key: "render",
        value: function render() {
            if (this.options.data.link) {
                this.message = UI.createElement(Link, { className: this.styleSheet.textBoxClass,
                    href: this.options.data.link, value: this.options.data.message });
            } else {
                this.message = UI.createElement(
                    "div",
                    { className: this.styleSheet.textBoxClass },
                    this.options.data.message
                );
            }
            var closeAllButton = this.options.manager.notificationCount > 1 ? UI.createElement(
                Button,
                { ref: "closeAll" },
                "Close all(" + this.options.manager.notificationCount + ")"
            ) : null;
            return [this.message, UI.createElement(
                ButtonGroup,
                { size: Size.SMALL, level: Level.DANGER, className: this.styleSheet.buttonGroup },
                closeAllButton,
                UI.createElement(
                    Button,
                    { ref: "close" },
                    "Close"
                )
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            setTimeout(function () {
                return _this4.show();
            }, 100);
            this.close.addClickListener(function () {
                return _this4.hide();
            });
            if (this.closeAll) {
                this.closeAll.addClickListener(function () {
                    return _this4.options.manager.deleteAll();
                });
            }
            if (this.options.data.link) {
                this.message.addClickListener(function () {
                    if (_this4.options.data.id) {
                        window.location.hash = _this4.options.data.id;
                    }
                    _this4.hide();
                });
            }
        }
    }]);
    return ContestNotification;
}(CardPanel)) || _class3$32);


var ContestNotificationManager = function () {
    // contestId is needed as an identifier only.
    function ContestNotificationManager(contestId) {
        var _this5 = this;

        classCallCheck(this, ContestNotificationManager);

        this.notifications = new Map();
        this.notificationCount = 0;
        this.localStorageMap = ContestLocalStorageManager.getNotificationsLocalStorageMap(contestId);
        var notificationData = this.getAllDataFromStorage();
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = notificationData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = slicedToArray(_step.value, 2),
                    key = _step$value[0],
                    data = _step$value[1];

                this.createNotification(data, false);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        this.localStorageMap.addChangeListener(function (event) {
            if (!event.newValue) {
                // removed
                _this5.deleteNotification(event.oldValue, false);
            }
        });
    }

    createClass(ContestNotificationManager, [{
        key: "getAllDataFromStorage",
        value: function getAllDataFromStorage() {
            return this.localStorageMap.entries().sort(function (a, b) {
                return a[1].timeAdded - b[1].timeAdded;
            });
        }

        // data is an object that contains the fields "message", "link", "title" and "id".

    }, {
        key: "createNotification",
        value: function createNotification(data) {
            var addData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (addData) {
                data.timeAdded = StemDate.now().unix();
                this.localStorageMap.set(data.key, data);
            }

            this.notificationCount += 1;
            this.notifications.set(data.key, ContestNotification.create(document.body, {
                title: data.title,
                data: data,
                manager: this
            }));
        }
    }, {
        key: "deleteNotification",
        value: function deleteNotification(data) {
            var deleteData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (deleteData) {
                this.localStorageMap.delete(data.key);
            }

            this.notificationCount -= 1;
            var notificationElement = this.notifications.get(data.key);
            this.notifications.delete(data.key);
            notificationElement.destroyNode();
        }
    }, {
        key: "deleteAll",
        value: function deleteAll() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.notifications.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var notificationElement = _step2.value;

                    notificationElement.hide();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }]);
    return ContestNotificationManager;
}();

var _dec$49, _class$104;

var ContestPanel = (_dec$49 = registerStyle(ContestPanelStyle), _dec$49(_class$104 = function (_Router) {
    inherits(ContestPanel, _Router);

    function ContestPanel() {
        var _ref;

        classCallCheck(this, ContestPanel);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = possibleConstructorReturn(this, (_ref = ContestPanel.__proto__ || Object.getPrototypeOf(ContestPanel)).call.apply(_ref, [this].concat(args)));

        _this.navHandler = new ContestNavigationHandler(_this.getContest(), _this);
        _this.contestTaskPanelsMap = new Map();
        return _this;
    }

    createClass(ContestPanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    height: "100%"
                }
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(ContestPanel.prototype.__proto__ || Object.getPrototypeOf(ContestPanel.prototype), "setOptions", this).call(this, options);
            this.getBaseContest().recalculateUsers();
        }
    }, {
        key: "getContest",
        value: function getContest() {
            return ContestStore.get(this.options.contestId);
        }
    }, {
        key: "getBaseContest",
        value: function getBaseContest() {
            return this.getContest().getBaseContest();
        }
    }, {
        key: "getVirtualContest",
        value: function getVirtualContest() {
            if (this.getContest().virtualContestId || this.getContest().isVirtual()) {
                return this.getContest().getVirtualContest();
            }
            return null;
        }
    }, {
        key: "playbackScoring",
        value: function playbackScoring() {
            var _this2 = this;

            // TODO: refactor contestEvents to priorityQueue
            var contestEvents = ContestEventStore.all().sort(function (a, b) {
                return a.event.contestTime - b.event.contestTime;
            });
            var shouldApplyEvent = function shouldApplyEvent(event) {
                return ServerTime.now().unix() - _this2.getVirtualContest().getStartTime() > event.contestTime;
            };
            var updateInterval = setInterval(function () {
                if (_this2.getVirtualContest().hasFinished()) {
                    clearInterval(updateInterval);
                }
                while (contestEvents.length && shouldApplyEvent(contestEvents[0].event)) {
                    GlobalState.applyEvent(contestEvents.shift().event);
                }
            }, 1000);
            ContestEventStore.addCreateListener(function (contestEvent) {
                contestEvents.push(contestEvent);
                contestEvents.sort(function (a, b) {
                    return a.event.contestTime - b.event.contestTime;
                });
            });
        }
    }, {
        key: "setActive",
        value: function setActive(element) {
            get(ContestPanel.prototype.__proto__ || Object.getPrototypeOf(ContestPanel.prototype), "setActive", this).call(this, element);
            this.dispatch("activeElementChanged");
        }
    }, {
        key: "switchToTask",
        value: function switchToTask(contestTask) {
            if (this.loadingPage) {
                this.loadingPage.destroyNode();
                delete this.loadingPage;
            }
            Router.changeURL(contestTask.getFullURL());
        }
    }, {
        key: "getSummaryPanel",
        value: function getSummaryPanel() {
            return UI.createElement(ContestSummary, { contest: this.getContest(), baseContest: this.getBaseContest(),
                className: GlobalStyle.Container.MEDIUM });
        }
    }, {
        key: "getTasksListPanel",
        value: function getTasksListPanel() {
            return UI.createElement(ContestTaskList, { ref: this.refLink("contestTaskList"), contest: this.getContest(), isArchive: false,
                className: GlobalStyle.Container.SMALL });
        }
    }, {
        key: "getScoreboardPanel",
        value: function getScoreboardPanel() {
            return this.getContest().canShowScoreboard() && UI.createElement(Scoreboard, { ref: this.refLink("scoreboard"),
                className: GlobalStyle.Container.MEDIUM,
                contest: this.getBaseContest(),
                virtualContest: this.getVirtualContest(),
                originalContest: this.getContest() });
        }
    }, {
        key: "getChatPanel",
        value: function getChatPanel() {
            var chatId = this.getContest().chatId;
            return chatId && UI.createElement(ContestChat, { chatId: chatId, ref: this.refLink("chat"),
                className: GlobalStyle.Container.MEDIUM });
        }
    }, {
        key: "getSubmissionsPanel",
        value: function getSubmissionsPanel() {
            return USER.isAuthenticated && UI.createElement(ContestSubmissions, { contestId: this.options.contestId,
                className: GlobalStyle.Container.MEDIUM });
        }
    }, {
        key: "getAnnouncementsPanel",
        value: function getAnnouncementsPanel() {
            if (!this.announcementsList) {
                this.announcementsList = UI.createElement(ContestAnnouncementList, { ref: this.refLink("announcements"), contest: this.getBaseContest(),
                    style: { display: "flex", alignItems: "center", flexDirection: "column" },
                    className: GlobalStyle.Container.MEDIUM });
            }
            return this.announcementsList;
        }
    }, {
        key: "getAnalysisPanel",
        value: function getAnalysisPanel() {
            if (this.getContest().hasFinished() && this.getContest().isAnalysisPublic) {
                return UI.createElement(ContestAnalysis, { contest: this.getContest(), className: GlobalStyle.Container.MEDIUM });
            }
        }
    }, {
        key: "getLoadingPanel",
        value: function getLoadingPanel() {
            return UI.createElement(ContestLoadingPage, { ref: this.refLink("loadingPage"), contest: this.getContest() });
        }
    }, {
        key: "getContestTaskPanel",
        value: function getContestTaskPanel(contestTask) {
            if (!this.contestTaskPanelsMap.has(contestTask.id)) {
                this.contestTaskPanelsMap.set(contestTask.id, UI.createElement(DelayedContestTaskPanel, { contestTaskId: contestTask.id }));
            }
            return this.contestTaskPanelsMap.get(contestTask.id);
        }
    }, {
        key: "getSubroutes",
        value: function getSubroutes() {
            var _this3 = this;

            return [new Route("summary", function () {
                return _this3.getSummaryPanel();
            }), new Route("tasks", function () {
                return _this3.getTasksListPanel();
            }, [], "Tasks"), new Route("task", function () {
                return _this3.getTasksListPanel();
            }, [new TerminalRoute("%s", function (options) {
                var contestTask = ContestTaskStore.getByContestIdAndUrlName(_this3.options.contestId, options.args[0]);
                return contestTask && _this3.getContestTaskPanel(contestTask);
            })]), new Route("scoreboard", function () {
                return _this3.getScoreboardPanel();
            }, [], "Scoreboard"), new Route("chat", function () {
                return _this3.getChatPanel();
            }, [], "Chat"), new Route("submissions", function () {
                return _this3.getSubmissionsPanel();
            }, [], "Submissions"), new Route("announcements", function () {
                return _this3.getAnnouncementsPanel();
            }, [], "Announcements"), new Route("analysis", function () {
                return _this3.getAnalysisPanel();
            }, [], "Analysis"), new Route("loading", function () {
                return _this3.getLoadingPanel();
            }, [], "Loading")];
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            var _this4 = this;

            this.routes = this.routes || new Route(null, function () {
                return _this4.getSummaryPanel();
            }, this.getSubroutes());
            return this.routes;
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (urlParts) {
                get(ContestPanel.prototype.__proto__ || Object.getPrototypeOf(ContestPanel.prototype), "setURL", this).call(this, urlParts);
                PageTitleManager.setTitle(this.pageTitle);
            }
        }
    }, {
        key: "getURLPrefix",
        value: function getURLPrefix(str) {
            var url = "/contest/" + this.getContest().name + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }, {
        key: "updateOnNewTasks",
        value: function updateOnNewTasks() {
            this.redraw();
            this.navHandler.apply();
            this.scoreboard && this.scoreboard.scoreboardTable.setColumns();
        }
    }, {
        key: "processTaskBroadcast",
        value: function processTaskBroadcast(event) {
            if (this.getContest().id !== event.task.contestId || this.getContest().loadedManually) {
                return;
            }
            // Ensure that the problem which marks the contest as started is the first one
            if (!this.getContest().hasStarted() && !event.task.forceTaskOpen) {
                setTimeout(function () {
                    GlobalState.applyEvent(event);
                }, 1000);
                return;
            }
            if (!this.getContest().hasStarted() && event.task.forceTaskOpen) {
                // HACK: If the contest MUST start now, ensure that contest.hasStarted() returns true
                this.getContest().startTime = ServerTime.now().unix();
            }

            GlobalState.importState(event.task.state);
            if (event.state) {
                GlobalState.importState(event.state);
            }

            var contestTask = ContestTaskStore.get(event.task.contestTaskId);

            this.getContest().addContestTask(contestTask);

            this.updateOnNewTasks();

            if (event.objectType !== "contest") {
                GlobalState.applyEvent({
                    "objectType": "contest",
                    "objectId": this.getContest().id,
                    "type": event.type,
                    "data": event.data,
                    "task": event.task
                });
            }

            if (event.task.forceTaskOpen) {
                this.switchToTask(contestTask);
            }
        }
    }, {
        key: "createUserListener",
        value: function createUserListener() {
            var _this5 = this;

            this.attachUpdateListener(UserStore.getCurrentUser(), function (event) {
                if (event.type !== "contestTaskBroadcast") {
                    return;
                }
                if (!_this5.getContest().getUser(USER.id)) {
                    return;
                }
                _this5.processTaskBroadcast(event);
            });
            this.attachEventListener(this.getContest(), "contestTaskBroadcast", function (event) {
                var extra = event.extra || {};
                Object.assign(event, extra);
                _this5.processTaskBroadcast(event);
            });
        }
    }, {
        key: "requestScoreboard",
        value: function requestScoreboard() {
            var _this6 = this;

            var contest = this.getContest();

            Ajax.getJSON("/contest/scoreboard_state/", {
                contestId: contest.id
            }).then(function () {
                _this6._loadedScoreboard = true;
                contest._loadedScoreboard = true;
                _this6.navHandler.apply();
                _this6.contestTaskList && _this6.contestTaskList.refreshBubbles();

                if (contest.isVirtual()) {
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = contest.getBaseContest().getUsers()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var contestUser = _step.value;

                            contestUser.resetScore();
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = contest.getUsers()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var _contestUser = _step2.value;

                            _contestUser.resetScore();
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }

                    contest.getBaseContest().recalculateUsers();

                    if (!contest.hasStarted()) {
                        //TODO: find a way to remove timeout, maybe simulate contestTaskBroadcast event?
                        setTimeout(function () {
                            _this6.redraw();
                            _this6.navHandler.apply();
                            var firstTask = contest.getBaseContest().getContestTasks()[0];
                            _this6.switchToTask(firstTask.getVirtualTask());
                            _this6.playbackScoring();
                        }, (contest.getStartTime() - ServerTime.now().unix()) * 1000);
                    } else {
                        _this6.playbackScoring();
                    }
                }
            });
        }
    }, {
        key: "requestChat",
        value: function requestChat() {
            var _this7 = this;

            var contest = this.getContest();
            var chatId = contest.chatId;
            if (chatId) {
                GroupChatStore.fetch(this.getContest().chatId, function () {
                    _this7.chat && _this7.chat.redraw();
                    _this7.navHandler.apply();
                });
            }
        }
    }, {
        key: "initializeContestLoading",
        value: function initializeContestLoading() {
            var _this8 = this;

            var contest = this.getContest();
            if (!contest.isVirtual() && !contest.hasStarted()) {
                var contestStartTime = contest.getStartTime();
                var currentServerTime = ServerTime.now().unix();
                var timeRemainingInMilliseconds = (contestStartTime - currentServerTime) * 1000;
                if (timeRemainingInMilliseconds < 20 * TimeUnit.DAY) {
                    setTimeout(function () {
                        if (!contest.hasAnyTask()) {
                            Router.changeURL(_this8.getURLPrefix("loading"));
                        }
                    }, timeRemainingInMilliseconds);
                }
            }

            this.attachListener(contest, "loadedManually", function () {
                contest.loadedManually = true;
                _this8.updateOnNewTasks();

                // Jump to the task with the lowest contest index (the "first" task)
                _this8.switchToTask(contest.getContestTasks()[0]);
            });
        }
    }, {
        key: "attachHourlyContestListeners",
        value: function attachHourlyContestListeners() {
            var _this9 = this;

            var contest = this.getContest();
            this.attachEventListener(contest, "contestEnd", function (event) {
                if (_this9.isInDocument()) {
                    NextContestModal.show({ contest: _this9.getContest(), nextContestData: event.nextContestData });
                }
            });
            this.attachDeleteListener(contest, function (event) {
                if (event.reason && event.reason === "noRegisteredUsers" && _this9.isInDocument()) {
                    ContestCancelledModal.show({ nextContestName: event.nextContestData.name });
                }
            });
        }
    }, {
        key: "attachAnalysisListeners",
        value: function attachAnalysisListeners() {
            var _this10 = this;

            this.attachEventListener(this.getContest(), "publishAnalysis", function () {
                if (_this10.isInDocument()) {
                    _this10.redraw();
                    _this10.navHandler.apply();
                    AnalysisModal.show({ contestPanel: _this10 });
                }
            });
            this.addListener("gotoAnalysis", function () {
                Router.changeURL(_this10.getURLPrefix("analysis"));
            });
        }
    }, {
        key: "registerStreams",
        value: function registerStreams() {
            GlobalState.registerStream("contest-" + this.getBaseContest().id + "-announcements");
            if (this.getContest().liveResults) {
                GlobalState.registerStream("contest-" + this.getBaseContest().id + "-scores");
            }
            if (!this.getBaseContest().getUser(USER.id)) {
                GlobalState.registerStream("contest-" + this.getBaseContest().id + "-unregistered");
            }
            if (this.getVirtualContest()) {
                GlobalState.registerStream("contest-" + this.getVirtualContest().id + "-scoreevents");
            }
            if (!this.getContest().isVirtual() && this.getVirtualContest()) {
                GlobalState.registerStream("contest-" + this.getVirtualContest().id + "-scores");
            }
        }
    }, {
        key: "handleAnnotationsAndQuestionsChanges",
        value: function handleAnnotationsAndQuestionsChanges() {
            var _this11 = this;

            var contest = this.getContest();

            var questionsLocalStorageMap = ContestLocalStorageManager.getQuestionsLocalStorageMap(contest.id);
            var announcementsLocalStorageMap = ContestLocalStorageManager.getAnnouncementsLocalStorageMap(contest.id);

            var contestNotificationManager = new ContestNotificationManager(contest.id);
            var createQuestionNotificationHandler = function createQuestionNotificationHandler(question) {
                var task = question.getContestTask();
                if (question.contestId === contest.id && question.isAnswered() && question.shouldAppear()) {
                    var message = question.isAskedByCurrentUser() ? 'Your question for task "' + task.longName + '" has been answered.' : "A user's question for task " + '"' + task.longName + '" has been answered publicly.';
                    contestNotificationManager.createNotification({
                        message: message,
                        link: task.getFullURL() + "questions",
                        title: "Question notification",
                        id: "question" + question.id,
                        key: question.id
                    });

                    var badgeValue = parseInt(_this11.getContestTaskPanel(task) && _this11.getContestTaskPanel(task).badge && _this11.getContestTaskPanel(task).badge.getValue() || 0);
                    questionsLocalStorageMap.set(task.id, badgeValue + 1);
                }
            };

            var createAnnouncementNotificationHandler = function createAnnouncementNotificationHandler(announcement) {
                if (announcement.contestId === contest.id) {
                    var link = _this11.getURLPrefix("") + "announcements";
                    var message = "New announcement: " + announcement.getTarget();
                    var id = "announcement" + announcement.id;
                    if (announcement.isTaskBroadcast()) {
                        link = _this11.getURLPrefix("task/" + announcement.getContestTask().name);
                        message = 'Task "' + announcement.getContestTask().longName + '" is now available!';
                        id = null;
                    }
                    contestNotificationManager.createNotification({
                        message: message,
                        title: announcement.getTarget(),
                        id: id,
                        key: announcement.id,
                        link: link
                    });

                    var badgeValue = parseInt(_this11.navHandler.announcementsBadge && _this11.navHandler.announcementsBadge.getValue() || 0);
                    announcementsLocalStorageMap.set("counter", badgeValue + 1);
                }
            };

            this.attachCreateListener(ContestQuestionStore, function (question) {
                if (!question.isAskedByCurrentUser()) {
                    createQuestionNotificationHandler(question);
                }
            });
            this.attachListener(this.getContest(), "updateQuestion", createQuestionNotificationHandler);
            this.attachCreateListener(ContestAnnouncementStore, createAnnouncementNotificationHandler);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.navHandler.apply();

            this.requestScoreboard();

            this.requestChat();

            if (UserStore.getCurrentUser()) {
                this.createUserListener();
            }

            this.initializeContestLoading();

            this.attachAnalysisListeners();

            if (this.getContest().systemGenerated) {
                this.attachHourlyContestListeners();
            }

            this.registerStreams();

            if (!this.getContest().hasFinished()) {
                this.handleAnnotationsAndQuestionsChanges();
            }
        }
    }, {
        key: "pageTitle",
        get: function get$$1() {
            var title = this.getContest().getName();
            var currentPageTitle = this.getActive().pageTitle;
            if (currentPageTitle) {
                title = currentPageTitle + " " + title;
            }
            return title;
        }
    }]);
    return ContestPanel;
}(Router)) || _class$104);

var DelayedArchiveOrContestPanel = function (_StateDependentElemen) {
    inherits(DelayedArchiveOrContestPanel, _StateDependentElemen);

    function DelayedArchiveOrContestPanel() {
        classCallCheck(this, DelayedArchiveOrContestPanel);
        return possibleConstructorReturn(this, (DelayedArchiveOrContestPanel.__proto__ || Object.getPrototypeOf(DelayedArchiveOrContestPanel)).apply(this, arguments));
    }

    createClass(DelayedArchiveOrContestPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(DelayedArchiveOrContestPanel.prototype.__proto__ || Object.getPrototypeOf(DelayedArchiveOrContestPanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                height: "100%"
            });
        }
    }, {
        key: "importState",
        value: function importState(data) {
            get(DelayedArchiveOrContestPanel.prototype.__proto__ || Object.getPrototypeOf(DelayedArchiveOrContestPanel.prototype), "importState", this).call(this, data);
            if (data.contest) {
                this.contestId = data.contest.id;
            } else {
                this.archiveId = data.archive.id;
            }
        }
    }, {
        key: "renderLoaded",
        value: function renderLoaded() {
            if (this.options.error) {
                return this.renderError();
            }
            if (this.contestId) {
                return UI.createElement(ContestPanel, { contestId: this.contestId, ref: "child" });
            }
            return UI.createElement(ArchivePanel, { archiveId: this.archiveId, ref: "child" });
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (this.child) {
                this.child.setURL(urlParts);
            } else {
                this.urlParts = urlParts;
            }
        }
    }, {
        key: "dispatchUrlChange",
        value: function dispatchUrlChange() {
            var _this2 = this;

            setTimeout(function () {
                if (!_this2.options.error) {
                    _this2.child.setURL(_this2.urlParts);
                }
            });
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {
            var _this3 = this;

            this.dispatchUrlChange();
            this.addListener("urlExit", function () {
                if (!_this3.options.error) {
                    _this3.child.navHandler.reset();
                }
            });
            this.addListener("urlEnter", function () {
                // This works because the very first time the child is create, it makes sure to update the Navbar
                if (_this3.child && !_this3.options.error) {
                    _this3.child.navHandler.apply();
                }
            });
        }
    }]);
    return DelayedArchiveOrContestPanel;
}(StateDependentElement(UI.Element));

var CreatePrivateArchiveModal = function (_ActionModal) {
    inherits(CreatePrivateArchiveModal, _ActionModal);

    function CreatePrivateArchiveModal() {
        classCallCheck(this, CreatePrivateArchiveModal);
        return possibleConstructorReturn(this, (CreatePrivateArchiveModal.__proto__ || Object.getPrototypeOf(CreatePrivateArchiveModal)).apply(this, arguments));
    }

    createClass(CreatePrivateArchiveModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Create private archive";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                Form,
                { style: { marginTop: "10px" } },
                UI.createElement(
                    FormField,
                    { ref: "urlNameFormField", label: "URL name" },
                    UI.createElement(TextInput, { ref: "urlNameInput", value: "" })
                ),
                UI.createElement(
                    FormField,
                    { ref: "longNameFormField", label: "Long name" },
                    UI.createElement(TextInput, { ref: "longNameInput", value: "" })
                )
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this2 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this2.hide();
                    } }),
                UI.createElement(Button, { level: Level.PRIMARY, label: "New archive", onClick: function onClick() {
                        return _this2.createPrivateArchive();
                    } })
            )];
        }
    }, {
        key: "createPrivateArchive",
        value: function createPrivateArchive() {
            var _this3 = this;

            var privateArchiveName = this.urlNameInput.getValue();
            var privateArchivelongName = this.longNameInput.getValue();

            var request = {
                privateArchiveName: privateArchiveName,
                privateArchiveLongName: privateArchivelongName
            };

            Ajax.postJSON("/contest/create_private_archive/", request).then(function (data) {
                _this3.hide();
                _this3.options.privateArchiveList.redraw();
            }, function (error) {
                return _this3.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(CreatePrivateArchiveModal.prototype.__proto__ || Object.getPrototypeOf(CreatePrivateArchiveModal.prototype), "hide", this).call(this);
        }
    }]);
    return CreatePrivateArchiveModal;
}(ActionModal);

var DeletePrivateArchiveModal = function (_ActionModal2) {
    inherits(DeletePrivateArchiveModal, _ActionModal2);

    function DeletePrivateArchiveModal() {
        classCallCheck(this, DeletePrivateArchiveModal);
        return possibleConstructorReturn(this, (DeletePrivateArchiveModal.__proto__ || Object.getPrototypeOf(DeletePrivateArchiveModal)).apply(this, arguments));
    }

    createClass(DeletePrivateArchiveModal, [{
        key: "getPrivateArchives",
        value: function getPrivateArchives() {
            var privateArchives = this.options.privateArchiveList.getPrivateArchives();
            privateArchives.sort(function (a, b) {
                return b.id - a.id;
            });
            return privateArchives;
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Delete private archive";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                Form,
                { style: { marginTop: "10px" } },
                UI.createElement(
                    FormField,
                    { ref: "typeFormField", label: "Archive" },
                    UI.createElement(Select, { ref: "privateArchiveSelect", options: this.getPrivateArchives() })
                )
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this5 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(Button, { level: Level.DANGER, label: "Delete archive", onClick: function onClick() {
                    return _this5.deletePrivateArchive();
                } })];
        }
    }, {
        key: "deletePrivateArchive",
        value: function deletePrivateArchive() {
            var _this6 = this;

            var privateArchive = this.privateArchiveSelect.get();

            var request = {
                privateArchiveId: privateArchive.id
            };

            Ajax.postJSON("/contest/delete_private_archive/", request).then(function () {
                PrivateArchiveStore.applyDeleteEvent({
                    type: "delete",
                    objectId: privateArchive.id
                });
                _this6.hide();
                _this6.options.privateArchiveList.redraw();
            }, function (error) {
                return _this6.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(DeletePrivateArchiveModal.prototype.__proto__ || Object.getPrototypeOf(DeletePrivateArchiveModal.prototype), "hide", this).call(this);
        }
    }]);
    return DeletePrivateArchiveModal;
}(ActionModal);

var PrivateArchiveTable = function (_Table) {
    inherits(PrivateArchiveTable, _Table);

    function PrivateArchiveTable() {
        classCallCheck(this, PrivateArchiveTable);
        return possibleConstructorReturn(this, (PrivateArchiveTable.__proto__ || Object.getPrototypeOf(PrivateArchiveTable)).apply(this, arguments));
    }

    createClass(PrivateArchiveTable, [{
        key: "setColumns",
        value: function setColumns() {
            var columns = [{
                value: function value(privateArchive) {
                    return UI.createElement(Link, { href: "/private-archive/" + privateArchive.name, value: privateArchive.getName() });
                },
                headerName: "Archive",
                headerStyle: { verticalAlign: "middle" },
                cellStyle: { verticalAlign: "middle" }
            }];
            get(PrivateArchiveTable.prototype.__proto__ || Object.getPrototypeOf(PrivateArchiveTable.prototype), "setColumns", this).call(this, columns);
        }
    }]);
    return PrivateArchiveTable;
}(Table);

var PrivateArchiveList = function (_Panel) {
    inherits(PrivateArchiveList, _Panel);

    function PrivateArchiveList() {
        classCallCheck(this, PrivateArchiveList);
        return possibleConstructorReturn(this, (PrivateArchiveList.__proto__ || Object.getPrototypeOf(PrivateArchiveList)).apply(this, arguments));
    }

    createClass(PrivateArchiveList, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(PrivateArchiveList.prototype.__proto__ || Object.getPrototypeOf(PrivateArchiveList.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.SMALL);
        }
    }, {
        key: "getPrivateArchives",
        value: function getPrivateArchives() {
            return PrivateArchiveStore.all();
        }
    }, {
        key: "render",
        value: function render() {
            var _this9 = this;

            this.createPrivateArchiveModal = UI.createElement(CreatePrivateArchiveModal, { privateArchiveList: this });
            this.deletePrivateArchiveModal = UI.createElement(DeletePrivateArchiveModal, { privateArchiveList: this });
            return [UI.createElement(
                "div",
                { className: "pull-right" },
                UI.createElement(Button, { level: Level.PRIMARY, label: "New archive",
                    onClick: function onClick() {
                        return _this9.createPrivateArchiveModal.show();
                    },
                    style: { margin: "5px" } }),
                UI.createElement(Button, { level: Level.DANGER, label: "Delete archive",
                    onClick: function onClick() {
                        return _this9.deletePrivateArchiveModal.show();
                    },
                    style: { margin: "5px" } })
            ), UI.createElement(
                "h3",
                null,
                "All private archives:"
            ), UI.createElement(PrivateArchiveTable, { entries: this.getPrivateArchives() })];
        }
    }]);
    return PrivateArchiveList;
}(Panel);

var UserGroupMemberUI = function (_UI$Element) {
    inherits(UserGroupMemberUI, _UI$Element);

    function UserGroupMemberUI() {
        classCallCheck(this, UserGroupMemberUI);
        return possibleConstructorReturn(this, (UserGroupMemberUI.__proto__ || Object.getPrototypeOf(UserGroupMemberUI)).apply(this, arguments));
    }

    createClass(UserGroupMemberUI, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("margin-top", "5px");
        }
    }, {
        key: "getDestroyButton",
        value: function getDestroyButton() {
            return UI.createElement(Button, { level: Level.DANGER, size: Size.EXTRA_SMALL, faIcon: "minus",
                ref: "destroyButton", style: { marginRight: "5px" } });
        }
    }, {
        key: "getUserHandle",
        value: function getUserHandle() {
            return UI.createElement(UserHandle, { userId: this.options.member.userId });
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getDestroyButton(), this.getUserHandle()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.destroyButton.addClickListener(function () {
                return Ajax.postJSON("/accounts/change_user_group/", {
                    groupId: _this2.options.member.groupId,
                    userId: _this2.options.member.userId,
                    action: "remove"
                }).then(function () {
                    return _this2.options.member.delete();
                });
            });
        }
    }]);
    return UserGroupMemberUI;
}(UI.Element);

var UserGroupEditor = function (_UI$Element2) {
    inherits(UserGroupEditor, _UI$Element2);

    function UserGroupEditor() {
        classCallCheck(this, UserGroupEditor);
        return possibleConstructorReturn(this, (UserGroupEditor.__proto__ || Object.getPrototypeOf(UserGroupEditor)).apply(this, arguments));
    }

    createClass(UserGroupEditor, [{
        key: "getGroup",
        value: function getGroup() {
            return UserGroupStore.get(this.options.groupId);
        }
    }, {
        key: "renderUserGroupMember",
        value: function renderUserGroupMember(member) {
            return UI.createElement(UserGroupMemberUI, { member: member });
        }
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            var members = this.getGroup().getMembers();
            return [members.map(function (member) {
                return _this4.renderUserGroupMember(member);
            }), UI.createElement(UserInputField, { ref: "addUserField", style: { marginTop: "10px" } })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.addUserField.addListener("user", function (userId) {
                return Ajax.postJSON("/accounts/change_user_group/", {
                    groupId: _this5.options.groupId,
                    userId: userId,
                    action: "add"
                }).then(function () {
                    return _this5.addUserField.clear();
                });
            });
            this.attachListener(UserGroupMemberStore, ["create", "delete"], function (userGroupMember) {
                if (userGroupMember.groupId === _this5.options.groupId) {
                    _this5.redraw();
                }
            });
        }
    }]);
    return UserGroupEditor;
}(UI.Element);

var PrivateArchiveCreateEvalTaskModal = function (_CreateEvalTaskModal) {
    inherits(PrivateArchiveCreateEvalTaskModal, _CreateEvalTaskModal);

    function PrivateArchiveCreateEvalTaskModal() {
        classCallCheck(this, PrivateArchiveCreateEvalTaskModal);
        return possibleConstructorReturn(this, (PrivateArchiveCreateEvalTaskModal.__proto__ || Object.getPrototypeOf(PrivateArchiveCreateEvalTaskModal)).apply(this, arguments));
    }

    createClass(PrivateArchiveCreateEvalTaskModal, [{
        key: "getPrivateArchive",
        value: function getPrivateArchive() {
            return this.options.privateArchiveWidget.getPrivateArchive();
        }
    }, {
        key: "addEvalTask",
        value: function addEvalTask(evalTaskId) {
            var _this2 = this;

            var request = {
                privateArchiveId: this.getPrivateArchive().id,
                evalTaskId: evalTaskId
            };

            Ajax.postJSON("/contest/private_archive_add_eval_task/", request).then(function () {
                return _this2.hide();
            });
        }
    }, {
        key: "createTask",
        value: function createTask() {
            var _this3 = this;

            var urlName = this.urlNameInput.getValue();
            var longName = this.longNameInput.getValue();
            var type = this.typeSelect.get().id;
            var timeLimit = this.timeLimitInput.getValue();
            var memoryLimit = this.memoryLimitInput.getValue() * 1024;
            var request = {
                urlName: urlName,
                longName: longName,
                type: type,
                timeLimit: timeLimit,
                memoryLimit: memoryLimit
            };

            Ajax.postJSON("/eval/create_eval_task/", request).then(function (data) {
                _this3.addEvalTask(data.evalTaskId);
                window.location.pathname = "/task/" + urlName + "/edit/";
            }, function (error) {
                return _this3.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return PrivateArchiveCreateEvalTaskModal;
}(CreateEvalTaskModal);

var PrivateArchiveRemoveEvalTaskModal = function (_ActionModal) {
    inherits(PrivateArchiveRemoveEvalTaskModal, _ActionModal);

    function PrivateArchiveRemoveEvalTaskModal() {
        classCallCheck(this, PrivateArchiveRemoveEvalTaskModal);
        return possibleConstructorReturn(this, (PrivateArchiveRemoveEvalTaskModal.__proto__ || Object.getPrototypeOf(PrivateArchiveRemoveEvalTaskModal)).apply(this, arguments));
    }

    createClass(PrivateArchiveRemoveEvalTaskModal, [{
        key: "getPrivateArchive",
        value: function getPrivateArchive() {
            return this.options.privateArchiveWidget.getPrivateArchive();
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Remove eval task";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                FormField,
                { ref: "typeFormField", label: "Task" },
                UI.createElement(Select, { ref: "taskSelect", options: this.getPrivateArchive().getEvalTasks() })
            );
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this5 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this5.hide();
                    } }),
                ",",
                UI.createElement(Button, { level: Level.WARNING, label: "Remove task", onClick: function onClick() {
                        return _this5.removeTask();
                    } })
            )];
        }
    }, {
        key: "removeTask",
        value: function removeTask() {
            var _this6 = this;

            var task = this.taskSelect.get();
            var request = {
                privateArchiveId: this.getPrivateArchive().id,
                evalTaskId: task.id
            };

            Ajax.postJSON("/contest/private_archive_remove_eval_task/", request).then(function () {
                _this6.hide();
                window.location.reload();
            }, function (error) {
                return _this6.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(PrivateArchiveRemoveEvalTaskModal.prototype.__proto__ || Object.getPrototypeOf(PrivateArchiveRemoveEvalTaskModal.prototype), "hide", this).call(this);
        }
    }]);
    return PrivateArchiveRemoveEvalTaskModal;
}(ActionModal);

var PrivateArchiveAddEvalTaskModal = function (_Modal) {
    inherits(PrivateArchiveAddEvalTaskModal, _Modal);

    function PrivateArchiveAddEvalTaskModal() {
        classCallCheck(this, PrivateArchiveAddEvalTaskModal);
        return possibleConstructorReturn(this, (PrivateArchiveAddEvalTaskModal.__proto__ || Object.getPrototypeOf(PrivateArchiveAddEvalTaskModal)).apply(this, arguments));
    }

    createClass(PrivateArchiveAddEvalTaskModal, [{
        key: "getPrivateArchive",
        value: function getPrivateArchive() {
            return this.options.privateArchiveWidget.getPrivateArchive();
        }
    }, {
        key: "renderModal",
        value: function renderModal(bodyContent) {
            var _this8 = this;

            return [UI.createElement(
                "div",
                { style: { margin: "0px" } },
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "h4",
                        null,
                        "Add eval task"
                    )
                ),
                UI.createElement(
                    "div",
                    { ref: "body" },
                    bodyContent
                ),
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(TemporaryMessageArea, { ref: "messageArea" }),
                    UI.createElement(Button, { label: "Close", onClick: function onClick() {
                            return _this8.hide();
                        } }),
                    UI.createElement(Button, { level: Level.PRIMARY, label: "Add task", onClick: function onClick() {
                            return _this8.addTask();
                        } })
                )
            )];
        }
    }, {
        key: "render",
        value: function render() {
            if (!this.isLoaded) {
                this.fetchEvalTasks();
                return this.renderModal(UI.createElement(
                    Form,
                    { style: { marginTop: "10px" } },
                    UI.createElement(FormField, { ref: "typeFormField", label: "Loading Tasks" })
                ));
            }
            return this.renderModal(UI.createElement(
                Form,
                { style: { marginTop: "10px" } },
                UI.createElement(
                    FormField,
                    { ref: "typeFormField", label: "Task" },
                    UI.createElement(Select, { ref: "taskSelect", options: this.getEvalTasks() })
                )
            ));
        }
    }, {
        key: "getEvalTasks",
        value: function getEvalTasks() {
            var allEvalTasks = EvalTaskStore.all();
            var privateArchiveEvalTasks = this.getPrivateArchive().getEvalTasks();
            var evalTasks = allEvalTasks.filter(function (evalTask) {
                return privateArchiveEvalTasks.indexOf(evalTask) == -1;
            });
            evalTasks.sort(function (a, b) {
                return b.id - a.id;
            });
            return evalTasks;
        }
    }, {
        key: "fetchEvalTasks",
        value: function fetchEvalTasks() {
            var _this9 = this;

            if (this.isLoading) {
                return;
            }
            this.isLoading = true;

            var request = {};
            Ajax.getJSON("/eval/get_available_tasks/", request).then(function () {
                _this9.isLoading = false;
                _this9.isLoaded = true;
                _this9.body.options.children = [UI.createElement(
                    Form,
                    { style: { marginTop: "10px" } },
                    UI.createElement(
                        FormField,
                        { ref: _this9.refLink("typeFormField"), label: "Task" },
                        UI.createElement(Select, { ref: _this9.refLink("taskSelect"), options: _this9.getEvalTasks() })
                    )
                )];
                _this9.body.redraw();
            });
        }
    }, {
        key: "addTask",
        value: function addTask() {
            var _this10 = this;

            var task = this.taskSelect.get();
            var request = {
                privateArchiveId: this.getPrivateArchive().id,
                evalTaskId: task.id
            };

            Ajax.postJSON("/contest/private_archive_add_eval_task/", request).then(function () {
                return window.location.reload();
            }, function (error) {
                return _this10.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(PrivateArchiveAddEvalTaskModal.prototype.__proto__ || Object.getPrototypeOf(PrivateArchiveAddEvalTaskModal.prototype), "hide", this).call(this);
        }
    }]);
    return PrivateArchiveAddEvalTaskModal;
}(Modal);

var DelayedPrivateArchiveContestTaskPanel = function (_DelayedContestTaskPa) {
    inherits(DelayedPrivateArchiveContestTaskPanel, _DelayedContestTaskPa);

    function DelayedPrivateArchiveContestTaskPanel() {
        classCallCheck(this, DelayedPrivateArchiveContestTaskPanel);
        return possibleConstructorReturn(this, (DelayedPrivateArchiveContestTaskPanel.__proto__ || Object.getPrototypeOf(DelayedPrivateArchiveContestTaskPanel)).apply(this, arguments));
    }

    createClass(DelayedPrivateArchiveContestTaskPanel, [{
        key: "modifyIde",
        value: function modifyIde() {
            var _this12 = this;

            var privateArchiveAjaxHandler = new FixedURLAjaxHandler("/contest/submit_private_archive_job/");
            privateArchiveAjaxHandler.addPreprocessor(function (request) {
                request.data.privateArchiveId = _this12.options.privateArchiveId;
            });
            this.ide.getPlugin("ContestSubmit").setAjaxHandler(privateArchiveAjaxHandler);
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {
            var _this13 = this;

            get(DelayedPrivateArchiveContestTaskPanel.prototype.__proto__ || Object.getPrototypeOf(DelayedPrivateArchiveContestTaskPanel.prototype), "onDelayedMount", this).call(this);

            if (this.ide) {
                this.ide.whenLoaded(function () {
                    return _this13.modifyIde();
                });
            } else {
                this.addListener("workspaceLoaded", function () {
                    _this13.ide.whenLoaded(function () {
                        return _this13.modifyIde();
                    });
                });
            }
        }
    }, {
        key: "getSubURL",
        value: function getSubURL(section) {
            var url = "/private-archive/" + PrivateArchiveStore.get(this.options.privateArchiveId).name + "/";
            url += "task/" + this.getContestTask().name + "/";
            if (section) {
                url += section + "/";
            }
            return url;
        }
    }]);
    return DelayedPrivateArchiveContestTaskPanel;
}(DelayedContestTaskPanel);

var PrivateArchiveContestTaskList = function (_ContestTaskList) {
    inherits(PrivateArchiveContestTaskList, _ContestTaskList);

    function PrivateArchiveContestTaskList() {
        classCallCheck(this, PrivateArchiveContestTaskList);
        return possibleConstructorReturn(this, (PrivateArchiveContestTaskList.__proto__ || Object.getPrototypeOf(PrivateArchiveContestTaskList)).apply(this, arguments));
    }

    createClass(PrivateArchiveContestTaskList, [{
        key: "getPrivateArchive",
        value: function getPrivateArchive() {
            return this.options.privateArchive;
        }
    }, {
        key: "getTasks",
        value: function getTasks() {
            return this.getPrivateArchive().getContestTasks();
        }
    }, {
        key: "getHeader",
        value: function getHeader() {
            return undefined;
        }
    }, {
        key: "getContestTaskBubble",
        value: function getContestTaskBubble(task) {
            return UI.createElement(ContestTaskBubble, { isArchive: this.options.isArchive,
                href: "/private-archive/" + this.getPrivateArchive().name + "/task/" + task.name + "/",
                showTags: this.options.showTags, contestTask: task });
        }
    }]);
    return PrivateArchiveContestTaskList;
}(ContestTaskList);

var PrivateArchiveUserGroupMemberUI = function (_UserGroupMemberUI) {
    inherits(PrivateArchiveUserGroupMemberUI, _UserGroupMemberUI);

    function PrivateArchiveUserGroupMemberUI() {
        classCallCheck(this, PrivateArchiveUserGroupMemberUI);
        return possibleConstructorReturn(this, (PrivateArchiveUserGroupMemberUI.__proto__ || Object.getPrototypeOf(PrivateArchiveUserGroupMemberUI)).apply(this, arguments));
    }

    createClass(PrivateArchiveUserGroupMemberUI, [{
        key: "getGlobalAccessButton",
        value: function getGlobalAccessButton() {
            return UI.createElement(
                Button,
                { ref: "globalAccessButton", level: Level.PRIMARY, size: Size.EXTRA_SMALL, style: { marginRight: "5px" } },
                "Give access to all problems"
            );
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getDestroyButton(), this.getGlobalAccessButton(), this.getUserHandle()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this16 = this;

            get(PrivateArchiveUserGroupMemberUI.prototype.__proto__ || Object.getPrototypeOf(PrivateArchiveUserGroupMemberUI.prototype), "onMount", this).call(this);
            this.globalAccessButton.addClickListener(function () {
                return Ajax.postJSON("/contest/private_archive_give_testing_access/", {
                    userId: _this16.options.member.userId,
                    privateArchiveId: _this16.options.privateArchiveId
                });
            });
        }
    }]);
    return PrivateArchiveUserGroupMemberUI;
}(UserGroupMemberUI);

var PrivateArchiveUserGroupEditor = function (_UserGroupEditor) {
    inherits(PrivateArchiveUserGroupEditor, _UserGroupEditor);

    function PrivateArchiveUserGroupEditor() {
        classCallCheck(this, PrivateArchiveUserGroupEditor);
        return possibleConstructorReturn(this, (PrivateArchiveUserGroupEditor.__proto__ || Object.getPrototypeOf(PrivateArchiveUserGroupEditor)).apply(this, arguments));
    }

    createClass(PrivateArchiveUserGroupEditor, [{
        key: "renderUserGroupMember",
        value: function renderUserGroupMember(member) {
            return UI.createElement(PrivateArchiveUserGroupMemberUI, { member: member, privateArchiveId: this.options.privateArchiveId });
        }
    }]);
    return PrivateArchiveUserGroupEditor;
}(UserGroupEditor);

var PrivateArchivePanel = function (_Router) {
    inherits(PrivateArchivePanel, _Router);

    function PrivateArchivePanel() {
        classCallCheck(this, PrivateArchivePanel);
        return possibleConstructorReturn(this, (PrivateArchivePanel.__proto__ || Object.getPrototypeOf(PrivateArchivePanel)).apply(this, arguments));
    }

    createClass(PrivateArchivePanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                fullHeight: true,
                children: []
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(PrivateArchivePanel.prototype.__proto__ || Object.getPrototypeOf(PrivateArchivePanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.MEDIUM);
        }
    }, {
        key: "getPrivateArchive",
        value: function getPrivateArchive() {
            return PrivateArchiveStore.get(this.options.privateArchiveId);
        }
    }, {
        key: "getContestTasks",
        value: function getContestTasks() {
            return this.getPrivateArchive().getContestTasks();
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            var _this19 = this;

            this.routes = this.routes || new Route(null, function () {
                return _this19.getTasks();
            }, [new Route("tasks", function () {
                return _this19.getTasks();
            }), new Route("task", function () {
                return _this19.getTasks();
            }, [new TerminalRoute("%s", function (options) {
                var contestTask = _this19.getContestTasks().find(function (contestTask) {
                    return contestTask.name === options.args[0];
                });
                return contestTask && UI.createElement(DelayedPrivateArchiveContestTaskPanel, { contestTask: contestTask,
                    contestTaskId: contestTask.id,
                    urlPrefix: _this19.getUrlPrefix("task/" + contestTask.name),
                    privateArchiveId: _this19.options.privateArchiveId });
            })]), new Route("scoreboard", function () {
                return _this19.getScoreboard();
            }), new Route("submissions", function () {
                return _this19.getSubmissions();
            }), new Route("permissions", function () {
                return _this19.getPermissions();
            })]);
            return this.routes;
        }
    }, {
        key: "getTasks",
        value: function getTasks() {
            var _this20 = this;

            var buttons = void 0;
            if (USER.isSuperUser || USER.id === this.getPrivateArchive().ownerId) {
                buttons = [UI.createElement(
                    ButtonGroup,
                    { level: Level.PRIMARY, style: { float: "right" } },
                    UI.createElement(Button, { label: "Add task",
                        onClick: function onClick() {
                            return PrivateArchiveAddEvalTaskModal.show({ privateArchiveWidget: _this20 });
                        } }),
                    UI.createElement(Button, { label: "Remove task",
                        onClick: function onClick() {
                            return PrivateArchiveRemoveEvalTaskModal.show({ privateArchiveWidget: _this20 });
                        } }),
                    UI.createElement(Button, { label: "Create task",
                        onClick: function onClick() {
                            return PrivateArchiveCreateEvalTaskModal.show({ privateArchiveWidget: _this20 });
                        } })
                ), UI.createElement("div", { style: { clear: "both" } })];
            }
            return UI.createElement(
                "div",
                null,
                buttons,
                UI.createElement(PrivateArchiveContestTaskList, { privateArchive: this.getPrivateArchive() })
            );
        }
    }, {
        key: "getScoreboard",
        value: function getScoreboard() {
            return UI.createElement(PrivateArchiveUsersTable, { privateArchive: this.getPrivateArchive() });
        }
    }, {
        key: "getSubmissions",
        value: function getSubmissions() {
            return UI.createElement(SubmissionSummaryPrivateArchiveFilter, { privateArchiveId: this.options.privateArchiveId });
        }
    }, {
        key: "getPermissions",
        value: function getPermissions() {
            if (!USER.isSuperUser && USER.id !== this.getPrivateArchive().ownerId) {
                return UI.createElement("div", null);
            }
            return UI.createElement(
                "div",
                null,
                UI.createElement(
                    "h3",
                    null,
                    "Here are the users that can edit this private archive: "
                ),
                UI.createElement(PrivateArchiveUserGroupEditor, { groupId: this.getPrivateArchive().ownerGroupId,
                    privateArchiveId: this.getPrivateArchive().id,
                    style: { fontSize: "1.2em" } })
            );
        }
    }, {
        key: "onMount",
        value: function onMount() {
            if (this.isInDocument()) {
                this.createNavbarElements();
            }
            GlobalState.registerStream("private-archive-" + this.getPrivateArchive().id);
        }
    }, {
        key: "getUrlPrefix",
        value: function getUrlPrefix(str) {
            var url = "/private-archive/" + this.getPrivateArchive().name + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }, {
        key: "createNavbarElements",
        value: function createNavbarElements() {
            var leftSideChildren = [UI.createElement(NavLinkElement, { href: "/private-archives/", value: UI.T("All archives") }), UI.createElement(NavLinkElement, { href: this.getUrlPrefix("tasks"), value: UI.T("Tasks") }), UI.createElement(NavLinkElement, { href: this.getUrlPrefix("scoreboard"), value: UI.T("Scoreboard") }), UI.createElement(NavLinkElement, { href: this.getUrlPrefix("submissions"), value: UI.T("Submissions") })];
            if (USER.isSuperUser || USER.id === this.getPrivateArchive().ownerId) {
                leftSideChildren.push(UI.createElement(NavLinkElement, { href: this.getUrlPrefix("permissions"), value: UI.T("Permissions") }));
            }
            NavManager.Global.getLeftConditioned().setChildren(leftSideChildren);
            NavManager.Global.checkForWrap();
        }
    }, {
        key: "destroyNavbarElements",
        value: function destroyNavbarElements() {
            NavManager.Global.getLeftConditioned().setChildren([]);
            NavManager.Global.checkForWrap();
        }
    }]);
    return PrivateArchivePanel;
}(Router);

var PrivateArchivePanelWrapper = function (_UI$Element) {
    inherits(PrivateArchivePanelWrapper, _UI$Element);

    function PrivateArchivePanelWrapper() {
        classCallCheck(this, PrivateArchivePanelWrapper);
        return possibleConstructorReturn(this, (PrivateArchivePanelWrapper.__proto__ || Object.getPrototypeOf(PrivateArchivePanelWrapper)).apply(this, arguments));
    }

    createClass(PrivateArchivePanelWrapper, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("height", "100%");
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(PrivateArchivePanel, { ref: "privateArchivePanel", privateArchiveId: this.options.privateArchiveId });
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (this.privateArchivePanel) {
                this.privateArchivePanel.setURL(urlParts);
            } else {
                this.initialUrlParts = urlParts;
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this22 = this;

            this.setURL(this.initialUrlParts);
            this.addListener("urlEnter", function () {
                _this22.privateArchivePanel.createNavbarElements();
            });
            this.addListener("urlExit", function () {
                _this22.privateArchivePanel.destroyNavbarElements();
            });
        }
    }]);
    return PrivateArchivePanelWrapper;
}(UI.Element);

var Interview = function (_StoreObject) {
    inherits(Interview, _StoreObject);

    function Interview(obj) {
        classCallCheck(this, Interview);

        var _this = possibleConstructorReturn(this, (Interview.__proto__ || Object.getPrototypeOf(Interview)).call(this, obj));

        _this.interviewTasks = new Map();
        return _this;
    }

    createClass(Interview, [{
        key: "getStartTime",
        value: function getStartTime() {
            return this.startTime;
        }
    }, {
        key: "getDuration",
        value: function getDuration() {
            if (this.getEndTime()) {
                return this.getEndTime() - this.getStartTime();
            } else {
                return ServerTime.now().unix() - this.getStartTime();
            }
        }
    }, {
        key: "getEndTime",
        value: function getEndTime() {
            return this.endTime;
        }
    }, {
        key: "getExpectedDuration",
        value: function getExpectedDuration() {
            return this.duration;
        }
    }, {
        key: "getExpectedEndTime",
        value: function getExpectedEndTime() {
            return this.getStartTime() + this.getExpectedDuration();
        }
    }, {
        key: "getDifficulty",
        value: function getDifficulty() {
            return Difficulty.get(this.difficulty);
        }
    }, {
        key: "hasEnded",
        value: function hasEnded() {
            return this.getStartTime() + this.getExpectedDuration() < ServerTime.now().unix();
        }
    }, {
        key: "addInterviewTask",
        value: function addInterviewTask(interviewTask, event) {
            if (this.interviewTasks.has(interviewTask.id)) {
                return false;
            }
            this.interviewTasks.set(interviewTask.id, interviewTask);
            this.dispatch("addInterviewTask", interviewTask);
            return true;
        }
    }, {
        key: "getInterviewTasks",
        value: function getInterviewTasks() {
            // Because the interview tasks are created in their order, their ids also represent the order
            return Array.from(this.interviewTasks.values()).sort(function (a, b) {
                return a.id - b.id;
            });
        }
    }, {
        key: "getAvailableTask",
        value: function getAvailableTask() {
            var interviewTasks = this.getInterviewTasks();
            for (var i = interviewTasks.length - 1; i >= 0; i--) {
                var interviewTask = interviewTasks[i];

                // The first task after the last solved/locked
                if (interviewTask.getSolvedTime() || interviewTask.getLockedTime()) {
                    return interviewTasks[i + 1];
                }
                // if (interviewTask.getReadTime()) {
                //     return interviewTask;
                // }

                // if (interviewTask.getReadTime() && !this.getSolvedTime()) {
                //     return interviewTask;
                // }
                // if (!interviewTask.getReadTime()) {
                //     return interviewTask;
                // }
            }
            return interviewTasks[0];
        }
    }, {
        key: "getContestTasks",
        value: function getContestTasks() {
            var contestTasks = [];
            // TODO: Should be sorted by difficulty
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getInterviewTasks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var interviewTask = _step.value;

                    contestTasks.push(interviewTask.getContestTask());
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return contestTasks;
        }
    }, {
        key: "endInterview",
        value: function endInterview() {
            var onSuccess = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NOOP_FUNCTION;
            var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NOOP_FUNCTION;

            if (this.getEndTime()) {
                onError("Interview already finished");
                return;
            }
            Ajax.postJSON("/interview/end_interview/", {
                interviewId: this.id
            }).then(onSuccess, onError);
        }
    }]);
    return Interview;
}(StoreObject);

var InterviewStoreClass = function (_GenericObjectStore) {
    inherits(InterviewStoreClass, _GenericObjectStore);

    function InterviewStoreClass() {
        classCallCheck(this, InterviewStoreClass);

        var _this2 = possibleConstructorReturn(this, (InterviewStoreClass.__proto__ || Object.getPrototypeOf(InterviewStoreClass)).call(this, "interview", Interview));

        _this2.possibleDifficulties = [Difficulty.EASY, Difficulty.MEDIUM, Difficulty.HARD];
        _this2.defaultDifficulty = Difficulty.MEDIUM;
        return _this2;
    }

    return InterviewStoreClass;
}(GenericObjectStore);

var InterviewStore = new InterviewStoreClass();

var InterviewTask = function (_StoreObject2) {
    inherits(InterviewTask, _StoreObject2);

    function InterviewTask() {
        classCallCheck(this, InterviewTask);
        return possibleConstructorReturn(this, (InterviewTask.__proto__ || Object.getPrototypeOf(InterviewTask)).apply(this, arguments));
    }

    createClass(InterviewTask, [{
        key: "getInterview",
        value: function getInterview() {
            return InterviewStore.get(this.interviewId);
        }
    }, {
        key: "getContestTask",
        value: function getContestTask() {
            return ContestTaskStore.get(this.contestTaskId);
        }
    }, {
        key: "getNextTask",
        value: function getNextTask() {
            var interviewTasks = this.getInterview().getInterviewTasks();
            for (var i = 0; i < interviewTasks.length; i += 1) {
                if (interviewTasks[i] === this) {
                    // Will return undefined if it's the last task
                    return interviewTasks[i + 1];
                }
            }
        }
    }, {
        key: "getReadTime",
        value: function getReadTime() {
            return this.readTime;
        }
    }, {
        key: "getSolvedTime",
        value: function getSolvedTime() {
            return this.solvedTime;
        }
    }, {
        key: "getLockedTime",
        value: function getLockedTime() {
            return this.lockedTime;
        }
    }, {
        key: "canOpen",
        value: function canOpen() {
            // TODO: should also be || this.getLockedTime()
            return this.getSolvedTime() || this.isAvailableTask();
        }
    }, {
        key: "isAvailableTask",
        value: function isAvailableTask() {
            return this.getInterview().getAvailableTask() === this;
        }
    }, {
        key: "isLastTask",
        value: function isLastTask() {
            return this.getNextTask() == null;
        }
    }, {
        key: "markAsRead",
        value: function markAsRead() {
            if (this.getReadTime()) {
                return;
            }
            Ajax.postJSON("/interview/edit_interview_task/", {
                interviewId: this.interviewId,
                interviewTaskId: this.id,
                markAsRead: true
            });
        }
    }, {
        key: "markAsLocked",
        value: function markAsLocked() {
            if (this.getLockedTime()) {
                return;
            }
            Ajax.postJSON("/interview/edit_interview_task/", {
                interviewId: this.interviewId,
                interviewTaskId: this.id,
                markAsLocked: true
            });
        }
    }]);
    return InterviewTask;
}(StoreObject);

var InterviewTaskStoreClass = function (_GenericObjectStore2) {
    inherits(InterviewTaskStoreClass, _GenericObjectStore2);

    function InterviewTaskStoreClass() {
        classCallCheck(this, InterviewTaskStoreClass);

        var _this4 = possibleConstructorReturn(this, (InterviewTaskStoreClass.__proto__ || Object.getPrototypeOf(InterviewTaskStoreClass)).call(this, "interviewtask", InterviewTask, { dependencies: ["interview", "contesttask"] }));

        _this4.addCreateListener(function (interviewTask, createEvent) {
            interviewTask.getInterview().addInterviewTask(interviewTask, createEvent);
        });
        return _this4;
    }

    return InterviewTaskStoreClass;
}(GenericObjectStore);

var InterviewTaskStore = new InterviewTaskStoreClass();

var _class$105, _descriptor$45, _descriptor2$39, _descriptor3$33, _descriptor4$29, _descriptor5$26, _descriptor6$22, _class3$33, _descriptor7$19, _descriptor8$16, _class5$9, _descriptor9$13, _descriptor10$11, _descriptor11$9, _class7$7, _descriptor12$8, _descriptor13$8, _descriptor14$8;

function _initDefineProp$46(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$47(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var InterviewTaskBubbleStyle = (_class$105 = function (_StyleSheet) {
    inherits(InterviewTaskBubbleStyle, _StyleSheet);

    function InterviewTaskBubbleStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, InterviewTaskBubbleStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = InterviewTaskBubbleStyle.__proto__ || Object.getPrototypeOf(InterviewTaskBubbleStyle)).call.apply(_ref, [this].concat(args))), _this), _this.fontColor = "rgb(55, 55, 55)", _this.height = 110, _initDefineProp$46(_this, "className", _descriptor$45, _this), _initDefineProp$46(_this, "userScore", _descriptor2$39, _this), _initDefineProp$46(_this, "taskDescription", _descriptor3$33, _this), _initDefineProp$46(_this, "taskName", _descriptor4$29, _this), _initDefineProp$46(_this, "originalContest", _descriptor5$26, _this), _initDefineProp$46(_this, "taskDifficulty", _descriptor6$22, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return InterviewTaskBubbleStyle;
}(StyleSheet), _descriptor$45 = _applyDecoratedDescriptor$47(_class$105.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            boxShadow: "0px 0px 1px " + this.fontColor,
            width: "99%",
            marginLeft: "0.5%",
            marginRight: "0.5%",
            height: this.height + "px",
            fontColor: this.fontColor,
            display: "inline-block",
            float: "left",
            marginTop: "20px",
            whiteSpace: "nowrap",
            ":hover": {
                transition: "0.23s",
                boxShadow: "0px 0px 5px " + this.fontColor
            }
        };
    }
}), _descriptor2$39 = _applyDecoratedDescriptor$47(_class$105.prototype, "userScore", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.height + "px",
            lineHeight: this.height + "px",
            width: "11%",
            color: this.fontColor,
            fontSize: "20px",
            textAlign: "center",
            display: "inline-block",
            float: "left"
        };
    }
}), _descriptor3$33 = _applyDecoratedDescriptor$47(_class$105.prototype, "taskDescription", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.height + "px",
            width: "35%",
            display: "inline-block",
            float: "left"
        };
    }
}), _descriptor4$29 = _applyDecoratedDescriptor$47(_class$105.prototype, "taskName", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.height / 2 + "px",
            lineHeight: this.height / 2 + "px",
            width: "100%",
            fontSize: "130%",
            paddingLeft: "15%"
        };
    }
}), _descriptor5$26 = _applyDecoratedDescriptor$47(_class$105.prototype, "originalContest", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.height / 2 + "px",
            lineHeight: this.height / 2 + "px",
            width: "100%",
            fontSize: "100%",
            paddingLeft: "15%"
        };
    }
}), _descriptor6$22 = _applyDecoratedDescriptor$47(_class$105.prototype, "taskDifficulty", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.height + "px",
            width: "9%",
            lineHeight: this.height + "px",
            fontSize: "16px",
            textAlign: "center",
            display: "inline-block",
            float: "left"
        };
    }
}), _class$105);

var InterviewTagsStyle = (_class3$33 = function (_StyleSheet2) {
    inherits(InterviewTagsStyle, _StyleSheet2);

    function InterviewTagsStyle() {
        var _ref2;

        var _temp2, _this2, _ret2;

        classCallCheck(this, InterviewTagsStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this2 = possibleConstructorReturn(this, (_ref2 = InterviewTagsStyle.__proto__ || Object.getPrototypeOf(InterviewTagsStyle)).call.apply(_ref2, [this].concat(args))), _this2), _this2.tagsHeight = 40, _initDefineProp$46(_this2, "className", _descriptor7$19, _this2), _initDefineProp$46(_this2, "header", _descriptor8$16, _this2), _temp2), possibleConstructorReturn(_this2, _ret2);
    }

    return InterviewTagsStyle;
}(StyleSheet), _descriptor7$19 = _applyDecoratedDescriptor$47(_class3$33.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "40px",
            width: "100%",
            borderBottom: "2px solid #e4e6e7",
            color: "#aaa"
        };
    }
}), _descriptor8$16 = _applyDecoratedDescriptor$47(_class3$33.prototype, "header", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        var _this3 = this;

        return {
            "display": "flex",
            "justify-content": "center",
            "align-items": "center",
            "float": "left",
            "width": "18%",
            "height": function height() {
                return _this3.tagsHeight + "px";
            },
            "font-size": "13px",
            "text-align": "center"
        };
    }
}), _class3$33);

var InterviewBubbleStyle = (_class5$9 = function (_StyleSheet3) {
    inherits(InterviewBubbleStyle, _StyleSheet3);

    function InterviewBubbleStyle() {
        var _ref3;

        var _temp3, _this4, _ret3;

        classCallCheck(this, InterviewBubbleStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this4 = possibleConstructorReturn(this, (_ref3 = InterviewBubbleStyle.__proto__ || Object.getPrototypeOf(InterviewBubbleStyle)).call.apply(_ref3, [this].concat(args))), _this4), _this4.bubbleHeight = 50, _this4.baseBubble = {
            height: _this4.bubbleHeight + "px",
            width: "100%",
            color: "#555",
            borderBottom: "2px solid #e4e6e7",
            cursor: "pointer"
        }, _initDefineProp$46(_this4, "lightBubble", _descriptor9$13, _this4), _initDefineProp$46(_this4, "darkBubble", _descriptor10$11, _this4), _initDefineProp$46(_this4, "element", _descriptor11$9, _this4), _temp3), possibleConstructorReturn(_this4, _ret3);
    }

    return InterviewBubbleStyle;
}(StyleSheet), _descriptor9$13 = _applyDecoratedDescriptor$47(_class5$9.prototype, "lightBubble", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return Object.assign(this.baseBubble, {
            backgroundColor: "#fff",
            ":hover": {
                backgroundColor: "#fafafa"
            }
        });
    }
}), _descriptor10$11 = _applyDecoratedDescriptor$47(_class5$9.prototype, "darkBubble", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return Object.assign(this.baseBubble, {
            backgroundColor: "#f4f6f7",
            ":hover": {
                backgroundColor: "#eff1f2"
            }
        });
    }
}), _descriptor11$9 = _applyDecoratedDescriptor$47(_class5$9.prototype, "element", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            float: "left",
            width: "18%",
            height: this.bubbleHeight + "px",
            fontSize: "14px",
            textAlign: "center",
            color: "#767676"
        };
    }
}), _class5$9);

var InterviewAppStyle = (_class7$7 = function (_StyleSheet4) {
    inherits(InterviewAppStyle, _StyleSheet4);

    function InterviewAppStyle() {
        var _ref4;

        var _temp4, _this5, _ret4;

        classCallCheck(this, InterviewAppStyle);

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        return _ret4 = (_temp4 = (_this5 = possibleConstructorReturn(this, (_ref4 = InterviewAppStyle.__proto__ || Object.getPrototypeOf(InterviewAppStyle)).call.apply(_ref4, [this].concat(args))), _this5), _this5.textColor = "#555659", _this5.headerHeight = 60, _initDefineProp$46(_this5, "title", _descriptor12$8, _this5), _initDefineProp$46(_this5, "button", _descriptor13$8, _this5), _initDefineProp$46(_this5, "header", _descriptor14$8, _this5), _temp4), possibleConstructorReturn(_this5, _ret4);
    } // default CSAcademy navbar color


    return InterviewAppStyle;
}(StyleSheet), _descriptor12$8 = _applyDecoratedDescriptor$47(_class7$7.prototype, "title", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "left",
            lineHeight: this.headerHeight + "px",
            height: this.headerHeight + "px",
            paddingLeft: "1%",
            fontSize: "24px",
            color: this.textColor
        };
    }
}), _descriptor13$8 = _applyDecoratedDescriptor$47(_class7$7.prototype, "button", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            float: "right",
            marginRight: "1%",
            marginTop: "14px"
        };
    }
}), _descriptor14$8 = _applyDecoratedDescriptor$47(_class7$7.prototype, "header", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.headerHeight + "px",
            width: "100%"
        };
    }
}), _class7$7);

var _dec$50, _class$106, _dec2$20, _class2$18, _dec3$7, _class3$34;

var CreateInterviewModal = function (_ActionModal) {
    inherits(CreateInterviewModal, _ActionModal);

    function CreateInterviewModal() {
        classCallCheck(this, CreateInterviewModal);
        return possibleConstructorReturn(this, (CreateInterviewModal.__proto__ || Object.getPrototypeOf(CreateInterviewModal)).apply(this, arguments));
    }

    createClass(CreateInterviewModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Interview settings";
        }
    }, {
        key: "getBody",
        value: function getBody() {

            var durations = [];
            var _arr = [30, 45, 60, 90, 120];

            var _loop = function _loop() {
                var duration = _arr[_i];
                durations.push({ duration: duration, toString: function toString() {
                        return duration + " minutes";
                    } });
            };

            for (var _i = 0; _i < _arr.length; _i++) {
                _loop();
            }
            // Default is 45 minutes
            var defaultDuration = durations[2];

            return [UI.createElement(
                "div",
                null,
                UI.createElement(
                    Form,
                    { style: { marginTop: "10px" } },
                    UI.createElement(
                        FormField,
                        { ref: "durationFormField", label: "Duration" },
                        UI.createElement(Select, { ref: "durationSelect", options: durations, selected: defaultDuration })
                    ),
                    UI.createElement(
                        FormField,
                        { ref: "difficultyFormField", label: "Difficulty" },
                        UI.createElement(Select, { ref: "difficultySelect", options: InterviewStore.possibleDifficulties,
                            selected: InterviewStore.defaultDifficulty })
                    )
                )
            )];
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Create";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.SUCCESS;
        }
    }, {
        key: "action",
        value: function action() {
            var _this2 = this;

            var request = {
                durationInMinutes: this.durationSelect.get().duration,
                difficulty: this.difficultySelect.get().id
            };

            Ajax.postJSON("/interview/create_interview/", request).then(function (data) {
                return window.location.replace("/interview/" + data.interviewId);
            }, function (error) {
                return _this2.messageArea.showMessage("Error: " + error.message);
            });
        }
    }]);
    return CreateInterviewModal;
}(ActionModal);

var CreateInterviewButton = ActionModalButton(CreateInterviewModal);

var InterviewList = function (_UI$Element) {
    inherits(InterviewList, _UI$Element);

    function InterviewList() {
        classCallCheck(this, InterviewList);
        return possibleConstructorReturn(this, (InterviewList.__proto__ || Object.getPrototypeOf(InterviewList)).apply(this, arguments));
    }

    createClass(InterviewList, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("height", "50px");
            attr.setStyle("width", "100%");
        }
    }, {
        key: "render",
        value: function render() {
            var interviews = InterviewStore.all().sort(function (a, b) {
                return b.getStartTime() - a.getStartTime();
            });
            var color = 0;
            var interviewBubbles = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = interviews[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var interview = _step.value;

                    interviewBubbles.push(UI.createElement(InterviewBubble, { interview: interview, color: color % 2 }));
                    color = !color;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (interviews.length === 0) {
                return [UI.createElement(
                    "em",
                    { style: { "font-size": "1.2em", "padding-left": "1%" } },
                    "You have not simulated any interviews."
                )];
            }
            return [UI.createElement(InterviewTags, null)].concat(interviewBubbles);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(InterviewList.prototype.__proto__ || Object.getPrototypeOf(InterviewList.prototype), "onMount", this).call(this);
            InterviewStore.addCreateListener(function () {
                _this4.redraw();
            });
        }
    }]);
    return InterviewList;
}(UI.Element);

var InterviewTags = (_dec$50 = registerStyle(InterviewTagsStyle), _dec$50(_class$106 = function (_UI$Element2) {
    inherits(InterviewTags, _UI$Element2);

    function InterviewTags() {
        classCallCheck(this, InterviewTags);
        return possibleConstructorReturn(this, (InterviewTags.__proto__ || Object.getPrototypeOf(InterviewTags)).apply(this, arguments));
    }

    createClass(InterviewTags, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.className);
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.header },
                "Start Date"
            );
        }
    }, {
        key: "getAuthor",
        value: function getAuthor() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.header },
                "Intended duration"
            );
        }
    }, {
        key: "getReplies",
        value: function getReplies() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.header },
                "Actual duration"
            );
        }
    }, {
        key: "getViews",
        value: function getViews() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.header },
                "Difficulty"
            );
        }
    }, {
        key: "getActivity",
        value: function getActivity() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.header },
                "Review"
            );
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getTitle(), this.getAuthor(), this.getReplies(), this.getViews(), this.getActivity()];
        }
    }]);
    return InterviewTags;
}(UI.Element)) || _class$106);
var InterviewBubble = (_dec2$20 = registerStyle(InterviewBubbleStyle), _dec2$20(_class2$18 = function (_UI$Element3) {
    inherits(InterviewBubble, _UI$Element3);

    function InterviewBubble() {
        classCallCheck(this, InterviewBubble);
        return possibleConstructorReturn(this, (InterviewBubble.__proto__ || Object.getPrototypeOf(InterviewBubble)).apply(this, arguments));
    }

    createClass(InterviewBubble, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.options.color ? this.styleSheet.lightBubble : this.styleSheet.darkBubble);
        }
    }, {
        key: "getInterview",
        value: function getInterview() {
            return this.options.interview;
        }
    }, {
        key: "getStartDate",
        value: function getStartDate() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.element },
                UI.createElement(TimePassedSpan, { timeStamp: this.getInterview().getStartTime(), style: { color: "#797979" } })
            )];
        }
    }, {
        key: "getFormattedMinutesDuration",
        value: function getFormattedMinutesDuration(seconds) {
            var durationInMinutes = seconds / 60;
            durationInMinutes = Math.floor(durationInMinutes);
            if (durationInMinutes < 1) {
                return "< 1 minute";
            }
            var label = durationInMinutes + " minute";
            if (durationInMinutes != 1) {
                label += "s";
            }
            return label;
        }
    }, {
        key: "getIntendedDuration",
        value: function getIntendedDuration() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.element },
                UI.createElement(
                    "span",
                    { style: { color: "#AAA" } },
                    this.getFormattedMinutesDuration(this.getInterview().getExpectedDuration())
                )
            )];
        }
    }, {
        key: "getActualDuration",
        value: function getActualDuration() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.element },
                UI.createElement(
                    "span",
                    { style: { color: "#AAA" } },
                    this.getFormattedMinutesDuration(this.getInterview().getDuration())
                )
            )];
        }
    }, {
        key: "getDifficulty",
        value: function getDifficulty() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.element },
                UI.T(this.getInterview().getDifficulty().toString())
            )];
        }
    }, {
        key: "getReview",
        value: function getReview() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.element },
                "N/A"
            )];
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getStartDate(), this.getIntendedDuration(), this.getActualDuration(), this.getDifficulty(), this.getReview()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            get(InterviewBubble.prototype.__proto__ || Object.getPrototypeOf(InterviewBubble.prototype), "onMount", this).call(this);
            this.addClickListener(function () {
                Router.changeURL(["interview", _this7.getInterview().id]);
            });
            this.getInterview().addListener("updateOrCreate", function () {
                _this7.redraw();
            });
        }
    }]);
    return InterviewBubble;
}(UI.Element)) || _class2$18);

var InterviewContestList = function (_UI$Element4) {
    inherits(InterviewContestList, _UI$Element4);

    function InterviewContestList() {
        classCallCheck(this, InterviewContestList);
        return possibleConstructorReturn(this, (InterviewContestList.__proto__ || Object.getPrototypeOf(InterviewContestList)).apply(this, arguments));
    }

    createClass(InterviewContestList, [{
        key: "getTableColumns",
        value: function getTableColumns() {
            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            return [{
                value: function value(contest) {
                    return UI.createElement(Link, { href: "/contest/" + contest.name, value: contest.getName() });
                },
                headerName: "Name",
                headerStyle: { verticalAlign: "middle", width: "70%" },
                cellStyle: { verticalAlign: "middle" }
            }, {
                value: function value(contest) {
                    return contest.getUser(USER.id).totalScore;
                },
                headerName: "Your score",
                headerStyle: { verticalAlign: "middle", textAlign: "right", width: "30%" },
                cellStyle: numberStyle
            }];
        }
    }, {
        key: "getContests",
        value: function getContests() {
            var _this9 = this;

            return ContestStore.all().filter(function (contest) {
                return contest.systemGenerated && contest.originArchiveId === _this9.options.interviewArchiveId && contest.hasFinished() && contest.getUser(USER.id);
            }).sort(function (a, b) {
                return b.getStartTime() - a.getStartTime();
            });
        }
    }, {
        key: "render",
        value: function render() {
            var contests = this.getContests();
            if (!contests.length) {
                return UI.createElement(
                    "em",
                    { style: { "font-size": "1.2em", "padding-left": "1%" } },
                    "You have not participated in any hourly interview contests."
                );
            }
            return UI.createElement(Table, { columns: this.getTableColumns(), entries: contests });
        }
    }]);
    return InterviewContestList;
}(UI.Element);

var InterviewApp = (_dec3$7 = registerStyle(InterviewAppStyle), _dec3$7(_class3$34 = function (_UI$Element5) {
    inherits(InterviewApp, _UI$Element5);

    function InterviewApp() {
        classCallCheck(this, InterviewApp);
        return possibleConstructorReturn(this, (InterviewApp.__proto__ || Object.getPrototypeOf(InterviewApp)).apply(this, arguments));
    }

    createClass(InterviewApp, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("margin-left", "8%");
            attr.setStyle("width", "84%");
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.title },
                "My interviews"
            )];
        }
    }, {
        key: "getButton",
        value: function getButton() {
            return [UI.createElement(CreateInterviewButton, { label: "New interview", level: Level.SUCCESS, className: this.styleSheet.button })];
        }
    }, {
        key: "getInterviewList",
        value: function getInterviewList() {
            return [UI.createElement(InterviewList, null)];
        }
    }, {
        key: "getContestList",
        value: function getContestList() {
            return UI.createElement(InterviewContestList, { interviewArchiveId: this.options.interviewArchiveId });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { style: { "float": "left", "width": "49%" } },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.header },
                    this.getTitle(),
                    this.getButton()
                ),
                this.getInterviewList()
            ), UI.createElement(
                "div",
                { style: { "float": "right", "width": "49%" } },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.header },
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.title },
                        "Hourly interviews contests"
                    )
                ),
                this.getContestList()
            )];
        }
    }]);
    return InterviewApp;
}(UI.Element)) || _class3$34);

var _dec$51, _class$107;

var InterviewTaskPanel = function (_DelayedContestTaskPa) {
    inherits(InterviewTaskPanel, _DelayedContestTaskPa);

    function InterviewTaskPanel() {
        classCallCheck(this, InterviewTaskPanel);
        return possibleConstructorReturn(this, (InterviewTaskPanel.__proto__ || Object.getPrototypeOf(InterviewTaskPanel)).apply(this, arguments));
    }

    createClass(InterviewTaskPanel, [{
        key: "getInterview",
        value: function getInterview() {
            return this.options.interviewTask.getInterview();
        }
    }, {
        key: "getCommentsPanel",
        value: function getCommentsPanel() {
            if (this.getInterview().getEndTime()) {
                return get(InterviewTaskPanel.prototype.__proto__ || Object.getPrototypeOf(InterviewTaskPanel.prototype), "getCommentsPanel", this).call(this);
            }
        }
    }, {
        key: "getSolutionPanel",
        value: function getSolutionPanel() {
            if (this.getInterview().getEndTime()) {
                return get(InterviewTaskPanel.prototype.__proto__ || Object.getPrototypeOf(InterviewTaskPanel.prototype), "getSolutionPanel", this).call(this);
            }
        }
    }, {
        key: "getStatisticsPanel",
        value: function getStatisticsPanel() {
            if (this.getInterview().getEndTime()) {
                return get(InterviewTaskPanel.prototype.__proto__ || Object.getPrototypeOf(InterviewTaskPanel.prototype), "getStatisticsPanel", this).call(this);
            }
        }
    }, {
        key: "getSubmissionPanel",
        value: function getSubmissionPanel() {
            return UI.createElement(SubmissionSummaryInterviewFilter, { ref: "submissionsPanel", title: UI.T("Submissions"),
                tabHref: this.getSubURL("submissions"),
                contestTask: this.getContestTask() });
        }
    }, {
        key: "modifyIde",
        value: function modifyIde() {
            var _this2 = this;

            var interviewSubmitAjaxHandler = new FixedURLAjaxHandler("/interview/submit_interviewjob/");
            interviewSubmitAjaxHandler.addPreprocessor(function (request) {
                request.data.interviewId = _this2.getInterview().id;
            });
            this.ide.getPlugin("ContestSubmit").setAjaxHandler(interviewSubmitAjaxHandler);
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {
            var _this3 = this;

            get(InterviewTaskPanel.prototype.__proto__ || Object.getPrototypeOf(InterviewTaskPanel.prototype), "onDelayedMount", this).call(this);
            // TODO: fix this hack
            if (this.ide) {
                this.ide.whenLoaded(function () {
                    return _this3.modifyIde();
                });
            } else {
                this.addListener("workspaceLoaded", function () {
                    _this3.ide.whenLoaded(function () {
                        return _this3.modifyIde();
                    });
                });
            }

            // TODO: fix this in case it fails, (No Denis, No setInterval/setTimeout here)
            // Mark problem as read
            this.options.interviewTask.markAsRead();

            this.attachUpdateListener(this.getInterview(), function () {
                _this3.redraw();
            });
        }
    }]);
    return InterviewTaskPanel;
}(DelayedContestTaskPanel);

var SkipTaskModal = function (_ActionModal) {
    inherits(SkipTaskModal, _ActionModal);

    function SkipTaskModal() {
        classCallCheck(this, SkipTaskModal);
        return possibleConstructorReturn(this, (SkipTaskModal.__proto__ || Object.getPrototypeOf(SkipTaskModal)).apply(this, arguments));
    }

    createClass(SkipTaskModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Skip task";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Skip";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                "Are you sure you want to skip ",
                this.options.interviewTask.getContestTask().longName,
                "? You will not be able to solve this task later."
            );
        }
    }, {
        key: "action",
        value: function action() {
            this.options.interviewTask.markAsLocked();
            this.hide();
        }
    }]);
    return SkipTaskModal;
}(ActionModal);

var SkipTaskButton = function (_ActionModalButton) {
    inherits(SkipTaskButton, _ActionModalButton);

    function SkipTaskButton() {
        classCallCheck(this, SkipTaskButton);
        return possibleConstructorReturn(this, (SkipTaskButton.__proto__ || Object.getPrototypeOf(SkipTaskButton)).apply(this, arguments));
    }

    createClass(SkipTaskButton, [{
        key: "onMount",
        value: function onMount() {
            get(SkipTaskButton.prototype.__proto__ || Object.getPrototypeOf(SkipTaskButton.prototype), "onMount", this).call(this);
            this.addClickListener(function (event) {
                event.preventDefault();
                event.stopPropagation();
            });
        }
    }]);
    return SkipTaskButton;
}(ActionModalButton(SkipTaskModal));

var InterviewTaskBubble = (_dec$51 = registerStyle(InterviewTaskBubbleStyle), _dec$51(_class$107 = function (_Link) {
    inherits(InterviewTaskBubble, _Link);

    function InterviewTaskBubble() {
        classCallCheck(this, InterviewTaskBubble);
        return possibleConstructorReturn(this, (InterviewTaskBubble.__proto__ || Object.getPrototypeOf(InterviewTaskBubble)).apply(this, arguments));
    }

    createClass(InterviewTaskBubble, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(InterviewTaskBubble.prototype.__proto__ || Object.getPrototypeOf(InterviewTaskBubble.prototype), "setOptions", this).call(this, options);
            this.options.contestTask = this.getInterviewTask().getContestTask();
            this.options.href = this.options.href || this.getFullTaskUrl();
        }
    }, {
        key: "getFullTaskUrl",
        value: function getFullTaskUrl() {
            return "/interview/" + this.getInterviewTask().interviewId + "/task/" + this.options.contestTask.name + "/";
        }
    }, {
        key: "getInterviewTask",
        value: function getInterviewTask() {
            return this.options.interviewTask;
        }
    }, {
        key: "getContestTask",
        value: function getContestTask() {
            return this.options.contestTask;
        }
    }, {
        key: "getTaskDifficulty",
        value: function getTaskDifficulty() {
            var taskDifficulty = Difficulty.get(this.getContestTask().getDifficulty());

            return UI.createElement(
                "div",
                { className: this.styleSheet.taskDifficulty, style: { "color": taskDifficulty.color } },
                taskDifficulty.toString()
            );
        }
    }, {
        key: "getUserScore",
        value: function getUserScore() {
            var points = void 0;
            var getSolvedIcon = function getSolvedIcon() {
                return UI.createElement("span", { className: "fa fa-check fa-lg", style: { color: "green" } });
            };
            var getUnsolvedIcon = function getUnsolvedIcon() {
                return UI.createElement("span", { className: "fa fa-times fa-lg", style: { color: "red" } });
            };
            var getLockIcon = function getLockIcon() {
                return UI.createElement("span", { className: "fa fa-lock fa-lg", style: { color: "gray" } });
            };

            if (!this.getInterviewTask().canOpen()) {
                points = getLockIcon();
            } else if (!this.getInterviewTask().isAvailableTask()) {
                points = this.getInterviewTask().getSolvedTime() ? getSolvedIcon() : getUnsolvedIcon();
            }

            return UI.createElement(
                "div",
                { className: this.styleSheet.userScore },
                points
            );
        }
    }, {
        key: "getTaskDescription",
        value: function getTaskDescription() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.taskDescription },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.taskName },
                    UI.T(this.getContestTask().longName)
                ),
                UI.createElement("div", { className: this.styleSheet.originalContest })
            );
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(InterviewTaskBubble.prototype.__proto__ || Object.getPrototypeOf(InterviewTaskBubble.prototype), "getNodeAttributes", this).call(this);

            attr.addClass(String(this.styleSheet.className));
            if (this.getInterviewTask().canOpen()) {
                attr.setStyle("cursor", "pointer");
            } else {
                attr.setStyle("backgroundColor", "lightgray");
            }

            return attr;
        }
    }, {
        key: "render",
        value: function render() {
            var skipTaskButton = void 0;
            if (this.getInterviewTask().isAvailableTask() && !this.getInterviewTask().isLastTask()) {
                skipTaskButton = UI.createElement(SkipTaskButton, { style: { marginRight: "5%", marginTop: "20px" }, className: "pull-right",
                    label: "Skip", modalOptions: { interviewTask: this.getInterviewTask() } });
            }
            return [this.getTaskDescription(), this.getUserScore(), this.getTaskDifficulty(), skipTaskButton];
        }
    }]);
    return InterviewTaskBubble;
}(Link)) || _class$107);

var InterviewTaskList = function (_UI$Element) {
    inherits(InterviewTaskList, _UI$Element);

    function InterviewTaskList() {
        classCallCheck(this, InterviewTaskList);
        return possibleConstructorReturn(this, (InterviewTaskList.__proto__ || Object.getPrototypeOf(InterviewTaskList)).apply(this, arguments));
    }

    createClass(InterviewTaskList, [{
        key: "getInterview",
        value: function getInterview() {
            return this.options.interview;
        }
    }, {
        key: "render",
        value: function render() {
            return this.getInterview().getInterviewTasks().map(function (interviewTask) {
                return UI.createElement(InterviewTaskBubble, { key: interviewTask.id,
                    interviewTask: interviewTask });
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.attachUpdateListener(this.getInterview(), function () {
                _this8.redraw();
            });
            this.attachListener(InterviewTaskStore, "updateOrCreate", function () {
                _this8.redraw();
            });
        }
    }]);
    return InterviewTaskList;
}(UI.Element);

var InterviewAnalysis = function (_UI$Element2) {
    inherits(InterviewAnalysis, _UI$Element2);

    function InterviewAnalysis() {
        classCallCheck(this, InterviewAnalysis);
        return possibleConstructorReturn(this, (InterviewAnalysis.__proto__ || Object.getPrototypeOf(InterviewAnalysis)).apply(this, arguments));
    }

    createClass(InterviewAnalysis, [{
        key: "render",
        value: function render() {
            return UI.createElement(
                "div",
                { className: "text-center" },
                UI.createElement(
                    "h3",
                    null,
                    "Congratulations"
                ),
                UI.createElement(
                    "p",
                    null,
                    "You can continue training in the ",
                    UI.createElement(Link, { href: "/contest/interview-archive/", value: "interview archive" }),
                    "."
                )
            );
        }
    }]);
    return InterviewAnalysis;
}(UI.Element);

var GoNextModal = function (_ActionModal2) {
    inherits(GoNextModal, _ActionModal2);

    function GoNextModal() {
        classCallCheck(this, GoNextModal);
        return possibleConstructorReturn(this, (GoNextModal.__proto__ || Object.getPrototypeOf(GoNextModal)).apply(this, arguments));
    }

    createClass(GoNextModal, [{
        key: "getInterviewTask",
        value: function getInterviewTask() {
            return this.options.interviewTask;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            if (this.getInterviewTask().getLockedTime() && !this.getInterviewTask().isLastTask()) {
                return "New problem unlocked";
            }
            return "Congratulations";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            if (this.getInterviewTask().isLastTask()) {
                return "End interview";
            } else {
                return "Next problem";
            }
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getCloseName",
        value: function getCloseName() {
            return "Not now";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            if (this.getInterviewTask().isLastTask()) {
                return "You finished all the problems!";
            } else {
                return "You unlocked a new problem.";
            }
        }
    }, {
        key: "action",
        value: function action() {
            var _this11 = this;

            var interviewTask = this.getInterviewTask();
            if (interviewTask.isLastTask()) {
                // TODO: duplicated from EndInterviewModal.action
                var onSuccess = function onSuccess() {
                    _this11.hide();
                    Router.changeURL(["interview", interviewTask.interviewId, "analysis"]);
                };
                var onError = function onError(error) {
                    if (typeof error === "string") {
                        _this11.messageArea.showMessage("Error: " + error);
                    } else {
                        _this11.messageArea.showMessage("Error: " + error.message);
                    }
                };
                interviewTask.getInterview().endInterview(onSuccess, onError);
            } else {
                this.hide();
                Router.changeURL(["interview", interviewTask.interviewId, "task", interviewTask.getNextTask().getContestTask().name]);
            }
        }
    }]);
    return GoNextModal;
}(ActionModal);

var EndInterviewModal = function (_ActionModal3) {
    inherits(EndInterviewModal, _ActionModal3);

    function EndInterviewModal() {
        classCallCheck(this, EndInterviewModal);
        return possibleConstructorReturn(this, (EndInterviewModal.__proto__ || Object.getPrototypeOf(EndInterviewModal)).apply(this, arguments));
    }

    createClass(EndInterviewModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "End interview";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.WARNING;
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return "Are you sure you want to end your interview?";
        }
    }, {
        key: "action",
        value: function action() {
            var _this13 = this;

            var onSuccess = function onSuccess() {
                _this13.hide();
                Router.changeURL(["interview", _this13.options.interview.id, "analysis"]);
            };
            var onError = function onError(error) {
                if (typeof error === "string") {
                    _this13.messageArea.showMessage("Error: " + error);
                } else {
                    _this13.messageArea.showMessage("Error: " + error.message);
                }
            };
            this.options.interview.endInterview(onSuccess, onError);
        }
    }]);
    return EndInterviewModal;
}(ActionModal);

var EndInterviewButton = ActionModalButton(EndInterviewModal);

var InterviewPanel = function (_Router) {
    inherits(InterviewPanel, _Router);

    function InterviewPanel() {
        classCallCheck(this, InterviewPanel);
        return possibleConstructorReturn(this, (InterviewPanel.__proto__ || Object.getPrototypeOf(InterviewPanel)).apply(this, arguments));
    }

    createClass(InterviewPanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    height: "100%"
                },
                children: []
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(InterviewPanel.prototype.__proto__ || Object.getPrototypeOf(InterviewPanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.MEDIUM);
        }
    }, {
        key: "getInterview",
        value: function getInterview() {
            return InterviewStore.get(this.options.interviewId);
        }
    }, {
        key: "getUrlPrefix",
        value: function getUrlPrefix(str) {
            var url = "/interview/" + this.options.interviewId + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(InterviewPanel.prototype.__proto__ || Object.getPrototypeOf(InterviewPanel.prototype), "setOptions", this).call(this, options);
            this.tasksWithShowedModal = new Set();
            // TODO: add solved tasks to the set
            GlobalState.importState(options.state || {});
        }
    }, {
        key: "getAnalysis",
        value: function getAnalysis() {
            if (this.getInterview().getEndTime()) {
                return UI.createElement(InterviewAnalysis, { interview: this.getInterview() });
            }
        }
    }, {
        key: "getTasks",
        value: function getTasks() {
            var endInterviewButton = void 0;
            if (!this.getInterview().getEndTime()) {
                endInterviewButton = UI.createElement(
                    "div",
                    { style: { marginRight: "12%" } },
                    UI.createElement(EndInterviewButton, { modalOptions: { interview: this.getInterview() },
                        label: "End interview", level: Level.WARNING, className: "pull-right" })
                );
            }
            return UI.createElement(
                "div",
                null,
                endInterviewButton,
                UI.createElement(InterviewTaskList, { interview: this.getInterview(), style: { marginLeft: "12%", marginRight: "12%" } })
            );
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            var _this15 = this;

            this.routes = this.routes || new Route(null, function () {
                return _this15.getTasks();
            }, [new Route("tasks", function () {
                return _this15.getTasks();
            }), new Route("task", null, [new TerminalRoute("%s", function (options) {
                var interviewTask = _this15.getInterview().getInterviewTasks().find(function (interviewTask) {
                    return interviewTask.getContestTask().name === options.args[0];
                });
                var customURLPrefix = "/interview/" + _this15.getInterview().id + "/task/" + options.args[0] + "/";
                return interviewTask && UI.createElement(InterviewTaskPanel, { interviewTask: interviewTask,
                    customURLPrefix: customURLPrefix,
                    contestTaskId: interviewTask.contestTaskId });
            })]), new Route("analysis", function () {
                return _this15.getAnalysis();
            })]);
            return this.routes;
        }
    }, {
        key: "showModalForTask",
        value: function showModalForTask(interviewTask) {
            if (this.tasksWithShowedModal.has(interviewTask)) {
                return;
            }
            this.tasksWithShowedModal.add(interviewTask);
            var modal = UI.createElement(GoNextModal, { interviewTask: interviewTask });
            modal.show();
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this16 = this;

            this.createNavbarElements();

            this.attachUpdateListener(this.getInterview(), function () {
                _this16.createNavbarElements();
                if (_this16.getInterview().getEndTime() && _this16.endInterviewButton) {
                    _this16.endInterviewButton.hide();
                }
                _this16.redraw();
            });
            this.attachListener(InterviewTaskStore, "updateOrCreate", function (interviewTask) {
                if (interviewTask.getSolvedTime()) {
                    // TODO: show congrats modal
                    _this16.showModalForTask(interviewTask);
                } else if (interviewTask.getLockedTime()) {
                    // TODO: show next problem modal
                    _this16.showModalForTask(interviewTask);
                }
            });
        }
    }, {
        key: "createNavbarElements",
        value: function createNavbarElements() {
            if (!this.isInDocument()) {
                return;
            }

            var leftChildren = [];
            if (this.getInterview().getEndTime()) {
                leftChildren.push(UI.createElement(NavLinkElement, { href: "/interview/", value: UI.T("My Interviews") }));
            }
            leftChildren.push(UI.createElement(NavLinkElement, { href: this.getUrlPrefix("tasks"), value: UI.T("Tasks") }));
            if (this.getInterview().getEndTime()) {
                leftChildren.push(UI.createElement(NavLinkElement, { href: this.getUrlPrefix("analysis"), value: UI.T("Analysis") }));
            }
            NavManager.Global.getLeftConditioned().setChildren(leftChildren);
            NavManager.Global.getRightConditioned().setChildren([this.createTimeCounter()]);
            NavManager.Global.checkForWrap();
        }
    }, {
        key: "destroyNavbarElements",
        value: function destroyNavbarElements() {
            NavManager.Global.getLeftConditioned().setChildren([]);
            NavManager.Global.getRightConditioned().setChildren([]);
            NavManager.Global.checkForWrap();
        }
    }, {
        key: "createTimeCounter",
        value: function createTimeCounter() {
            var _this17 = this;

            var timeCounter = UI.createElement(NavElement, { value: "" });

            var timerInterval = setInterval(function () {
                var serverTime = ServerTime.now();
                var value = void 0;
                if (_this17.getInterview().getEndTime()) {
                    // User finished interview
                    var interviewStartTime = StemDate(_this17.getInterview().getStartTime());
                    var interviewEndTime = StemDate(_this17.getInterview().getEndTime());
                    var timeDifference = interviewEndTime.diffDuration(interviewStartTime);
                    var diffFormat = timeDifference.format("H:mm:ss");
                    value = "Done in " + diffFormat;
                    clearInterval(timerInterval);
                } else if (_this17.getInterview().hasEnded()) {
                    // Interview time finished, user can still continue
                    var _interviewEndTime = StemDate(_this17.getInterview().getStartTime() + _this17.getInterview().getExpectedDuration());
                    var _timeDifference = serverTime.diffDuration(_interviewEndTime);
                    var _diffFormat = _timeDifference.format("H:mm:ss");
                    value = "Extra " + _diffFormat;
                } else {
                    // Interview is running
                    var _interviewEndTime2 = StemDate(_this17.getInterview().getStartTime() + _this17.getInterview().getExpectedDuration());
                    var _timeDifference2 = serverTime.diffDuration(_interviewEndTime2);
                    var _diffFormat2 = _timeDifference2.format("H:mm:ss");
                    value = "Ends in " + _diffFormat2;
                }
                timeCounter.updateOptions({ value: value });
            }, 1000);

            timeCounter.addCleanupJob(function () {
                clearInterval(timerInterval);
            });
            return timeCounter;
        }
    }]);
    return InterviewPanel;
}(Router);

var InterviewPanelWrapper = function (_UI$Element3) {
    inherits(InterviewPanelWrapper, _UI$Element3);

    function InterviewPanelWrapper() {
        classCallCheck(this, InterviewPanelWrapper);
        return possibleConstructorReturn(this, (InterviewPanelWrapper.__proto__ || Object.getPrototypeOf(InterviewPanelWrapper)).apply(this, arguments));
    }

    createClass(InterviewPanelWrapper, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(InterviewPanelWrapper.prototype.__proto__ || Object.getPrototypeOf(InterviewPanelWrapper.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Utils.fullHeight);
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (this.interviewPanel) {
                this.interviewPanel.setURL(urlParts);
            } else {
                this.initialUrlParts = urlParts;
            }
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(InterviewPanel, { ref: "interviewPanel", interviewId: this.options.interviewId });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this19 = this;

            this.setURL(this.initialUrlParts);
            this.addListener("urlEnter", function () {
                _this19.interviewPanel.createNavbarElements();
            });
            this.addListener("urlExit", function () {
                _this19.interviewPanel.destroyNavbarElements();
            });
        }
    }]);
    return InterviewPanelWrapper;
}(UI.Element);

var GeneralInformationPanel = function (_Panel) {
    inherits(GeneralInformationPanel, _Panel);

    function GeneralInformationPanel() {
        classCallCheck(this, GeneralInformationPanel);
        return possibleConstructorReturn(this, (GeneralInformationPanel.__proto__ || Object.getPrototypeOf(GeneralInformationPanel)).apply(this, arguments));
    }

    createClass(GeneralInformationPanel, [{
        key: "getFormFields",
        value: function getFormFields() {
            return [UI.createElement(
                FormField,
                { ref: "firstNameFormField", label: "First Name" },
                UI.createElement(TextInput, { ref: "firstNameFormInput", placeholder: "John", value: this.options.user.firstName })
            ), UI.createElement(
                FormField,
                { ref: "lastNameFormField", label: "Last Name" },
                UI.createElement(TextInput, { ref: "lastNameFormInput", placeholder: "Smith", value: this.options.user.lastName })
            ), UI.createElement(
                FormField,
                { ref: "userNameFormField", label: "Username" },
                UI.createElement(TextInput, { ref: "userNameFormInput", placeholder: "johnsmith", value: this.options.user.username || "" })
            ), UI.createElement(
                FormField,
                { ref: "displayNameFormField", label: "Display name" },
                UI.createElement(Select, { ref: "displayNameSelect", options: ["Name", "Username"] })
            )];
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                UI.T("General Info")
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    Form,
                    null,
                    this.getFormFields()
                ),
                UI.createElement(
                    FormField,
                    { label: " " },
                    UI.createElement(
                        "div",
                        null,
                        UI.createElement(AjaxButton, { ref: "saveProfileButton", level: Level.PRIMARY,
                            statusOptions: ["Save changes", { faIcon: "spinner fa-spin", label: " Saving changes..." }, "Saved changes", "Save failed"] })
                    )
                )
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(GeneralInformationPanel.prototype.__proto__ || Object.getPrototypeOf(GeneralInformationPanel.prototype), "onMount", this).call(this);

            this.displayNameSelect.set(this.options.user.displayName ? "Name" : "Username");

            this.saveProfileButton.addClickListener(function () {
                _this2.saveProfileChanges();
            });
        }
    }, {
        key: "getSaveRequestData",
        value: function getSaveRequestData() {
            var firstName = this.firstNameFormInput.getValue();
            var lastName = this.lastNameFormInput.getValue();
            var userName = this.userNameFormInput.getValue();
            var displayName = this.displayNameSelect.get();

            return {
                firstName: firstName,
                lastName: lastName,
                userName: userName,
                displayName: displayName === "Name"
            };
        }
    }, {
        key: "saveProfileChanges",
        value: function saveProfileChanges() {
            var _this3 = this;

            var request = this.getSaveRequestData();

            this.saveProfileButton.setFaIcon("");
            this.firstNameFormField.removeError();
            this.lastNameFormField.removeError();
            this.userNameFormField.removeError();
            this.saveProfileButton.postJSON("/accounts/profile_changed/", request).then(function (data) {
                return UserStore.applyEvent({
                    objectId: data.user.id,
                    data: data.user
                });
            }, function (error) {
                if (error.first_name) {
                    _this3.firstNameFormField.setError(error.first_name);
                }
                if (error.last_name) {
                    _this3.lastNameFormField.setError(error.last_name);
                }
                if (error.username) {
                    _this3.userNameFormField.setError(error.username);
                }
            });
        }
    }]);
    return GeneralInformationPanel;
}(Panel);

var SecuritySettingsPanel = function (_Panel2) {
    inherits(SecuritySettingsPanel, _Panel2);

    function SecuritySettingsPanel() {
        classCallCheck(this, SecuritySettingsPanel);
        return possibleConstructorReturn(this, (SecuritySettingsPanel.__proto__ || Object.getPrototypeOf(SecuritySettingsPanel)).apply(this, arguments));
    }

    createClass(SecuritySettingsPanel, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                UI.T("Password")
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    Form,
                    null,
                    UI.createElement(
                        FormField,
                        { ref: "oldPasswordGroup", label: UI.T("Current Password") },
                        UI.createElement(PasswordInput, { ref: "oldPasswordInput" })
                    ),
                    UI.createElement(
                        FormField,
                        { ref: "newPasswordGroup", label: UI.T("New Password") },
                        UI.createElement(PasswordInput, { ref: "newPasswordInput", required: true })
                    ),
                    UI.createElement(
                        FormField,
                        { ref: "newPasswordGroup2", label: [UI.T("New Password"), " (", UI.T("again"), ")"] },
                        UI.createElement(PasswordInput, { ref: "newPasswordInput2", required: true })
                    )
                ),
                UI.createElement(
                    FormField,
                    { label: " " },
                    UI.createElement(
                        "div",
                        null,
                        UI.createElement(AjaxButton, { ref: "setPasswordButton", level: Level.PRIMARY,
                            statusOptions: ["Set Password", { faIcon: "spinner fa-spin", label: " Setting Password..." }, "Password set", "Failed"] })
                    )
                )
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            get(SecuritySettingsPanel.prototype.__proto__ || Object.getPrototypeOf(SecuritySettingsPanel.prototype), "onMount", this).call(this);

            if (!this.options.user.hasPassword) {
                this.oldPasswordGroup.hide();
            } else {
                //TODO(@gem): Add required option to oldPassword
            }

            this.setPasswordButton.addClickListener(function () {
                _this5.setPassword();
            });
        }
    }, {
        key: "setPassword",
        value: function setPassword() {
            var _this6 = this;

            var oldPassword = this.oldPasswordInput.getValue();
            var password1 = this.newPasswordInput.getValue();
            var password2 = this.newPasswordInput2.getValue();

            this.oldPasswordGroup.removeError();
            this.newPasswordGroup.removeError();
            this.newPasswordGroup2.removeError();
            if (password1 != password2) {
                this.newPasswordGroup2.setError("Passwords don't match.");
                return;
            }
            if (!password1) {
                this.newPasswordGroup.setError("Password can't be empty.");
                return;
            }

            var request = {
                newPassword: password1
            };
            if (oldPassword) {
                request["oldPassword"] = oldPassword;
            }

            this.setPasswordButton.postJSON("/accounts/password_change/", request).then(function (data) {
                return UserStore.applyEvent({
                    objectId: data.user.id,
                    data: data.user
                });
            }, function (error) {
                return _this6.oldPasswordGroup.setError(error.message);
            });
        }
    }]);
    return SecuritySettingsPanel;
}(Panel);

var EmailPanel = function (_Panel3) {
    inherits(EmailPanel, _Panel3);

    function EmailPanel() {
        classCallCheck(this, EmailPanel);
        return possibleConstructorReturn(this, (EmailPanel.__proto__ || Object.getPrototypeOf(EmailPanel)).apply(this, arguments));
    }

    createClass(EmailPanel, [{
        key: "render",
        value: function render() {
            var _this8 = this;

            var emails = this.options.user.emails.slice();

            emails.sort(function (a, b) {
                return a.verified == b.verified ? b.primary - a.primary : b.verified - a.verified;
            });

            var emailForms = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                var _loop = function _loop() {
                    var email = _step.value;

                    var primaryLabel = void 0,
                        verifiedLabel = void 0,
                        unverifiedLabel = void 0;
                    var primaryAction = void 0,
                        removeAction = void 0,
                        resendAction = void 0; // TODO: handle onclick
                    var labelStyle = { borderRadius: "10px", "margin-left": "5px" };
                    var actionStyle = { "margin-left": "7px" };

                    var makePrimaryCallback = function makePrimaryCallback() {
                        _this8.makePrimaryEmail(email.email);
                    };

                    var removeCallback = function removeCallback() {
                        _this8.removeEmail(email.email);
                    };

                    var resendCallback = function resendCallback() {
                        _this8.sendConfirmation(email.email);
                    };

                    if (email.verified) {
                        if (email.primary) {
                            primaryLabel = UI.createElement(Label, { level: Level.PRIMARY, style: labelStyle, label: "Primary" });
                        } else {
                            verifiedLabel = UI.createElement(Label, { level: Level.SUCCESS, style: labelStyle, label: "Verified" });
                            primaryAction = UI.createElement(Button, { onClick: makePrimaryCallback, size: Size.EXTRA_SMALL, level: Level.PRIMARY, label: "Make Primary",
                                style: actionStyle });
                        }
                    } else {
                        unverifiedLabel = UI.createElement(Label, { level: Level.DANGER, style: labelStyle, label: "Unverified" });
                        resendAction = UI.createElement(Button, { onClick: resendCallback, size: Size.EXTRA_SMALL, label: "Re-send confirmation",
                            style: actionStyle });
                    }

                    if (!email.primary) {
                        removeAction = UI.createElement(Button, { onClick: removeCallback, size: Size.EXTRA_SMALL, level: Level.DANGER, label: "Remove",
                            style: actionStyle });
                    }

                    emailForms.push(UI.createElement(
                        "div",
                        { style: { width: "100%", position: "relative", paddingTop: "4px", paddingBottom: "4px" } },
                        UI.createElement(
                            "strong",
                            null,
                            email.email
                        ),
                        primaryLabel,
                        verifiedLabel,
                        unverifiedLabel,
                        UI.createElement(
                            "div",
                            { style: { right: "0", top: "0", position: "absolute" } },
                            primaryAction,
                            resendAction,
                            removeAction
                        )
                    ));
                };

                for (var _iterator = emails[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return [UI.createElement(
                "h3",
                null,
                UI.T("E-mail Addresses")
            ), UI.createElement(
                "p",
                null,
                UI.T("The following e-mail addresses are associated with your account:")
            ), emailForms, UI.createElement(
                "h3",
                null,
                UI.T("Add E-mail Address")
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    Form,
                    null,
                    UI.createElement(
                        FormField,
                        { ref: "emailFormField", label: "Email" },
                        UI.createElement(EmailInput, { ref: "emailFormInput", placeholder: "john.smith@mail.com" })
                    ),
                    UI.createElement(
                        FormField,
                        { label: " " },
                        UI.createElement(
                            "div",
                            null,
                            UI.createElement(AjaxButton, { ref: "addEmailButton", onClick: function onClick() {
                                    _this8.addEmail();
                                }, level: Level.PRIMARY,
                                statusOptions: ["Add Email", { faIcon: "spinner fa-spin", label: " Adding Email..." }, "Email added", "Failed"] })
                        )
                    )
                )
            ), UI.createElement(
                "h5",
                null,
                UI.createElement(
                    FormField,
                    { label: UI.T("Receive email notifications"), inline: false },
                    UI.createElement(CheckboxInput, { ref: "emailSubscriptionCheckbox", checked: this.options.user.receivesEmailAnnouncements,
                        onClick: function onClick() {
                            _this8.changeEmailSubscription(_this8.emailSubscriptionCheckbox.getValue());
                        } })
                )
            )];
        }
    }, {
        key: "addEmail",
        value: function addEmail() {
            var _this9 = this;

            var email = this.emailFormInput.getValue();
            var request = {
                email: email
            };

            this.emailFormField.removeError();

            this.addEmailButton.postJSON("/accounts/email_address_add/", request).then(function (data) {
                _this9.emailFormInput.setValue("");
                UserStore.applyEvent({
                    objectId: data.user.id,
                    data: data.user
                });
            }, function (error) {
                return _this9.emailFormField.setError(error.message);
            });
        }
    }, {
        key: "removeEmail",
        value: function removeEmail(email) {
            var request = {
                email: email
            };

            if (!confirm("Are you sure you want to remove this email from your account?")) {
                return;
            }

            Ajax.postJSON("/accounts/email_address_remove/", request).then(function (data) {
                return UserStore.applyEvent({
                    objectId: data.user.id,
                    data: data.user
                });
            });
        }
    }, {
        key: "makePrimaryEmail",
        value: function makePrimaryEmail(email) {
            var request = {
                email: email
            };

            Ajax.postJSON("/accounts/email_address_make_primary/", request).then(function (data) {
                return UserStore.applyEvent({
                    objectId: data.user.id,
                    data: data.user
                });
            });
        }
    }, {
        key: "sendConfirmation",
        value: function sendConfirmation(email) {
            Ajax.postJSON("/accounts/email_address_verification_send/", {
                email: email
            });
        }
    }, {
        key: "changeEmailSubscription",
        value: function changeEmailSubscription(receivesEmailAnnouncements) {
            Ajax.postJSON("/accounts/profile_changed/", {
                receivesEmailAnnouncements: receivesEmailAnnouncements
            });
        }
    }]);
    return EmailPanel;
}(Panel);

var SocialAccountsPanel = function (_Panel4) {
    inherits(SocialAccountsPanel, _Panel4);

    function SocialAccountsPanel(options) {
        classCallCheck(this, SocialAccountsPanel);

        // Ensure Social managers are initialized
        // TODO: should use the Social App store!
        var _this10 = possibleConstructorReturn(this, (SocialAccountsPanel.__proto__ || Object.getPrototypeOf(SocialAccountsPanel)).call(this, options));

        FacebookManager.getInstance();
        GoogleManager.getInstance();
        return _this10;
    }

    createClass(SocialAccountsPanel, [{
        key: "render",
        value: function render() {
            var _this11 = this;

            var addSocialAccountGroup = [UI.createElement(
                "h3",
                null,
                UI.T("Add a 3rd Party Account")
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    "a",
                    { style: { cursor: "pointer" }, onClick: function onClick() {
                            return GoogleManager.connect();
                        } },
                    UI.createElement("i", { className: "fa fa-google fa-2x" }),
                    UI.createElement(
                        "span",
                        { className: "google-login-text" },
                        " ",
                        UI.T("Connect Google account")
                    )
                )
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    "a",
                    { onClick: function onClick() {
                            FacebookManager.connect();
                        } },
                    UI.createElement("i", { className: "fa fa-facebook fa-2x" }),
                    UI.createElement(
                        "span",
                        null,
                        " ",
                        UI.T("Connect Facebook account"),
                        " "
                    )
                )
            )];

            if (this.options.user.social.length) {
                var socialAccounts = [];
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    var _loop2 = function _loop2() {
                        var account = _step2.value;

                        socialAccounts.push(UI.createElement(
                            "div",
                            null,
                            UI.createElement(
                                "label",
                                null,
                                UI.createElement("img", { src: account.picture, height: "42", width: "42" }),
                                UI.createElement(
                                    "a",
                                    { href: account.link, target: "_blank" },
                                    " ",
                                    account.name
                                ),
                                UI.createElement(
                                    "span",
                                    null,
                                    " ",
                                    "- " + account.platform
                                )
                            ),
                            UI.createElement(
                                "div",
                                { className: "pull-right" },
                                UI.createElement(Button, { label: "Remove", size: Size.SMALL, level: Level.DANGER, style: { "margin-top": "7px" },
                                    onClick: function onClick() {
                                        _this11.removeSocialAccount(account.id);
                                    } })
                            )
                        ));
                    };

                    for (var _iterator2 = this.options.user.social[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        _loop2();
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Social accounts")
                ), UI.createElement(
                    "p",
                    null,
                    UI.T("You can sign in to your account using any of the following third party accounts:")
                ), UI.createElement(
                    "div",
                    null,
                    socialAccounts
                )].concat(addSocialAccountGroup);
            } else {
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Social accounts")
                ), UI.createElement(
                    "p",
                    null,
                    UI.T("You currently have no social network accounts connected to this account.")
                )].concat(addSocialAccountGroup);
            }
        }
    }, {
        key: "removeSocialAccount",
        value: function removeSocialAccount(socialAccountId) {
            Ajax.postJSON("/accounts/remove_social_account/", {
                socialAccountId: socialAccountId
            }).then(function (data) {
                return UserStore.applyEvent({
                    objectId: data.user.id,
                    data: data.user
                });
            });
        }
    }]);
    return SocialAccountsPanel;
}(Panel);

var UserSettingsPanel = function (_Panel5) {
    inherits(UserSettingsPanel, _Panel5);

    function UserSettingsPanel() {
        classCallCheck(this, UserSettingsPanel);
        return possibleConstructorReturn(this, (UserSettingsPanel.__proto__ || Object.getPrototypeOf(UserSettingsPanel)).apply(this, arguments));
    }

    createClass(UserSettingsPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(UserSettingsPanel.prototype.__proto__ || Object.getPrototypeOf(UserSettingsPanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                height: "500px"
            });
            attr.addClass(GlobalStyle.Container.SMALL);
        }
    }, {
        key: "getUrlPrefix",
        value: function getUrlPrefix(str) {
            var url = "/accounts/settings/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (this.tabArea) {
                this.showUrlTab(urlParts[0] || "general");
            } else {
                this.initialUrlParts = urlParts;
            }
        }
    }, {
        key: "showUrlTab",
        value: function showUrlTab(tabName) {
            if (this[tabName + "Panel"]) {
                this[tabName + "Panel"].dispatch("show");
            } else {
                this["generalPanel"].dispatch("show");
            }
        }
    }, {
        key: "getUser",
        value: function getUser() {
            return UserStore.getCurrentUser();
        }
    }, {
        key: "getPanels",
        value: function getPanels() {
            return [UI.createElement(GeneralInformationPanel, { title: UI.T("General Info"), active: true,
                user: this.getUser(), ref: "generalPanel", tabHref: this.getUrlPrefix("general") }), UI.createElement(EmailPanel, { title: UI.T("Email"), user: this.getUser(),
                ref: "emailPanel", tabHref: this.getUrlPrefix("email") }), UI.createElement(SocialAccountsPanel, { title: UI.T("Social accounts"), user: this.getUser(),
                ref: "socialPanel", tabHref: this.getUrlPrefix("social") }), UI.createElement(SecuritySettingsPanel, { title: UI.T("Security"),
                user: this.getUser(), ref: "securityPanel", tabHref: this.getUrlPrefix("security") })];
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                TabArea,
                { ref: "tabArea", variableHeightPanels: true },
                this.getPanels()
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.setURL(this.initialUrlParts);
            delete this.initialUrlPars;
        }
    }]);
    return UserSettingsPanel;
}(Panel);

var _class$108, _descriptor$46, _descriptor2$40, _descriptor3$34, _descriptor4$30, _descriptor5$27, _descriptor6$23, _descriptor7$20, _descriptor8$17, _dec$52, _class3$35, _dec2$21, _class4$7;

var _templateObject = taggedTemplateLiteral(["", ""], ["", ""]);

function _initDefineProp$47(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$48(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var CSAGeneralInformationPanel = function (_GeneralInformationPa) {
    inherits(CSAGeneralInformationPanel, _GeneralInformationPa);

    function CSAGeneralInformationPanel() {
        classCallCheck(this, CSAGeneralInformationPanel);
        return possibleConstructorReturn(this, (CSAGeneralInformationPanel.__proto__ || Object.getPrototypeOf(CSAGeneralInformationPanel)).apply(this, arguments));
    }

    createClass(CSAGeneralInformationPanel, [{
        key: "getFormFields",
        value: function getFormFields() {
            var userLimits = USER_CONSTANTS;
            return [UI.createElement(
                FormField,
                { ref: "firstNameFormField", label: UI.T("First Name") },
                UI.createElement(TextInput, { ref: "firstNameFormInput", maxLength: userLimits.first_name_max_length || 30, placeholder: "John", value: this.options.user.firstName })
            ), UI.createElement(
                FormField,
                { ref: "lastNameFormField", label: UI.T("Last Name") },
                UI.createElement(TextInput, { ref: "lastNameFormInput", maxLength: userLimits.last_name_max_length || 30, placeholder: "Smith", value: this.options.user.lastName })
            ), UI.createElement(
                FormField,
                { ref: "userNameFormField", label: UI.T("Username") },
                UI.createElement(TextInput, { ref: "userNameFormInput", maxLength: userLimits.username_max_length || 30, placeholder: "johnsmith", value: this.options.user.username || "" })
            ), UI.createElement(
                FormField,
                { ref: "displayNameFormField", label: UI.T("Display name") },
                UI.createElement(Select, { ref: "displayNameSelect", options: ["Name", "Username"] })
            ), UI.createElement(
                FormField,
                { ref: "countryFormField", label: UI.T("Country") },
                UI.createElement(Select, { ref: "countrySelect", options: CountryStore.allWithNone(), selected: CountryStore.get(USER.countryId) })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(CSAGeneralInformationPanel.prototype.__proto__ || Object.getPrototypeOf(CSAGeneralInformationPanel.prototype), "onMount", this).call(this);
            this.userNameFormInput.onInput(function () {
                _this2.validateUsername();
            });
        }
    }, {
        key: "validateUsername",
        value: function validateUsername() {
            var userName = this.userNameFormInput.getValue();
            var validators = USER_CONSTANTS.username_regexes;

            var usernameErrors = false;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = validators[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var validator = _step.value;

                    var usernameRegex = new RegExp(String.raw(_templateObject, validator.pattern));
                    if (!usernameRegex.test(userName)) {
                        this.userNameFormField.setError(validator.message);
                        usernameErrors = true;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (!usernameErrors) {
                this.userNameFormField.removeError();
                this.saveProfileButton.enable();
            } else {
                this.saveProfileButton.disable();
            }
        }
    }, {
        key: "getSaveRequestData",
        value: function getSaveRequestData() {
            var request = get(CSAGeneralInformationPanel.prototype.__proto__ || Object.getPrototypeOf(CSAGeneralInformationPanel.prototype), "getSaveRequestData", this).call(this);
            request.countryId = this.countrySelect.get().id;
            return request;
        }
    }]);
    return CSAGeneralInformationPanel;
}(GeneralInformationPanel);

var ExternalAccountsPanel = function (_Panel) {
    inherits(ExternalAccountsPanel, _Panel);

    function ExternalAccountsPanel() {
        classCallCheck(this, ExternalAccountsPanel);
        return possibleConstructorReturn(this, (ExternalAccountsPanel.__proto__ || Object.getPrototypeOf(ExternalAccountsPanel)).apply(this, arguments));
    }

    createClass(ExternalAccountsPanel, [{
        key: "render",
        value: function render() {
            var _this4 = this;

            if (this.options.user.codeforcesHandle) {
                var showImportHandle = this.options.user.username !== this.options.user.codeforcesHandle;
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = USER_CONSTANTS.username_regexes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var validator = _step2.value;

                        var usernameRegex = new RegExp(String.raw(_templateObject, validator.pattern));
                        if (!usernameRegex.test(this.options.user.codeforcesHandle)) {
                            showImportHandle = false;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                var importHandleButtonClass = "pull-right" + (showImportHandle ? "" : " hidden");
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Codeforces account")
                ), UI.createElement(
                    "p",
                    null,
                    UI.T("The following codeforces account is linked with your account:")
                ), UI.createElement(
                    "div",
                    { style: { "margin-top": "15px" } },
                    UI.createElement(
                        "a",
                        { href: "http://www.codeforces.com/profile/" + this.options.user.codeforcesHandle, target: "_blank" },
                        this.options.user.codeforcesHandle
                    ),
                    UI.createElement(Button, { label: UI.T("Unlink"), className: "pull-right", size: Size.EXTRA_SMALL, level: Level.DANGER,
                        onClick: function onClick() {
                            _this4.unlinkCodeforces();
                        } }),
                    UI.createElement(Button, { ref: "importHandleButton", label: UI.T("Import handle"), className: importHandleButtonClass, style: { "margin-right": "7px" },
                        size: Size.EXTRA_SMALL, level: Level.SUCCESS, onClick: function onClick() {
                            _this4.importCodeforcesHandle();
                        } })
                )];
            } else {
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Link Codeforces account")
                ), UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        FormField,
                        { ref: "handleGroup", label: UI.T("Handle") },
                        UI.createElement(TextInput, { ref: "handleInput" })
                    ),
                    UI.createElement(
                        FormField,
                        { label: " " },
                        UI.createElement(
                            "div",
                            null,
                            UI.createElement(AjaxButton, { ref: "getTokenButton", level: Level.PRIMARY, onClick: function onClick() {
                                    _this4.linkCodeforces();
                                },
                                statusOptions: ["Verify user", { faIcon: "spinner fa-spin", label: " Verifying user..." }, "User verified", "Failed"] })
                        )
                    ),
                    UI.createElement(
                        "div",
                        { ref: "sendTokenGroup", style: { "margin-top": "40px" }, className: "hidden" },
                        UI.createElement(
                            "p",
                            null,
                            UI.T("Send us a private message with this token:")
                        ),
                        UI.createElement(
                            FormField,
                            { label: "Token" },
                            UI.createElement(TextInput, { ref: "tokenInput", readonly: true })
                        ),
                        UI.createElement(
                            "p",
                            null,
                            UI.T("Click bellow to open Codeforces (in a new window) to send us this token:")
                        ),
                        UI.createElement(Button, { label: UI.T("Open Codeforces"), level: Level.PRIMARY,
                            onClick: function onClick() {
                                window.open("http://codeforces.com/usertalk?other=csacademy", "_blank");
                            } })
                    )
                )];
            }
        }
    }, {
        key: "linkCodeforces",
        value: function linkCodeforces() {
            var _this5 = this;

            this.handleGroup.removeError();
            this.sendTokenGroup.hide();

            this.getTokenButton.postJSON("/accounts/link_external_account/", {
                platform: "codeforces",
                username: this.handleInput.getValue()
            }).then(function (data) {
                _this5.tokenInput.setValue(data.token);
                _this5.tokenInput.addClickListener(function () {
                    _this5.tokenInput.node.select();
                });
                _this5.sendTokenGroup.show();

                if (_this5.codeforcesTokenTimeout != null) {
                    clearTimeout(_this5.codeforcesTokenTimeout);
                }
                _this5.codeforcesTokenTimeout = setTimeout(function () {
                    _this5.sendTokenGroup.hide();
                }, 10 * 60 * 1000);
            }, function (error) {
                _this5.handleGroup.setError(error.message);
            });
        }
    }, {
        key: "unlinkCodeforces",
        value: function unlinkCodeforces() {
            var request = {
                platform: "codeforces"
            };
            Ajax.postJSON("/accounts/unlink_external_account/", request).then(function (data) {
                UserStore.applyEvent({
                    objectId: data.user.id,
                    data: data.user
                });
            });
        }
    }, {
        key: "importCodeforcesHandle",
        value: function importCodeforcesHandle() {
            var request = {
                platform: "codeforces"
            };
            if (this.options.user.username && !confirm("Your current username (" + this.options.user.username + ")" + " will be available for other users to use. Are you sure you want to change your username?")) {
                return;
            }
            Ajax.postJSON("/accounts/import_external_username/", request).then(function (data) {
                UserStore.applyEvent({
                    objectId: data.user.id,
                    data: data.user
                });
            });
        }
    }]);
    return ExternalAccountsPanel;
}(Panel);

function setUserThemeProperty(key, value) {
    UserStore.getCurrentUser().saveCustomSetting("theme:" + key, value);
}

function setUserPredefinedTheme(value) {
    UserStore.getCurrentUser().saveCustomSetting("themeId", value);
}

var ThemeSettingsStyle = (_class$108 = function (_StyleSheet) {
    inherits(ThemeSettingsStyle, _StyleSheet);

    function ThemeSettingsStyle() {
        var _ref;

        var _temp, _this6, _ret;

        classCallCheck(this, ThemeSettingsStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this6 = possibleConstructorReturn(this, (_ref = ThemeSettingsStyle.__proto__ || Object.getPrototypeOf(ThemeSettingsStyle)).call.apply(_ref, [this].concat(args))), _this6), _this6.dimensions = 26, _this6.horizontalMargin = "1em", _this6.verticalMargin = 12, _initDefineProp$47(_this6, "themeSettingsPanel", _descriptor$46, _this6), _initDefineProp$47(_this6, "themeSettingsContainer", _descriptor2$40, _this6), _initDefineProp$47(_this6, "themeSettingsField", _descriptor3$34, _this6), _initDefineProp$47(_this6, "label", _descriptor4$30, _this6), _initDefineProp$47(_this6, "colorBox", _descriptor5$27, _this6), _initDefineProp$47(_this6, "textInput", _descriptor6$23, _this6), _initDefineProp$47(_this6, "button", _descriptor7$20, _this6), _initDefineProp$47(_this6, "paragraph", _descriptor8$17, _this6), _temp), possibleConstructorReturn(_this6, _ret);
    }

    return ThemeSettingsStyle;
}(StyleSheet), _descriptor$46 = _applyDecoratedDescriptor$48(_class$108.prototype, "themeSettingsPanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%"
        };
    }
}), _descriptor2$40 = _applyDecoratedDescriptor$48(_class$108.prototype, "themeSettingsContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            // maxWidth: "600px",
            // width: "600px",
        };
    }
}), _descriptor3$34 = _applyDecoratedDescriptor$48(_class$108.prototype, "themeSettingsField", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: "0 auto",
            marginTop: this.verticalMargin,
            display: "flex",
            flexDirection: "row",
            alignItems: "center",
            maxWidth: "600px"
        };
    }
}), _descriptor4$30 = _applyDecoratedDescriptor$48(_class$108.prototype, "label", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "40%",
            textAlign: "right",
            lineHeight: this.dimensions,
            marginRight: this.horizontalMargin,
            color: "#555"
        };
    }
}), _descriptor5$27 = _applyDecoratedDescriptor$48(_class$108.prototype, "colorBox", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.dimensions,
            width: this.dimensions,
            marginRight: this.horizontalMargin
        };
    }
}), _descriptor6$23 = _applyDecoratedDescriptor$48(_class$108.prototype, "textInput", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.dimensions,
            marginRight: this.horizontalMargin,
            flex: 1,
            outline: 0,
            minWidth: "30px",
            fontSize: "14px"
        };
    }
}), _descriptor7$20 = _applyDecoratedDescriptor$48(_class$108.prototype, "button", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.dimensions,
            padding: "0 10px !important",
            marginRight: this.horizontalMargin
        };
    }
}), _descriptor8$17 = _applyDecoratedDescriptor$48(_class$108.prototype, "paragraph", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "16px",
            wordBreak: "break-all"
        };
    }
}), _class$108);
var ThemeSettingsField = (_dec$52 = registerStyle(ThemeSettingsStyle), _dec$52(_class3$35 = function (_UI$Element) {
    inherits(ThemeSettingsField, _UI$Element);

    function ThemeSettingsField() {
        classCallCheck(this, ThemeSettingsField);
        return possibleConstructorReturn(this, (ThemeSettingsField.__proto__ || Object.getPrototypeOf(ThemeSettingsField)).apply(this, arguments));
    }

    createClass(ThemeSettingsField, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.themeSettingsField);
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                textInputStyle: this.options.textInputStyle || {},
                colorBoxStyle: this.options.colorBoxStyle || {}
            };
        }
    }, {
        key: "getCurrentThemeFieldValue",
        value: function getCurrentThemeFieldValue() {
            return Theme.Global.getProperty(this.options.fieldName);
        }
    }, {
        key: "getCustomThemeFieldValue",
        value: function getCustomThemeFieldValue() {
            var customTheme = USER.getCustomSetting("theme", {});
            var value = customTheme[this.options.fieldName];
            if (typeof value === "function") {
                return value();
            }
            return value;
        }
    }, {
        key: "getDefaultFieldValue",
        value: function getDefaultFieldValue() {
            var value = defaultThemeProperties[this.options.fieldName];
            if (typeof value === "function") {
                return value();
            }
            return value;
        }
    }, {
        key: "getInputValue",
        value: function getInputValue() {
            return this.input.getValue();
        }
    }, {
        key: "render",
        value: function render() {
            var _this8 = this;

            return [UI.createElement(
                "label",
                { className: this.styleSheet.label },
                UI.createElement(
                    "strong",
                    null,
                    this.options.label
                )
            ), UI.createElement(TextInput, { value: this.options.fieldValue,
                ref: "input",
                className: this.styleSheet.textInput,
                style: this.options.textInputStyle }), UI.createElement("div", { className: this.styleSheet.colorBox,
                style: this.options.colorBoxStyle }), UI.createElement(
                Button,
                { ref: "changeThemeButton",
                    onClick: function onClick() {
                        return _this8.applyThemeField();
                    },
                    level: Level.PRIMARY,
                    className: this.styleSheet.button },
                "Apply"
            ), UI.createElement(
                Button,
                { ref: "resetThemeButton",
                    onClick: function onClick() {
                        return _this8.resetThemeField();
                    },
                    level: Level.PRIMARY,
                    className: this.styleSheet.button },
                "Reset"
            )];
        }
    }, {
        key: "updateStyle",
        value: function updateStyle() {}
    }, {
        key: "updateField",
        value: function updateField() {
            this.updateOptions({
                fieldValue: this.getInputValue()
            });

            this.updateStyle();
        }
    }, {
        key: "applyThemeField",
        value: function applyThemeField() {
            var inputValue = this.getInputValue();

            setUserThemeProperty(this.options.fieldName, inputValue);
            this.updateOptions({
                fieldValue: inputValue
            });

            this.updateStyle();
        }
    }, {
        key: "resetThemeField",
        value: function resetThemeField() {
            setUserThemeProperty(this.options.fieldName, null);
            this.updateOptions({
                fieldValue: this.getDefaultFieldValue()
            });

            this.updateStyle();
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            this.input.onKeyUp(function () {
                _this9.updateField();
            });
        }
    }]);
    return ThemeSettingsField;
}(UI.Element)) || _class3$35);

var ThemeSettingsColorField = function (_ThemeSettingsField) {
    inherits(ThemeSettingsColorField, _ThemeSettingsField);

    function ThemeSettingsColorField() {
        classCallCheck(this, ThemeSettingsColorField);
        return possibleConstructorReturn(this, (ThemeSettingsColorField.__proto__ || Object.getPrototypeOf(ThemeSettingsColorField)).apply(this, arguments));
    }

    createClass(ThemeSettingsColorField, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            var fieldValue = this.getCustomThemeFieldValue();
            if (fieldValue == null || fieldValue === "null") {
                fieldValue = this.getCurrentThemeFieldValue();
            }

            return Object.assign({}, get(ThemeSettingsColorField.prototype.__proto__ || Object.getPrototypeOf(ThemeSettingsColorField.prototype), "getDefaultOptions", this).call(this), {
                fieldValue: fieldValue,
                colorBoxStyle: {
                    backgroundColor: fieldValue,
                    border: "2px solid " + (fieldValue && enhance(fieldValue, 0.2) || "black")
                }
            });
        }
    }, {
        key: "updateStyle",
        value: function updateStyle() {
            this.updateOptions({
                colorBoxStyle: {
                    backgroundColor: this.options.fieldValue,
                    border: "2px solid " + (fieldValue && enhance(fieldValue, 0.2) || "black")
                }
            });
        }
    }]);
    return ThemeSettingsColorField;
}(ThemeSettingsField);

var ThemeSettingsFontFamilyField = function (_ThemeSettingsField2) {
    inherits(ThemeSettingsFontFamilyField, _ThemeSettingsField2);

    function ThemeSettingsFontFamilyField() {
        classCallCheck(this, ThemeSettingsFontFamilyField);
        return possibleConstructorReturn(this, (ThemeSettingsFontFamilyField.__proto__ || Object.getPrototypeOf(ThemeSettingsFontFamilyField)).apply(this, arguments));
    }

    createClass(ThemeSettingsFontFamilyField, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            var fieldValue = this.getCustomThemeFieldValue();
            if (fieldValue == null || fieldValue === "null") {
                fieldValue = this.getCurrentThemeFieldValue();
            }

            return Object.assign({}, get(ThemeSettingsFontFamilyField.prototype.__proto__ || Object.getPrototypeOf(ThemeSettingsFontFamilyField.prototype), "getDefaultOptions", this).call(this), {
                fieldValue: fieldValue,
                textInputStyle: {
                    fontFamily: fieldValue
                }
            });
        }
    }, {
        key: "updateStyle",
        value: function updateStyle() {
            this.updateOptions({
                textInputStyle: {
                    fontFamily: this.options.fieldValue
                }
            });
        }
    }]);
    return ThemeSettingsFontFamilyField;
}(ThemeSettingsField);

var ThemeSettingsPanel = (_dec2$21 = registerStyle(ThemeSettingsStyle), _dec2$21(_class4$7 = function (_Panel2) {
    inherits(ThemeSettingsPanel, _Panel2);

    function ThemeSettingsPanel(options) {
        classCallCheck(this, ThemeSettingsPanel);

        var _this12 = possibleConstructorReturn(this, (ThemeSettingsPanel.__proto__ || Object.getPrototypeOf(ThemeSettingsPanel)).call(this, options));

        _this12.colorFields = [{
            label: "Primary Color",
            fieldName: "COLOR_PRIMARY"
        }, {
            label: "Secondary Color",
            fieldName: "COLOR_SECONDARY"
        }, {
            label: "Primary Background Color",
            fieldName: "COLOR_BACKGROUND_BODY"
        }, {
            label: "Secondary Background Color",
            fieldName: "COLOR_BACKGROUND_ALTERNATIVE"
        }];
        _this12.fontFamilyFields = [{
            label: "Primary Font Family",
            fieldName: "FONT_FAMILY_DEFAULT"
        }];
        return _this12;
    }

    createClass(ThemeSettingsPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.themeSettingsPanel);
        }
    }, {
        key: "render",
        value: function render() {
            var themeSettingsColorFields = this.colorFields.map(function (colorField, index) {
                return UI.createElement(ThemeSettingsColorField, { label: colorField.label,
                    fieldName: colorField.fieldName });
            });

            var themeSettingsFontFamilyFields = this.fontFamilyFields.map(function (fontFamilyField, index) {
                return UI.createElement(ThemeSettingsFontFamilyField, { label: fontFamilyField.label,
                    fieldName: fontFamilyField.fieldName });
            });

            return [UI.createElement(
                "h3",
                null,
                "Theme"
            ), UI.createElement(
                "p",
                { className: this.styleSheet.paragraph },
                "Color examples:",
                UI.createElement(
                    "code",
                    null,
                    "#345abc"
                ),
                ",",
                UI.createElement(
                    "code",
                    null,
                    "#678"
                ),
                ",",
                UI.createElement(
                    "code",
                    null,
                    "rgb(123,123,123)"
                ),
                ",",
                UI.createElement(
                    "code",
                    null,
                    "rgba(123,123,123,0.5)"
                ),
                ",",
                UI.createElement(
                    "code",
                    null,
                    "blue"
                ),
                ",",
                UI.createElement(
                    "code",
                    null,
                    "aqua"
                ),
                "."
            ), UI.createElement(
                "p",
                { className: this.styleSheet.paragraph },
                "Font examples:",
                UI.createElement(
                    "code",
                    null,
                    "monospace"
                ),
                ",",
                UI.createElement(
                    "code",
                    null,
                    "Arial"
                ),
                ",",
                UI.createElement(
                    "code",
                    null,
                    "cursive"
                ),
                ",",
                UI.createElement(
                    "code",
                    null,
                    "Helvetica"
                ),
                "."
            ), UI.createElement(
                "p",
                { className: this.styleSheet.paragraph },
                "Select your theme:\xA0",
                UI.createElement(Select, { options: [{
                        value: "",
                        toString: function toString() {
                            return "Current theme";
                        }
                    }, {
                        value: "1",
                        toString: function toString() {
                            return "Default";
                        }
                    }, {
                        value: "2",
                        toString: function toString() {
                            return "Dark";
                        }
                    }, {
                        value: "3",
                        toString: function toString() {
                            return "Console";
                        }
                    }, {
                        value: "custom",
                        toString: function toString() {
                            return "Custom";
                        }
                    }], ref: "select" })
            ), UI.createElement(
                "p",
                { className: this.styleSheet.paragraph },
                "Configure custom theme settings:"
            ), UI.createElement(
                "div",
                { className: this.styleSheet.themeSettingsContainer },
                themeSettingsColorFields,
                themeSettingsFontFamilyFields
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this13 = this;

            this.select.addChangeListener(function () {
                setUserPredefinedTheme(_this13.select.get().value);
            });
        }
    }]);
    return ThemeSettingsPanel;
}(Panel)) || _class4$7);

var AccountSettingsPanel = function (_UserSettingsPanel) {
    inherits(AccountSettingsPanel, _UserSettingsPanel);

    function AccountSettingsPanel() {
        classCallCheck(this, AccountSettingsPanel);
        return possibleConstructorReturn(this, (AccountSettingsPanel.__proto__ || Object.getPrototypeOf(AccountSettingsPanel)).apply(this, arguments));
    }

    createClass(AccountSettingsPanel, [{
        key: "getPanels",
        value: function getPanels() {
            return [UI.createElement(CSAGeneralInformationPanel, { title: UI.T("General Info"), active: true,
                user: this.getUser(), ref: "generalPanel", tabHref: this.getUrlPrefix("general") }), UI.createElement(EmailPanel, { title: UI.T("Email"), user: this.getUser(),
                ref: "emailPanel", tabHref: this.getUrlPrefix("email") }), UI.createElement(ExternalAccountsPanel, { title: UI.T("External accounts"),
                user: this.getUser(), ref: "externalPanel", tabHref: this.getUrlPrefix("external") }), UI.createElement(SocialAccountsPanel, { title: UI.T("Social accounts"), user: this.getUser(),
                ref: "socialPanel", tabHref: this.getUrlPrefix("social") }), UI.createElement(SecuritySettingsPanel, { title: UI.T("Security"),
                user: this.getUser(), ref: "securityPanel", tabHref: this.getUrlPrefix("security") }), UI.createElement(ThemeSettingsPanel, { title: UI.T("Theme"),
                user: this.getUser(), ref: "themePanel", tabHref: this.getUrlPrefix("theme") })];
        }
    }]);
    return AccountSettingsPanel;
}(UserSettingsPanel);

var EmailConfirmed = function (_UI$Element) {
    inherits(EmailConfirmed, _UI$Element);

    function EmailConfirmed() {
        classCallCheck(this, EmailConfirmed);
        return possibleConstructorReturn(this, (EmailConfirmed.__proto__ || Object.getPrototypeOf(EmailConfirmed)).apply(this, arguments));
    }

    createClass(EmailConfirmed, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                textAlign: "center"
            });
        }
    }, {
        key: "render",
        value: function render() {
            if (this.options.confirmSuccess) {
                location.replace("/accounts/settings/");
            }
            return [UI.createElement(
                "div",
                null,
                UI.createElement(
                    "h1",
                    null,
                    "Invalid email confirmation link."
                ),
                UI.createElement(
                    "h3",
                    null,
                    "The email confirmation link is incomplete or has been used already."
                )
            )];
        }
    }]);
    return EmailConfirmed;
}(UI.Element);

var EmailUnsubscribe = function (_UI$Element) {
    inherits(EmailUnsubscribe, _UI$Element);

    function EmailUnsubscribe() {
        classCallCheck(this, EmailUnsubscribe);
        return possibleConstructorReturn(this, (EmailUnsubscribe.__proto__ || Object.getPrototypeOf(EmailUnsubscribe)).apply(this, arguments));
    }

    createClass(EmailUnsubscribe, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                textAlign: "center"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var message = void 0;

            if (this.options.unsubscribeSuccess) {
                message = UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "h1",
                        null,
                        "Email unsubscribed!"
                    ),
                    UI.createElement(
                        "h3",
                        null,
                        "You can continue navigating on the website."
                    ),
                    UI.createElement(Link, { href: "/accounts/settings/", className: ButtonStyle.getInstance().DEFAULT, value: "Edit user profile" })
                );
            } else {
                message = UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "h1",
                        null,
                        "Invalid email unsubscribe link."
                    ),
                    UI.createElement(
                        "h3",
                        null,
                        "Please try to change the settings from your profile page."
                    )
                );
            }

            return message;
        }
    }]);
    return EmailUnsubscribe;
}(UI.Element);

var PasswordReset = function (_UI$Element) {
    inherits(PasswordReset, _UI$Element);

    function PasswordReset() {
        classCallCheck(this, PasswordReset);
        return possibleConstructorReturn(this, (PasswordReset.__proto__ || Object.getPrototypeOf(PasswordReset)).apply(this, arguments));
    }

    createClass(PasswordReset, [{
        key: "render",
        value: function render() {
            var _this2 = this;

            if (USER.isAuthenticated) {
                window.location.href = "/accounts/settings/";
            }

            return [UI.createElement(
                "div",
                { className: "text-center" },
                UI.createElement(
                    "h1",
                    null,
                    "Password reset"
                ),
                UI.createElement(
                    "p",
                    null,
                    "Forgotten your password? Enter your e-mail address below, and we'll send you an e-mail allowing you to reset it."
                )
            ), UI.createElement(
                FormField,
                { ref: "emailFormField", label: "Email" },
                UI.createElement(TextInput, { ref: "emailInput" })
            ), UI.createElement(
                FormField,
                { label: " " },
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(AjaxButton, { ref: "resetPasswordButton", level: Level.PRIMARY, onClick: function onClick() {
                            return _this2.sendPasswordReset();
                        },
                        statusOptions: ["Send password reset email", { faIcon: "spinner fa-spin", label: " Sending..." }, "Email sent", "Email failed"] })
                )
            )];
        }
    }, {
        key: "sendPasswordReset",
        value: function sendPasswordReset() {
            var _this3 = this;

            this.emailFormField.removeError();

            var url = window.location.href;
            if (!url.endsWith("/")) {
                url += "/";
            }

            this.resetPasswordButton.postJSON(url, {
                email: this.emailInput.getValue().trim()
            }).then(function () {}, function (error) {
                return _this3.emailFormField.setError(error.message);
            });
        }
    }]);
    return PasswordReset;
}(UI.Element);

var CodeforcesUserRatingBackground = function (_SVG$Group) {
    inherits(CodeforcesUserRatingBackground, _SVG$Group);

    function CodeforcesUserRatingBackground() {
        classCallCheck(this, CodeforcesUserRatingBackground);
        return possibleConstructorReturn(this, (CodeforcesUserRatingBackground.__proto__ || Object.getPrototypeOf(CodeforcesUserRatingBackground)).apply(this, arguments));
    }

    createClass(CodeforcesUserRatingBackground, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                ratingBands: [{
                    color: "#AA0000",
                    minRating: 2900,
                    maxRating: 5000
                }, {
                    color: "#FF3333",
                    minRating: 2600,
                    maxRating: 2900
                }, {
                    color: "#FF7777",
                    minRating: 2400,
                    maxRating: 2600
                }, {
                    color: "#FFBB55",
                    minRating: 2300,
                    maxRating: 2400
                }, {
                    color: "#FFCC88",
                    minRating: 2200,
                    maxRating: 2300
                }, {
                    color: "#FF88FF",
                    minRating: 1900,
                    maxRating: 2200
                }, {
                    color: "#AAAAFF",
                    minRating: 1600,
                    maxRating: 1900
                }, {
                    color: "#77DDBB",
                    minRating: 1400,
                    maxRating: 1600
                }, {
                    color: "#77FF77",
                    minRating: 1200,
                    maxRating: 1400
                }, {
                    color: "#CCCCCC",
                    minRating: 0,
                    maxRating: 1200
                }],
                interpolation: "linear"
            };
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(CodeforcesUserRatingBackground.prototype.__proto__ || Object.getPrototypeOf(CodeforcesUserRatingBackground.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("pointer-events", "none");
            attr.setAttribute("clip-path", this.options.chart.clipPath);
            return attr;
        }
    }, {
        key: "getRatingBands",
        value: function getRatingBands() {
            var _this2 = this;

            this.ratingBands = [];
            this.showBandsAsPaths = true;

            if (this.showBandsAsPaths) {
                // Create the area path generator
                this.areaPathGenerator = area().y0(function (bandData) {
                    return _this2.options.chart.yAxisOptions.scale(bandData.minRating);
                }).y1(function (bandData) {
                    return _this2.options.chart.yAxisOptions.scale(bandData.maxRating);
                }).x(function (bandData) {
                    return bandData.x;
                });

                // Create the rating bands
                for (var i = 0; i < this.options.ratingBands.length; i += 1) {
                    var bandData = this.options.ratingBands[i];
                    this.ratingBands[i] = UI.createElement(SVG.Path, { ref: this.refLinkArray("ratingBands", i), d: this.areaPathGenerator([Object.assign({}, bandData, { x: this.options.chart.xAxisOptions.scale.range()[0] }), Object.assign({}, bandData, { x: this.options.chart.xAxisOptions.scale.range()[1] })]),
                        fill: bandData.color, stroke: "none" });
                }
            } else {
                // Create the rating bands
                for (var _i = 0; _i < this.options.ratingBands.length; _i += 1) {
                    var _bandData = this.options.ratingBands[_i];
                    this.ratingBands[_i] = UI.createElement(SVG.Rect, { ref: this.refLinkArray("ratingBands", _i),
                        x: this.options.chart.xAxisOptions.scale.range()[0],
                        y: this.options.chart.yAxisOptions.scale(_bandData.maxRating),
                        width: this.options.chart.xAxisOptions.scale.range()[1] - this.options.chart.xAxisOptions.scale.range()[0],
                        height: this.options.chart.yAxisOptions.scale(_bandData.minRating) - this.options.chart.yAxisOptions.scale(_bandData.maxRating),
                        fill: _bandData.color, stroke: "none" });
                }
            }
            return this.ratingBands;
        }
    }, {
        key: "render",
        value: function render() {
            return this.getRatingBands();
        }
    }]);
    return CodeforcesUserRatingBackground;
}(SVG.Group);

var CodeforcesUserRatingChart = function (_TimeChart) {
    inherits(CodeforcesUserRatingChart, _TimeChart);

    function CodeforcesUserRatingChart() {
        classCallCheck(this, CodeforcesUserRatingChart);
        return possibleConstructorReturn(this, (CodeforcesUserRatingChart.__proto__ || Object.getPrototypeOf(CodeforcesUserRatingChart)).apply(this, arguments));
    }

    createClass(CodeforcesUserRatingChart, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(CodeforcesUserRatingChart.prototype.__proto__ || Object.getPrototypeOf(CodeforcesUserRatingChart.prototype), "getDefaultOptions", this).call(this), {
                domainPadding: [0.4, 0.25],
                paddingYOnNoPoints: 500,
                zoomScaleExtent: [1, 50]
            });
        }
    }, {
        key: "defaultYNoPoints",
        value: function defaultYNoPoints() {
            return [1000, 3000];
        }
    }, {
        key: "getBackground",
        value: function getBackground() {
            return UI.createElement(CodeforcesUserRatingBackground, { ref: this.refLink("background"), chart: this });
        }
    }]);
    return CodeforcesUserRatingChart;
}(TimeChart);

var CodeforcesRatingPoint = function (_PointPlotElement) {
    inherits(CodeforcesRatingPoint, _PointPlotElement);

    function CodeforcesRatingPoint() {
        classCallCheck(this, CodeforcesRatingPoint);
        return possibleConstructorReturn(this, (CodeforcesRatingPoint.__proto__ || Object.getPrototypeOf(CodeforcesRatingPoint)).apply(this, arguments));
    }

    createClass(CodeforcesRatingPoint, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(CodeforcesRatingPoint.prototype.__proto__ || Object.getPrototypeOf(CodeforcesRatingPoint.prototype), "getDefaultOptions", this).call(this), {
                fill: "white",
                radius: 5,
                stroke: "rgba(0, 0, 0, .5)",
                strokeWidth: 1.5,
                style: {
                    cursor: "pointer"
                }
            });
        }
    }, {
        key: "getPopupTitle",
        value: function getPopupTitle() {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.data;

            var contestName = data.contestName.replace("Codeforces", "CF").replace("<br>", "\n");
            return UI.createElement(
                "a",
                { href: "http://codeforces.com/contest/" + data.contestId, target: "_blank" },
                contestName
            );
        }
    }, {
        key: "getPopupContent",
        value: function getPopupContent() {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.data;

            return [UI.createElement(
                "p",
                null,
                "Rating: " + data.newRating + " (" + data.ratingChange + ")"
            ), UI.createElement(
                "p",
                null,
                "Title: " + data.title
            ), UI.createElement(
                "a",
                { href: "http://codeforces.com" + data.contestUrl, target: "_blank" },
                "Contest rank: " + data.rank
            )];
        }
    }, {
        key: "getPopupPosition",
        value: function getPopupPosition() {
            var boundingRect = this.getBoundingClientRect();
            return {
                x: boundingRect.left + boundingRect.width / 2,
                y: boundingRect.bottom - boundingRect.height * 0.1
            };
        }
    }, {
        key: "isPopupVisible",
        value: function isPopupVisible() {
            var chartBoundingRect = this.parent.options.chart.interactiveLayer.getBoundingClientRect();
            var popupPosition = this.getPopupPosition();
            return chartBoundingRect.left <= popupPosition.x && popupPosition.x <= chartBoundingRect.right && chartBoundingRect.top <= popupPosition.y && popupPosition.y <= chartBoundingRect.bottom;
            //return (this.options.xAxisScale.range()[0] <= this.options.center.x &&
            //    this.options.center.x <= this.options.xAxisScale.range()[1]) &&
            //    (this.options.yAxisScale.range()[0] >= this.options.center.y &&
            //    this.options.center.y >= this.options.yAxisScale.range()[1]);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            this.addClickListener(function (event) {
                event.preventDefault();
                event.stopPropagation();
                if (_this5.popup && _this5.popup.isInDocument()) {
                    _this5.popup.hide();
                    return;
                }
                _this5.popup = Popup.create(document.body, Object.assign({
                    title: _this5.getPopupTitle(),
                    children: _this5.getPopupContent(),
                    transitionTime: 300,
                    titleFontSize: "9pt",
                    contentFontSize: "9pt",
                    style: {
                        minWidth: "180px",
                        maxWidth: "250px"
                    }
                }, _this5.getPopupPosition()));
            });
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(CodeforcesRatingPoint.prototype.__proto__ || Object.getPrototypeOf(CodeforcesRatingPoint.prototype), "redraw", this).call(this);
            if (this.popup) {
                if (this.popup.isInDocument()) {
                    this.popup.setCenter(this.getPopupPosition());
                }
                if (!this.isPopupVisible()) {
                    this.popup.hide();
                }
            }
        }
    }]);
    return CodeforcesRatingPoint;
}(PointPlotElement);

var CodeforcesRatingPointPlot = PointPlot(CodeforcesRatingPoint);

var CodeforcesUserRatingSVG = function (_SVG$SVGRoot) {
    inherits(CodeforcesUserRatingSVG, _SVG$SVGRoot);

    function CodeforcesUserRatingSVG() {
        classCallCheck(this, CodeforcesUserRatingSVG);
        return possibleConstructorReturn(this, (CodeforcesUserRatingSVG.__proto__ || Object.getPrototypeOf(CodeforcesUserRatingSVG)).apply(this, arguments));
    }

    createClass(CodeforcesUserRatingSVG, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(CodeforcesUserRatingSVG.prototype.__proto__ || Object.getPrototypeOf(CodeforcesUserRatingSVG.prototype), "setOptions", this).call(this, options);

            this.chartOptions = {
                height: 500,
                width: 970
            };
            if (!this.options.data.hasOwnProperty("result")) {
                this.options.data["result"] = [];
            }
            this.plotOptions = {
                pointsAlias: function pointsAlias(data) {
                    return data.result;
                },
                xCoordinateAlias: function xCoordinateAlias(data) {
                    return data.contestTime;
                },
                yCoordinateAlias: function yCoordinateAlias(data) {
                    return data.newRating;
                }
            };

            this.linePlotOptions = Object.assign({}, this.plotOptions, {
                stroke: "rgba(0, 0, 0, .5)",
                strokeWidth: 2.5
            });
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(CodeforcesUserRatingSVG.prototype.__proto__ || Object.getPrototypeOf(CodeforcesUserRatingSVG.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("height", this.chartOptions.height);
            attr.setAttribute("width", this.chartOptions.width);
            return attr;
        }
    }, {
        key: "render",
        value: function render() {

            return [UI.createElement(
                CodeforcesUserRatingChart,
                { chartOptions: Object.assign({}, this.chartOptions),
                    plotOptions: this.plotOptions, data: this.options.data },
                UI.createElement(LinePlot, { plotOptions: this.linePlotOptions, data: this.options.data }),
                UI.createElement(CodeforcesRatingPointPlot, { plotOptions: this.plotOptions, data: this.options.data })
            )];
        }
    }]);
    return CodeforcesUserRatingSVG;
}(SVG.SVGRoot);

var CSAUserRatingBackground = function (_SVG$Group2) {
    inherits(CSAUserRatingBackground, _SVG$Group2);

    function CSAUserRatingBackground() {
        classCallCheck(this, CSAUserRatingBackground);
        return possibleConstructorReturn(this, (CSAUserRatingBackground.__proto__ || Object.getPrototypeOf(CSAUserRatingBackground)).apply(this, arguments));
    }

    createClass(CSAUserRatingBackground, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                ratingBands: window.RATING_BANDS,
                interpolation: "linear"
            };
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(CSAUserRatingBackground.prototype.__proto__ || Object.getPrototypeOf(CSAUserRatingBackground.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("pointer-events", "none");
            attr.setAttribute("clip-path", this.options.chart.clipPath);
            return attr;
        }
    }, {
        key: "getRatingBands",
        value: function getRatingBands() {
            var _this8 = this;

            this.ratingBands = [];
            this.showBandsAsPaths = true;

            if (this.showBandsAsPaths) {
                // Create the area path generator
                this.areaPathGenerator = area().y0(function (bandData) {
                    return _this8.options.chart.yAxisOptions.scale(bandData.minRating);
                }).y1(function (bandData) {
                    return _this8.options.chart.yAxisOptions.scale(bandData.maxRating);
                }).x(function (bandData) {
                    return bandData.x;
                });

                // Create the rating bands
                for (var i = 0; i < this.options.ratingBands.length; i += 1) {
                    var bandData = this.options.ratingBands[i];
                    this.ratingBands[i] = UI.createElement(SVG.Path, { ref: this.refLinkArray("ratingBands", i), d: this.areaPathGenerator([Object.assign({}, bandData, { x: this.options.chart.xAxisOptions.scale.range()[0] }), Object.assign({}, bandData, { x: this.options.chart.xAxisOptions.scale.range()[1] })]),
                        fill: bandData.color, stroke: "none" });
                }
            } else {
                // Create the rating bands
                for (var _i2 = 0; _i2 < this.options.ratingBands.length; _i2 += 1) {
                    var _bandData2 = this.options.ratingBands[_i2];
                    this.ratingBands[_i2] = UI.createElement(SVG.Rect, { ref: this.refLinkArray("ratingBands", _i2),
                        x: this.options.chart.xAxisOptions.scale.range()[0],
                        y: this.options.chart.yAxisOptions.scale(_bandData2.maxRating),
                        width: this.options.chart.xAxisOptions.scale.range()[1] - this.options.chart.xAxisOptions.scale.range()[0],
                        height: this.options.chart.yAxisOptions.scale(_bandData2.minRating) - this.options.chart.yAxisOptions.scale(_bandData2.maxRating),
                        fill: _bandData2.color, stroke: "none" });
                }
            }
            return this.ratingBands;
        }
    }, {
        key: "render",
        value: function render() {
            return this.getRatingBands();
        }
    }]);
    return CSAUserRatingBackground;
}(SVG.Group);

var CSAUserRatingChart = function (_TimeChart2) {
    inherits(CSAUserRatingChart, _TimeChart2);

    function CSAUserRatingChart() {
        classCallCheck(this, CSAUserRatingChart);
        return possibleConstructorReturn(this, (CSAUserRatingChart.__proto__ || Object.getPrototypeOf(CSAUserRatingChart)).apply(this, arguments));
    }

    createClass(CSAUserRatingChart, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(CSAUserRatingChart.prototype.__proto__ || Object.getPrototypeOf(CSAUserRatingChart.prototype), "getDefaultOptions", this).call(this), {
                domainPadding: [0.4, 0.25],
                zoomScaleExtent: [1, 20]
            });
        }
    }, {
        key: "getYAxisDomain",
        value: function getYAxisDomain(points, coordinateAlias) {
            if (!Array.isArray(points) || points.length === 0) {
                return [1450, 1750];
            }
            var domain = this.getMinMaxDomain(points, coordinateAlias, 200);
            return [Math.min(domain[0], 1450), Math.max(domain[1], 1750)];
        }
    }, {
        key: "getBackground",
        value: function getBackground() {
            return UI.createElement(CSAUserRatingBackground, { ref: this.refLink("background"), chart: this });
        }
    }]);
    return CSAUserRatingChart;
}(TimeChart);

var CSARatingPoint = function (_PointPlotElement2) {
    inherits(CSARatingPoint, _PointPlotElement2);

    function CSARatingPoint() {
        classCallCheck(this, CSARatingPoint);
        return possibleConstructorReturn(this, (CSARatingPoint.__proto__ || Object.getPrototypeOf(CSARatingPoint)).apply(this, arguments));
    }

    createClass(CSARatingPoint, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(CSARatingPoint.prototype.__proto__ || Object.getPrototypeOf(CSARatingPoint.prototype), "getDefaultOptions", this).call(this), {
                fill: "white",
                radius: 5,
                stroke: "rgba(0, 0, 0, .5)",
                strokeWidth: 1.5,
                style: {
                    cursor: "pointer"
                }
            });
        }
    }, {
        key: "getPopupTitle",
        value: function getPopupTitle() {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.data;

            return UI.createElement(
                "a",
                { href: "/contest/" + data.contestURL, target: "_blank" },
                data.contest
            );
        }
    }, {
        key: "getPopupContent",
        value: function getPopupContent() {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.data;

            var ratingChange = Math.floor(data.rating) - Math.floor(data.oldRating);

            var ratingChangeStyle = void 0;
            if (ratingChange < 0) {
                ratingChangeStyle = {
                    color: "red"
                };
            } else {
                ratingChangeStyle = {
                    color: "green"
                };
            }

            var ratingChangeDisplay = UI.createElement(
                "span",
                { style: ratingChangeStyle },
                (ratingChange > 0 ? "+" : "") + ratingChange
            );

            return [UI.createElement(
                "p",
                null,
                "Rating: " + Math.floor(data.rating),
                " (",
                ratingChangeDisplay,
                ")"
            ), UI.createElement(
                "a",
                { href: "/contest/" + data.contestURL + "/scoreboard", target: "_blank" },
                "Contest rank: " + data.rank
            )];
        }
    }, {
        key: "getPopupPosition",
        value: function getPopupPosition() {
            var boundingRect = this.getBoundingClientRect();
            return {
                x: boundingRect.left + boundingRect.width / 2,
                y: boundingRect.bottom - boundingRect.height * 0.1
            };
        }
    }, {
        key: "isPopupVisible",
        value: function isPopupVisible() {
            var chartBoundingRect = this.parent.options.chart.interactiveLayer.getBoundingClientRect();
            var popupPosition = this.getPopupPosition();
            return chartBoundingRect.left <= popupPosition.x && popupPosition.x <= chartBoundingRect.right && chartBoundingRect.top <= popupPosition.y && popupPosition.y <= chartBoundingRect.bottom;
            //return (this.options.xAxisScale.range()[0] <= this.options.center.x &&
            //    this.options.center.x <= this.options.xAxisScale.range()[1]) &&
            //    (this.options.yAxisScale.range()[0] >= this.options.center.y &&
            //    this.options.center.y >= this.options.yAxisScale.range()[1]);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            this.addClickListener(function (event) {
                event.preventDefault();
                event.stopPropagation();
                if (_this11.popup && _this11.popup.isInDocument()) {
                    _this11.popup.hide();
                    return;
                }
                _this11.popup = Popup.create(document.body, Object.assign({
                    title: _this11.getPopupTitle(),
                    children: _this11.getPopupContent(),
                    transitionTime: 300,
                    titleFontSize: "9pt",
                    contentFontSize: "9pt",
                    style: {
                        maxWidth: "270px"
                    }
                }, _this11.getPopupPosition()));
            });
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(CSARatingPoint.prototype.__proto__ || Object.getPrototypeOf(CSARatingPoint.prototype), "redraw", this).call(this);
            if (this.popup) {
                if (this.popup.isInDocument()) {
                    this.popup.setCenter(this.getPopupPosition());
                }
                if (!this.isPopupVisible()) {
                    this.popup.hide();
                }
            }
        }
    }]);
    return CSARatingPoint;
}(PointPlotElement);

var CSARatingPointPlot = PointPlot(CSARatingPoint);

var CSAUserRatingSVG = function (_SVG$SVGRoot2) {
    inherits(CSAUserRatingSVG, _SVG$SVGRoot2);

    function CSAUserRatingSVG() {
        classCallCheck(this, CSAUserRatingSVG);
        return possibleConstructorReturn(this, (CSAUserRatingSVG.__proto__ || Object.getPrototypeOf(CSAUserRatingSVG)).apply(this, arguments));
    }

    createClass(CSAUserRatingSVG, [{
        key: "setOptions",
        value: function setOptions(options) {
            var _this13 = this;

            get(CSAUserRatingSVG.prototype.__proto__ || Object.getPrototypeOf(CSAUserRatingSVG.prototype), "setOptions", this).call(this, options);

            this.chartOptions = {
                height: 500,
                width: 970
            };
            if (!this.options.data.hasOwnProperty("contestHistory")) {
                this.options.data["contestHistory"] = [];
            }

            this.plotOptions = {
                pointsAlias: function pointsAlias(data) {
                    return data.contestHistory;
                },
                xCoordinateAlias: function xCoordinateAlias(data) {
                    return data.contestEndDate * 1000;
                },
                yCoordinateAlias: function yCoordinateAlias(data) {
                    return Math.floor(data.rating);
                }
            };

            this.plotOptions.pointsAlias(this.options.data).sort(function (a, b) {
                return _this13.plotOptions.xCoordinateAlias(a) - _this13.plotOptions.xCoordinateAlias(b);
            });

            this.linePlotOptions = Object.assign({}, this.plotOptions, {
                stroke: "rgba(0, 0, 0, .5)",
                strokeWidth: 2.5
            });
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(CSAUserRatingSVG.prototype.__proto__ || Object.getPrototypeOf(CSAUserRatingSVG.prototype), "getNodeAttributes", this).call(this);
            attr.setAttribute("height", this.chartOptions.height);
            attr.setAttribute("width", this.chartOptions.width);
            return attr;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                CSAUserRatingChart,
                { chartOptions: Object.assign({}, this.chartOptions),
                    plotOptions: this.plotOptions, data: this.options.data },
                UI.createElement(LinePlot, { plotOptions: this.linePlotOptions, data: this.options.data }),
                UI.createElement(CSARatingPointPlot, { plotOptions: this.plotOptions, data: this.options.data })
            )];
        }
    }]);
    return CSAUserRatingSVG;
}(SVG.SVGRoot);

var LinkLabel = UI.Primitive(Label, "a");

var ActivityPanel = function (_UI$Element) {
    inherits(ActivityPanel, _UI$Element);

    function ActivityPanel() {
        classCallCheck(this, ActivityPanel);
        return possibleConstructorReturn(this, (ActivityPanel.__proto__ || Object.getPrototypeOf(ActivityPanel)).apply(this, arguments));
    }

    createClass(ActivityPanel, [{
        key: "getTaskLinks",
        value: function getTaskLinks() {
            var taskLinks = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = EvalTaskUserSummaryStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var summary = _step.value;

                    if (summary.userId === this.options.user.id && summary.solved) {
                        taskLinks.push(UI.createElement(
                            LinkLabel,
                            { style: { margin: "4px", display: "inline-block" }, target: "_blank",
                                href: "/contest/archive/task/" + EvalTaskStore.get(summary.evalTaskId).urlName,
                                level: Level.INFO },
                            EvalTaskStore.get(summary.evalTaskId).longName
                        ));
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return taskLinks;
        }
    }, {
        key: "getContestLinks",
        value: function getContestLinks() {
            var contestLinks = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = ContestUserStore.all()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var contestUser = _step2.value;

                    if (contestUser.userId === this.options.user.id) {
                        var contest = contestUser.getBaseContest();
                        contestLinks.push(UI.createElement(
                            "p",
                            null,
                            UI.createElement(Link, { href: "/contest/" + contest.name, value: contest.longName })
                        ));
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return contestLinks;
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            if (this.options.loaded) {
                //let reputation;
                //if (USER.isSuperUser) {
                //    reputation = [
                //        <h4 style={{"margin-left": "35px"}}>{UI.T("Contribution")}</h4>,
                //        <LargeReputationWidget reputation={this.options.user.reputation} style={{"margin-left": "50px", "margin-bottom": "20px"}}/>
                //    ];
                //}
                var taskLinks = this.getTaskLinks();
                var contestLinks = this.getContestLinks();
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Activity")
                ), UI.createElement(
                    "h4",
                    { style: { "margin-left": "35px" } },
                    UI.T("Algorithms")
                ), UI.createElement(
                    "div",
                    { style: { "margin-bottom": "20px", "display": "inline-flex" } },
                    UI.createElement(
                        "div",
                        { style: { "width": "40%", "margin-left": "50px", "display": "inline-block" } },
                        UI.createElement(
                            "span",
                            { style: { "font-size": "1.3em", "margin-bottom": "10px" } },
                            UI.T("Problems solved"),
                            ": ",
                            taskLinks.length
                        ),
                        UI.createElement(
                            "div",
                            { style: {
                                    "max-height": "200px",
                                    "overflow-y": "auto",
                                    "overflow-x": "none",
                                    "background-color": "#f3f4f6",
                                    "padding": "5px",
                                    "font-size": "1.2em"
                                } },
                            taskLinks
                        )
                    ),
                    UI.createElement(
                        "div",
                        { style: { "width": "40%", "margin-left": "20px", "display": "inline-block" } },
                        UI.createElement(
                            "span",
                            { style: { "font-size": "1.3em", "margin-bottom": "10px" } },
                            UI.T("Contest history"),
                            ": ",
                            contestLinks.length
                        ),
                        UI.createElement(
                            "div",
                            { style: {
                                    "max-height": "200px",
                                    "overflow-y": "auto",
                                    "overflow-x": "none",
                                    "background-color": "#f3f4f6",
                                    "padding": "5px",
                                    "font-size": "1.2em"
                                } },
                            contestLinks
                        )
                    )
                )

                //TODO: interviews
                ];
            }
            if (this.options.errorInLoading) {
                return [UI.createElement(
                    "h3",
                    null,
                    UI.T("Activity")
                ), UI.createElement(
                    "p",
                    { style: { "marginLeft": "50px" } },
                    "Error in loading activity"
                )];
            }
            Ajax.getJSON("/accounts/user_activity/", {
                "userId": this.options.user.id
            }).then(function () {
                return _this2.updateOptions({ loaded: true });
            }, function () {
                return _this2.updateOptions({ errorInLoading: true });
            });
            return [UI.createElement(
                "h3",
                null,
                UI.T("Activity")
            ), UI.createElement(
                "p",
                { style: { "marginLeft": "50px" } },
                "Loading..."
            )];
        }
    }]);
    return ActivityPanel;
}(UI.Element);

var ProfilePanel = function (_Panel) {
    inherits(ProfilePanel, _Panel);

    function ProfilePanel() {
        classCallCheck(this, ProfilePanel);
        return possibleConstructorReturn(this, (ProfilePanel.__proto__ || Object.getPrototypeOf(ProfilePanel)).apply(this, arguments));
    }

    createClass(ProfilePanel, [{
        key: "render",
        value: function render() {
            var infos = [UI.createElement(
                "p",
                null,
                "Username: ",
                UI.createElement(UserHandle, { style: { display: "inline" }, userId: this.options.user.id })
            )];
            if (this.options.user.name != "") {
                infos.push(UI.createElement(
                    "p",
                    null,
                    "Name: " + this.options.user.name
                ));
            }
            if (this.options.user.globalRatingRank) {
                infos.push(UI.createElement(
                    "p",
                    null,
                    " ",
                    UI.createElement(Link, { href: "/ratings/", value: "Rank: " + this.options.user.globalRatingRank }),
                    " "
                ));
            } else {
                infos.push(UI.createElement(
                    "p",
                    null,
                    "Rank: N/A"
                ));
            }

            if (this.options.user.countryId) {
                var country = this.options.user.getCountry();
                infos.push(UI.createElement(
                    "p",
                    null,
                    " Country: ",
                    country.name,
                    UI.createElement(UI.Emoji, { style: { paddingLeft: "3px" }, title: country.name,
                        value: country.getEmojiName(), height: "1.6em", width: "1.6em" })
                ));
            }

            var rating = [];
            if (this.options.user.rating) {
                infos.push(UI.createElement(
                    "p",
                    null,
                    "Rating: " + this.options.user.rating
                ));
                rating.push(UI.createElement(
                    "h3",
                    null,
                    "Rating"
                ));
                rating.push(UI.createElement(CSAUserRatingSVG, { ref: "rating", data: this.options.user }));
            }
            return [UI.createElement(
                "h3",
                null,
                "General Info"
            ), UI.createElement(
                "div",
                { style: { "marginLeft": "50px" } },
                infos
            ), UI.createElement(ActivityPanel, { user: this.options.user, active: false })].concat(rating);
        }
    }]);
    return ProfilePanel;
}(Panel);

var ExternalPanel = function (_Panel2) {
    inherits(ExternalPanel, _Panel2);

    function ExternalPanel() {
        classCallCheck(this, ExternalPanel);
        return possibleConstructorReturn(this, (ExternalPanel.__proto__ || Object.getPrototypeOf(ExternalPanel)).apply(this, arguments));
    }

    createClass(ExternalPanel, [{
        key: "render",
        value: function render() {
            var rating = [];
            if (this.options.user.codeforcesRating.result && this.options.user.codeforcesRating.result.length > 0) {
                rating.push(UI.createElement(
                    "h4",
                    null,
                    "Rating"
                ));
                rating.push(UI.createElement(CodeforcesUserRatingSVG, { data: this.options.user.codeforcesRating }));
            }

            return [UI.createElement(
                "h3",
                null,
                "Codeforces Profile"
            ), UI.createElement(
                "div",
                { style: { "marginLeft": "50px" } },
                UI.createElement(
                    "p",
                    null,
                    "Handle: ",
                    UI.createElement(
                        "a",
                        { href: "http://codeforces.com/profile/" + this.options.user.codeforcesHandle, target: "_blank" },
                        this.options.user.codeforcesHandle
                    )
                )
            )].concat(rating);
        }
    }]);
    return ExternalPanel;
}(Panel);

var UserProfilePanel = function (_TabArea) {
    inherits(UserProfilePanel, _TabArea);

    function UserProfilePanel() {
        classCallCheck(this, UserProfilePanel);
        return possibleConstructorReturn(this, (UserProfilePanel.__proto__ || Object.getPrototypeOf(UserProfilePanel)).apply(this, arguments));
    }

    createClass(UserProfilePanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(UserProfilePanel.prototype.__proto__ || Object.getPrototypeOf(UserProfilePanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.SMALL);
        }
    }, {
        key: "getSwitcher",
        value: function getSwitcher(tabPanels) {
            return UI.createElement(
                Switcher,
                { ref: "switcherArea", style: { display: "table" }, lazyRender: this.options.lazyRender },
                tabPanels
            );
        }
    }, {
        key: "setUser",
        value: function setUser(user) {
            this.user = user;
        }
    }, {
        key: "render",
        value: function render() {
            this.setUser(PublicUserStore.get(this.options.userId));

            this.options.children = [UI.createElement(ProfilePanel, { title: "Profile", user: this.user, active: true })];

            if (this.user.codeforcesRating) {
                this.options.children.push(UI.createElement(ExternalPanel, { title: "External profiles", user: this.user }));
            }

            return this.options.children;
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            var ownUserInfo = [];
            if (this.options.userId == USER.id) {
                if (!USER.username) {
                    ownUserInfo.push(UI.createElement(
                        "h3",
                        null,
                        "You don't have a username set, please edit your profile"
                    ));
                }
                ownUserInfo.push(UI.createElement(
                    "h4",
                    null,
                    "To edit your account settings, please ",
                    UI.createElement(
                        Link,
                        { href: "/accounts/settings/general/" },
                        "click here"
                    )
                ));
            }
            return [ownUserInfo, get(UserProfilePanel.prototype.__proto__ || Object.getPrototypeOf(UserProfilePanel.prototype), "getChildrenToRender", this).call(this)];
        }
    }]);
    return UserProfilePanel;
}(TabArea);

var DeleteWorkspaceModal = function (_ActionModal) {
    inherits(DeleteWorkspaceModal, _ActionModal);

    function DeleteWorkspaceModal() {
        classCallCheck(this, DeleteWorkspaceModal);
        return possibleConstructorReturn(this, (DeleteWorkspaceModal.__proto__ || Object.getPrototypeOf(DeleteWorkspaceModal)).apply(this, arguments));
    }

    createClass(DeleteWorkspaceModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Delete workspace";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Delete";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "p",
                null,
                "Are you sure you want to delete ",
                this.options.workspace.name,
                "?"
            );
        }
    }, {
        key: "action",
        value: function action() {
            var request = this.options.workspace.getBaseRequest();

            Ajax.postJSON("/workspace/delete/", request).then(function () {
                WorkspaceStore.applyDeleteEvent({
                    type: "delete",
                    objectId: request.workspaceId
                });
            });

            this.hide();
        }
    }]);
    return DeleteWorkspaceModal;
}(ActionModal);

var DeleteWorkspaceButton = ActionModalButton(DeleteWorkspaceModal);

var WorkspacePreviewPanel = function (_CardPanel) {
    inherits(WorkspacePreviewPanel, _CardPanel);

    function WorkspacePreviewPanel() {
        classCallCheck(this, WorkspacePreviewPanel);
        return possibleConstructorReturn(this, (WorkspacePreviewPanel.__proto__ || Object.getPrototypeOf(WorkspacePreviewPanel)).apply(this, arguments));
    }

    createClass(WorkspacePreviewPanel, [{
        key: "getTitle",
        value: function getTitle() {
            var title = void 0,
                editSpan = void 0;
            if (this.isEditing) {
                title = UI.createElement(TextInput, { ref: "workspaceNameInput", value: this.options.workspace.name,
                    className: "text-center", style: { width: "80%", marginTop: "-3px", marginBottom: "-3px", display: "inline-table", outline: "none", border: 0 } });
                editSpan = UI.createElement("span", { ref: "settingsButton", className: "fa fa-floppy-o", style: { cursor: "pointer", margin: "3px" } });
            } else {
                title = this.options.title || this.options.workspace.name;
                editSpan = UI.createElement("span", { ref: "settingsButton", className: "fa fa-pencil", style: { cursor: "pointer", margin: "3px", color: Theme.Global.COLOR_BACKGROUND } });
            }
            return [UI.createElement(
                "div",
                { style: { display: "flex", justifyContent: "space-between", width: "100%", textTransform: "initial" } },
                title,
                editSpan
            )];
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions(options) {
            return {
                size: Size.LARGE
            };
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var results = [];

            var workspace_files = this.options.workspace.getFiles();
            if (workspace_files.length > 0) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.options.workspace.getFiles()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var file = _step.value;

                        if (!file.hasTemporaryId()) {
                            results.push(UI.createElement(
                                "p",
                                null,
                                file.name
                            ));
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            } else {
                results.push(UI.createElement(
                    "p",
                    null,
                    "No files"
                ));
            }

            var footer = UI.createElement(
                "div",
                null,
                UI.createElement("hr", { style: { marginTop: 0, marginBottom: "5px" } }),
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        "h5",
                        { style: { color: "#AAA", "white-space": "nowrap", textAlign: "left", paddingLeft: "12px" } },
                        UI.T("Updated"),
                        " ",
                        UI.createElement(TimePassedSpan, { timeStamp: this.options.workspace.getLastUpdate() })
                    ),
                    UI.createElement(
                        "div",
                        { style: { display: "flex", justifyContent: "flex-end", padding: "5px 10px" } },
                        UI.createElement(Button, { level: Level.PRIMARY, label: UI.T("Open"),
                            onClick: function onClick() {
                                return Router.changeURL(["workspace", _this3.options.workspace.id]);
                            } }),
                        UI.createElement(DeleteWorkspaceButton, { faIcon: "trash", level: Level.DANGER, style: { marginLeft: "7px" },
                            modalOptions: { workspace: this.options.workspace } })
                    )
                )
            );

            return [UI.createElement(
                "div",
                { style: { overflow: "auto", height: "145px" } },
                results
            ), footer];
        }
    }, {
        key: "saveChanges",
        value: function saveChanges() {
            var request = this.options.workspace.getBaseRequest();
            if (this.workspaceNameInput && this.workspaceNameInput.getValue() !== this.options.workspace.name) {
                request.name = this.workspaceNameInput.getValue();
            } else {
                return;
            }

            Ajax.postJSON("/workspace/edit/", request);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(WorkspacePreviewPanel.prototype.__proto__ || Object.getPrototypeOf(WorkspacePreviewPanel.prototype), "onMount", this).call(this);
            this.options.workspace.addUpdateListener(function () {
                _this4.redraw();
            });
            this.attachListener(WorkspaceFileStore, "updateOrCreate", function (workspaceFile) {
                if (workspaceFile.getWorkspace().id === _this4.options.workspace.id) {
                    _this4.redraw();
                }
            });

            // Settings button behavior
            // this.settingsButton.addNodeListener("mouseover", () => {
            //     this.settingsButton.setStyle("color", "#0082AD");
            // });
            // this.settingsButton.addNodeListener("mouseleave", () => {
            //     this.settingsButton.setStyle("color", Theme.Global.COLOR_BACKGROUND);
            // });
            this.settingsButton.addClickListener(function () {
                _this4.isEditing = !_this4.isEditing;
                if (!_this4.isEditing) {
                    _this4.saveChanges();
                }
                _this4.redraw();
                if (_this4.isEditing) {
                    _this4.workspaceNameInput.node.focus();
                    _this4.workspaceNameInput.node.select();
                    _this4.workspaceNameInput.addNodeListener("keypress", function (event) {
                        if (event.keyCode === 13) {
                            // Pressed enter
                            _this4.isEditing = false;
                            _this4.saveChanges();
                            _this4.redraw();
                        }
                    });
                }
            });
        }
    }]);
    return WorkspacePreviewPanel;
}(CardPanel);

var CreateWorkspacePanel = function (_CardPanel2) {
    inherits(CreateWorkspacePanel, _CardPanel2);

    function CreateWorkspacePanel() {
        classCallCheck(this, CreateWorkspacePanel);
        return possibleConstructorReturn(this, (CreateWorkspacePanel.__proto__ || Object.getPrototypeOf(CreateWorkspacePanel)).apply(this, arguments));
    }

    createClass(CreateWorkspacePanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.createElement(
                "div",
                { style: { height: "26px" } },
                UI.createElement(TextInput, { ref: "workspaceNameInput", placeholder: "Title",
                    className: "text-center", style: { height: "100%", width: "90%", border: "0", outline: "none" } })
            );
        }
    }, {
        key: "render",
        value: function render() {
            var _this6 = this;

            return [UI.createElement(
                "div",
                { style: { paddingTop: "85px" } },
                UI.createElement(Button, { faIcon: "plus", level: Level.SUCCESS, size: Size.LARGE, onClick: function onClick() {
                        _this6.createWorkspace();
                    } }),
                UI.createElement(
                    "p",
                    null,
                    UI.T("Create new workspace")
                )
            )];
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions(options) {
            return {
                size: Size.LARGE,
                headingCentered: true
            };
        }
    }, {
        key: "createWorkspace",
        value: function createWorkspace() {
            Ajax.postJSON("/workspace/create/", {
                name: this.workspaceNameInput.getValue()
            }).then(function (data) {
                return Router.changeURL(["workspace", data.workspaceId]);
            });
        }
    }]);
    return CreateWorkspacePanel;
}(CardPanel);

var WorkspacePanels = function (_Panel) {
    inherits(WorkspacePanels, _Panel);

    function WorkspacePanels() {
        classCallCheck(this, WorkspacePanels);
        return possibleConstructorReturn(this, (WorkspacePanels.__proto__ || Object.getPrototypeOf(WorkspacePanels)).apply(this, arguments));
    }

    createClass(WorkspacePanels, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass("text-center");
            attr.setStyle({
                width: "1200px",
                maxWidth: "100%",
                margin: "0 auto",
                display: "flex",
                flexWrap: "wrap",
                justifyContent: "center",
                alignItems: "center"
            });
        }
    }, {
        key: "render",
        value: function render() {
            var panelStyle = {
                width: "350px",
                height: "262px",
                margin: "25px"
            };

            var results = [];
            var user_workspaces = WorkspaceStore.getUserWorkspaces().sort(function (a, b) {
                return b.lastModified - a.lastModified;
            });
            // TODO: this should depend on the user maxWorkspaces
            results.push(UI.createElement(CreateWorkspacePanel, { style: panelStyle }));
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = user_workspaces[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var workspace = _step2.value;

                    results.push(UI.createElement(WorkspacePreviewPanel, { key: workspace.id, workspace: workspace, style: panelStyle }));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return results;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.attachListener(WorkspaceStore, "create", function () {
                _this8.redraw();
            });
            this.attachListener(WorkspaceStore, "delete", function () {
                _this8.redraw();
            });
        }
    }]);
    return WorkspacePanels;
}(Panel);

var WorkspaceManager = function (_Router) {
    inherits(WorkspaceManager, _Router);

    function WorkspaceManager() {
        classCallCheck(this, WorkspaceManager);
        return possibleConstructorReturn(this, (WorkspaceManager.__proto__ || Object.getPrototypeOf(WorkspaceManager)).apply(this, arguments));
    }

    createClass(WorkspaceManager, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(WorkspaceManager.prototype.__proto__ || Object.getPrototypeOf(WorkspaceManager.prototype), "getDefaultOptions", this).call(this), {
                fullHeight: true
            });
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            this.routes = this.routes || new Route(null, WorkspacePanels, [new Route("%s", function (options) {
                var workspace = WorkspaceStore.get(parseInt(options.args[0]));
                return workspace && UI.createElement(WorkspaceIDE, { workspace: workspace, plugins: PluginTypes.GLOBAL });
            })]);
            return this.routes;
        }
    }]);
    return WorkspaceManager;
}(Router);

var AnonymousWorkspaceManager = function (_UI$Element) {
    inherits(AnonymousWorkspaceManager, _UI$Element);

    function AnonymousWorkspaceManager() {
        classCallCheck(this, AnonymousWorkspaceManager);
        return possibleConstructorReturn(this, (AnonymousWorkspaceManager.__proto__ || Object.getPrototypeOf(AnonymousWorkspaceManager)).apply(this, arguments));
    }

    createClass(AnonymousWorkspaceManager, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    height: "100%",
                    width: "100%"
                }
            };
        }
    }, {
        key: "getWorkspace",
        value: function getWorkspace() {
            if (!this.options.workspace) {
                this.options.workspace = WorkspaceStore.createVirtualWorkspace();
            }
            return this.options.workspace;
        }
    }, {
        key: "render",
        value: function render() {
            return this.workspaceIDE || UI.createElement(
                "h1",
                null,
                UI.T("Loading the workspace"),
                " ",
                UI.createElement("i", { className: "fa fa-spinner fa-spin" })
            );
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (urlParts.length === 2 && urlParts[0] === "fork") {
                this.getCustomRun(urlParts[1]);
            } else {
                this.workspaceIDE = UI.createElement(WorkspaceIDE, { workspace: this.getWorkspace(), plugins: PluginTypes.GLOBAL });
                this.redraw();
            }
            Router.changeURL(["workspace"], true);
        }
    }, {
        key: "getCustomRun",
        value: function getCustomRun(urlHash) {
            var _this11 = this;

            Ajax.postJSON("/eval/get_custom_run/", {
                urlHash: urlHash
            }).then(function (data) {
                var customRun = CustomRunStore.get(data.customRunId);
                _this11.options.workspace.createFile(customRun.sourceName, customRun.sourceText);
                if (customRun.stdin) {
                    _this11.options.workspace.createFile(".stdin", customRun.stdin);
                }
                _this11.workspaceIDE = UI.createElement(WorkspaceIDE, { workspace: _this11.options.workspace, plugins: PluginTypes.GLOBAL });
                _this11.redraw();
            }, function (error) {
                _this11.workspaceIDE = UI.createElement(
                    "h1",
                    null,
                    "Error: ",
                    error.message
                );
                _this11.redraw();
            });
        }
    }]);
    return AnonymousWorkspaceManager;
}(UI.Element);

var WorkspaceManagerWrapper = function (_StateDependentElemen) {
    inherits(WorkspaceManagerWrapper, _StateDependentElemen);

    function WorkspaceManagerWrapper() {
        classCallCheck(this, WorkspaceManagerWrapper);
        return possibleConstructorReturn(this, (WorkspaceManagerWrapper.__proto__ || Object.getPrototypeOf(WorkspaceManagerWrapper)).apply(this, arguments));
    }

    createClass(WorkspaceManagerWrapper, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                height: "100%"
            });
        }
    }, {
        key: "renderLoaded",
        value: function renderLoaded() {
            if (USER.isAuthenticated) {
                return UI.createElement(WorkspaceManager, { ref: "workspaceManager" });
            }
            return UI.createElement(AnonymousWorkspaceManager, { ref: "workspaceManager" });
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (this.workspaceManager) {
                this.workspaceManager.setURL(urlParts);
            } else {
                this.initialUrlParts = urlParts;
            }
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {
            this.setURL(this.initialUrlParts);
        }
    }]);
    return WorkspaceManagerWrapper;
}(StateDependentElement(UI.Element));

var EmailGateway = function (_StoreObject) {
    inherits(EmailGateway, _StoreObject);

    function EmailGateway() {
        classCallCheck(this, EmailGateway);
        return possibleConstructorReturn(this, (EmailGateway.__proto__ || Object.getPrototypeOf(EmailGateway)).apply(this, arguments));
    }

    createClass(EmailGateway, [{
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }]);
    return EmailGateway;
}(StoreObject);

var EmailGatewayStoreClass = function (_GenericObjectStore) {
    inherits(EmailGatewayStoreClass, _GenericObjectStore);

    function EmailGatewayStoreClass() {
        classCallCheck(this, EmailGatewayStoreClass);
        return possibleConstructorReturn(this, (EmailGatewayStoreClass.__proto__ || Object.getPrototypeOf(EmailGatewayStoreClass)).apply(this, arguments));
    }

    createClass(EmailGatewayStoreClass, [{
        key: "registerStreams",
        value: function registerStreams() {
            GlobalState.registerStream("admin-email-manager");
        }
    }]);
    return EmailGatewayStoreClass;
}(GenericObjectStore);

var EmailGatewayStore = new EmailGatewayStoreClass("EmailGateway", EmailGateway);

var EmailGatewayModal = function (_ActionModal) {
    inherits(EmailGatewayModal, _ActionModal);

    function EmailGatewayModal(options) {
        classCallCheck(this, EmailGatewayModal);

        var _this = possibleConstructorReturn(this, (EmailGatewayModal.__proto__ || Object.getPrototypeOf(EmailGatewayModal)).call(this, options));

        _this.fields = ["name", "host", "port", "useTLS", "username"];
        return _this;
    }

    createClass(EmailGatewayModal, [{
        key: "getBody",
        value: function getBody() {
            var gatewayValues = this.options.gateway || {};
            return [UI.createElement(
                FormField,
                { label: "Name", ref: "nameField" },
                UI.createElement(TextInput, { value: gatewayValues.name || "", ref: "nameInput" })
            ), UI.createElement(
                FormField,
                { label: "Host", ref: "hostField" },
                UI.createElement(TextInput, { value: gatewayValues.host || "", ref: "hostInput" })
            ), UI.createElement(
                FormField,
                { label: "Port", ref: "portField" },
                UI.createElement(NumberInput, { value: gatewayValues.port || "", ref: "portInput" })
            ), UI.createElement(
                FormField,
                { label: "Use TLS", ref: "useTLSField" },
                UI.createElement(CheckboxInput, { value: gatewayValues.useTLS || "", ref: "useTLSInput" })
            ), UI.createElement(
                FormField,
                { label: "Username", ref: "usernameField" },
                UI.createElement(TextInput, { value: gatewayValues.username || "", ref: "usernameInput" })
            ), UI.createElement(
                FormField,
                { label: "Password", ref: "passwordField" },
                UI.createElement(PasswordInput, { value: gatewayValues.password || "", ref: "passwordInput" })
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this2 = this;

            var request = {
                action: this.getAjaxAction(),
                objectType: "gateway",
                name: this.nameInput.getValue(),
                host: this.hostInput.getValue(),
                port: this.portInput.getValue(),
                useTLS: this.useTLSInput.getValue(),
                username: this.usernameInput.getValue(),
                password: this.passwordInput.getValue(),
                id: this.options.gateway ? this.options.gateway.id : null
            };

            Ajax.postJSON("/email/control/", request).then(function () {
                return _this2.hide();
            }, function (error) {
                if (error.fieldName) {
                    error.message += " (" + error.fieldName + ")";
                }
                _this2.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return EmailGatewayModal;
}(ActionModal);

var AddEmailGatewayModal = function (_EmailGatewayModal) {
    inherits(AddEmailGatewayModal, _EmailGatewayModal);

    function AddEmailGatewayModal() {
        classCallCheck(this, AddEmailGatewayModal);
        return possibleConstructorReturn(this, (AddEmailGatewayModal.__proto__ || Object.getPrototypeOf(AddEmailGatewayModal)).apply(this, arguments));
    }

    createClass(AddEmailGatewayModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "New Email gateway";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Add Email gateway";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "new";
        }
    }]);
    return AddEmailGatewayModal;
}(EmailGatewayModal);

var EditEmailGatewayModal = function (_EmailGatewayModal2) {
    inherits(EditEmailGatewayModal, _EmailGatewayModal2);

    function EditEmailGatewayModal() {
        classCallCheck(this, EditEmailGatewayModal);
        return possibleConstructorReturn(this, (EditEmailGatewayModal.__proto__ || Object.getPrototypeOf(EditEmailGatewayModal)).apply(this, arguments));
    }

    createClass(EditEmailGatewayModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Edit Email gateway";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Save Email gateway";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "update";
        }
    }]);
    return EditEmailGatewayModal;
}(EmailGatewayModal);

var GenericConfirmModal = function (_ActionModal2) {
    inherits(GenericConfirmModal, _ActionModal2);

    function GenericConfirmModal(options) {
        classCallCheck(this, GenericConfirmModal);
        return possibleConstructorReturn(this, (GenericConfirmModal.__proto__ || Object.getPrototypeOf(GenericConfirmModal)).call(this, options));
    }

    createClass(GenericConfirmModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "div",
                null,
                this.getActionText()
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this6 = this;

            var request = {
                action: this.getAjaxAction(),
                objectType: "gateway",
                id: this.options.gateway ? this.options.gateway.id : null
            };

            Ajax.postJSON("/email/control/", request).then(function () {
                return _this6.hide();
            }, function (error) {
                if (error.fieldName) {
                    error.message += " (" + error.fieldName + ")";
                }
                _this6.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Confirm!";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }]);
    return GenericConfirmModal;
}(ActionModal);

var DeleteGatewayConfirmModal = function (_GenericConfirmModal) {
    inherits(DeleteGatewayConfirmModal, _GenericConfirmModal);

    function DeleteGatewayConfirmModal() {
        classCallCheck(this, DeleteGatewayConfirmModal);
        return possibleConstructorReturn(this, (DeleteGatewayConfirmModal.__proto__ || Object.getPrototypeOf(DeleteGatewayConfirmModal)).apply(this, arguments));
    }

    createClass(DeleteGatewayConfirmModal, [{
        key: "getActionText",
        value: function getActionText() {
            return "Are you sure you want to delete this entry?";
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "delete";
        }
    }]);
    return DeleteGatewayConfirmModal;
}(GenericConfirmModal);

var EmailGatewayTableRow = function (_TableRow) {
    inherits(EmailGatewayTableRow, _TableRow);

    function EmailGatewayTableRow() {
        classCallCheck(this, EmailGatewayTableRow);
        return possibleConstructorReturn(this, (EmailGatewayTableRow.__proto__ || Object.getPrototypeOf(EmailGatewayTableRow)).apply(this, arguments));
    }

    createClass(EmailGatewayTableRow, [{
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            get(EmailGatewayTableRow.prototype.__proto__ || Object.getPrototypeOf(EmailGatewayTableRow.prototype), "onMount", this).call(this);
            this.deleteGatewayButton.addClickListener(function () {
                var deleteGatewayConfirmModal = UI.createElement(DeleteGatewayConfirmModal, { gateway: _this9.options.entry });
                deleteGatewayConfirmModal.show();
            });
            this.editGatewayButton.addClickListener(function () {
                var editGatewayModal = UI.createElement(EditEmailGatewayModal, { gateway: _this9.options.entry });
                editGatewayModal.show();
            });
        }
    }]);
    return EmailGatewayTableRow;
}(TableRow);

var EmailGatewayTable = function (_SortableTable) {
    inherits(EmailGatewayTable, _SortableTable);

    function EmailGatewayTable() {
        classCallCheck(this, EmailGatewayTable);
        return possibleConstructorReturn(this, (EmailGatewayTable.__proto__ || Object.getPrototypeOf(EmailGatewayTable)).apply(this, arguments));
    }

    createClass(EmailGatewayTable, [{
        key: "getRowClass",
        value: function getRowClass() {
            return EmailGatewayTableRow;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return EmailGatewayStore.all();
        }
    }, {
        key: "setColumns",
        value: function setColumns(columns) {
            if (!columns || columns.length === 0) {
                var cellStyle = {
                    textAlign: "center"
                };
                var headerStyle = {
                    textAlign: "center",
                    width: "16%"
                };

                var deleteButton = function deleteButton(gateway) {
                    return UI.createElement(
                        Button,
                        { level: Level.DANGER, ref: "deleteGatewayButton" },
                        "Delete"
                    );
                };

                var editButton = function editButton(gateway) {
                    return UI.createElement(
                        Button,
                        { level: Level.INFO, ref: "editGatewayButton" },
                        "Edit"
                    );
                };

                columns.push({
                    value: function value(gateway) {
                        return gateway.name;
                    },
                    headerName: UI.T("Name"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(gateway) {
                        return gateway.host;
                    },
                    headerName: UI.T("Host"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(gateway) {
                        return gateway.port;
                    },
                    headerName: UI.T("Port"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(gateway) {
                        return gateway.useTLS;
                    },
                    headerName: UI.T("Use TLS"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(gateway) {
                        return gateway.username;
                    },
                    headerName: UI.T("Username"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: deleteButton,
                    headerName: "Delete",
                    headerStyle: { width: "10%" }
                });
                columns.push({
                    value: editButton,
                    headerName: "Edit",
                    headerStyle: { width: "10%" }
                });
            }
            get(EmailGatewayTable.prototype.__proto__ || Object.getPrototypeOf(EmailGatewayTable.prototype), "setColumns", this).call(this, columns);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            EmailGatewayStore.addUpdateListener(function () {
                _this11.redraw();
            });
            EmailGatewayStore.addDeleteListener(function () {
                _this11.redraw();
            });
            EmailGatewayStore.addCreateListener(function () {
                _this11.redraw();
            });
        }
    }]);
    return EmailGatewayTable;
}(SortableTable);

var EmailGatewayWidget = function (_Panel) {
    inherits(EmailGatewayWidget, _Panel);

    function EmailGatewayWidget() {
        classCallCheck(this, EmailGatewayWidget);
        return possibleConstructorReturn(this, (EmailGatewayWidget.__proto__ || Object.getPrototypeOf(EmailGatewayWidget)).apply(this, arguments));
    }

    createClass(EmailGatewayWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(EmailGatewayTable, null), UI.createElement(
                Button,
                { level: Level.SUCCESS, ref: "addGatewayButton" },
                "Add Gateway"
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            EmailGatewayStore.registerStreams();
            this.addGatewayButton.addClickListener(function () {
                var addGatewayModal = UI.createElement(AddEmailGatewayModal, null);
                addGatewayModal.show();
            });
        }
    }]);
    return EmailGatewayWidget;
}(Panel);

var EmailCampaign = function (_StoreObject) {
    inherits(EmailCampaign, _StoreObject);

    function EmailCampaign() {
        classCallCheck(this, EmailCampaign);
        return possibleConstructorReturn(this, (EmailCampaign.__proto__ || Object.getPrototypeOf(EmailCampaign)).apply(this, arguments));
    }

    createClass(EmailCampaign, [{
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }]);
    return EmailCampaign;
}(StoreObject);

var EmailCampaignStoreClass = function (_GenericObjectStore) {
    inherits(EmailCampaignStoreClass, _GenericObjectStore);

    function EmailCampaignStoreClass() {
        classCallCheck(this, EmailCampaignStoreClass);
        return possibleConstructorReturn(this, (EmailCampaignStoreClass.__proto__ || Object.getPrototypeOf(EmailCampaignStoreClass)).apply(this, arguments));
    }

    createClass(EmailCampaignStoreClass, [{
        key: "registerStreams",
        value: function registerStreams() {
            GlobalState.registerStream("admin-email-manager");
        }
    }]);
    return EmailCampaignStoreClass;
}(GenericObjectStore);

var EmailCampaignStore = new EmailCampaignStoreClass("EmailCampaign", EmailCampaign);

var EmailTemplate = function (_StoreObject) {
    inherits(EmailTemplate, _StoreObject);

    function EmailTemplate() {
        classCallCheck(this, EmailTemplate);
        return possibleConstructorReturn(this, (EmailTemplate.__proto__ || Object.getPrototypeOf(EmailTemplate)).apply(this, arguments));
    }

    return EmailTemplate;
}(StoreObject);

var EmailTemplateStoreClass = function (_GenericObjectStore) {
    inherits(EmailTemplateStoreClass, _GenericObjectStore);

    function EmailTemplateStoreClass() {
        classCallCheck(this, EmailTemplateStoreClass);
        return possibleConstructorReturn(this, (EmailTemplateStoreClass.__proto__ || Object.getPrototypeOf(EmailTemplateStoreClass)).apply(this, arguments));
    }

    createClass(EmailTemplateStoreClass, [{
        key: "registerStreams",
        value: function registerStreams() {
            GlobalState.registerStream("admin-email-manager");
        }
    }]);
    return EmailTemplateStoreClass;
}(GenericObjectStore);

var EmailTemplateStore = new EmailTemplateStoreClass("EmailTemplate", EmailTemplate);

var GenericConfirmModal$1 = function (_ActionModal) {
    inherits(GenericConfirmModal, _ActionModal);

    function GenericConfirmModal(options) {
        classCallCheck(this, GenericConfirmModal);
        return possibleConstructorReturn(this, (GenericConfirmModal.__proto__ || Object.getPrototypeOf(GenericConfirmModal)).call(this, options));
    }

    createClass(GenericConfirmModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "div",
                null,
                this.getActionText()
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this2 = this;

            var request = {
                action: this.getAjaxAction(),
                objectType: "campaign",
                id: this.options.campaign ? this.options.campaign.id : null
            };

            Ajax.postJSON("/email/control/", request).then(function () {
                return _this2.hide();
            }, function (error) {
                if (error.fieldName) {
                    error.message += " (" + error.fieldName + ")";
                }
                _this2.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Confirm!";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }]);
    return GenericConfirmModal;
}(ActionModal);

var DeleteCampaignConfirmModal = function (_GenericConfirmModal) {
    inherits(DeleteCampaignConfirmModal, _GenericConfirmModal);

    function DeleteCampaignConfirmModal() {
        classCallCheck(this, DeleteCampaignConfirmModal);
        return possibleConstructorReturn(this, (DeleteCampaignConfirmModal.__proto__ || Object.getPrototypeOf(DeleteCampaignConfirmModal)).apply(this, arguments));
    }

    createClass(DeleteCampaignConfirmModal, [{
        key: "getActionText",
        value: function getActionText() {
            return "Are you sure you want to delete this entry?";
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "delete";
        }
    }]);
    return DeleteCampaignConfirmModal;
}(GenericConfirmModal$1);

var ClearStatusCampaignConfirmModal = function (_GenericConfirmModal2) {
    inherits(ClearStatusCampaignConfirmModal, _GenericConfirmModal2);

    function ClearStatusCampaignConfirmModal() {
        classCallCheck(this, ClearStatusCampaignConfirmModal);
        return possibleConstructorReturn(this, (ClearStatusCampaignConfirmModal.__proto__ || Object.getPrototypeOf(ClearStatusCampaignConfirmModal)).apply(this, arguments));
    }

    createClass(ClearStatusCampaignConfirmModal, [{
        key: "getActionText",
        value: function getActionText() {
            return "Are you sure you want to clear all status for this entry?";
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "clearStatus";
        }
    }]);
    return ClearStatusCampaignConfirmModal;
}(GenericConfirmModal$1);

var SendCampaignConfirmModal = function (_GenericConfirmModal3) {
    inherits(SendCampaignConfirmModal, _GenericConfirmModal3);

    function SendCampaignConfirmModal() {
        classCallCheck(this, SendCampaignConfirmModal);
        return possibleConstructorReturn(this, (SendCampaignConfirmModal.__proto__ || Object.getPrototypeOf(SendCampaignConfirmModal)).apply(this, arguments));
    }

    createClass(SendCampaignConfirmModal, [{
        key: "getActionText",
        value: function getActionText() {
            return "Are you sure you want to start sending this email campaign?";
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "start";
        }
    }]);
    return SendCampaignConfirmModal;
}(GenericConfirmModal$1);

var TestSendCampaignModal = function (_ActionModal2) {
    inherits(TestSendCampaignModal, _ActionModal2);

    function TestSendCampaignModal(options) {
        classCallCheck(this, TestSendCampaignModal);
        return possibleConstructorReturn(this, (TestSendCampaignModal.__proto__ || Object.getPrototypeOf(TestSendCampaignModal)).call(this, options));
    }

    createClass(TestSendCampaignModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                FormField,
                { label: "Name", ref: "fromIdField" },
                UI.createElement(TextInput, { value: USER.id, ref: "fromIdInput" })
            ), UI.createElement(
                FormField,
                { label: "From address", ref: "toIdField" },
                UI.createElement(TextInput, { value: USER.id, ref: "toIdInput" })
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this7 = this;

            var request = {
                action: "test",
                objectType: "campaign",
                fromId: this.fromIdInput.getValue(),
                toId: this.toIdInput.getValue(),
                id: this.options.campaign ? this.options.campaign.id : null
            };

            Ajax.postJSON("/email/control/", request).then(function () {
                return _this7.hide();
            }, function (error) {
                if (error.fieldName) {
                    error.message += " (" + error.fieldName + ")";
                }
                _this7.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return "Campaign send test";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Send test emails!";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }]);
    return TestSendCampaignModal;
}(ActionModal);

var EmailCampaignModal = function (_ActionModal3) {
    inherits(EmailCampaignModal, _ActionModal3);

    function EmailCampaignModal(options) {
        classCallCheck(this, EmailCampaignModal);

        var _this8 = possibleConstructorReturn(this, (EmailCampaignModal.__proto__ || Object.getPrototypeOf(EmailCampaignModal)).call(this, options));

        _this8.fields = ["name", "fromAddress", "gatewayId", "isNewsletter"];
        return _this8;
    }

    createClass(EmailCampaignModal, [{
        key: "getBody",
        value: function getBody() {
            var campaignValues = this.options.campaign || {};
            return [UI.createElement(
                FormField,
                { label: "Name", ref: "nameField" },
                UI.createElement(TextInput, { value: campaignValues.name || "", ref: "nameInput" })
            ), UI.createElement(
                FormField,
                { label: "From address", ref: "fromAddressField" },
                UI.createElement(TextInput, { value: campaignValues.fromAddress || "", ref: "fromAddressInput" })
            ), UI.createElement(
                FormField,
                { label: "Gateway", ref: "gatewayIdField" },
                UI.createElement(Select, { ref: "gatewaySelect", options: EmailGatewayStore.all(), selected: EmailGatewayStore.get(campaignValues.gatewayId) })
            ), UI.createElement(
                FormField,
                { label: "Is newsletter", ref: "isNewsletterField" },
                UI.createElement(CheckboxInput, { value: campaignValues.isNewsletter || "", ref: "isNewsletterInput" })
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this9 = this;

            var request = {
                action: this.getAjaxAction(),
                objectType: "campaign",
                name: this.nameInput.getValue(),
                fromAddress: this.fromAddressInput.getValue(),
                gatewayId: this.gatewaySelect.get().id,
                isNewsletter: this.isNewsletterInput.getValue(),
                id: this.options.campaign ? this.options.campaign.id : null
            };

            Ajax.postJSON("/email/control/", request).then(function () {
                return _this9.hide();
            }, function (error) {
                if (error.fieldName) {
                    error.message += " (" + error.fieldName + ")";
                }
                _this9.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return EmailCampaignModal;
}(ActionModal);

var AddEmailCampaignModal = function (_EmailCampaignModal) {
    inherits(AddEmailCampaignModal, _EmailCampaignModal);

    function AddEmailCampaignModal() {
        classCallCheck(this, AddEmailCampaignModal);
        return possibleConstructorReturn(this, (AddEmailCampaignModal.__proto__ || Object.getPrototypeOf(AddEmailCampaignModal)).apply(this, arguments));
    }

    createClass(AddEmailCampaignModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "New Email campaign";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Add Email campaign";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "new";
        }
    }]);
    return AddEmailCampaignModal;
}(EmailCampaignModal);

var EditEmailCampaignModal = function (_EmailCampaignModal2) {
    inherits(EditEmailCampaignModal, _EmailCampaignModal2);

    function EditEmailCampaignModal() {
        classCallCheck(this, EditEmailCampaignModal);
        return possibleConstructorReturn(this, (EditEmailCampaignModal.__proto__ || Object.getPrototypeOf(EditEmailCampaignModal)).apply(this, arguments));
    }

    createClass(EditEmailCampaignModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Edit Email campaign";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Save Email campaign";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "update";
        }
    }]);
    return EditEmailCampaignModal;
}(EmailCampaignModal);

var EmailCampaignTableRow = function (_TableRow) {
    inherits(EmailCampaignTableRow, _TableRow);

    function EmailCampaignTableRow() {
        classCallCheck(this, EmailCampaignTableRow);
        return possibleConstructorReturn(this, (EmailCampaignTableRow.__proto__ || Object.getPrototypeOf(EmailCampaignTableRow)).apply(this, arguments));
    }

    createClass(EmailCampaignTableRow, [{
        key: "onMount",
        value: function onMount() {
            var _this13 = this;

            get(EmailCampaignTableRow.prototype.__proto__ || Object.getPrototypeOf(EmailCampaignTableRow.prototype), "onMount", this).call(this);
            this.deleteCampaignButton.addClickListener(function () {
                var deleteCampaignConfirmModal = UI.createElement(DeleteCampaignConfirmModal, { campaign: _this13.options.entry });
                deleteCampaignConfirmModal.show();
            });

            this.editCampaignButton.addClickListener(function () {
                var editCampaignModal = UI.createElement(EditEmailCampaignModal, { campaign: _this13.options.entry });
                editCampaignModal.show();
            });

            this.testSendCampaignButton.addClickListener(function () {
                var testSendCampaignModal = UI.createElement(TestSendCampaignModal, { campaign: _this13.options.entry });
                testSendCampaignModal.show();
            });

            this.sendCampaignButton.addClickListener(function () {
                var sendCampaignConfirmModal = UI.createElement(SendCampaignConfirmModal, { campaign: _this13.options.entry });
                sendCampaignConfirmModal.show();
            });

            this.clearStatusCampaignButton.addClickListener(function () {
                var clearStatusCampaignConfirmModal = UI.createElement(ClearStatusCampaignConfirmModal, { campaign: _this13.options.entry });
                clearStatusCampaignConfirmModal.show();
            });
        }
    }]);
    return EmailCampaignTableRow;
}(TableRow);

var EmailCampaignTable = function (_SortableTable) {
    inherits(EmailCampaignTable, _SortableTable);

    function EmailCampaignTable() {
        classCallCheck(this, EmailCampaignTable);
        return possibleConstructorReturn(this, (EmailCampaignTable.__proto__ || Object.getPrototypeOf(EmailCampaignTable)).apply(this, arguments));
    }

    createClass(EmailCampaignTable, [{
        key: "getRowClass",
        value: function getRowClass() {
            return EmailCampaignTableRow;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return EmailCampaignStore.all();
        }
    }, {
        key: "setColumns",
        value: function setColumns(columns) {
            if (!columns || columns.length === 0) {
                var cellStyle = {
                    textAlign: "center"
                };
                var headerStyle = {
                    textAlign: "center",
                    width: "20%"
                };

                var deleteButton = function deleteButton(campaign) {
                    return UI.createElement(
                        Button,
                        { level: Level.DANGER, ref: "deleteCampaignButton" },
                        "Delete"
                    );
                };

                var editButton = function editButton(campaign) {
                    return UI.createElement(
                        Button,
                        { level: Level.INFO, ref: "editCampaignButton" },
                        "Edit"
                    );
                };

                var testSendButton = function testSendButton(campaign) {
                    return UI.createElement(
                        Button,
                        { level: Level.INFO, ref: "testSendCampaignButton" },
                        "Test Send"
                    );
                };

                var sendButton = function sendButton(campaign) {
                    return UI.createElement(
                        Button,
                        { level: Level.INFO, ref: "sendCampaignButton" },
                        "Send"
                    );
                };

                var clearStatusButton = function clearStatusButton(campaign) {
                    return UI.createElement(
                        Button,
                        { level: Level.DANGER, ref: "clearStatusCampaignButton" },
                        "Clear Status"
                    );
                };

                columns.push({
                    value: function value(campaign) {
                        return campaign.name;
                    },
                    headerName: UI.T("Name"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(campaign) {
                        return campaign.fromAddress;
                    },
                    headerName: UI.T("From Address"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(campaign) {
                        return campaign.isNewsletter;
                    },
                    headerName: UI.T("Is Newsletter"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(campaign) {
                        return campaign.gatewayId && EmailGatewayStore.get(campaign.gatewayId).name || "default";
                    },
                    headerName: UI.T("Gateway"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(campaign) {
                        return campaign.emailsRead;
                    },
                    headerName: UI.T("Emails Read"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(campaign) {
                        return campaign.emailsSent;
                    },
                    headerName: UI.T("Emails Sent"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: deleteButton,
                    headerName: "Delete",
                    headerStyle: { width: "10%" }
                });
                columns.push({
                    value: editButton,
                    headerName: "Edit",
                    headerStyle: { width: "10%" }
                });
                columns.push({
                    value: testSendButton,
                    headerName: "Test Send",
                    headerStyle: { width: "10%" }
                });
                columns.push({
                    value: sendButton,
                    headerName: "Send",
                    headerStyle: { width: "10%" }
                });
                columns.push({
                    value: clearStatusButton,
                    headerName: "Clear Status",
                    headerStyle: { width: "10%" }
                });
            }
            get(EmailCampaignTable.prototype.__proto__ || Object.getPrototypeOf(EmailCampaignTable.prototype), "setColumns", this).call(this, columns);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this15 = this;

            EmailCampaignStore.addUpdateListener(function () {
                _this15.redraw();
            });
            EmailCampaignStore.addCreateListener(function () {
                _this15.redraw();
            });
            EmailCampaignStore.addDeleteListener(function () {
                _this15.redraw();
            });
        }
    }]);
    return EmailCampaignTable;
}(SortableTable);

var EmailCampaignWidget = function (_Panel) {
    inherits(EmailCampaignWidget, _Panel);

    function EmailCampaignWidget() {
        classCallCheck(this, EmailCampaignWidget);
        return possibleConstructorReturn(this, (EmailCampaignWidget.__proto__ || Object.getPrototypeOf(EmailCampaignWidget)).apply(this, arguments));
    }

    createClass(EmailCampaignWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(EmailCampaignTable, null), UI.createElement(
                Button,
                { level: Level.SUCCESS, ref: "addCampaignButton" },
                "Add Campaign"
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this17 = this;

            get(EmailCampaignWidget.prototype.__proto__ || Object.getPrototypeOf(EmailCampaignWidget.prototype), "onMount", this).call(this);

            EmailGatewayStore.registerStreams();
            EmailCampaignStore.registerStreams();

            this.addCampaignButton.addClickListener(function () {
                var addCampaignModal = UI.createElement(AddEmailCampaignModal, { campaign: _this17.options.entry });
                addCampaignModal.show();
            });
        }
    }]);
    return EmailCampaignWidget;
}(Panel);

var EmailTemplateModal = function (_ActionModal) {
    inherits(EmailTemplateModal, _ActionModal);

    function EmailTemplateModal(options) {
        classCallCheck(this, EmailTemplateModal);

        var _this = possibleConstructorReturn(this, (EmailTemplateModal.__proto__ || Object.getPrototypeOf(EmailTemplateModal)).call(this, options));

        _this.fields = ["subject", "html", "campaignId", "languageId", "gatewayId"];
        return _this;
    }

    createClass(EmailTemplateModal, [{
        key: "getModalWindowStyle",
        value: function getModalWindowStyle() {
            return Object.assign({}, get(EmailTemplateModal.prototype.__proto__ || Object.getPrototypeOf(EmailTemplateModal.prototype), "getModalWindowStyle", this).call(this), {
                height: "90vh",
                width: "70vw",
                display: "flex",
                flexDirection: "column"
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.header },
                this.getHeader()
            ), this.getBody() ? UI.createElement(
                "div",
                { className: this.styleSheet.body,
                    style: { flex: "1", display: "flex", flexDirection: "column" } },
                this.getBody()
            ) : null, this.getFooter() ? UI.createElement(
                "div",
                { className: this.styleSheet.footer },
                this.getFooter()
            ) : null];
        }
    }, {
        key: "getBody",
        value: function getBody() {
            var templateValues = this.options.template || {};
            return [UI.createElement(
                FormField,
                { label: "Subject", ref: "subjectField", style: { margin: "initial" } },
                UI.createElement(TextInput, { value: templateValues.subject || "", ref: "subjectInput" })
            ), UI.createElement(
                FormField,
                { label: "Campaign", ref: "campaignIdField", style: { margin: "initial" } },
                UI.createElement(Select, { ref: "campaignSelect", options: EmailCampaignStore.all(), selected: EmailCampaignStore.get(templateValues.campaignId) })
            ), UI.createElement(
                FormField,
                { label: "Language", ref: "languageIdField", style: { margin: "initial" } },
                UI.createElement(Select, { ref: "languageSelect", options: Language.all(), selected: Language.get(templateValues.languageId) })
            ), UI.createElement(
                FormField,
                { label: "Gateway", ref: "gatewayIdField", style: { margin: "initial" } },
                UI.createElement(Select, { ref: "gatewaySelect", options: EmailGatewayStore.all(), selected: EmailGatewayStore.get(templateValues.gatewayId) })
            ), UI.createElement(FormField, { label: "Html", ref: "htmlField", inline: false, style: { margin: "initial" } }), UI.createElement(
                SectionDivider$$1,
                { orientation: Orientation.HORIZONTAL, style: { width: "100%", flex: "1" } },
                UI.createElement(
                    "div",
                    { style: { width: "50%", height: "100%", overflow: "hidden" } },
                    UI.createElement(TextArea, { value: templateValues.html || "", ref: "htmlInput", style: { height: "100%", width: "100%", resize: "none" } })
                ),
                UI.createElement(
                    "div",
                    { style: { width: "50%", height: "100%", overflow: "auto", position: "relative" } },
                    UI.createElement(Panel, { ref: "htmlRenderer", style: { height: "100%", position: "absolute" } })
                )
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this2 = this;

            var request = {
                action: this.getAjaxAction(),
                objectType: "template",
                subject: this.subjectInput.getValue(),
                html: this.htmlInput.getValue(),
                campaignId: this.campaignSelect.get().id,
                languageId: this.languageSelect.get().id,
                gatewayId: this.gatewaySelect.get().id,
                id: this.options.template ? this.options.template.id : null
            };

            Ajax.postJSON("/email/control/", request).then(function () {
                return _this2.hide();
            }, function (error) {
                if (error.fieldName) {
                    error.message += " (" + error.fieldName + ")";
                }
                _this2.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.htmlRenderer.node.innerHTML = this.htmlInput.getValue();
            this.htmlInput.addNodeListener("keyup", function () {
                _this3.htmlRenderer.node.innerHTML = _this3.htmlInput.getValue();
            });
            this.htmlInput.addNodeListener("change", function () {
                _this3.htmlRenderer.node.innerHTML = _this3.htmlInput.getValue();
            });
        }
    }]);
    return EmailTemplateModal;
}(ActionModal);

var AddEmailTemplateModal = function (_EmailTemplateModal) {
    inherits(AddEmailTemplateModal, _EmailTemplateModal);

    function AddEmailTemplateModal() {
        classCallCheck(this, AddEmailTemplateModal);
        return possibleConstructorReturn(this, (AddEmailTemplateModal.__proto__ || Object.getPrototypeOf(AddEmailTemplateModal)).apply(this, arguments));
    }

    createClass(AddEmailTemplateModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "New Email template";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Add Email template";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "new";
        }
    }]);
    return AddEmailTemplateModal;
}(EmailTemplateModal);

var EditEmailTemplateModal = function (_EmailTemplateModal2) {
    inherits(EditEmailTemplateModal, _EmailTemplateModal2);

    function EditEmailTemplateModal() {
        classCallCheck(this, EditEmailTemplateModal);
        return possibleConstructorReturn(this, (EditEmailTemplateModal.__proto__ || Object.getPrototypeOf(EditEmailTemplateModal)).apply(this, arguments));
    }

    createClass(EditEmailTemplateModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Edit Email template";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Save Email template";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "update";
        }
    }]);
    return EditEmailTemplateModal;
}(EmailTemplateModal);

var GenericConfirmModal$2 = function (_ActionModal2) {
    inherits(GenericConfirmModal, _ActionModal2);

    function GenericConfirmModal(options) {
        classCallCheck(this, GenericConfirmModal);
        return possibleConstructorReturn(this, (GenericConfirmModal.__proto__ || Object.getPrototypeOf(GenericConfirmModal)).call(this, options));
    }

    createClass(GenericConfirmModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "div",
                null,
                this.getActionText()
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this7 = this;

            var request = {
                action: this.getAjaxAction(),
                objectType: "template",
                id: this.options.template ? this.options.template.id : null
            };

            Ajax.postJSON("/email/control/", request).then(function () {
                return _this7.hide();
            }, function (error) {
                if (error.fieldName) {
                    error.message += " (" + error.fieldName + ")";
                }
                _this7.messageArea.showMessage(error.message, "red");
            });
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Confirm!";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }]);
    return GenericConfirmModal;
}(ActionModal);

var DeleteTemplateConfirmModal = function (_GenericConfirmModal) {
    inherits(DeleteTemplateConfirmModal, _GenericConfirmModal);

    function DeleteTemplateConfirmModal() {
        classCallCheck(this, DeleteTemplateConfirmModal);
        return possibleConstructorReturn(this, (DeleteTemplateConfirmModal.__proto__ || Object.getPrototypeOf(DeleteTemplateConfirmModal)).apply(this, arguments));
    }

    createClass(DeleteTemplateConfirmModal, [{
        key: "getActionText",
        value: function getActionText() {
            return "Are you sure you want to delete this entry?";
        }
    }, {
        key: "getAjaxAction",
        value: function getAjaxAction() {
            return "delete";
        }
    }]);
    return DeleteTemplateConfirmModal;
}(GenericConfirmModal$2);

var EmailTemplateTableRow = function (_TableRow) {
    inherits(EmailTemplateTableRow, _TableRow);

    function EmailTemplateTableRow() {
        classCallCheck(this, EmailTemplateTableRow);
        return possibleConstructorReturn(this, (EmailTemplateTableRow.__proto__ || Object.getPrototypeOf(EmailTemplateTableRow)).apply(this, arguments));
    }

    createClass(EmailTemplateTableRow, [{
        key: "onMount",
        value: function onMount() {
            var _this10 = this;

            get(EmailTemplateTableRow.prototype.__proto__ || Object.getPrototypeOf(EmailTemplateTableRow.prototype), "onMount", this).call(this);
            this.deleteTemplateButton.addClickListener(function () {
                var deleteTemplateConfirmModal = UI.createElement(DeleteTemplateConfirmModal, { template: _this10.options.entry });
                deleteTemplateConfirmModal.show();
            });

            this.editTemplateButton.addClickListener(function () {
                var editTemplateModal = UI.createElement(EditEmailTemplateModal, { template: _this10.options.entry });
                editTemplateModal.show();
            });
        }
    }]);
    return EmailTemplateTableRow;
}(TableRow);

var EmailTemplateTable = function (_SortableTable) {
    inherits(EmailTemplateTable, _SortableTable);

    function EmailTemplateTable() {
        classCallCheck(this, EmailTemplateTable);
        return possibleConstructorReturn(this, (EmailTemplateTable.__proto__ || Object.getPrototypeOf(EmailTemplateTable)).apply(this, arguments));
    }

    createClass(EmailTemplateTable, [{
        key: "getRowClass",
        value: function getRowClass() {
            return EmailTemplateTableRow;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return EmailTemplateStore.all();
        }
    }, {
        key: "setColumns",
        value: function setColumns(columns) {
            if (!columns || columns.length === 0) {
                var cellStyle = {
                    textAlign: "center"
                };
                var headerStyle = {
                    textAlign: "center",
                    width: "20%"
                };

                var deleteButton = function deleteButton(template) {
                    return UI.createElement(
                        Button,
                        { level: Level.DANGER, ref: "deleteTemplateButton" },
                        "Delete"
                    );
                };

                var editButton = function editButton(template) {
                    return UI.createElement(
                        Button,
                        { level: Level.INFO, ref: "editTemplateButton" },
                        "Edit"
                    );
                };

                columns.push({
                    value: function value(template) {
                        return template.subject;
                    },
                    headerName: UI.T("Subject"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(template) {
                        return EmailCampaignStore.get(template.campaignId).name;
                    },
                    headerName: UI.T("Campaign"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(template) {
                        return Language.get(template.languageId).name;
                    },
                    headerName: UI.T("Language"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: function value(template) {
                        return EmailGatewayStore.get(template.gatewayId).name;
                    },
                    headerName: UI.T("Gateway"),
                    cellStyle: cellStyle,
                    headerStyle: headerStyle
                });
                columns.push({
                    value: deleteButton,
                    headerName: "Delete",
                    headerStyle: { width: "10%" }
                });
                columns.push({
                    value: editButton,
                    headerName: "Edit",
                    headerStyle: { width: "10%" }
                });
            }
            get(EmailTemplateTable.prototype.__proto__ || Object.getPrototypeOf(EmailTemplateTable.prototype), "setColumns", this).call(this, columns);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            EmailTemplateStore.addUpdateListener(function () {
                _this12.redraw();
            });
            EmailTemplateStore.addCreateListener(function () {
                _this12.redraw();
            });
            EmailTemplateStore.addDeleteListener(function () {
                _this12.redraw();
            });
        }
    }]);
    return EmailTemplateTable;
}(SortableTable);

var EmailTemplateWidget = function (_Panel) {
    inherits(EmailTemplateWidget, _Panel);

    function EmailTemplateWidget() {
        classCallCheck(this, EmailTemplateWidget);
        return possibleConstructorReturn(this, (EmailTemplateWidget.__proto__ || Object.getPrototypeOf(EmailTemplateWidget)).apply(this, arguments));
    }

    createClass(EmailTemplateWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(EmailTemplateTable, null), UI.createElement(
                Button,
                { level: Level.SUCCESS, ref: "addTemplateButton" },
                "Add Template"
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this14 = this;

            get(EmailTemplateWidget.prototype.__proto__ || Object.getPrototypeOf(EmailTemplateWidget.prototype), "onMount", this).call(this);

            EmailGatewayStore.registerStreams();
            EmailCampaignStore.registerStreams();
            EmailTemplateStore.registerStreams();

            console.log(EmailTemplateStore.all());

            this.addTemplateButton.addClickListener(function () {
                var addTemplateModal = UI.createElement(AddEmailTemplateModal, { template: _this14.options.entry });
                addTemplateModal.show();
            });
        }
    }]);
    return EmailTemplateWidget;
}(Panel);

var EmailManager = function (_Panel) {
    inherits(EmailManager, _Panel);

    function EmailManager() {
        classCallCheck(this, EmailManager);
        return possibleConstructorReturn(this, (EmailManager.__proto__ || Object.getPrototypeOf(EmailManager)).apply(this, arguments));
    }

    createClass(EmailManager, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(EmailManager.prototype.__proto__ || Object.getPrototypeOf(EmailManager.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.SMALL);
        }
    }, {
        key: "getUrlPrefix",
        value: function getUrlPrefix(urlPart) {
            var url = "/email/manager/";
            if (urlPart) {
                url += urlPart + "/";
            }
            return url;
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (this.tabArea) {
                this.showUrlTab(urlParts[0] || "campaigns");
            } else {
                this.initialUrlParts = urlParts;
            }
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                TabArea,
                { ref: "tabArea", variableHeightPanels: true },
                UI.createElement(EmailCampaignWidget, { ref: "campaignsWidget", tabHref: this.getUrlPrefix("campaigns"), title: "Campaigns", active: true }),
                UI.createElement(EmailTemplateWidget, { ref: "templatesWidget", tabHref: this.getUrlPrefix("templates"), title: "Templates" }),
                UI.createElement(EmailGatewayWidget, { ref: "gatewaysWidget", tabHref: this.getUrlPrefix("gateways"), title: "Gateways" })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.setURL(this.initialUrlParts);
            delete this.initialUrlPars;
        }
    }, {
        key: "showUrlTab",
        value: function showUrlTab(urlPart) {
            if (this[urlPart + "Widget"]) {
                this[urlPart + "Widget"].dispatch("show");
            } else {
                this.campaignsWidget.dispatch("show");
            }
        }
    }]);
    return EmailManager;
}(Panel);

var StorageMeta = function () {
    function StorageMeta(usedSpace, fileCount) {
        classCallCheck(this, StorageMeta);

        this.usedSpace = usedSpace;
        this.fileCount = fileCount;
    }

    createClass(StorageMeta, [{
        key: "getUsedSpace",
        value: function getUsedSpace() {
            return this.usedSpace;
        }
    }, {
        key: "getFileCount",
        value: function getFileCount() {
            return this.fileCount;
        }
    }]);
    return StorageMeta;
}();

var PublicStorageFile = function (_StoreObject) {
    inherits(PublicStorageFile, _StoreObject);

    function PublicStorageFile() {
        classCallCheck(this, PublicStorageFile);
        return possibleConstructorReturn(this, (PublicStorageFile.__proto__ || Object.getPrototypeOf(PublicStorageFile)).apply(this, arguments));
    }

    createClass(PublicStorageFile, [{
        key: "getStorageServer",
        value: function getStorageServer() {
            return StorageServerStore.get(this.storageServerId);
        }
    }, {
        key: "getPublicURL",
        value: function getPublicURL() {
            var storageServer = this.getStorageServer();
            return storageServer.domain + storageServer.urlBasePath + this.serverPath;
        }
    }]);
    return PublicStorageFile;
}(StoreObject);

var PublicStorageFileStoreClass = function (_GenericObjectStore) {
    inherits(PublicStorageFileStoreClass, _GenericObjectStore);

    function PublicStorageFileStoreClass() {
        classCallCheck(this, PublicStorageFileStoreClass);
        return possibleConstructorReturn(this, (PublicStorageFileStoreClass.__proto__ || Object.getPrototypeOf(PublicStorageFileStoreClass)).apply(this, arguments));
    }

    createClass(PublicStorageFileStoreClass, [{
        key: "getStorageMeta",
        value: function getStorageMeta() {
            var usedSpace = 0;
            var files = this.all();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var file = _step.value;

                    usedSpace += file.size;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return new StorageMeta(usedSpace, files.length);
        }
    }, {
        key: "getAllIds",
        value: function getAllIds() {
            var files = this.all();
            var ids = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var file = _step2.value;

                    ids.push(file.id);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return ids;
        }
    }]);
    return PublicStorageFileStoreClass;
}(GenericObjectStore);

var PublicStorageFileStore = new PublicStorageFileStoreClass("PublicStorageFile", PublicStorageFile);

var StorageServer = function (_StoreObject2) {
    inherits(StorageServer, _StoreObject2);

    function StorageServer() {
        classCallCheck(this, StorageServer);
        return possibleConstructorReturn(this, (StorageServer.__proto__ || Object.getPrototypeOf(StorageServer)).apply(this, arguments));
    }

    return StorageServer;
}(StoreObject);

var StorageServerStore = new GenericObjectStore("StorageServer", StorageServer);

var StorageLimits = function () {
    function StorageLimits() {
        classCallCheck(this, StorageLimits);
    }

    createClass(StorageLimits, null, [{
        key: "userFileMaxCount",
        value: function userFileMaxCount() {
            if (!USER.isAuthenticated) {
                return 0;
            }
            if (USER.isSuperUser) {
                return -1;
            }
            return 512;
        }
    }, {
        key: "userUploadMaxCount",
        value: function userUploadMaxCount() {
            if (!USER.isAuthenticated) {
                return 0;
            }
            if (USER.isSuperUser) {
                return -1;
            }
            return 16;
        }
    }, {
        key: "userFileMaxSize",
        value: function userFileMaxSize() {
            if (!USER.isAuthenticated) {
                return 0;
            }
            if (USER.isSuperUser) {
                return -1;
            }
            return 128 * 1024 * 1024;
        }
    }, {
        key: "userTotalMaxSize",
        value: function userTotalMaxSize() {
            if (!USER.isAuthenticated) {
                return 0;
            }
            if (USER.isSuperUser) {
                return 1024 * 1024 * 1024;
            }
            return 256 * 1024 * 1024;
        }
    }, {
        key: "validateFileMaxCount",
        value: function validateFileMaxCount(storageMeta, fileCount) {
            var maxFileCount = StorageLimits.userFileMaxCount();
            if (maxFileCount == -1) {
                return true;
            }
            return storageMeta.getFileCount() + fileCount <= maxFileCount;
        }
    }, {
        key: "validateUploadMaxCount",
        value: function validateUploadMaxCount(fileCount) {
            var uploadMaxCount = StorageLimits.userUploadMaxCount();
            if (uploadMaxCount == -1) {
                return true;
            }
            return fileCount <= uploadMaxCount;
        }
    }, {
        key: "validateFileMaxSize",
        value: function validateFileMaxSize(fileSize) {
            var fileMaxSize = StorageLimits.userFileMaxSize();
            if (fileMaxSize == -1) {
                return true;
            }
            return fileSize <= fileMaxSize;
        }
    }, {
        key: "validateTotalMaxSize",
        value: function validateTotalMaxSize(storageMeta, totalSize) {
            var totalMaxSize = StorageLimits.userTotalMaxSize();
            if (totalMaxSize == -1) {
                return true;
            }
            return storageMeta.getUsedSpace() + totalSize <= totalMaxSize;
        }
    }]);
    return StorageLimits;
}();

var DeleteFileModal = function (_ActionModal) {
    inherits(DeleteFileModal, _ActionModal);

    function DeleteFileModal() {
        classCallCheck(this, DeleteFileModal);
        return possibleConstructorReturn(this, (DeleteFileModal.__proto__ || Object.getPrototypeOf(DeleteFileModal)).apply(this, arguments));
    }

    createClass(DeleteFileModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Delete file";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return "Delete " + this.options.file.name + "?";
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this2 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this2.hide();
                    } }),
                UI.createElement(AjaxButton, { ref: "deleteFileButton", level: Level.DANGER, onClick: function onClick() {
                        _this2.deleteFile();
                    },
                    statusOptions: ["Delete file", { faIcon: "spinner fa-spin", label: " deleting file ..." }, "Delete file", "Failed"] })
            )];
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(DeleteFileModal.prototype.__proto__ || Object.getPrototypeOf(DeleteFileModal.prototype), "hide", this).call(this);
        }
    }, {
        key: "deleteFile",
        value: function deleteFile() {
            var _this3 = this;

            var request = {
                ids: [this.options.file.id]
            };

            this.deleteFileButton.postJSON("/storage/delete_request/", request).then(function () {
                return _this3.hide();
            }, function (error) {
                return _this3.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return DeleteFileModal;
}(ActionModal);

var DeleteAllFilesModal = function (_ActionModal2) {
    inherits(DeleteAllFilesModal, _ActionModal2);

    function DeleteAllFilesModal() {
        classCallCheck(this, DeleteAllFilesModal);
        return possibleConstructorReturn(this, (DeleteAllFilesModal.__proto__ || Object.getPrototypeOf(DeleteAllFilesModal)).apply(this, arguments));
    }

    createClass(DeleteAllFilesModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Delete all files";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(UI.TextElement, { ref: "text", value: "Delete all files?" });
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this5 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this5.hide();
                    } }),
                UI.createElement(AjaxButton, { ref: "deleteAllFilesButton", level: Level.DANGER, onClick: function onClick() {
                        _this5.deleteAllFiles();
                    },
                    statusOptions: ["Delete all files", { faIcon: "spinner fa-spin", label: " deleting all files ..." }, "Delete all files", "Failed"] })
            )];
        }
    }, {
        key: "getIds",
        value: function getIds() {
            return this.options.files.map(function (file) {
                return file.id;
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(DeleteAllFilesModal.prototype.__proto__ || Object.getPrototypeOf(DeleteAllFilesModal.prototype), "hide", this).call(this);
        }
    }, {
        key: "deleteAllFiles",
        value: function deleteAllFiles() {
            var _this6 = this;

            var request = {
                ids: this.getIds()
            };
            this.deleteAllFilesButton.postJSON("/storage/delete_request/", request).then(function () {
                return _this6.hide();
            }, function (error) {
                return _this6.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return DeleteAllFilesModal;
}(ActionModal);

var UploadFilesModal = function (_ActionModal3) {
    inherits(UploadFilesModal, _ActionModal3);

    function UploadFilesModal() {
        classCallCheck(this, UploadFilesModal);
        return possibleConstructorReturn(this, (UploadFilesModal.__proto__ || Object.getPrototypeOf(UploadFilesModal)).apply(this, arguments));
    }

    createClass(UploadFilesModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Upload files";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                "div",
                null,
                UI.createElement(FileInput, { className: "pull-left", ref: "fileInput", multipleFiles: true })
            ), UI.createElement("br", null), UI.createElement(
                ProgressBar,
                { level: Level.SUCCESS, ref: "progress" },
                "Progress"
            )];
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this8 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this8.hide();
                    } }),
                UI.createElement(Button, { level: Level.SUCCESS, label: "Upload", onClick: function onClick() {
                        return _this8.upload();
                    } })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            get(UploadFilesModal.prototype.__proto__ || Object.getPrototypeOf(UploadFilesModal.prototype), "onMount", this).call(this);

            this.fileInput.addChangeListener(function () {
                if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
                    console.error('The File APIs are not fully supported in this browser.');
                    return false;
                }
                _this9.messageArea.clear();
                _this9.progress.set(0);
            });
        }
    }, {
        key: "upload",
        value: function upload() {
            var _this10 = this;

            var files = this.fileInput.getFiles();

            if (files.length == 0) {
                this.messageArea.showMessage("Please select some files!", "red");
                return;
            }

            if (!StorageLimits.validateUploadMaxCount(files.length)) {
                this.messageArea.showMessage("You cannot upload more than " + StorageLimits.userUploadMaxCount() + " files at once!", "red");
                return;
            }

            var storageMeta = PublicStorageFileStore.getStorageMeta();

            if (!StorageLimits.validateFileMaxCount(storageMeta, files.length)) {
                this.messageArea.showMessage("Completion of this request will exceed the maximum number of total files you can " + "store (" + StorageLimits.userFileMaxCount() + ").", "red");
                return;
            }

            var totalSize = 0;
            var formData = new FormData();

            for (var index = 0; index < files.length; ++index) {
                if (!StorageLimits.validateFileMaxSize(files[index].size)) {
                    this.messageArea.showMessage("File " + files[index].name + " is too big (" + StorageManager.humanFileSize(files[index].size) + " while maximum size per file is " + StorageManager.humanFileSize(StorageLimits.userFileMaxSize()) + ").", "red");
                    return;
                }
                formData.append(files[index].name, files[index]);
                totalSize += files[index].size;
            }

            if (!StorageLimits.validateTotalMaxSize(storageMeta, totalSize)) {
                this.messageArea.showMessage("Completion of this request will exceed the maximum total size you can store (" + StorageManager.humanFileSize(StorageLimits.userTotalMaxSize()) + ").", "red");
                return;
            }

            var fileUploadRequest = Ajax.post("/storage/upload_request/", {
                dataType: "json",
                data: formData,
                cache: false,
                processData: false,
                contentType: false
            });

            fileUploadRequest.then(function (data) {
                return _this10.hide();
            }, function (error) {
                _this10.messageArea.showMessage("Error in uploading files: status:" + error.message, "red");
            });

            fileUploadRequest.addProgressListener(function (event) {
                _this10.progressHandling(event);
            });
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            this.progress.set(0);
            get(UploadFilesModal.prototype.__proto__ || Object.getPrototypeOf(UploadFilesModal.prototype), "hide", this).call(this);
        }
    }, {
        key: "progressHandling",
        value: function progressHandling(event) {
            if (event.lengthComputable) {
                this.progress.set(event.loaded / event.total);
            }
        }
    }]);
    return UploadFilesModal;
}(ActionModal);

var RenameFileModal = function (_ActionModal4) {
    inherits(RenameFileModal, _ActionModal4);

    function RenameFileModal() {
        classCallCheck(this, RenameFileModal);
        return possibleConstructorReturn(this, (RenameFileModal.__proto__ || Object.getPrototypeOf(RenameFileModal)).apply(this, arguments));
    }

    createClass(RenameFileModal, [{
        key: "getActionName",
        value: function getActionName() {
            return "Rename file";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(UI.TextElement, { ref: "text", value: "Choose your new file name:" }), UI.createElement(TextInput, { ref: "nameInput", value: this.options.file.name })];
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this12 = this;

            return [UI.createElement(TemporaryMessageArea, { ref: "messageArea" }), UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Close", onClick: function onClick() {
                        return _this12.hide();
                    } }),
                UI.createElement(AjaxButton, { ref: "renameFileButton", level: Level.SUCCESS, onClick: function onClick() {
                        _this12.renameFile();
                    },
                    statusOptions: ["Rename file", { faIcon: "spinner fa-spin", label: " renaming file ..." }, "Rename file", "Failed"] })
            )];
        }
    }, {
        key: "hide",
        value: function hide() {
            this.messageArea.clear();
            get(RenameFileModal.prototype.__proto__ || Object.getPrototypeOf(RenameFileModal.prototype), "hide", this).call(this);
        }
    }, {
        key: "renameFile",
        value: function renameFile() {
            var _this13 = this;

            var request = {
                id: this.options.file.id,
                newName: this.nameInput.getValue()
            };

            this.renameFileButton.postJSON("/storage/rename_request/", request).then(function () {
                return _this13.hide();
            }, function (error) {
                return _this13.messageArea.showMessage(error.message, "red");
            });
        }
    }]);
    return RenameFileModal;
}(ActionModal);

var FileTable = function (_SortableTable) {
    inherits(FileTable, _SortableTable);

    function FileTable() {
        classCallCheck(this, FileTable);
        return possibleConstructorReturn(this, (FileTable.__proto__ || Object.getPrototypeOf(FileTable)).apply(this, arguments));
    }

    createClass(FileTable, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(FileTable.prototype.__proto__ || Object.getPrototypeOf(FileTable.prototype), "setOptions", this).call(this, options);
            this.resetColumnSortingOrder();
        }
    }, {
        key: "resetColumnSortingOrder",
        value: function resetColumnSortingOrder() {
            this.columnSortingOrder = [this.columns[4], this.columns[3], this.columns[0], this.columns[2], this.columns[1]];
        }
    }, {
        key: "getFileIndex",
        value: function getFileIndex(fileId) {
            for (var i = 0; i < this.options.files.length; i += 1) {
                if (this.options.files[i].id === fileId) return i;
            }
            return -1;
        }
    }, {
        key: "addFile",
        value: function addFile(file) {
            this.options.files.push(file);
            this.redraw();
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var cellStyle = {
                textAlign: "left",
                verticalAlign: "middle"
            };
            var headerStyle = {
                textAlign: "left",
                verticalAlign: "middle"
            };
            var columns = [{
                value: function value(file) {
                    return file.name;
                },
                rawValue: function rawValue(file) {
                    return file.name;
                },
                headerName: "Filename",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(file) {
                    return UI.createElement(Link, { href: file.getPublicURL(), target: "_blank_", value: file.getPublicURL() });
                },
                rawValue: function rawValue(file) {
                    return file.getPublicURL();
                },
                headerName: "URL",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(file) {
                    return StorageManager.humanFileSize(file.size);
                },
                rawValue: function rawValue(file) {
                    return file.size;
                },
                headerName: "Size",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(file) {
                    return StemDate.unix(file.dateModified).locale("en").format("DD/MM/YYYY HH:mm:ss");
                },
                rawValue: function rawValue(file) {
                    return file.dateModified;
                },
                sortDescending: true,
                headerName: "Date modified",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(file) {
                    return StemDate.unix(file.dateCreated).locale("en").format("DD/MM/YYYY HH:mm:ss");
                },
                rawValue: function rawValue(file) {
                    return file.dateCreated;
                },
                sortDescending: true,
                headerName: "Date created",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(file) {
                    return UI.createElement(Button, { level: Level.SUCCESS, label: "Rename",
                        onClick: function onClick() {
                            return RenameFileModal.show({ file: file });
                        } });
                },
                headerName: "Rename",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }, {
                value: function value(file) {
                    return UI.createElement(Button, { level: Level.DANGER, label: "Delete",
                        onClick: function onClick() {
                            return DeleteFileModal.show({ file: file });
                        } });
                },
                headerName: "Delete",
                headerStyle: headerStyle,
                cellStyle: cellStyle
            }];
            get(FileTable.prototype.__proto__ || Object.getPrototypeOf(FileTable.prototype), "setColumns", this).call(this, columns);
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.sortEntries(this.options.files);
        }
    }]);
    return FileTable;
}(SortableTable);

var StorageManager = function (_Panel) {
    inherits(StorageManager, _Panel);
    createClass(StorageManager, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("margin", "20px 10%");
        }
    }]);

    function StorageManager(options) {
        classCallCheck(this, StorageManager);

        var _this2 = possibleConstructorReturn(this, (StorageManager.__proto__ || Object.getPrototypeOf(StorageManager)).call(this, options));

        PublicStorageFileStore.addListener("create", function (data) {
            _this2.redraw();
        });
        PublicStorageFileStore.addListener("delete", function (data) {
            _this2.redraw();
        });
        PublicStorageFileStore.addListener("updateOrCreate", function (data) {
            _this2.redraw();
        });
        return _this2;
    }

    createClass(StorageManager, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                title: "File manager"
            };
        }
    }, {
        key: "render",
        value: function render() {
            this.publicFiles = PublicStorageFileStore.all();
            this.table = UI.createElement(FileTable, { files: this.publicFiles, parent: this });

            var topMessage = null;
            var deleteButton = UI.createElement(
                "div",
                { className: "pull-right" },
                UI.createElement(Button, { level: Level.DANGER, label: "Delete all",
                    onClick: function onClick() {
                        return DeleteAllFilesModal.show({ files: PublicStorageFileStore.all() });
                    },
                    style: { marginTop: "5px", marginBottom: "5px" } })
            );
            if (this.publicFiles.length == 0) {
                topMessage = UI.createElement(
                    "div",
                    { className: "pull-left" },
                    UI.createElement(
                        "h3",
                        null,
                        "You don't have any files uploaded!"
                    )
                );
                deleteButton = null;
            }

            var uploadButton = UI.createElement(
                "div",
                { className: "pull-right" },
                UI.createElement(Button, { level: Level.PRIMARY, label: "Upload files",
                    onClick: function onClick() {
                        return UploadFilesModal.show();
                    },
                    style: { marginTop: "5px", marginBottom: "5px" } })
            );

            return [UI.createElement(
                "div",
                { className: "pull-left" },
                UI.createElement(
                    "h4",
                    null,
                    UI.createElement(
                        "strong",
                        null,
                        this.options.title
                    )
                )
            ), topMessage, deleteButton, uploadButton, this.table];
        }

        // TODO: maybe move this to some "common functionality" file?

    }], [{
        key: "humanFileSize",
        value: function humanFileSize(size) {
            var i = Math.floor(Math.log(size) / Math.log(1024));
            return (size / Math.pow(1024, i)).toFixed(2) * 1 + " " + ["B", "kB", "MB", "GB", "TB"][i];
        }
    }]);
    return StorageManager;
}(Panel);

var AdminPanel = function (_CardPanel) {
    inherits(AdminPanel, _CardPanel);

    function AdminPanel() {
        classCallCheck(this, AdminPanel);
        return possibleConstructorReturn(this, (AdminPanel.__proto__ || Object.getPrototypeOf(AdminPanel)).apply(this, arguments));
    }

    createClass(AdminPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(AdminPanel.prototype.__proto__ || Object.getPrototypeOf(AdminPanel.prototype), "extraNodeAttributes", this).call(this);
            attr.setStyle("margin", "20px 10%");
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                title: "Admin Panel",
                level: Level.INFO,
                style: {
                    margin: "10px"
                }
            };
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(
                "table",
                { className: "table" },
                UI.createElement(
                    "tbody",
                    null,
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/manage/icarus/#machines", value: "Icarus" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/manage/icarus/#machine_logging", value: "Machine logging" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/manage/icarus/#website_logging", value: "Website logging" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/analytics", value: "Analytics" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/manage/users", value: "Users" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/manage/charts", value: "Charts" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/email/manager", value: "Email Manager" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/storage/manager", value: "Storage Manager" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/manage/translation", value: "Translation" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/real_ratings", value: "Real ratings" })
                        )
                    ),
                    UI.createElement(
                        "tr",
                        null,
                        UI.createElement(
                            "td",
                            null,
                            UI.createElement(Link, { href: "/private-archives", value: "Private Archives" })
                        )
                    )
                )
            );
        }
    }]);
    return AdminPanel;
}(CardPanel);

var MachineInstance = function (_StoreObject) {
    inherits(MachineInstance, _StoreObject);

    function MachineInstance() {
        classCallCheck(this, MachineInstance);
        return possibleConstructorReturn(this, (MachineInstance.__proto__ || Object.getPrototypeOf(MachineInstance)).apply(this, arguments));
    }

    createClass(MachineInstance, [{
        key: "logMessage",
        value: function logMessage(event) {
            this.dispatch("logMessage", event);
        }
    }, {
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.type === "MachineInstance-logMessage") {
                // TODO @Urs: save messages in store object
            } else if (event.type === "MachineInstance-cloneStart") {
                // TODO: investigate how we can get more useful information from these messages
            } else if (event.type === "MachineInstance-cloneStatus") {} else if (event.type === "MachineInstance-cloneFinish") {} else if (event.type === "MachineInstance-serviceStatusUpdate") {
                if (!event.hasOwnProperty("serviceStatus")) {
                    console.log("MachineInstance: serviceStatusUpdate event does not contain serviceStatus field!");
                    return;
                }
                this.serviceUpdate(event.serviceStatus);
            } else if (event.type === "MachineInstance-serviceStatusStart") {
                if (!event.hasOwnProperty("serviceStatus")) {
                    console.log("MachineInstance: serviceStatusStart event does not contain serviceStatus field!");
                    return;
                }
                this.serviceStart(event.serviceStatus);
            } else if (event.type === "MachineInstance-serviceStatusStop") {
                if (!event.hasOwnProperty("serviceStatus")) {
                    console.log("MachineInstance: serviceStatusStop event does not contain serviceStatus field!");
                    return;
                }
                this.serviceStop(event.serviceStatus);
            } else {
                get(MachineInstance.prototype.__proto__ || Object.getPrototypeOf(MachineInstance.prototype), "applyEvent", this).call(this, event);
            }
        }
    }, {
        key: "serviceStart",
        value: function serviceStart(status) {
            this.updateServiceStatus(status);
            this.services[status.service].current.meta.status = MachineInstance.statusType.NEW;
            this.setServiceWarningTimeout(status.service, 1.5);
            this.setServiceDangerTimeout(status.service, 3.5);
            this.clearServiceOfflineTimeout(status.service);
        }
    }, {
        key: "serviceUpdate",
        value: function serviceUpdate(status) {
            this.updateServiceStatus(status);
            this.services[status.service].current.meta.status = MachineInstance.statusType.ONLINE;
            this.setServiceWarningTimeout(status.service, 1.5);
            this.setServiceDangerTimeout(status.service, 3.5);
            this.clearServiceOfflineTimeout(status.service);
        }
    }, {
        key: "serviceStop",
        value: function serviceStop(status) {
            this.updateServiceStatus(status);
            this.services[status.service].current.meta.status = MachineInstance.statusType.OFFLINE;
            this.setServiceOfflineTimeout(status.service, 1000);
        }
    }, {
        key: "updateServiceStatus",
        value: function updateServiceStatus(status) {
            // TODO: save in a rolling window to enable graph data
            if (!this.hasOwnProperty("services")) {
                this.services = {};
            }
            if (!this.services.hasOwnProperty(status.service)) {
                this.services[status.service] = {};
            }
            if (!this.services[status.service].hasOwnProperty("current")) {
                this.services[status.service].current = {};
            }
            if (!this.services[status.service].current.hasOwnProperty("meta")) {
                this.services[status.service].current.meta = {};
            }

            this.services[status.service].current.data = status;
        }
    }, {
        key: "clearServiceWarningTimeout",
        value: function clearServiceWarningTimeout(serviceName) {
            if (this.services[serviceName].current.meta.warningTimeout) {
                clearTimeout(this.services[serviceName].current.meta.warningTimeout);
                this.services[serviceName].current.meta.warningTimeout = null;
            }
        }
    }, {
        key: "clearServiceDangerTimeout",
        value: function clearServiceDangerTimeout(serviceName) {
            if (this.services[serviceName].current.meta.dangerTimeout) {
                clearTimeout(this.services[serviceName].current.meta.dangerTimeout);
                this.services[serviceName].current.meta.dangerTimeout = null;
            }
        }
    }, {
        key: "clearServiceOfflineTimeout",
        value: function clearServiceOfflineTimeout(serviceName) {
            if (this.services[serviceName].current.meta.offlineTimeout) {
                clearTimeout(this.services[serviceName].current.meta.offlineTimeout);
                this.services[serviceName].current.meta.offlineTimeout = null;
            }
        }
    }, {
        key: "serviceWarning",
        value: function serviceWarning(serviceName) {
            this.services[serviceName].current.meta.status = MachineInstance.statusType.WARNING;
            this.dispatch("MachineInstance-serviceStatusWarning", this.services[serviceName]);
        }
    }, {
        key: "serviceDanger",
        value: function serviceDanger(serviceName) {
            this.services[serviceName].current.meta.status = MachineInstance.statusType.DANGER;
            this.dispatch("MachineInstance-serviceStatusDanger", this.services[serviceName]);
        }
    }, {
        key: "serviceOffline",
        value: function serviceOffline(serviceName) {
            delete this.services[serviceName];
            this.dispatch("MachineInstance-serviceStatusOffline");
        }
    }, {
        key: "setServiceWarningTimeout",
        value: function setServiceWarningTimeout(serviceName, factor) {
            var _this2 = this;

            this.services[serviceName].current.meta.warningThreshold = this.services[serviceName].current.data.updateInterval * factor;
            this.clearServiceWarningTimeout(serviceName);
            this.services[serviceName].current.meta.warningTimeout = setTimeout(function () {
                _this2.serviceWarning(serviceName);
                _this2.services[serviceName].current.meta.warningTimeout = null;
            }, this.services[serviceName].current.meta.warningThreshold);
        }
    }, {
        key: "setServiceDangerTimeout",
        value: function setServiceDangerTimeout(serviceName, factor) {
            var _this3 = this;

            this.services[serviceName].current.meta.dangerThreshold = this.services[serviceName].current.data.updateInterval * factor;
            this.clearServiceDangerTimeout(serviceName);
            this.services[serviceName].current.meta.dangerTimeout = setTimeout(function () {
                _this3.serviceDanger(serviceName);
                _this3.services[serviceName].current.meta.dangerTimeout = null;
            }, this.services[serviceName].current.meta.dangerThreshold);
        }
    }, {
        key: "setServiceOfflineTimeout",
        value: function setServiceOfflineTimeout(serviceName, timeout) {
            var _this4 = this;

            this.clearServiceWarningTimeout(serviceName);
            this.clearServiceDangerTimeout(serviceName);

            this.services[serviceName].current.meta.offlineThreshold = timeout;
            this.clearServiceOfflineTimeout(serviceName);
            this.services[serviceName].current.meta.offlineTimeout = setTimeout(function () {
                _this4.serviceOffline(serviceName);
            }, this.services[serviceName].current.meta.offlineThreshold);
        }
    }]);
    return MachineInstance;
}(StoreObject);

MachineInstance.statusType = {
    NEW: 1,
    ONLINE: 2,
    OFFLINE: 3,
    WARNING: 4,
    DANGER: 5
};

var MachineInstanceStoreClass = function (_GenericObjectStore) {
    inherits(MachineInstanceStoreClass, _GenericObjectStore);

    function MachineInstanceStoreClass() {
        classCallCheck(this, MachineInstanceStoreClass);
        return possibleConstructorReturn(this, (MachineInstanceStoreClass.__proto__ || Object.getPrototypeOf(MachineInstanceStoreClass)).apply(this, arguments));
    }

    createClass(MachineInstanceStoreClass, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.type == "MachineInstance-serviceStatusUpdate") {
                get(MachineInstanceStoreClass.prototype.__proto__ || Object.getPrototypeOf(MachineInstanceStoreClass.prototype), "applyEvent", this).call(this, event);
            } else if (event.type == "MachineInstance-logMessage") {
                this.dispatch("logMessage", event);
                get(MachineInstanceStoreClass.prototype.__proto__ || Object.getPrototypeOf(MachineInstanceStoreClass.prototype), "applyEvent", this).call(this, event);
            } else {
                get(MachineInstanceStoreClass.prototype.__proto__ || Object.getPrototypeOf(MachineInstanceStoreClass.prototype), "applyEvent", this).call(this, event);
            }
        }
    }, {
        key: "registerStreams",
        value: function registerStreams() {
            GlobalState.registerStream("machine_status");
            GlobalState.registerStream("service_status");
            GlobalState.registerStream("machine_log");
            GlobalState.registerStream("meta-uranus-linode-a");
        }
    }]);
    return MachineInstanceStoreClass;
}(GenericObjectStore);

var MachineInstanceStore = new MachineInstanceStoreClass("MachineInstance", MachineInstance);

var dontAsk = false;

var ConfirmActionModal = function (_ActionModal) {
    inherits(ConfirmActionModal, _ActionModal);

    function ConfirmActionModal() {
        classCallCheck(this, ConfirmActionModal);
        return possibleConstructorReturn(this, (ConfirmActionModal.__proto__ || Object.getPrototypeOf(ConfirmActionModal)).apply(this, arguments));
    }

    createClass(ConfirmActionModal, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(ConfirmActionModal.prototype.__proto__ || Object.getPrototypeOf(ConfirmActionModal.prototype), "getDefaultOptions", this).call(this), {
                closeName: "No",
                level: Level.DANGER,
                actionName: "Yes"
            });
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Confirm action";
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                SectionDivider$$1,
                { ref: "divider", orientation: Orientation.VERTICAL,
                    style: { height: "100%", width: "100%", overflow: "hidden" } },
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(UI.TextElement, { ref: "text", value: "Are you sure you want to complete this action?" }),
                    UI.createElement("br", null),
                    UI.createElement(UI.TextElement, { ref: "customText", value: this.options.text || "" })
                ),
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        FormField,
                        { labelWidth: "92%", contentWidth: "3%", contentFirst: true, label: "I am not high and I am not drunk, please don't bother me for the next 2 minutes!" },
                        UI.createElement(CheckboxInput, { ref: "rememberDecisionCheckbox", style: { display: "inline-block", marginTop: "11px" } })
                    )
                )
            );
        }
    }, {
        key: "action",
        value: function action() {
            if (this.rememberDecisionCheckbox.getValue()) {
                dontAsk = true;
                setTimeout(function () {
                    dontAsk = false;
                }, 2 * 60 * 1000);
            }
            this.options.callbackAction();
            this.hide();
        }
    }], [{
        key: "start",
        value: function start(text, callback) {
            if (dontAsk) {
                callback();
                return;
            }

            this.show({
                callbackAction: callback,
                text: text
            });
        }
    }]);
    return ConfirmActionModal;
}(ActionModal);

var ConfirmDestroyModal = function (_ActionModal2) {
    inherits(ConfirmDestroyModal, _ActionModal2);

    function ConfirmDestroyModal() {
        classCallCheck(this, ConfirmDestroyModal);
        return possibleConstructorReturn(this, (ConfirmDestroyModal.__proto__ || Object.getPrototypeOf(ConfirmDestroyModal)).apply(this, arguments));
    }

    createClass(ConfirmDestroyModal, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(ConfirmDestroyModal.prototype.__proto__ || Object.getPrototypeOf(ConfirmDestroyModal.prototype), "getDefaultOptions", this).call(this), {
                closeName: "No",
                level: Level.DANGER,
                actionName: "Confirm destroy"
            });
        }
    }, {
        key: "action",
        value: function action() {
            this.options.callbackAction();
            this.hide();
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return UI.createElement(
                "div",
                null,
                UI.createElement(UI.TextElement, { value: "Are you sure you want to complete this action?" }),
                UI.createElement("br", null),
                UI.createElement(UI.TextElement, { value: this.options.text || "" })
            );
        }
    }], [{
        key: "start",
        value: function start(text, callback) {
            if (dontAsk) {
                text += ". I know you are sober, but this is a serious action and you have to be fully aware!";
            }
            this.show({
                callbackAction: callback,
                text: text
            });
        }
    }]);
    return ConfirmDestroyModal;
}(ActionModal);

var MachineInstanceCollapsibleRow = function (_CollapsibleTableRow) {
    inherits(MachineInstanceCollapsibleRow, _CollapsibleTableRow);

    function MachineInstanceCollapsibleRow() {
        classCallCheck(this, MachineInstanceCollapsibleRow);
        return possibleConstructorReturn(this, (MachineInstanceCollapsibleRow.__proto__ || Object.getPrototypeOf(MachineInstanceCollapsibleRow)).apply(this, arguments));
    }

    createClass(MachineInstanceCollapsibleRow, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(MachineInstanceCollapsibleRow.prototype.__proto__ || Object.getPrototypeOf(MachineInstanceCollapsibleRow.prototype), "setOptions", this).call(this, options);

            if (options.entry) {
                this.machine = options.entry;
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(MachineInstanceCollapsibleRow.prototype.__proto__ || Object.getPrototypeOf(MachineInstanceCollapsibleRow.prototype), "onMount", this).call(this);

            var simpleActions = [{ name: "Boot", commandName: "boot" }, { name: "Shutdown", commandName: "shutdown" }, { name: "Reboot", commandName: "reboot" }, { name: "Clone", commandName: "clone" }, { name: "Update", commandName: "update" }];

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                var _loop = function _loop() {
                    var action = _step.value;

                    _this4["machine" + action.name + "Button"].addClickListener(function () {
                        ConfirmActionModal.start("\"" + action.name + "\" machine with id " + _this4.machine.id + " (" + _this4.machine.label + ")", function () {
                            _this4.sendCommand(action.commandName);
                        });
                    });
                };

                for (var _iterator = simpleActions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.machineDestroyButton.addClickListener(function () {
                ConfirmDestroyModal.start("\"Destroy\" machine with id " + _this4.machine.id + " (" + _this4.machine.label + ")", function () {
                    _this4.sendCommand("destroy");
                });
            });

            if (this.machine.scripts && this.machine.scripts.length > 0) {
                this.runCustomScriptButton.addClickListener(function () {
                    ConfirmActionModal.start("Run script \"" + _this4.customScriptSelect.get() + "\" on machine with id " + _this4.machine.id, function () {
                        _this4.sendCommand("script", _this4.customScriptSelect.get());
                    });
                });
            }

            this.machine.addEventListener("MachineInstance-cloneStart", function (event) {
                _this4.machine.inCloning = true;
                _this4.options.parent.redraw();
            });

            this.machine.addEventListener("MachineInstance-cloneFinish", function (event) {
                _this4.machine.inCloning = false;
                _this4.options.parent.redraw();
            });

            this.machine.addEventListener("MachineInstance-logMessage", function (event) {
                _this4.machineLogsHighlighter.append(event.message);
            });

            var redrawTriggeringEvents = ["updateOrCreate", "MachineInstance-cloneStatus", "MachineInstance-serviceStatusStart", "MachineInstance-serviceStatusUpdate", "MachineInstance-serviceStatusWarning", "MachineInstance-serviceStatusDanger", "MachineInstance-serviceStatusStop", "MachineInstance-serviceStatusOffline"];
            this.attachEventListener(this.machine, redrawTriggeringEvents, function () {
                _this4.redraw();
            });
        }
    }, {
        key: "redraw",
        value: function redraw() {
            if (!get(MachineInstanceCollapsibleRow.prototype.__proto__ || Object.getPrototypeOf(MachineInstanceCollapsibleRow.prototype), "redraw", this).call(this)) {
                return false;
            }

            if (this.scriptChoice) {
                this.setScriptChoice(this.scriptChoice);
            }
            return true;
        }
    }, {
        key: "renderCollapsible",
        value: function renderCollapsible() {
            var publicRDNS = this.machine.publicRDNS || "N/A";
            var publicIPAddress = this.machine.publicIPAddress || "N/A";
            var privateRDNS = this.machine.privateRDNS || "N/A";
            var privateIPAddress = this.machine.privateIPAddress || "N/A";
            return [UI.createElement(
                "div",
                { ref: "machineInfo" },
                UI.createElement(
                    "p",
                    null,
                    "RAM: ",
                    this.machine.ramSize,
                    " MB"
                ),
                UI.createElement(
                    "p",
                    null,
                    "Disk: ",
                    this.machine.diskSize,
                    " MB"
                ),
                UI.createElement(
                    "p",
                    null,
                    "Linux distribution: ",
                    this.machine.distro
                ),
                UI.createElement(
                    "p",
                    null,
                    "Public RDNS Name: ",
                    publicRDNS
                ),
                UI.createElement(
                    "p",
                    null,
                    "Public IP address: ",
                    publicIPAddress
                ),
                UI.createElement(
                    "p",
                    null,
                    "Private RDNS Name: ",
                    privateRDNS
                ),
                UI.createElement(
                    "p",
                    null,
                    "Private IP address: ",
                    privateIPAddress
                ),
                UI.createElement(
                    "p",
                    null,
                    "Date created: ",
                    this.machine.dateCreated
                )
            ), UI.createElement(CodeEditor, { ref: "machineLogsHighlighter", maxLines: 30, value: this.machine.logs })];
        }
    }, {
        key: "sendCommand",
        value: function sendCommand(command, scriptName) {
            MachineInstanceCollapsibleRow.sendCommand([this.machine.id], command, scriptName);
        }
    }], [{
        key: "sendCommand",
        value: function sendCommand(ids, command, scriptName) {
            var request = {
                action: command,
                ids: ids
            };

            if (command === "script") {
                request.scriptName = scriptName;
            }

            Ajax.postJSON("/manage/control_machine/", request);
        }
    }]);
    return MachineInstanceCollapsibleRow;
}(CollapsibleTableRow);

var MachineGroupTable = function (_CollapsibleTable) {
    inherits(MachineGroupTable, _CollapsibleTable);

    function MachineGroupTable() {
        classCallCheck(this, MachineGroupTable);
        return possibleConstructorReturn(this, (MachineGroupTable.__proto__ || Object.getPrototypeOf(MachineGroupTable)).apply(this, arguments));
    }

    createClass(MachineGroupTable, [{
        key: "onMount",
        value: function onMount() {
            get(MachineGroupTable.prototype.__proto__ || Object.getPrototypeOf(MachineGroupTable.prototype), "onMount", this).call(this);
        }
    }, {
        key: "getRowClass",
        value: function getRowClass() {
            return MachineInstanceCollapsibleRow;
        }
    }, {
        key: "renderMachineActions",
        value: function renderMachineActions(machine) {
            var scriptsButton = UI.createElement(
                "a",
                { className: "btn btn-info disabled" },
                "No scripts"
            );

            var disableActions = false;
            if (machine.inCloning) {
                disableActions = true;
            }

            var disableDestroy = false;
            if (disableActions || machine.isProtected) {
                disableDestroy = true;
            }

            if (machine.hasOwnProperty("scripts") && machine.scripts.length > 0) {
                var scriptsDropdown = machine.scripts.map(function (scriptName, index) {
                    return UI.createElement(
                        "li",
                        { key: index },
                        UI.createElement(
                            "a",
                            { ref: "scriptChoice" + "-" + scriptName },
                            scriptName
                        )
                    );
                });
                scriptsButton = UI.createElement(
                    "div",
                    { className: "btn-group" },
                    UI.createElement(Button, { ref: "runCustomScriptButton", level: Level.INFO, label: "Run", disabled: disableActions, parent: this }),
                    UI.createElement(Select, { ref: "customScriptSelect", options: machine.scripts, style: { width: "auto", height: "30px" }, disabled: disableActions, parent: this })
                );
            }

            return [UI.createElement(
                "div",
                { className: "btn-toolbar" },
                UI.createElement(
                    "div",
                    { className: "btn-group btn-group-sm", role: "group" },
                    UI.createElement(Button, { ref: "machineBootButton", level: Level.INFO, label: "Boot", disabled: disableActions, parent: this }),
                    UI.createElement(Button, { ref: "machineShutdownButton", level: Level.INFO, label: "Shutdown", disabled: disableActions, parent: this }),
                    UI.createElement(Button, { ref: "machineRebootButton", level: Level.INFO, label: "Reboot", disabled: disableActions, parent: this }),
                    UI.createElement(Button, { ref: "machineCloneButton", level: Level.INFO, label: "Clone", disabled: disableActions, parent: this }),
                    UI.createElement(Button, { ref: "machineUpdateButton", level: Level.INFO, label: "Update", disabled: disableActions, parent: this })
                ),
                scriptsButton,
                UI.createElement(Button, { ref: "machineDestroyButton", className: "pull-right", level: Level.DANGER, label: "Destroy", disabled: disableDestroy, parent: this })
            )];
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.options.machines || [];
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            get(MachineGroupTable.prototype.__proto__ || Object.getPrototypeOf(MachineGroupTable.prototype), "setColumns", this).call(this, [{
                value: function value(machine) {
                    return machine.id;
                },
                headerName: "Id"
            }, {
                value: function value(machine) {
                    return machine.label;
                },
                headerName: "Label"
            }, {
                value: MachineGroupTable.renderMachineStatus,
                headerName: "Status"
            }, {
                value: MachineGroupTable.renderMachineServices,
                headerName: "Running services"
            }, {
                value: this.renderMachineActions,
                headerName: "Actions"
            }]);
        }
    }], [{
        key: "renderMachineServices",
        value: function renderMachineServices(machine) {
            var services = [];
            if (machine.hasOwnProperty("services")) {
                services = Object.keys(machine.services);
            }

            if (services.length === 0) {
                return UI.createElement(
                    "span",
                    { className: "label label-danger" },
                    "No service running"
                );
            }

            var excludeFromTooltip = new Set(["service", "machineId", "timestamp", "clientTimestamp"]);

            var serviceSpans = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = services[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var serviceName = _step2.value;

                    var service = machine.services[serviceName].current;

                    var serviceStatusTooltip = "";

                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = Object.keys(service.data)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var serviceField = _step3.value;

                            if (excludeFromTooltip.has(serviceField)) continue;
                            serviceStatusTooltip += serviceField + ": " + service.data[serviceField] + "\n";
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }

                    serviceStatusTooltip += "timestamp: " + new Date(service.data.timestamp);

                    var titleSuffix = "";
                    var serviceStatus = void 0;
                    if (service.meta.status == MachineInstance.statusType.DANGER) {
                        serviceStatus = "danger";
                    } else if (service.meta.status == MachineInstance.statusType.WARNING) {
                        serviceStatus = "warning";
                    } else if (service.meta.status == MachineInstance.statusType.NEW) {
                        serviceStatus = "primary";
                        titleSuffix = " (New)";
                    } else if (service.meta.status == MachineInstance.statusType.OFFLINE) {
                        serviceStatus = "default";
                    } else {
                        serviceStatus = "success";
                    }

                    serviceSpans.push(UI.createElement(
                        "a",
                        { key: serviceName, className: "label label-" + serviceStatus, title: serviceStatusTooltip },
                        serviceName + titleSuffix
                    ));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return serviceSpans;
        }
    }, {
        key: "renderMachineStatus",
        value: function renderMachineStatus(machine) {
            if (machine.inCloning) {
                return [UI.createElement(
                    "p",
                    null,
                    "Cloning ..."
                )];
            } else {
                return [UI.createElement(
                    "p",
                    null,
                    machine.status
                )];
            }
        }
    }]);
    return MachineGroupTable;
}(CollapsibleTable);

var MachineInstanceWidget = function (_Panel) {
    inherits(MachineInstanceWidget, _Panel);

    function MachineInstanceWidget(options) {
        classCallCheck(this, MachineInstanceWidget);

        var _this6 = possibleConstructorReturn(this, (MachineInstanceWidget.__proto__ || Object.getPrototypeOf(MachineInstanceWidget)).call(this, options));

        MachineInstanceStore.addCreateListener(function (data) {
            _this6.redraw();
        }, false);

        MachineInstanceStore.addDeleteListener(function (obj, event) {
            _this6.redraw();
        });

        MachineInstanceStore.registerStreams();

        _this6.machineGroups = new Map();
        return _this6;
    }

    createClass(MachineInstanceWidget, [{
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(MachineInstanceWidget.prototype.__proto__ || Object.getPrototypeOf(MachineInstanceWidget.prototype), "getNodeAttributes", this).call(this);

            attr.addClass("panel-group");
            attr.setAttribute("role", "tablist");
            //TODO: see if this should
            attr.setAttribute("aria-multiselectable", "true");

            return attr;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            get(MachineInstanceWidget.prototype.__proto__ || Object.getPrototypeOf(MachineInstanceWidget.prototype), "onMount", this).call(this);
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                var _loop2 = function _loop2() {
                    var _step4$value = slicedToArray(_step4.value, 2),
                        machineGroupName = _step4$value[0],
                        machineGroup = _step4$value[1];

                    _this7["groupUpdateAll-" + machineGroupName].addClickListener(function (event) {
                        event.preventDefault();
                        event.stopPropagation();

                        ConfirmActionModal.start("\"Update\" all machines from group \"" + machineGroupName + "\".", function () {
                            var ids = [];
                            var _iteratorNormalCompletion5 = true;
                            var _didIteratorError5 = false;
                            var _iteratorError5 = undefined;

                            try {
                                for (var _iterator5 = machineGroup[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                    var machine = _step5.value;

                                    ids.push(machine.id);
                                }
                            } catch (err) {
                                _didIteratorError5 = true;
                                _iteratorError5 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                        _iterator5.return();
                                    }
                                } finally {
                                    if (_didIteratorError5) {
                                        throw _iteratorError5;
                                    }
                                }
                            }

                            MachineInstanceCollapsibleRow.sendCommand(ids, "update");
                        });
                    });
                };

                for (var _iterator4 = this.machineGroups[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    _loop2();
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            var machines = MachineInstanceStore.all(true);
            var otherMachines = [];

            this.machineGroups = new Map();
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = machines[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var machine = _step6.value;

                    if (!machine.machineGroup) {
                        otherMachines.push(machine);
                        continue;
                    }

                    if (!this.machineGroups.has(machine.machineGroup)) {
                        this.machineGroups.set(machine.machineGroup, []);
                    }
                    this.machineGroups.get(machine.machineGroup).push(machine);
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            var renderedMachineGroups = [];
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = this.machineGroups[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var _step7$value = slicedToArray(_step7.value, 2),
                        _machineGroupName = _step7$value[0],
                        _machineGroup = _step7$value[1];

                    renderedMachineGroups.push(this.renderMachineGroup(_machineGroupName, _machineGroup));
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            if (otherMachines.length > 0) {
                renderedMachineGroups.push(this.renderMachineGroup("Other", otherMachines));
            }

            return [renderedMachineGroups];
        }
    }, {
        key: "renderMachineGroup",
        value: function renderMachineGroup(machineGroupName, machineGroup) {
            var style = {
                float: "right",
                marginTop: "-7px"
            };
            var title = [machineGroupName, UI.createElement(Button, { ref: "groupUpdateAll-" + machineGroupName, style: style, level: Level.INFO, label: "Update All", parent: this })];
            return UI.createElement(
                CollapsiblePanel,
                { key: machineGroupName, title: title, collapsed: false },
                UI.createElement(MachineGroupTable, { machines: machineGroup, parent: this })
            );
        }
    }]);
    return MachineInstanceWidget;
}(Panel);

var WebsiteLoggingWidget = function (_Panel) {
    inherits(WebsiteLoggingWidget, _Panel);

    function WebsiteLoggingWidget() {
        classCallCheck(this, WebsiteLoggingWidget);
        return possibleConstructorReturn(this, (WebsiteLoggingWidget.__proto__ || Object.getPrototypeOf(WebsiteLoggingWidget)).apply(this, arguments));
    }

    createClass(WebsiteLoggingWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(StaticCodeHighlighter, { ref: "logger", numLines: 40, readOnly: true })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(WebsiteLoggingWidget.prototype.__proto__ || Object.getPrototypeOf(WebsiteLoggingWidget.prototype), "onMount", this).call(this);

            WebsocketSubscriber.addListener("global_logging", function (logMessage) {
                var formattedMessage = "[" + logMessage.levelname + " " + logMessage.asctime + "] [" + logMessage.service.name + "] " + logMessage.message + "\n";
                if (logMessage.hasOwnProperty("exc_info")) {
                    formattedMessage += "Stack trace:\n" + logMessage.exc_info + "\n";
                }
                _this2.logger.append(formattedMessage);
            });
        }
    }]);
    return WebsiteLoggingWidget;
}(Panel);

var MachineLoggingWidget = function (_Panel) {
    inherits(MachineLoggingWidget, _Panel);

    function MachineLoggingWidget(options) {
        classCallCheck(this, MachineLoggingWidget);
        return possibleConstructorReturn(this, (MachineLoggingWidget.__proto__ || Object.getPrototypeOf(MachineLoggingWidget)).call(this, options));
    }

    createClass(MachineLoggingWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(StaticCodeHighlighter, { ref: "logger", numLines: 40, readOnly: true })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(MachineLoggingWidget.prototype.__proto__ || Object.getPrototypeOf(MachineLoggingWidget.prototype), "onMount", this).call(this);

            MachineInstanceStore.registerStreams();

            this.attachListener(MachineInstanceStore, "logMessage", function (logMessage) {
                var formattedMessage = "[" + logMessage.objectId + "] " + logMessage.message;
                if (!formattedMessage.endsWith("\n")) {
                    formattedMessage += "\n";
                }
                _this2.logger.append(formattedMessage);
            });
        }
    }]);
    return MachineLoggingWidget;
}(Panel);

var GeneralControlPanelData = function (_StoreObject) {
    inherits(GeneralControlPanelData, _StoreObject);

    function GeneralControlPanelData() {
        classCallCheck(this, GeneralControlPanelData);
        return possibleConstructorReturn(this, (GeneralControlPanelData.__proto__ || Object.getPrototypeOf(GeneralControlPanelData)).apply(this, arguments));
    }

    return GeneralControlPanelData;
}(StoreObject);

var GeneralControlPanelDataStoreClass = function (_GenericObjectStore) {
    inherits(GeneralControlPanelDataStoreClass, _GenericObjectStore);

    function GeneralControlPanelDataStoreClass() {
        classCallCheck(this, GeneralControlPanelDataStoreClass);
        return possibleConstructorReturn(this, (GeneralControlPanelDataStoreClass.__proto__ || Object.getPrototypeOf(GeneralControlPanelDataStoreClass)).apply(this, arguments));
    }

    createClass(GeneralControlPanelDataStoreClass, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            get(GeneralControlPanelDataStoreClass.prototype.__proto__ || Object.getPrototypeOf(GeneralControlPanelDataStoreClass.prototype), "applyEvent", this).call(this, event);
        }
    }, {
        key: "registerStreams",
        value: function registerStreams() {
            GlobalState.registerStream("uranus-general-control-panel");
        }
    }]);
    return GeneralControlPanelDataStoreClass;
}(GenericObjectStore);

var GeneralControlPanelDataStore = new GeneralControlPanelDataStoreClass("GeneralControlPanelData", GeneralControlPanelData);

var EditEvaluationMachinesWatcherModal = function (_ActionModal) {
    inherits(EditEvaluationMachinesWatcherModal, _ActionModal);

    function EditEvaluationMachinesWatcherModal() {
        classCallCheck(this, EditEvaluationMachinesWatcherModal);
        return possibleConstructorReturn(this, (EditEvaluationMachinesWatcherModal.__proto__ || Object.getPrototypeOf(EditEvaluationMachinesWatcherModal)).apply(this, arguments));
    }

    createClass(EditEvaluationMachinesWatcherModal, [{
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                FormField,
                { label: "Total machines target:", ref: "totalMachinesTargetField" },
                UI.createElement(TextInput, { value: this.options.defaultTotalTarget, ref: "totalMachinesTargetFieldInput" })
            ), UI.createElement(
                FormField,
                { label: "Running machines target:", ref: "runningMachinesTargetField" },
                UI.createElement(TextInput, { value: this.options.defaultRunningTarget, ref: "runningMachinesTargetInput" })
            )];
        }
    }, {
        key: "action",
        value: function action() {
            var _this2 = this;

            var request = {
                action: "edit",
                objectType: "evaluationMachinesWatcherTarget",
                newTotalTarget: this.totalMachinesTargetFieldInput.getValue(),
                newRunningTarget: this.runningMachinesTargetInput.getValue()
            };

            Ajax.postJSON("/manage/control_general_control_panel/", request).then(function (data) {
                return _this2.hide();
            }, function (error) {
                _this2.messageArea.showMessage("Error setting target values: " + error.message, "red");
            });
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return "Edit evaluation machines target values";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Save";
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }]);
    return EditEvaluationMachinesWatcherModal;
}(ActionModal);

var EvaluationMachinesWatcherPanel = function (_CardPanel) {
    inherits(EvaluationMachinesWatcherPanel, _CardPanel);

    function EvaluationMachinesWatcherPanel(options) {
        classCallCheck(this, EvaluationMachinesWatcherPanel);

        var _this3 = possibleConstructorReturn(this, (EvaluationMachinesWatcherPanel.__proto__ || Object.getPrototypeOf(EvaluationMachinesWatcherPanel)).call(this, options));

        _this3.data = {
            "evaluationMachinesTotalCount": 0,
            "evaluationMachinesTotalTarget": 0,
            "evaluationMachinesRunningCount": 0,
            "evaluationMachinesRunningTarget": 0,
            "evaluationMachinesWatcherIsEnabled": "false"
        };
        return _this3;
    }

    createClass(EvaluationMachinesWatcherPanel, [{
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(EvaluationMachinesWatcherPanel.prototype.__proto__ || Object.getPrototypeOf(EvaluationMachinesWatcherPanel.prototype), "onMount", this).call(this);

            GeneralControlPanelDataStore.registerStreams();

            GeneralControlPanelDataStore.addUpdateListener(function () {
                _this4.redraw();
            });

            this.editEvaluationMachinesWatcherParams.addClickListener(function () {
                var editEvaluationMachinesWatcherModal = UI.createElement(EditEvaluationMachinesWatcherModal, { defaultTotalTarget: _this4.data.evaluationMachinesTotalTarget, defaultRunningTarget: _this4.data.evaluationMachinesRunningTarget });
                editEvaluationMachinesWatcherModal.show();
            });
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                title: "Evaluation Machines Watcher Panel",
                level: Level.INFO,
                style: {
                    margin: "10px"
                }
            };
        }
    }, {
        key: "setEvaluationMachinesWatcherIsEnabled",
        value: function setEvaluationMachinesWatcherIsEnabled(value) {
            Ajax.postJSON("/manage/control_general_control_panel/", {
                action: "edit",
                objectType: "evaluationMachinesWatcherIsEnabled",
                isEnabled: value
            });
        }
    }, {
        key: "sendDisableEvaluationMachinesWatcher",
        value: function sendDisableEvaluationMachinesWatcher() {
            this.setEvaluationMachinesWatcherIsEnabled("FALSE");
        }
    }, {
        key: "sendEnableEvaluationMachinesWatcher",
        value: function sendEnableEvaluationMachinesWatcher() {
            this.setEvaluationMachinesWatcherIsEnabled("TRUE");
        }
    }, {
        key: "render",
        value: function render() {
            var _this5 = this;

            this.data = GeneralControlPanelDataStore.get(0);
            var evaluationMachinesWatcherStatus = null;
            var evaluationMachinesWatcherToggleButton = null;

            if (this.data.evaluationMachinesWatcherIsEnabled.toUpperCase() == "TRUE") {
                evaluationMachinesWatcherStatus = "Evaluation Machines Watcher is enabled!";
                evaluationMachinesWatcherToggleButton = UI.createElement(Button, { level: Level.DANGER, onClick: function onClick() {
                        return _this5.sendDisableEvaluationMachinesWatcher();
                    }, label: "Disable" });
            } else {
                evaluationMachinesWatcherStatus = "Evaluation Machines Watcher is disabled!";
                evaluationMachinesWatcherToggleButton = UI.createElement(Button, { level: Level.DANGER, onClick: function onClick() {
                        return _this5.sendEnableEvaluationMachinesWatcher();
                    }, label: "Enable" });
            }

            return [UI.createElement(
                "p",
                null,
                "Total:   ",
                UI.createElement(
                    "span",
                    null,
                    this.data.evaluationMachinesTotalCount
                ),
                "/",
                UI.createElement(
                    "span",
                    null,
                    this.data.evaluationMachinesTotalTarget
                )
            ), UI.createElement(
                "p",
                null,
                "Running: ",
                UI.createElement(
                    "span",
                    null,
                    this.data.evaluationMachinesRunningCount
                ),
                "/",
                UI.createElement(
                    "span",
                    null,
                    this.data.evaluationMachinesRunningTarget
                )
            ), UI.createElement(
                Button,
                { ref: "editEvaluationMachinesWatcherParams", level: Level.INFO },
                "Edit"
            ), UI.createElement(
                "p",
                null,
                UI.createElement(
                    "span",
                    null,
                    evaluationMachinesWatcherStatus
                )
            ), evaluationMachinesWatcherToggleButton, UI.createElement(
                "p",
                null,
                "Please make sure you understand how Evaluation Machines Watcher works before using this! Also, please fallow the guidelines!"
            )];
        }
    }]);
    return EvaluationMachinesWatcherPanel;
}(CardPanel);

var GeneralControlPanelWidget = function (_Panel) {
    inherits(GeneralControlPanelWidget, _Panel);

    function GeneralControlPanelWidget(options) {
        classCallCheck(this, GeneralControlPanelWidget);
        return possibleConstructorReturn(this, (GeneralControlPanelWidget.__proto__ || Object.getPrototypeOf(GeneralControlPanelWidget)).call(this, options));
    }

    createClass(GeneralControlPanelWidget, [{
        key: "render",
        value: function render() {
            return [UI.createElement(EvaluationMachinesWatcherPanel, null)];
        }
    }]);
    return GeneralControlPanelWidget;
}(Panel);

var MaxLengthDeque = function (_Deque) {
    inherits(MaxLengthDeque, _Deque);

    function MaxLengthDeque(maxLength) {
        classCallCheck(this, MaxLengthDeque);

        var _this = possibleConstructorReturn(this, (MaxLengthDeque.__proto__ || Object.getPrototypeOf(MaxLengthDeque)).call(this));

        _this.maxLength = maxLength;
        return _this;
    }

    createClass(MaxLengthDeque, [{
        key: "last",
        value: function last() {
            return this.peekBack();
        }
    }, {
        key: "push",
        value: function push(value) {
            if (this.length + 1 > this.maxLength) {
                this.popFront();
            }
            get(MaxLengthDeque.prototype.__proto__ || Object.getPrototypeOf(MaxLengthDeque.prototype), "push", this).call(this, value);
        }
    }]);
    return MaxLengthDeque;
}(Deque);

var MetricType = {
    VALUE: Symbol("Value"),
    COUNTER: Symbol("Counter"),
    COUNTER_SUM: Symbol("CounterSum")
};

var ChunkAverager = function () {
    function ChunkAverager(type, duration, maxLength) {
        classCallCheck(this, ChunkAverager);

        this.values = new MaxLengthDeque(maxLength);
        this.lastTimestamp = null;
        this.type = type;
    }

    createClass(ChunkAverager, [{
        key: "addInterval",
        value: function addInterval(start, end, value) {
            if (this.lastTimestamp && start != this.lastTimestamp) {
                console.error("Timestamp inconsistency in latest chunk", time.lastTimestamp, start);
            }
            this.lastTimestamp = end;
            // Ignore the value for now
        }
    }]);
    return ChunkAverager;
}();

var MetricSummary = function (_Dispatchable) {
    inherits(MetricSummary, _Dispatchable);

    function MetricSummary(type) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, MetricSummary);

        var _this2 = possibleConstructorReturn(this, (MetricSummary.__proto__ || Object.getPrototypeOf(MetricSummary)).call(this));

        _this2.type = type;
        _this2.options = options;
        // To not have dequeues all resizing at the same time
        _this2.maxLength = _this2.options.maxLength || 8;
        _this2.rawTimestamps = new MaxLengthDeque(_this2.maxLength);
        _this2.rawValues = new MaxLengthDeque(_this2.maxLength);
        _this2.averagers = [];
        for (var i = 0, duration = 5; i < 7; i++, duration *= 4) {
            _this2.averagers.push(new ChunkAverager(duration, _this2.maxLength));
        }
        return _this2;
    }

    createClass(MetricSummary, [{
        key: "addInterval",
        value: function addInterval(start, end, value) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.averagers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var averager = _step.value;

                    averager.addInterval(start, end, value);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "addValue",
        value: function addValue() {
            var timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            // Normalize timestamp to miliseconds
            timestamp = +new StemDate(timestamp);
            var lastTimestamp = this.rawTimestamps.length && this.rawTimestamps.last();
            if (lastTimestamp && lastTimestamp >= timestamp) {
                console.error("Invalid new timestamp:", timestamp, this.getLastTimestamp());
                return;
            }

            this.rawTimestamps.push(timestamp);
            this.rawValues.push(value);

            if (this.type === MetricType.COUNTER_SUM) {
                if (this.rawValues.length > 0) {
                    var prevValue = this.rawValues.last();
                    if (prevValue <= value) {
                        value = value - prevValue;
                    } else {
                        // This is probably a machine reboot, consider the counter was reset to 0
                    }
                } else {
                    // We'll add once we have a previous value, to not have strange data
                    value = null;
                }
            }

            if (lastTimestamp && value != null) {
                this.addInterval(lastTimestamp, timestamp, value);
            }

            this.dispatch("update", { timestamp: timestamp, value: value, lastTimestamp: lastTimestamp });
        }
    }, {
        key: "getValues",
        value: function getValues() {
            var startDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rawTimestamps.peekFront();
            var endDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rawTimestamps.last();

            startDate = +new StemDate(startDate);
            endDate = +new StemDate(endDate);
            var values = [];
            for (var i = 0; i < this.rawValues.length; i++) {
                var timestamp = this.rawTimestamps.get(i);
                if (startDate <= timestamp && timestamp <= endDate) {
                    var value = this.rawValues.get(i);
                    if (this.type === MetricType.COUNTER_SUM) {
                        if (i === 0) {
                            // Ignore the first one
                            continue;
                        }
                        var prevValue = this.rawValues.get(i - 1);
                        value = value > prevValue ? value - prevValue : value;
                    }
                    if (this.type === MetricType.COUNTER || this.type === MetricType.COUNTER_SUM) {
                        if (i === 0) {
                            continue;
                        }
                        // Normalize to counts per second
                        var prevTimestamp = this.rawTimestamps.get(i - 1);
                        value = 1000.0 * value / (timestamp - prevTimestamp);
                    }
                    values.push({
                        timestamp: timestamp,
                        value: value
                    });
                }
            }
            return values;
        }
    }, {
        key: "addUpdateListener",
        value: function addUpdateListener() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return this.addListener.apply(this, ["update"].concat(args));
        }
    }]);
    return MetricSummary;
}(Dispatchable);

var PerformanceMetricsSummarizer = function () {
    function PerformanceMetricsSummarizer(metricDescriptors) {
        classCallCheck(this, PerformanceMetricsSummarizer);
        this.machineMap = new Map();

        this.metricDescriptors = metricDescriptors;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = this.metricDescriptors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var descriptor = _step.value;

                var _descriptor = slicedToArray(descriptor, 2),
                    key = _descriptor[0],
                    type = _descriptor[1];

                if (descriptor.length === 2) {
                    (function () {
                        var keyParts = key.split(".");
                        descriptor.push(function (data) {
                            var _iteratorNormalCompletion2 = true;
                            var _didIteratorError2 = false;
                            var _iteratorError2 = undefined;

                            try {
                                for (var _iterator2 = keyParts[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                    var propKey = _step2.value;

                                    if (!data.hasOwnProperty(propKey)) {
                                        return;
                                    } else {
                                        data = data[propKey];
                                    }
                                }
                            } catch (err) {
                                _didIteratorError2 = true;
                                _iteratorError2 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                        _iterator2.return();
                                    }
                                } finally {
                                    if (_didIteratorError2) {
                                        throw _iteratorError2;
                                    }
                                }
                            }

                            return data;
                        });
                    })();
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }

    createClass(PerformanceMetricsSummarizer, [{
        key: "getForMachineId",
        value: function getForMachineId(machineId) {
            if (this.machineMap.has(machineId)) {
                return this.machineMap.get(machineId);
            }

            var metricsMap = new Map();
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = this.metricDescriptors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _step3$value = slicedToArray(_step3.value, 2),
                        key = _step3$value[0],
                        type = _step3$value[1];

                    metricsMap.set(key, new MetricSummary(type, { maxLength: 8192 }));
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.machineMap.set(machineId, metricsMap);

            return this.machineMap.get(machineId);
        }
    }, {
        key: "addMetrics",
        value: function addMetrics(metrics) {
            var machineId = metrics.meta.machineId;
            var timestamp = metrics.meta.timestamp;
            var metricsMap = this.getForMachineId(machineId);
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.metricDescriptors[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var _step4$value = slicedToArray(_step4.value, 3),
                        key = _step4$value[0],
                        type = _step4$value[1],
                        func = _step4$value[2];

                    var value = func(metrics);
                    metricsMap.get(key).addValue(timestamp, value);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        }
    }]);
    return PerformanceMetricsSummarizer;
}();

var MetricsChart = function (_TimeChart) {
    inherits(MetricsChart, _TimeChart);

    function MetricsChart() {
        classCallCheck(this, MetricsChart);
        return possibleConstructorReturn(this, (MetricsChart.__proto__ || Object.getPrototypeOf(MetricsChart)).apply(this, arguments));
    }

    createClass(MetricsChart, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(MetricsChart.prototype.__proto__ || Object.getPrototypeOf(MetricsChart.prototype), "setOptions", this).call(this, options);

            this.xAxisOptions.ticks = 3;
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(MetricsChart.prototype.__proto__ || Object.getPrototypeOf(MetricsChart.prototype), "getDefaultOptions", this).call(this), {
                domainPadding: [0.1, 0.1],
                margin: {
                    top: 0,
                    bottom: 30,
                    left: 80,
                    right: 0
                }
            });
        }
    }]);
    return MetricsChart;
}(TimeChart);

var MetricsChartSVG = function (_ChartSVG) {
    inherits(MetricsChartSVG, _ChartSVG);

    function MetricsChartSVG() {
        classCallCheck(this, MetricsChartSVG);
        return possibleConstructorReturn(this, (MetricsChartSVG.__proto__ || Object.getPrototypeOf(MetricsChartSVG)).apply(this, arguments));
    }

    createClass(MetricsChartSVG, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(MetricsChartSVG.prototype.__proto__ || Object.getPrototypeOf(MetricsChartSVG.prototype), "setOptions", this).call(this, options);
            this.plotOptions = {
                pointsAlias: function pointsAlias(data) {
                    var _ref;

                    return (_ref = []).concat.apply(_ref, toConsumableArray(data));
                },
                xCoordinateAlias: function xCoordinateAlias(data) {
                    return data.timestamp;
                },
                yCoordinateAlias: function yCoordinateAlias(data) {
                    return data.value;
                }
            };
            this.linePlotOptions = Object.assign({}, this.plotOptions, {
                strokeWidth: 1.5,
                stroke: "red",
                pointsAlias: function pointsAlias(data) {
                    return data;
                }
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                MetricsChart,
                { chartOptions: Object.assign({}, this.chartOptions), plotOptions: this.plotOptions,
                    xAxisDomain: this.options.xDomain, yAxisDomain: this.options.yDomain,
                    yAxisLabelFormatFunction: this.options.valueFormatter,
                    data: this.options.data, enableZoom: this.options.enableZoom },
                UI.createElement(LinePlot, { plotOptions: this.linePlotOptions, data: this.options.data })
            )];
        }
    }]);
    return MetricsChartSVG;
}(ChartSVG);

var MachineMetricsInfo = function (_CardPanel) {
    inherits(MachineMetricsInfo, _CardPanel);

    function MachineMetricsInfo() {
        classCallCheck(this, MachineMetricsInfo);
        return possibleConstructorReturn(this, (MachineMetricsInfo.__proto__ || Object.getPrototypeOf(MachineMetricsInfo)).apply(this, arguments));
    }

    createClass(MachineMetricsInfo, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    width: "400px",
                    margin: "10px",
                    display: "inline-block"
                },
                bodyStyle: {
                    paddingTop: "10px"
                }
            };
        }
    }, {
        key: "getMachineId",
        value: function getMachineId() {
            return this.options.machineId;
        }
    }, {
        key: "getMachineLabel",
        value: function getMachineLabel() {
            var machineInstance = MachineInstanceStore.get(this.getMachineId());
            return machineInstance && machineInstance.label || "Machine " + this.getMachineId();
        }
    }, {
        key: "getVerboseMetrics",
        value: function getVerboseMetrics() {
            var verboseMetricsNameMap = new Map([["cpu.percent", "CPU %"], ["disk.space.percent", "Disk Space %"], ["network.counters.bytes_sent", "Data sent"], ["network.counters.bytes_recv", "Data received"], ["virtualMemory.percent", "VMemory %"]]);
            return verboseMetricsNameMap.get(this.options.metricName) || this.options.metricsName;
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            return this.getMachineLabel() + " -- " + this.getVerboseMetrics();
        }
    }, {
        key: "render",
        value: function render() {
            var metrics = this.options.metrics;
            var values = void 0;
            if (!this.options.timeframe) {
                values = metrics.getValues();
            } else {
                values = metrics.getValues(StemDate.now() - this.options.timeframe, StemDate.now());
            }
            return [UI.createElement(MetricsChartSVG, { data: values, width: 400, height: 350, valueFormatter: function valueFormatter(x) {
                    return metrics.type === MetricType.VALUE ? x + "%" : Formatter.memory(x, true);
                } })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.attachUpdateListener(this.options.metrics, function () {
                return _this4.redraw();
            });
        }
    }]);
    return MachineMetricsInfo;
}(CardPanel);

var PerformanceMetricsPanel = function (_Panel) {
    inherits(PerformanceMetricsPanel, _Panel);

    function PerformanceMetricsPanel() {
        var _ref2;

        var _temp, _this5, _ret2;

        classCallCheck(this, PerformanceMetricsPanel);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret2 = (_temp = (_this5 = possibleConstructorReturn(this, (_ref2 = PerformanceMetricsPanel.__proto__ || Object.getPrototypeOf(PerformanceMetricsPanel)).call.apply(_ref2, [this].concat(args))), _this5), _this5.performanceMetricsSummarizer = new PerformanceMetricsSummarizer([["cpu.percent", MetricType.VALUE], ["disk.space.percent", MetricType.VALUE], ["network.counters.bytes_sent", MetricType.COUNTER_SUM], ["network.counters.bytes_recv", MetricType.COUNTER_SUM], ["virtualMemory.percent", MetricType.VALUE]]), _temp), possibleConstructorReturn(_this5, _ret2);
    }

    createClass(PerformanceMetricsPanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                timeframe: 60 * 1000
            };
        }
    }, {
        key: "addPerformanceMetrics",
        value: function addPerformanceMetrics(metrics) {
            var oldSize = this.performanceMetricsSummarizer.machineMap.size;
            this.performanceMetricsSummarizer.addMetrics(metrics);
            if (this.performanceMetricsSummarizer.machineMap.size != oldSize) {
                this.redraw();
            }
        }
    }, {
        key: "render",
        value: function render() {
            var rez = [];

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = this.performanceMetricsSummarizer.machineMap.entries()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _step5$value = slicedToArray(_step5.value, 2),
                        machineId = _step5$value[0],
                        metricsData = _step5$value[1];

                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;

                    try {
                        for (var _iterator6 = metricsData.entries()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var _step6$value = slicedToArray(_step6.value, 2),
                                key = _step6$value[0],
                                summary = _step6$value[1];

                            rez.push(UI.createElement(MachineMetricsInfo, { machineId: machineId, metricName: key,
                                metrics: summary, timeframe: this.options.timeframe }));
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                _iterator6.return();
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6;
                            }
                        }
                    }

                    rez.push(UI.createElement("hr", null));
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            return [UI.createElement(RadioButtonGroup, { level: Level.PRIMARY, givenOptions: ["1m", "5m", "30m", "6h", "∞"],
                style: { marginTop: "10px", textAlign: "center" }, ref: "timeframeSelect" }), rez];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            var timeframeSelectParser = new Map([["1m", 60 * 1000], ["5m", 5 * 60 * 1000], ["30m", 30 * 60 * 1000], ["6h", 6 * 60 * 60 * 1000], ["∞", 0]]);

            this.timeframeSelect.addListener("setIndex", function (data) {
                _this6.updateOptions({ timeframe: timeframeSelectParser.get(data.value) });
            });
            this.attachListener(WebsocketSubscriber, "machine-performance-stats", function (metrics) {
                return _this6.addPerformanceMetrics(metrics);
            });
        }
    }]);
    return PerformanceMetricsPanel;
}(Panel);

var Icarus = function (_Panel) {
    inherits(Icarus, _Panel);

    function Icarus() {
        classCallCheck(this, Icarus);
        return possibleConstructorReturn(this, (Icarus.__proto__ || Object.getPrototypeOf(Icarus)).apply(this, arguments));
    }

    createClass(Icarus, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("margin", "20px 10%");
        }
    }, {
        key: "getUrlPrefix",
        value: function getUrlPrefix(urlPart) {
            var url = "/manage/icarus/";
            if (urlPart) {
                url += urlPart + "/";
            }
            return url;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                TabArea,
                { ref: "tabArea", variableHeightPanels: true },
                UI.createElement(MachineInstanceWidget, { ref: "machineInstanceWidget", tabHref: this.getUrlPrefix("machines"), title: "Machines", active: true }),
                UI.createElement(MachineLoggingWidget, { ref: "machineLoggingWidget", tabHref: this.getUrlPrefix("machine-logging"), title: "Machines Logging" }),
                UI.createElement(WebsiteLoggingWidget, { ref: "websiteLoggingWidget", tabHref: this.getUrlPrefix("website-logging"), title: "Website Logging" }),
                UI.createElement(GeneralControlPanelWidget, { ref: "generalControlPanelWidget", tabHref: this.getUrlPrefix("general-control-panel"), title: "General Control Panel" }),
                UI.createElement(PerformanceMetricsPanel, { tabHref: this.getUrlPrefix("performance-metrics"), title: "Performance metrics" })
            )];
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (!this.tabArea) {
                this.initialUrlParts = urlParts;
            } else {
                this.showUrlTab(urlParts[0] || "machines");
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(Icarus.prototype.__proto__ || Object.getPrototypeOf(Icarus.prototype), "onMount", this).call(this);

            this.setURL(this.initialUrlParts);
            delete this.initialUrlParts;
        }
    }, {
        key: "showUrlTab",
        value: function showUrlTab(urlPart) {
            if (urlPart === "machines") {
                this.machineInstanceWidget.dispatch("show");
            } else if (urlPart === "machine-logging") {
                this.machineLoggingWidget.dispatch("show");
            } else if (urlPart === "website-logging") {
                this.websiteLoggingWidget.dispatch("show");
            } else if (urlPart === "general-control-panel") {
                this.generalControlPanelWidget.dispatch("show");
            }
        }
    }]);
    return Icarus;
}(Panel);

var WSUserData = function (_StoreObject) {
    inherits(WSUserData, _StoreObject);

    function WSUserData() {
        classCallCheck(this, WSUserData);
        return possibleConstructorReturn(this, (WSUserData.__proto__ || Object.getPrototypeOf(WSUserData)).apply(this, arguments));
    }

    createClass(WSUserData, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.type === "MachineInstance-logMessage") {} else {
                get(WSUserData.prototype.__proto__ || Object.getPrototypeOf(WSUserData.prototype), "applyEvent", this).call(this, event);
            }
        }
    }]);
    return WSUserData;
}(StoreObject);

var WSUserDataStoreClass = function (_GenericObjectStore) {
    inherits(WSUserDataStoreClass, _GenericObjectStore);

    function WSUserDataStoreClass() {
        classCallCheck(this, WSUserDataStoreClass);
        return possibleConstructorReturn(this, (WSUserDataStoreClass.__proto__ || Object.getPrototypeOf(WSUserDataStoreClass)).apply(this, arguments));
    }

    createClass(WSUserDataStoreClass, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            if (event.type == "MachineInstance-serviceStatusUpdate") {
                get(WSUserDataStoreClass.prototype.__proto__ || Object.getPrototypeOf(WSUserDataStoreClass.prototype), "applyEvent", this).call(this, event);
            } else if (event.type == "MachineInstance-logMessage") {
                this.dispatch("logMessage", event);
                get(WSUserDataStoreClass.prototype.__proto__ || Object.getPrototypeOf(WSUserDataStoreClass.prototype), "applyEvent", this).call(this, event);
            } else {
                get(WSUserDataStoreClass.prototype.__proto__ || Object.getPrototypeOf(WSUserDataStoreClass.prototype), "applyEvent", this).call(this, event);
            }
        }
    }]);
    return WSUserDataStoreClass;
}(GenericObjectStore);

var WSUserDataStore = new WSUserDataStoreClass("WSUserData", WSUserData);

var WSConnectionData = function (_StoreObject) {
    inherits(WSConnectionData, _StoreObject);

    function WSConnectionData() {
        classCallCheck(this, WSConnectionData);
        return possibleConstructorReturn(this, (WSConnectionData.__proto__ || Object.getPrototypeOf(WSConnectionData)).apply(this, arguments));
    }

    return WSConnectionData;
}(StoreObject);

var WSConnectionDataStoreClass = function (_GenericObjectStore) {
    inherits(WSConnectionDataStoreClass, _GenericObjectStore);

    function WSConnectionDataStoreClass() {
        classCallCheck(this, WSConnectionDataStoreClass);
        return possibleConstructorReturn(this, (WSConnectionDataStoreClass.__proto__ || Object.getPrototypeOf(WSConnectionDataStoreClass)).apply(this, arguments));
    }

    createClass(WSConnectionDataStoreClass, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            get(WSConnectionDataStoreClass.prototype.__proto__ || Object.getPrototypeOf(WSConnectionDataStoreClass.prototype), "applyEvent", this).call(this, event);
        }
    }]);
    return WSConnectionDataStoreClass;
}(GenericObjectStore);

var WSConnectionDataStore = new WSConnectionDataStoreClass("WSConnectionData", WSConnectionData);

var WSUserDataUI = function (_UI$Element) {
    inherits(WSUserDataUI, _UI$Element);

    function WSUserDataUI() {
        classCallCheck(this, WSUserDataUI);
        return possibleConstructorReturn(this, (WSUserDataUI.__proto__ || Object.getPrototypeOf(WSUserDataUI)).apply(this, arguments));
    }

    createClass(WSUserDataUI, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                CollapsiblePanel,
                { ref: "usersPanel", title: "Users online: " + WSUserDataStore.all().length },
                WSUserDataUI.renderAllUserData()
            )];
        }
    }], [{
        key: "renderConnectionTitle",
        value: function renderConnectionTitle(connectionData) {
            var labelStyle = {
                margin: "1px"
            };
            var badgeStyle = {
                "background-color": "black"
            };
            return [UI.createElement(
                "h3",
                null,
                UI.createElement(
                    "span",
                    { className: "label label-primary", style: labelStyle },
                    "Id: ",
                    UI.createElement(
                        "span",
                        { className: "badge", style: badgeStyle },
                        connectionData.id
                    )
                ),
                UI.createElement(
                    "span",
                    { className: "label label-primary", style: labelStyle },
                    "IP: ",
                    UI.createElement(
                        "span",
                        { className: "badge", style: badgeStyle },
                        connectionData.data["IP"]
                    )
                ),
                UI.createElement(
                    "span",
                    { className: "label label-primary", style: labelStyle },
                    "Streams: ",
                    UI.createElement(
                        "span",
                        { className: "badge", style: badgeStyle },
                        connectionData.streams.length
                    )
                )
            )];
        }
    }, {
        key: "renderConnectionStreams",
        value: function renderConnectionStreams(connectionData) {
            var result = [];
            var labelStyle = {
                margin: "0px",
                "background-color": "#953b39"
            };
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = connectionData.streams[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var stream = _step.value;

                    result.push(UI.createElement(
                        "span",
                        { className: "badge", style: labelStyle },
                        "#" + stream
                    ));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return result;
        }
    }, {
        key: "renderConnectionData",
        value: function renderConnectionData(userData) {
            var result = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = userData.connectionIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var connectionId = _step2.value;

                    var connectionData = WSConnectionDataStore.get(connectionId);
                    result.push(UI.createElement(
                        CardPanel,
                        { ref: "connectionCardPanel", title: WSUserDataUI.renderConnectionTitle(connectionData) },
                        UI.createElement(
                            "h4",
                            null,
                            WSUserDataUI.renderConnectionStreams(connectionData)
                        )
                    ));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return result;
        }
    }, {
        key: "renderUserDataTitle",
        value: function renderUserDataTitle(userData) {
            var labelStyle = {
                margin: "5px"
            };
            return [UI.createElement(
                "div",
                null,
                "User: ",
                UI.createElement(UserHandle, { id: userData.id }),
                UI.createElement(
                    "span",
                    { className: "label label-success", style: labelStyle },
                    "Websocket connections: ",
                    userData.connectionIds.length
                ),
                UI.createElement(
                    "span",
                    { className: "label label-primary", style: labelStyle },
                    "Total Redis streams: ",
                    userData.streams.length
                )
            )];
        }
    }, {
        key: "renderUserData",
        value: function renderUserData(userData) {
            var panelStyle = {
                margin: "5px",
                padding: "0px"
            };
            return [UI.createElement(
                CollapsiblePanel,
                { ref: "userPanel", title: WSUserDataUI.renderUserDataTitle(userData), style: panelStyle, collapsed: true },
                UI.createElement(
                    "div",
                    null,
                    " ",
                    WSUserDataUI.renderConnectionData(userData),
                    " "
                )
            )];
        }
    }, {
        key: "renderAllUserData",
        value: function renderAllUserData() {
            var allUserData = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = WSUserDataStore.all()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var userData = _step3.value;

                    allUserData.push(WSUserDataUI.renderUserData(userData));
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return allUserData;
        }
    }]);
    return WSUserDataUI;
}(UI.Element);

var WSConnectionDataUI = function (_UI$Element) {
    inherits(WSConnectionDataUI, _UI$Element);

    function WSConnectionDataUI() {
        classCallCheck(this, WSConnectionDataUI);
        return possibleConstructorReturn(this, (WSConnectionDataUI.__proto__ || Object.getPrototypeOf(WSConnectionDataUI)).apply(this, arguments));
    }

    createClass(WSConnectionDataUI, [{
        key: "render",
        value: function render() {
            return [UI.createElement(CollapsiblePanel, { ref: "connectionsPanel", collapsed: true,
                title: "Websocket connections: " + WSConnectionDataStore.all().length })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            GlobalState.registerStream("meta_ws_data");
        }
    }]);
    return WSConnectionDataUI;
}(UI.Element);

var WSStreamData = function (_StoreObject) {
    inherits(WSStreamData, _StoreObject);

    function WSStreamData() {
        classCallCheck(this, WSStreamData);
        return possibleConstructorReturn(this, (WSStreamData.__proto__ || Object.getPrototypeOf(WSStreamData)).apply(this, arguments));
    }

    return WSStreamData;
}(StoreObject);

var WSStreamDataStoreClass = function (_GenericObjectStore) {
    inherits(WSStreamDataStoreClass, _GenericObjectStore);

    function WSStreamDataStoreClass() {
        classCallCheck(this, WSStreamDataStoreClass);
        return possibleConstructorReturn(this, (WSStreamDataStoreClass.__proto__ || Object.getPrototypeOf(WSStreamDataStoreClass)).apply(this, arguments));
    }

    createClass(WSStreamDataStoreClass, [{
        key: "applyEvent",
        value: function applyEvent(event) {
            get(WSStreamDataStoreClass.prototype.__proto__ || Object.getPrototypeOf(WSStreamDataStoreClass.prototype), "applyEvent", this).call(this, event);
        }
    }, {
        key: "get",
        value: function get$$1(id) {
            return this.objects.get(id);
        }
    }]);
    return WSStreamDataStoreClass;
}(GenericObjectStore);

var WSStreamDataStore = new WSStreamDataStoreClass("WSStreamData", WSStreamData);

var WSStreamDataUI = function (_UI$Element) {
    inherits(WSStreamDataUI, _UI$Element);

    function WSStreamDataUI() {
        classCallCheck(this, WSStreamDataUI);
        return possibleConstructorReturn(this, (WSStreamDataUI.__proto__ || Object.getPrototypeOf(WSStreamDataUI)).apply(this, arguments));
    }

    createClass(WSStreamDataUI, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                CollapsiblePanel,
                { ref: "streamPanel", title: "Streams: " + WSStreamDataStore.all().length },
                WSStreamDataUI.renderAllStreamData()
            )];
        }
    }], [{
        key: "renderUserConnections",
        value: function renderUserConnections(userData) {
            var result = [];
            var labelStyle = {
                margin: "1px"
            };
            var badgeStyle = {
                "background-color": "black"
            };
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = userData.connectionIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var connectionId = _step.value;

                    var connectionData = WSConnectionDataStore.get(connectionId);
                    result.push(UI.createElement(
                        "span",
                        { className: "label label-success", style: labelStyle },
                        UI.createElement(
                            "span",
                            { className: "label label-primary", style: labelStyle },
                            "Id: ",
                            UI.createElement(
                                "span",
                                { className: "badge", style: badgeStyle },
                                connectionData.id
                            )
                        ),
                        UI.createElement(
                            "span",
                            { className: "label label-primary", style: labelStyle },
                            "IP: ",
                            UI.createElement(
                                "span",
                                { className: "badge", style: badgeStyle },
                                connectionData.data["IP"]
                            )
                        ),
                        UI.createElement(
                            "span",
                            { className: "label label-primary", style: labelStyle },
                            "Streams: ",
                            UI.createElement(
                                "span",
                                { className: "badge", style: badgeStyle },
                                connectionData.streams.length
                            )
                        )
                    ));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return result;
        }
    }, {
        key: "renderUserTitle",
        value: function renderUserTitle(userData) {
            var labelStyle = {
                margin: "5px"
            };
            return [UI.createElement(
                "div",
                null,
                "User: ",
                UI.createElement(UserHandle, { id: userData.id }),
                UI.createElement(
                    "span",
                    { className: "label label-success", style: labelStyle },
                    "Websocket connections: ",
                    userData.connectionIds.length
                ),
                UI.createElement(
                    "span",
                    { className: "label label-primary", style: labelStyle },
                    "Total Redis streams: ",
                    userData.streams.length
                )
            )];
        }
    }, {
        key: "renderUserData",
        value: function renderUserData(streamData) {
            var result = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = streamData.userIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var userId = _step2.value;

                    var userData = WSUserDataStore.get(userId);
                    result.push(UI.createElement(
                        CardPanel,
                        { ref: "userCardPanel", title: WSStreamDataUI.renderUserTitle(userData) },
                        UI.createElement(
                            "h4",
                            null,
                            WSStreamDataUI.renderUserConnections(userData)
                        )
                    ));
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return result;
        }
    }, {
        key: "renderStreamDataTitle",
        value: function renderStreamDataTitle(streamData) {
            var badgeStyle = {
                margin: "5px",
                "background-color": "#953b39"
            };
            return [UI.createElement(
                "div",
                null,
                "Stream: ",
                UI.createElement(
                    "span",
                    { className: "badge", style: badgeStyle },
                    "#" + streamData.id
                )
            )];
        }
    }, {
        key: "renderStreamData",
        value: function renderStreamData(streamData) {
            var panelStyle = {
                margin: "5px",
                padding: "0px"
            };
            return [UI.createElement(
                CollapsiblePanel,
                { ref: "streamPanel", title: WSStreamDataUI.renderStreamDataTitle(streamData), style: panelStyle, collapsed: true },
                UI.createElement(
                    "div",
                    null,
                    " ",
                    WSStreamDataUI.renderUserData(streamData),
                    " "
                )
            )];
        }
    }, {
        key: "renderAllStreamData",
        value: function renderAllStreamData() {
            var allStreamData = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = WSStreamDataStore.all()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var streamData = _step3.value;

                    allStreamData.push(WSStreamDataUI.renderStreamData(streamData));
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return allStreamData;
        }
    }]);
    return WSStreamDataUI;
}(UI.Element);

var UserStats = function (_UI$Element) {
    inherits(UserStats, _UI$Element);

    function UserStats() {
        classCallCheck(this, UserStats);
        return possibleConstructorReturn(this, (UserStats.__proto__ || Object.getPrototypeOf(UserStats)).apply(this, arguments));
    }

    createClass(UserStats, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("margin", "20px 10%");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(WSUserDataUI, { ref: "wsUserDataUI" }), UI.createElement(WSConnectionDataUI, { ref: "wsConnectionDataUI" }), UI.createElement(WSStreamDataUI, { ref: "wsStreamDataUI" })];
        }
    }]);
    return UserStats;
}(UI.Element);

var _class$109, _descriptor$47, _descriptor2$41, _descriptor3$35, _descriptor4$31, _descriptor5$28, _descriptor6$24, _dec$53, _class3$36, _dec2$22, _class4$8;

function _initDefineProp$48(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$49(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var StatisticChart = function (_TimeChart) {
    inherits(StatisticChart, _TimeChart);

    function StatisticChart() {
        classCallCheck(this, StatisticChart);
        return possibleConstructorReturn(this, (StatisticChart.__proto__ || Object.getPrototypeOf(StatisticChart)).apply(this, arguments));
    }

    createClass(StatisticChart, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(StatisticChart.prototype.__proto__ || Object.getPrototypeOf(StatisticChart.prototype), "getDefaultOptions", this).call(this), {
                domainPadding: [0, 0]
            });
        }
    }, {
        key: "initZoom",
        value: function initZoom() {
            if (this.options.enableZoom) {
                get(StatisticChart.prototype.__proto__ || Object.getPrototypeOf(StatisticChart.prototype), "initZoom", this).call(this, true);
            }
        }
    }]);
    return StatisticChart;
}(TimeChart);

var StatisticChartSVG = function (_ChartSVG) {
    inherits(StatisticChartSVG, _ChartSVG);

    function StatisticChartSVG() {
        classCallCheck(this, StatisticChartSVG);
        return possibleConstructorReturn(this, (StatisticChartSVG.__proto__ || Object.getPrototypeOf(StatisticChartSVG)).apply(this, arguments));
    }

    createClass(StatisticChartSVG, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(StatisticChartSVG.prototype.__proto__ || Object.getPrototypeOf(StatisticChartSVG.prototype), "setOptions", this).call(this, options);
            this.plotOptions = {
                pointsAlias: function pointsAlias(data) {
                    var _ref;

                    return (_ref = []).concat.apply(_ref, toConsumableArray(data));
                },
                xCoordinateAlias: function xCoordinateAlias(data) {
                    return data.moment;
                },
                yCoordinateAlias: function yCoordinateAlias(data) {
                    return data.index;
                }
            };
            this.linePlotOptions = [];

            var startTime = void 0;
            for (var i = 0; i < this.options.timestamps.length; i += 1) {
                var timestamps = this.options.timestamps[i];
                timestamps.sort();
                if (i === 0) {
                    startTime = timestamps[0];
                }
                var localStartTime = timestamps[0];
                for (var j = 0; j < timestamps.length; j += 1) {
                    timestamps[j] = {
                        moment: 1000 * (timestamps[j] - localStartTime + startTime),
                        index: j
                    };
                }
                while (timestamps.length > 5000) {
                    timestamps = timestamps.filter(function (t, index) {
                        return index % 3 !== 2;
                    });
                }
                this.options.timestamps[i] = timestamps;

                this.linePlotOptions.push(Object.assign({}, this.plotOptions, {
                    stroke: ColorGenerator.getPersistentColor(i),
                    strokeWidth: 1.5,
                    pointsAlias: function pointsAlias(data) {
                        return data;
                    }
                }));
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var linePlots = this.options.timestamps.map(function (timestampArray, index) {
                return UI.createElement(LinePlot, { plotOptions: _this3.linePlotOptions[index], data: timestampArray });
            });
            return [UI.createElement(
                StatisticChart,
                { chartOptions: Object.assign({}, this.chartOptions), plotOptions: this.plotOptions,
                    xAxisDomain: this.options.xDomain, yAxisDomain: this.options.yDomain,
                    data: this.options.timestamps, enableZoom: this.options.enableZoom },
                linePlots
            )];
        }
    }]);
    return StatisticChartSVG;
}(ChartSVG);

var StatisticChartsStyle = (_class$109 = function (_StyleSheet) {
    inherits(StatisticChartsStyle, _StyleSheet);

    function StatisticChartsStyle() {
        var _ref2;

        var _temp, _this4, _ret;

        classCallCheck(this, StatisticChartsStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this4 = possibleConstructorReturn(this, (_ref2 = StatisticChartsStyle.__proto__ || Object.getPrototypeOf(StatisticChartsStyle)).call.apply(_ref2, [this].concat(args))), _this4), _this4.chartContainerPadding = 40, _initDefineProp$48(_this4, "className", _descriptor$47, _this4), _initDefineProp$48(_this4, "select", _descriptor2$41, _this4), _initDefineProp$48(_this4, "chartContainer", _descriptor3$35, _this4), _initDefineProp$48(_this4, "defaultMessage", _descriptor4$31, _this4), _initDefineProp$48(_this4, "statisticDataForm", _descriptor5$28, _this4), _initDefineProp$48(_this4, "colorBubble", _descriptor6$24, _this4), _temp), possibleConstructorReturn(_this4, _ret);
    }

    return StatisticChartsStyle;
}(StyleSheet), _descriptor$47 = _applyDecoratedDescriptor$49(_class$109.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "10%",
            marginRight: "10%"
        };
    }
}), _descriptor2$41 = _applyDecoratedDescriptor$49(_class$109.prototype, "select", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "10px"
        };
    }
}), _descriptor3$35 = _applyDecoratedDescriptor$49(_class$109.prototype, "chartContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "600px",
            width: "100%",
            border: "1px solid grey",
            borderRadius: "10px",
            padding: this.chartContainerPadding + "px",
            marginTop: "20px",
            backgroundImage: "linear-gradient(to top right, #fff 60%, #dfdfdf)",
            textAlign: "center",
            justifyContent: "center",
            display: "flex",
            flexDirection: "column"
        };
    }
}), _descriptor4$31 = _applyDecoratedDescriptor$49(_class$109.prototype, "defaultMessage", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "1.5em"
        };
    }
}), _descriptor5$28 = _applyDecoratedDescriptor$49(_class$109.prototype, "statisticDataForm", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginTop: "10px",
            textAlign: "initial",
            justifyContent: "initial"
        };
    }
}), _descriptor6$24 = _applyDecoratedDescriptor$49(_class$109.prototype, "colorBubble", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "20px",
            width: "20px",
            borderRadius: "20px"
        };
    }
}), _class$109);

var Timeframe = function (_UI$Element) {
    inherits(Timeframe, _UI$Element);

    function Timeframe() {
        classCallCheck(this, Timeframe);
        return possibleConstructorReturn(this, (Timeframe.__proto__ || Object.getPrototypeOf(Timeframe)).apply(this, arguments));
    }

    createClass(Timeframe, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("margin-bottom", "5px");
        }
    }, {
        key: "render",
        value: function render() {
            var _this6 = this;

            var date = void 0;
            if (this.options.value) {
                date = StemDate(this.options.value);
            }
            return [UI.createElement(DateTimePicker$$1, { date: date, ref: "endDatePicker", style: { display: "inline-block", marginRight: "3px" } }), UI.createElement(
                ButtonGroup,
                { size: Size.EXTRA_SMALL, level: Level.PRIMARY, style: { display: "inline-block" } },
                UI.createElement(Button, { faIcon: "times", onClick: function onClick() {
                        return _this6.options.form.dispatch("removeTimeframe", _this6);
                    } }),
                UI.createElement(Button, { faIcon: "clock-o", onClick: function onClick() {
                        return _this6.endDatePicker.setDate(StemDate.now());
                    } }),
                UI.createElement(Button, { faIcon: "level-down", onClick: function onClick() {
                        return _this6.options.form.dispatch("newTimeframe", _this6);
                    } })
            )];
        }
    }, {
        key: "getValue",
        value: function getValue() {
            if (!this.endDatePicker.getDate()) {
                return this.options.value;
            }
            return this.endDatePicker.getDate().toUnix();
        }
    }, {
        key: "fetchData",
        value: function fetchData(timeframeLength, callback) {
            var _this7 = this;

            if (!this._cachedData) {
                this._cachedData = new Map();
            }
            if (!this._cachedData.has(timeframeLength)) {
                var endDate = this.endDatePicker.getDate().toUnix();
                var startDate = endDate - timeframeLength;

                Ajax.getJSON("/manage/charts/", {
                    objectType: this.options.objectType,
                    startDate: startDate,
                    endDate: endDate
                }).then(function (data) {
                    _this7._cachedData.set(timeframeLength, data.timestamps);
                    callback(_this7._cachedData.get(timeframeLength));
                });
            } else {
                callback(this._cachedData.get(timeframeLength));
            }
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.setStyle("background-color", color);
        }
    }]);
    return Timeframe;
}(UI.Element);

var StatisticDataInput = (_dec$53 = registerStyle(StatisticChartsStyle), _dec$53(_class3$36 = function (_UI$Element2) {
    inherits(StatisticDataInput, _UI$Element2);

    function StatisticDataInput() {
        classCallCheck(this, StatisticDataInput);
        return possibleConstructorReturn(this, (StatisticDataInput.__proto__ || Object.getPrototypeOf(StatisticDataInput)).apply(this, arguments));
    }

    createClass(StatisticDataInput, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.statisticDataForm);
        }
    }, {
        key: "setInterval",
        value: function setInterval(timeUnit) {
            var _this9 = this;

            return function () {
                return _this9.timeframeLengthInput.setValue((timeUnit / 1000).toString());
            };
        }
    }, {
        key: "getTimeframeLength",
        value: function getTimeframeLength() {
            return parseInt(this.timeframeLengthInput.getValue());
        }
    }, {
        key: "render",
        value: function render() {
            var _this10 = this;

            return [UI.createElement(
                FormField,
                { label: "Interval length" },
                UI.createElement(NumberInput, { ref: "timeframeLengthInput", placehoder: "seconds" })
            ), UI.createElement(
                FormField,
                { label: "Presets", style: { marginBottom: "10px" } },
                UI.createElement(
                    ButtonGroup,
                    { level: Level.PRIMARY, size: Size.EXTRA_SMALL },
                    UI.createElement(
                        Button,
                        { onClick: this.setInterval(TimeUnit.HOUR) },
                        "Hour"
                    ),
                    UI.createElement(
                        Button,
                        { onClick: this.setInterval(TimeUnit.DAY) },
                        "Day"
                    ),
                    UI.createElement(
                        Button,
                        { onClick: this.setInterval(TimeUnit.WEEK) },
                        "Week"
                    ),
                    UI.createElement(
                        Button,
                        { onClick: this.setInterval(TimeUnit.MONTH) },
                        "Month"
                    ),
                    UI.createElement(
                        Button,
                        { onClick: this.setInterval(TimeUnit.YEAR) },
                        "Year"
                    )
                )
            ), UI.createElement("div", { ref: "timeframesArea" }), UI.createElement(
                ButtonGroup,
                { level: Level.PRIMARY, size: Size.EXTRA_SMALL },
                UI.createElement(
                    Button,
                    { onClick: function onClick() {
                            return _this10.addTimeframe();
                        } },
                    "Add timeframe"
                ),
                UI.createElement(
                    Button,
                    { onClick: function onClick() {
                            return _this10.compute();
                        } },
                    "Compute"
                )
            )];
        }
    }, {
        key: "compute",
        value: function compute() {
            var _this11 = this;

            var numTimeframes = this.timeframesArea.children.length;
            var timeframeLength = this.getTimeframeLength();
            var loaded = 0;
            var timestampArrays = new Array(numTimeframes);
            var timeframesData = new Array(numTimeframes);

            var _loop = function _loop(i) {
                var timeframe = _this11.timeframesArea.children[i];
                timeframe.setColor(ColorGenerator.getPersistentColor(i));
                timeframe.fetchData(timeframeLength, function (data) {
                    loaded += 1;
                    timestampArrays[i] = data;
                    timeframesData[i] = {
                        startDate: new StemDate(timeframe.getValue() - timeframeLength),
                        endDate: new StemDate(timeframe.getValue()),
                        color: ColorGenerator.getPersistentColor(i)
                    };
                    if (loaded === numTimeframes) {
                        _this11.dispatch("data", timestampArrays, timeframesData);
                    }
                });
            };

            for (var i = 0; i < numTimeframes; i += 1) {
                _loop(i);
            }
        }
    }, {
        key: "addTimeframe",
        value: function addTimeframe() {
            this.timeframesArea.appendChild(UI.createElement(Timeframe, { form: this, objectType: this.options.objectType }));
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this12 = this;

            this.addListener("removeTimeframe", function (timeframe) {
                _this12.timeframesArea.eraseChild(timeframe);
            });
            this.addListener("newTimeframe", function (parentTimeframe) {
                _this12.timeframesArea.insertChild(UI.createElement(Timeframe, { value: parentTimeframe.getValue() - _this12.getTimeframeLength(),
                    form: _this12, objectType: _this12.options.objectType }), _this12.timeframesArea.options.children.indexOf(parentTimeframe) + 1);
            });
        }
    }]);
    return StatisticDataInput;
}(UI.Element)) || _class3$36);
var SingleStatisticChart = (_dec2$22 = registerStyle(StatisticChartsStyle), _dec2$22(_class4$8 = function (_UI$Element3) {
    inherits(SingleStatisticChart, _UI$Element3);

    function SingleStatisticChart() {
        classCallCheck(this, SingleStatisticChart);
        return possibleConstructorReturn(this, (SingleStatisticChart.__proto__ || Object.getPrototypeOf(SingleStatisticChart)).apply(this, arguments));
    }

    createClass(SingleStatisticChart, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.className);
        }
    }, {
        key: "render",
        value: function render() {
            var _this14 = this;

            return [UI.createElement(
                "div",
                { ref: "chartArea", className: this.styleSheet.chartContainer },
                UI.createElement(
                    "em",
                    { className: this.styleSheet.defaultMessage },
                    "No data available"
                ),
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        Button,
                        { onClick: function onClick() {
                                return _this14.loadFull();
                            }, level: Level.PRIMARY },
                        "Load full chart"
                    ),
                    UI.createElement(
                        Button,
                        { onClick: function onClick() {
                                return _this14.enterCompareMode();
                            }, level: Level.PRIMARY, className: this.styleSheet.select },
                        "Compare timeframes"
                    )
                )
            )];
        }
    }, {
        key: "loadFull",
        value: function loadFull() {
            var _this15 = this;

            Ajax.getJSON("/manage/charts/", {
                objectType: this.options.objectType
            }).then(function (data) {
                _this15.chartArea.setChildren([UI.createElement(
                    "div",
                    null,
                    UI.createElement(
                        Button,
                        { onClick: function onClick() {
                                return _this15.redraw();
                            }, level: Level.PRIMARY, style: { float: "left" } },
                        "Back"
                    )
                ), UI.createElement(StatisticChartSVG, { timestamps: [data.timestamps], enableZoom: true,
                    width: _this15.chartArea.getWidth() - 2 * _this15.styleSheet.chartContainerPadding })]);
            });
        }
    }, {
        key: "getTableColumns",
        value: function getTableColumns() {
            var _this16 = this;

            var centeredText = { textAlign: "center" };
            return [{
                value: function value(info) {
                    return info.startDate.format("DD MMMM YYYY HH:mm");
                },
                headerName: "Start date",
                headerStyle: centeredText,
                cellStyle: centeredText
            }, {
                value: function value(info) {
                    return info.endDate.format("DD MMMM YYYY HH:mm");
                },
                headerName: "End date",
                headerStyle: centeredText,
                cellStyle: centeredText
            }, {
                value: function value(info) {
                    return UI.createElement("div", { style: { backgroundColor: info.color }, className: _this16.styleSheet.colorBubble });
                },
                headerName: "Color",
                headerStyle: { textAlign: "left" }
            }, {
                value: function value(info) {
                    return info.numTimestamps;
                },
                headerName: "Number",
                headerStyle: centeredText,
                cellStyle: centeredText
            }];
        }
    }, {
        key: "enterCompareMode",
        value: function enterCompareMode() {
            var _this17 = this;

            var chartWidth = this.chartArea.getWidth() * 0.7 - 2 * this.styleSheet.chartContainerPadding;
            this.chartArea.setChildren([UI.createElement(
                "div",
                { style: { height: "100%" } },
                UI.createElement(
                    "div",
                    { style: { float: "left", width: "30%", height: "100%" } },
                    UI.createElement(
                        Button,
                        { onClick: function onClick() {
                                return _this17.redraw();
                            }, level: Level.PRIMARY, style: { float: "left" } },
                        "Back"
                    ),
                    UI.createElement("div", { style: { clear: "both" } }),
                    UI.createElement(StatisticDataInput, { ref: this.refLink("dataInput"), objectType: this.options.objectType })
                ),
                UI.createElement(
                    "div",
                    { style: { float: "right", width: "70%", height: "100%" } },
                    UI.createElement(
                        TabArea,
                        null,
                        UI.createElement(
                            Panel,
                            { title: "Chart", ref: this.refLink("chartContainer") },
                            UI.createElement(StatisticChartSVG, { timestamps: [], width: chartWidth })
                        ),
                        UI.createElement(
                            Panel,
                            { title: "Table", ref: this.refLink("tableContainer") },
                            UI.createElement(Table, { columns: this.getTableColumns(), entries: [] })
                        )
                    )
                )
            )]);
            this.chartContainer.attachListener(this.dataInput, "data", function (data) {
                _this17.chartContainer.setChildren([UI.createElement(StatisticChartSVG, { timestamps: data, width: chartWidth, key: Math.random() })]);
            });
            this.tableContainer.attachListener(this.dataInput, "data", function (data, timeframesInfo) {
                var entries = [];
                for (var i = 0; i < data.length; i += 1) {
                    entries.push(Object.assign({}, timeframesInfo[i], {
                        numTimestamps: data[i].length
                    }));
                }
                _this17.tableContainer.setChildren([UI.createElement(Table, { columns: _this17.getTableColumns(), entries: entries, key: Math.random() })]);
            });
        }
    }]);
    return SingleStatisticChart;
}(UI.Element)) || _class4$8);


var StatisticCharts = function (_UI$Element4) {
    inherits(StatisticCharts, _UI$Element4);

    function StatisticCharts() {
        classCallCheck(this, StatisticCharts);
        return possibleConstructorReturn(this, (StatisticCharts.__proto__ || Object.getPrototypeOf(StatisticCharts)).apply(this, arguments));
    }

    createClass(StatisticCharts, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                "Users"
            ), UI.createElement(SingleStatisticChart, { objectType: "users" }), UI.createElement(
                "h3",
                null,
                "Submissions"
            ), UI.createElement(SingleStatisticChart, { objectType: "submissions" }), UI.createElement(
                "h3",
                null,
                "Custom runs"
            ), UI.createElement(SingleStatisticChart, { objectType: "customruns" })];
        }
    }]);
    return StatisticCharts;
}(UI.Element);

var CommandInstance = function (_StoreObject) {
    inherits(CommandInstance, _StoreObject);

    function CommandInstance() {
        classCallCheck(this, CommandInstance);
        return possibleConstructorReturn(this, (CommandInstance.__proto__ || Object.getPrototypeOf(CommandInstance)).apply(this, arguments));
    }

    createClass(CommandInstance, [{
        key: "toString",
        value: function toString() {
            return this.name;
        }
    }, {
        key: "requiresConfirmation",
        value: function requiresConfirmation() {
            return this.promptForConfirmation || this.runOptions.length !== 0;
        }
    }]);
    return CommandInstance;
}(StoreObject);

var verboseStatus = ["Waiting", "Running", "Failed", "Successful"];

var CommandRun = function (_StoreObject2) {
    inherits(CommandRun, _StoreObject2);

    function CommandRun() {
        classCallCheck(this, CommandRun);
        return possibleConstructorReturn(this, (CommandRun.__proto__ || Object.getPrototypeOf(CommandRun)).apply(this, arguments));
    }

    createClass(CommandRun, [{
        key: "update",
        value: function update(event) {
            if (event.type === "logMessage") {
                this.logEntries = this.logEntries || {
                    entries: [],
                    progress: {}
                };
                this.logEntries.entries.push(event.data);
            } else {
                get(CommandRun.prototype.__proto__ || Object.getPrototypeOf(CommandRun.prototype), "update", this).call(this, event);
            }
        }
    }, {
        key: "getVerboseStatus",
        value: function getVerboseStatus() {
            return verboseStatus[this.status];
        }
    }]);
    return CommandRun;
}(StoreObject);

var CommandInstanceStore = new GenericObjectStore("CommandInstance", CommandInstance);
var CommandRunStore = new GenericObjectStore("CommandRun", CommandRun);

var CommandRunStatus = function (_UI$Element) {
    inherits(CommandRunStatus, _UI$Element);

    function CommandRunStatus() {
        classCallCheck(this, CommandRunStatus);
        return possibleConstructorReturn(this, (CommandRunStatus.__proto__ || Object.getPrototypeOf(CommandRunStatus)).apply(this, arguments));
    }

    createClass(CommandRunStatus, [{
        key: "render",
        value: function render() {
            switch (this.options.commandRun.status) {
                case 0:
                    {
                        return "In queue..";
                    }
                case 1:
                    {
                        return UI.createElement(ProgressBar, { ref: "progressBar", style: { margin: "0 auto" } });
                    }
                case 2:
                    {
                        return UI.createElement(FAIcon, { icon: "times", style: { color: "red" } });
                    }
                case 3:
                    {
                        return UI.createElement(FAIcon, { icon: "check", style: { color: "green" } });
                    }
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.attachEventListener(this.options.commandRun, "logProgress", function (event) {
                if (_this2.progressBar) {
                    _this2.progressBar.set(event.data.percent || 0);
                } else {
                    _this2.redraw();
                }
            });
            this.attachEventListener(this.options.commandRun, "updateOrCreate", function (event) {
                _this2.redraw();
            });
        }
    }]);
    return CommandRunStatus;
}(UI.Element);

var CommandRunDetailsModal = function (_Modal) {
    inherits(CommandRunDetailsModal, _Modal);

    function CommandRunDetailsModal() {
        classCallCheck(this, CommandRunDetailsModal);
        return possibleConstructorReturn(this, (CommandRunDetailsModal.__proto__ || Object.getPrototypeOf(CommandRunDetailsModal)).apply(this, arguments));
    }

    createClass(CommandRunDetailsModal, [{
        key: "render",
        value: function render() {
            var children = [UI.createElement(
                "h2",
                null,
                "Command run #",
                this.options.commandRun.id
            ), UI.createElement(
                "h4",
                null,
                "Ran by ",
                UI.createElement(UserHandle, { userId: this.options.commandRun.userId })
            ), UI.createElement(
                "h4",
                null,
                "Command instance: ",
                CommandInstanceStore.get(this.options.commandRun.commandInstanceId).name
            ), UI.createElement(
                "h4",
                { ref: "statusField" },
                "Status: ",
                this.options.commandRun.getVerboseStatus()
            ), UI.createElement(
                "h4",
                null,
                "Logs"
            ), UI.createElement(StaticCodeHighlighter, { ref: "logger", numLines: 40, readOnly: true })];
            if (this.options.commandRun.status >= 2) {
                // The command is finished, show the result
                children.push(UI.createElement(
                    "h4",
                    null,
                    "Result:"
                ));
                children.push(UI.createElement(StaticCodeHighlighter, { ref: "resultField", numLines: 15, readOnly: true }));
            }
            return children;
        }
    }, {
        key: "getFormattedMessage",
        value: function getFormattedMessage(logEntry) {
            var message = "";
            message += "[" + StemDate(logEntry.timestamp).format("DD/MM/YYYY HH:mm:SS") + "]";
            message += " ";
            message += logEntry.message;
            message += "\n";
            return message;
        }
    }, {
        key: "getFormattedResult",
        value: function getFormattedResult(resultJson) {
            if (!resultJson) {
                return "Success!";
            }
            return JSON.stringify(resultJson);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            get(CommandRunDetailsModal.prototype.__proto__ || Object.getPrototypeOf(CommandRunDetailsModal.prototype), "onMount", this).call(this);
            if (this.options.commandRun.logEntries && this.options.commandRun.logEntries.entries) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this.options.commandRun.logEntries.entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var entry = _step.value;

                        this.logger.append(this.getFormattedMessage(entry));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            this.attachEventListener(this.options.commandRun, "logMessage", function (event) {
                _this4.logger.append(_this4.getFormattedMessage(event.data));
            });
            this.attachEventListener(this.options.commandRun, "updateOrCreate", function () {
                _this4.redraw();
                if (_this4.options.commandRun.status >= 2) {
                    _this4.resultField.append(_this4.getFormattedResult(_this4.options.commandRun.result));
                }
            });
            if (this.options.commandRun.status >= 2) {
                this.resultField.append(this.getFormattedResult(this.options.commandRun.result));
            }
        }
    }]);
    return CommandRunDetailsModal;
}(Modal);

var CommandRunDetails = function (_UI$Element2) {
    inherits(CommandRunDetails, _UI$Element2);

    function CommandRunDetails() {
        classCallCheck(this, CommandRunDetails);
        return possibleConstructorReturn(this, (CommandRunDetails.__proto__ || Object.getPrototypeOf(CommandRunDetails)).apply(this, arguments));
    }

    createClass(CommandRunDetails, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("cursor", "pointer");
            attr.setStyle("text-decoration", "underline");
        }
    }, {
        key: "render",
        value: function render() {
            return UI.T("Details");
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.addClickListener(function () {
                CommandRunDetailsModal.show({ commandRun: _this6.options.commandRun });
            });
        }
    }]);
    return CommandRunDetails;
}(UI.Element);

var CommandRunDuration = function (_UI$Primitive) {
    inherits(CommandRunDuration, _UI$Primitive);

    function CommandRunDuration() {
        classCallCheck(this, CommandRunDuration);
        return possibleConstructorReturn(this, (CommandRunDuration.__proto__ || Object.getPrototypeOf(CommandRunDuration)).apply(this, arguments));
    }

    createClass(CommandRunDuration, [{
        key: "render",
        value: function render() {
            if (this.options.commandRun.status === 0) {
                return "-";
            }
            var time = void 0;
            if (this.options.commandRun.status === 1) {
                time = StemDate.now() / 1000 - this.options.commandRun.dateCreated;
            } else {
                time = this.options.commandRun.dateFinished - this.options.commandRun.dateCreated;
            }
            return Formatter.truncate(time, 2);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this8 = this;

            this.intervalId = setInterval(function () {
                if (_this8.options.commandRun.status >= 2) {
                    clearInterval(_this8.intervalId);
                    delete _this8.intervalId;
                } else {
                    _this8.redraw();
                }
            }, 700);
            this.attachEventListener(this.options.commandRun, "updateOrCreate", function (event) {
                _this8.redraw();
            });
        }
    }]);
    return CommandRunDuration;
}(UI.Primitive("span"));

var PastCommandsTable = function (_Table) {
    inherits(PastCommandsTable, _Table);

    function PastCommandsTable() {
        classCallCheck(this, PastCommandsTable);
        return possibleConstructorReturn(this, (PastCommandsTable.__proto__ || Object.getPrototypeOf(PastCommandsTable)).apply(this, arguments));
    }

    createClass(PastCommandsTable, [{
        key: "getEntries",
        value: function getEntries() {
            return CommandRunStore.all().sort(function (a, b) {
                return b.dateCreated - a.dateCreated;
            });
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            get(PastCommandsTable.prototype.__proto__ || Object.getPrototypeOf(PastCommandsTable.prototype), "setColumns", this).call(this, [{
                value: function value(commandRun) {
                    return CommandInstanceStore.get(commandRun.commandInstanceId).name;
                },
                headerName: "Command"
            }, {
                value: function value(commandRun) {
                    return UI.createElement(UserHandle, { userId: commandRun.userId });
                },
                headerName: "User"
            }, {
                value: function value(commandRun) {
                    return StemDate(commandRun.dateCreated).format("DD/MM/YYYY HH:mm");
                },
                headerName: "Date"
            }, {
                value: function value(commandRun) {
                    return UI.createElement(CommandRunDuration, { commandRun: commandRun });
                },
                headerName: "Duration"
            }, {
                value: function value(commandRun) {
                    return UI.createElement(CommandRunStatus, { commandRun: commandRun });
                },
                headerName: "Status",
                headerStyle: {
                    textAlign: "center"
                },
                cellStyle: {
                    textAlign: "center"
                }
            }, {
                value: function value(commandRun) {
                    return UI.createElement(CommandRunDetails, { commandRun: commandRun });
                },
                headerName: "Details"
            }]);
        }
    }]);
    return PastCommandsTable;
}(Table);

var AutoFormFieldHelper = function (_UI$Element3) {
    inherits(AutoFormFieldHelper, _UI$Element3);

    function AutoFormFieldHelper() {
        classCallCheck(this, AutoFormFieldHelper);
        return possibleConstructorReturn(this, (AutoFormFieldHelper.__proto__ || Object.getPrototypeOf(AutoFormFieldHelper)).apply(this, arguments));
    }

    createClass(AutoFormFieldHelper, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                "span",
                { ref: "container", style: { position: "relative", overflow: "hidden", "cursor": "pointer" } },
                UI.createElement(FAIcon, { icon: "question-circle", ref: "span" })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            this.span.addNodeListener("mouseover", function () {
                _this11.popup = Popup.create(_this11.container, Object.assign({
                    target: _this11.span,
                    title: _this11.options.title,
                    children: _this11.options.description,
                    transitionTime: 300,
                    titleFontSize: "10pt",
                    contentStyle: {
                        padding: "8px",
                        textAlign: "left"
                    },
                    style: {
                        minWidth: "300px",
                        maxWidth: "500px"
                    }
                }));
            });

            this.span.addNodeListener("mouseout", function () {
                if (_this11.popup) {
                    _this11.popup.hide();
                }
            });
        }
    }]);
    return AutoFormFieldHelper;
}(UI.Element);

var AutoFormFieldSelectOption = function () {
    function AutoFormFieldSelectOption(options) {
        classCallCheck(this, AutoFormFieldSelectOption);

        Object.assign(this, options);
    }

    createClass(AutoFormFieldSelectOption, [{
        key: "toString",
        value: function toString() {
            return this.label;
        }
    }, {
        key: "getValue",
        value: function getValue() {
            return this.key;
        }
    }]);
    return AutoFormFieldSelectOption;
}();

var AutoFormField = function (_UI$Element4) {
    inherits(AutoFormField, _UI$Element4);

    function AutoFormField() {
        var _ref;

        var _temp, _this12, _ret;

        classCallCheck(this, AutoFormField);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this12 = possibleConstructorReturn(this, (_ref = AutoFormField.__proto__ || Object.getPrototypeOf(AutoFormField)).call.apply(_ref, [this].concat(args))), _this12), _this12.fieldType = {
            "text": 1,
            "number": 2,
            "checkbox": 3,
            "select": 4
        }, _temp), possibleConstructorReturn(_this12, _ret);
    }

    createClass(AutoFormField, [{
        key: "getInputRef",
        value: function getInputRef() {
            return this.options.shortName + "Input";
        }
    }, {
        key: "render",
        value: function render() {
            var formField = null;

            if (this.options.type === this.fieldType.text) {
                formField = UI.createElement(TextInput, { ref: this.getInputRef(), value: this.options.defaultValue });
            }
            if (this.options.type === this.fieldType.number) {
                formField = UI.createElement(NumberInput, { ref: this.getInputRef(), value: this.options.defaultValue });
            }
            if (this.options.type === this.fieldType.checkbox) {
                formField = UI.createElement(CheckboxInput, { ref: this.getInputRef(), checked: this.options.defaultValue });
            }
            if (this.options.type === this.fieldType.select) {
                var options = [];
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = this.options.choices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var option = _step2.value;

                        options.push(new AutoFormFieldSelectOption(option));
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                formField = UI.createElement(Select, { ref: this.getInputRef(), options: options });
            }

            return UI.createElement(
                "div",
                { style: {
                        width: "100%",
                        display: "flex",
                        flexDirection: "row"
                    } },
                UI.createElement(
                    "div",
                    { style: {
                            display: "flex",
                            justifyContent: "center",
                            alignItems: "center",
                            width: "12px"
                        } },
                    this.options.description && UI.createElement(AutoFormFieldHelper, { description: this.options.description, title: this.options.shortName })
                ),
                UI.createElement(
                    "div",
                    { style: { flex: "1" } },
                    UI.createElement(
                        FormField,
                        { label: this.options.longName },
                        formField
                    )
                )
            );
        }
    }, {
        key: "getValue",
        value: function getValue() {
            if (this.options.type === this.fieldType.select) {
                return this[this.getInputRef()].get().getValue();
            } else {
                return this[this.getInputRef()].getValue();
            }
        }
    }]);
    return AutoFormField;
}(UI.Element);

var CommandRunCreationModal = function (_ActionModal) {
    inherits(CommandRunCreationModal, _ActionModal);

    function CommandRunCreationModal() {
        classCallCheck(this, CommandRunCreationModal);
        return possibleConstructorReturn(this, (CommandRunCreationModal.__proto__ || Object.getPrototypeOf(CommandRunCreationModal)).apply(this, arguments));
    }

    createClass(CommandRunCreationModal, [{
        key: "getTitle",
        value: function getTitle() {
            return this.options.commandInstance.name;
        }
    }, {
        key: "getBody",
        value: function getBody() {
            var body = [];
            if (this.options.commandInstance.requiresConfirmation()) {
                if (this.options.commandInstance.promptForConfirmation) {
                    body.push(UI.createElement(
                        "h4",
                        { style: { color: "red" } },
                        "This command requires a confirmation. Are you sure you want to run this command?"
                    ));
                }
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = this.options.commandInstance.runOptions[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var entry = _step3.value;

                        body.push(UI.createElement(AutoFormField, _extends({ ref: entry.shortName }, entry)));
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }
            return body;
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return [UI.createElement(FAIcon, { icon: "cogs", style: { paddingRight: "7px" } }), "Run"];
        }
    }, {
        key: "getActionLevel",
        value: function getActionLevel() {
            return Level.PRIMARY;
        }
    }, {
        key: "action",
        value: function action() {
            var requestJson = {
                commandInstanceId: this.options.commandInstance.id,
                arguments: {}
            };

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.options.commandInstance.runOptions[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var entry = _step4.value;

                    requestJson.arguments[entry.shortName] = this[entry.shortName].getValue();
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            requestJson.arguments = JSON.stringify(requestJson.arguments);

            runCommand(requestJson, function () {
                CommandRunStore.dispatch("redrawTable");
            });
            this.hide();
        }
    }]);
    return CommandRunCreationModal;
}(ActionModal);

function runCommand(json, callback) {
    Ajax.postJSON("/baseconfig/run_command/", json).then(callback);
}

var CommandManager = function (_UI$Element5) {
    inherits(CommandManager, _UI$Element5);

    function CommandManager() {
        classCallCheck(this, CommandManager);
        return possibleConstructorReturn(this, (CommandManager.__proto__ || Object.getPrototypeOf(CommandManager)).apply(this, arguments));
    }

    createClass(CommandManager, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("margin-left", "15%");
            attr.setStyle("margin-right", "15%");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "h3",
                null,
                "Command manager"
            ), UI.createElement(
                "div",
                null,
                UI.createElement(
                    "h4",
                    null,
                    "Run a command"
                ),
                UI.createElement(Select, { options: CommandInstanceStore.all(), style: { marginLeft: "10px" }, ref: "commandSelect" }),
                UI.createElement(Button, { level: Level.PRIMARY, size: Size.SMALL, ref: "runCommandButton",
                    faIcon: "cogs", style: { marginLeft: "10px" } })
            ), UI.createElement("div", { ref: "descriptionArea", style: { margin: "10px" } }), UI.createElement(
                "div",
                { style: { marginTop: "20px" } },
                UI.createElement(
                    "h4",
                    null,
                    "Past commands"
                ),
                UI.createElement(PastCommandsTable, { ref: "pastCommandsTable" })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this15 = this;

            GlobalState.registerStream("GlobalCommandRuns");

            var redrawPastCommandsTable = function redrawPastCommandsTable() {
                _this15.pastCommandsTable.redraw();
            };

            this.attachCreateListener(CommandRunStore, redrawPastCommandsTable);
            this.attachListener(CommandRunStore, "redrawTable", redrawPastCommandsTable);

            this.descriptionArea.node.textContent = this.commandSelect.get().description;
            this.commandSelect.addChangeListener(function () {
                _this15.descriptionArea.node.textContent = _this15.commandSelect.get().description;
            });

            this.runCommandButton.addClickListener(function () {
                var commandInstance = _this15.commandSelect.get();
                if (commandInstance.requiresConfirmation()) {
                    CommandRunCreationModal.show({ commandInstance: commandInstance });
                } else {
                    runCommand({
                        commandInstanceId: commandInstance.id
                    }, redrawPastCommandsTable);
                }
            });
        }
    }]);
    return CommandManager;
}(UI.Element);

// TODO: this whole file needs a refactoring

function ajaxCall(request) {
    var onSuccess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NOOP_FUNCTION;
    var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NOOP_FUNCTION;

    Ajax.postJSON("/edit_translation/", request).then(onSuccess, onError);
}

var TranslationEntryTableRow = function (_TableRow) {
    inherits(TranslationEntryTableRow, _TableRow);

    function TranslationEntryTableRow() {
        classCallCheck(this, TranslationEntryTableRow);
        return possibleConstructorReturn(this, (TranslationEntryTableRow.__proto__ || Object.getPrototypeOf(TranslationEntryTableRow)).apply(this, arguments));
    }

    createClass(TranslationEntryTableRow, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(TranslationEntryTableRow.prototype.__proto__ || Object.getPrototypeOf(TranslationEntryTableRow.prototype), "setOptions", this).call(this, options);
            this.options.saveButton = this.saveButton;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            get(TranslationEntryTableRow.prototype.__proto__ || Object.getPrototypeOf(TranslationEntryTableRow.prototype), "onMount", this).call(this);

            this.saveButton.addClickListener(function () {
                _this2.saveKey();
            });

            this.entryInput.addChangeListener(function () {
                _this2.markChanged();
            });
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(TranslationEntryTableRow.prototype.__proto__ || Object.getPrototypeOf(TranslationEntryTableRow.prototype), "redraw", this).call(this);
            this.options.entryInput = this.entryInput;
        }
    }, {
        key: "markChanged",
        value: function markChanged() {
            this.setStyle("background-color", "lightblue");
        }
    }, {
        key: "markUnchanged",
        value: function markUnchanged() {
            this.setStyle("background-color", "white");
        }
    }, {
        key: "saveKey",
        value: function saveKey() {
            var _this3 = this;

            var entry = this.options.entry;
            var editEntries = [{
                keyId: entry.key.id,
                languageId: entry.language.id,
                newValue: this.entryInput.getValue()
            }];
            var request = {
                editEntries: JSON.stringify(editEntries)
            };
            ajaxCall(request, function () {
                _this3.markUnchanged();
            });
        }
    }, {
        key: "getEntryInput",
        value: function getEntryInput() {
            return this.options.entryInput;
        }
    }]);
    return TranslationEntryTableRow;
}(TableRow);

var TranslationEntryTable = function (_Table) {
    inherits(TranslationEntryTable, _Table);

    function TranslationEntryTable() {
        classCallCheck(this, TranslationEntryTable);
        return possibleConstructorReturn(this, (TranslationEntryTable.__proto__ || Object.getPrototypeOf(TranslationEntryTable)).apply(this, arguments));
    }

    createClass(TranslationEntryTable, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(TranslationEntryTable.prototype.__proto__ || Object.getPrototypeOf(TranslationEntryTable.prototype), "setOptions", this).call(this, options);
            this.language = options.language;
        }
    }, {
        key: "getRowClass",
        value: function getRowClass() {
            return TranslationEntryTableRow;
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var numberStyle = {
                textAlign: "right"
            };

            get(TranslationEntryTable.prototype.__proto__ || Object.getPrototypeOf(TranslationEntryTable.prototype), "setColumns", this).call(this, [{
                value: function value(entry) {
                    return entry.key.id;
                },
                headerName: "Key ID",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return entry.key.value;
                },
                headerName: "Entry value",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return UI.createElement(
                        "div",
                        { className: "form-group" },
                        UI.createElement(TextInput, { ref: "entryInput", value: entry.entry ? entry.entry.value : "" })
                    );
                },
                headerName: "Key value",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return UI.createElement(
                        "div",
                        { className: "form-group" },
                        UI.createElement(Button, { ref: "saveButton", label: "Save", level: Level.INFO })
                    );
                },
                headerName: "Actions",
                sortDescending: true
            }]);
        }
    }, {
        key: "getEntryKey",
        value: function getEntryKey(entry, index) {
            return index;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            var language = this.language;
            var keyEntryMap = new Map();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = TranslationEntryStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var entry = _step.value;

                    if (entry.getLanguage().id === language.id) {
                        keyEntryMap.set(entry.getTranslationKey().id, entry);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var ret = [];
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = TranslationKeyStore.all()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var key = _step2.value;

                    ret.push({ key: key, entry: keyEntryMap.get(key.id), language: language });
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return ret;
        }
    }]);
    return TranslationEntryTable;
}(Table);

var TranslationEntryManager = function (_Panel) {
    inherits(TranslationEntryManager, _Panel);

    function TranslationEntryManager() {
        classCallCheck(this, TranslationEntryManager);
        return possibleConstructorReturn(this, (TranslationEntryManager.__proto__ || Object.getPrototypeOf(TranslationEntryManager)).apply(this, arguments));
    }

    createClass(TranslationEntryManager, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(TranslationEntryManager.prototype.__proto__ || Object.getPrototypeOf(TranslationEntryManager.prototype), "setOptions", this).call(this, options);
            this.language = Language.get(1);
        }
    }, {
        key: "render",
        value: function render() {
            var languageOptions = this.getLanguageOptions();
            return [UI.createElement(
                "div",
                { className: "form-group" },
                UI.createElement(Select, { className: "form-control", options: languageOptions, ref: "languageSelect" }),
                UI.createElement(TranslationEntryTable, { ref: "translationTable", language: this.language })
            ), UI.createElement(
                "div",
                { className: "btn-group" },
                UI.createElement(Button, { ref: "saveAllButton", label: "Save all", level: Level.INFO }),
                UI.createElement(
                    Button,
                    { className: "pull-left", level: Level.INFO, label: "Import", ref: "importButton",
                        style: { position: "relative", overflow: "hidden" } },
                    UI.createElement(FileInput, { ref: "uploadFile", style: { position: "absolute", top: "0", right: "0", margin: "0",
                            padding: "0", cursor: "pointer", opacity: "0", filter: "alpha(opacity=0)" } })
                ),
                UI.createElement(Button, { ref: "exportButton", label: "Export", level: Level.INFO })
            )];
        }
    }, {
        key: "getLanguageOptions",
        value: function getLanguageOptions() {
            var ret = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                var _loop = function _loop() {
                    var language = _step3.value;

                    ret.push({
                        value: language,
                        toString: function toString() {
                            return language.name;
                        }
                    });
                };

                for (var _iterator3 = Language.all()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return ret;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            get(TranslationEntryManager.prototype.__proto__ || Object.getPrototypeOf(TranslationEntryManager.prototype), "onMount", this).call(this);

            this.languageSelect.addChangeListener(function () {
                _this6.changeLanguage();
            });
            this.saveAllButton.addClickListener(function () {
                _this6.saveAll();
            });
            this.importButton.addClickListener(function () {
                _this6.importFromFile();
            });
            this.exportButton.addClickListener(function () {
                _this6.exportToFile();
            });
        }
    }, {
        key: "changeLanguage",
        value: function changeLanguage() {
            this.language = this.languageSelect.get().value;
            this.redraw();
        }
    }, {
        key: "saveAll",
        value: function saveAll() {
            var _this7 = this;

            var changes = [];
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.translationTable.rows[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var row = _step4.value;

                    var entryNewValue = row.options.entryInput.getValue();
                    var keyId = row.options.entry.key.id;
                    var entry = row.options.entry.entry;
                    var change = {};
                    if (entryNewValue === "" && !entry) {
                        continue;
                    }
                    if (entry && entryNewValue === entry.value) {
                        continue;
                    }
                    change = {
                        keyId: keyId,
                        newValue: entryNewValue,
                        languageId: this.language.id
                    };
                    if (entry) {
                        change.entryId = entry.id;
                    }
                    changes.push(change);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            var request = {
                editEntries: JSON.stringify(changes)
            };
            ajaxCall(request, function () {
                // TODO: Find a way to redraw only the changed rows
                _this7.redraw();
            }, function () {
                _this7.saveAllButton.disable();
                _this7.saveAllButton.setLevel(Level.ERROR);
                _this7.saveAllButton.setLabel("Failed!");
                setTimeout(function () {
                    _this7.saveAllButton.enable();
                    _this7.redraw();
                }, 1000);
            });
        }
    }, {
        key: "importFromFile",
        value: function importFromFile() {
            var _this8 = this;

            this.uploadFile.node.onchange = function () {
                var reader = new FileReader();
                var file = _this8.uploadFile.getFile();
                if (file.size > 1e8) {
                    _this8.fileWarningModal.show();
                    console.warn("File ", file.name, " too large. Skipping upload.");
                    _this8.uploadFile.setValue("");
                    return;
                }
                reader.onprogress = function () {
                    _this8.importButton.setLevel(Level.WARNING);
                    _this8.importButton.setLabel("Uploading...");
                    _this8.importButton.disable();

                    _this8.saveAllButton.disable();
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;

                    try {
                        for (var _iterator5 = _this8.translationTable.rows[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                            var row = _step5.value;

                            row.options.saveButton.disable();
                        }
                    } catch (err) {
                        _didIteratorError5 = true;
                        _iteratorError5 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                _iterator5.return();
                            }
                        } finally {
                            if (_didIteratorError5) {
                                throw _iteratorError5;
                            }
                        }
                    }
                };
                reader.onload = function (e) {
                    var text = e.currentTarget.result;
                    var error = false;
                    var errmsg = "";
                    try {
                        var obj = JSON.parse(text);
                        if (Object.prototype.toString.call(obj) !== '[object Array]') {
                            error = true;
                            errmsg = "No array found!";
                        } else {
                            var changes = [];
                            var _iteratorNormalCompletion6 = true;
                            var _didIteratorError6 = false;
                            var _iteratorError6 = undefined;

                            try {
                                for (var _iterator6 = obj[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                    var x = _step6.value;

                                    if (!x.keyId) {
                                        error = true;
                                        errmsg = "Key id missing!";
                                        break;
                                    }
                                    if (x.entryValue === "") {
                                        continue;
                                    }
                                    if (!x.entryValue) {
                                        error = true;
                                        errmsg = "Entry value missing!";
                                        break;
                                    }
                                    x.entryValue = x.entryValue.trim();
                                    var change = {
                                        keyId: x.keyId,
                                        newValue: x.entryValue,
                                        languageId: _this8.language.id
                                    };
                                    if (x.entryId) {
                                        change.entryId = x.entryId;
                                        var entry = TranslationEntryStore.get(x.entryId);
                                        if (x.entryValue === entry.value) {
                                            continue;
                                        }
                                    }
                                    changes.push(change);
                                }
                            } catch (err) {
                                _didIteratorError6 = true;
                                _iteratorError6 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                        _iterator6.return();
                                    }
                                } finally {
                                    if (_didIteratorError6) {
                                        throw _iteratorError6;
                                    }
                                }
                            }

                            if (!error) {
                                var request = {
                                    editEntries: JSON.stringify(changes)
                                };
                                ajaxCall(request, function () {
                                    _this8.redraw();
                                });
                            }
                        }
                    } catch (ex) {
                        error = true;
                        errmsg = ex.message;
                    }

                    var timeout = void 0;
                    if (error) {
                        _this8.importButton.setLevel(Level.ERROR);
                        _this8.importButton.setLabel(errmsg);
                        timeout = 2000;
                    } else {
                        _this8.importButton.setLevel(Level.SUCCESS);
                        _this8.importButton.setLabel("Successfully uploaded!");
                        timeout = 700;
                    }
                    setTimeout(function () {
                        _this8.importButton.enable();
                        _this8.importButton.setLevel(Level.INFO);
                        _this8.importButton.setLabel("Import");

                        _this8.saveAllButton.enable();
                        var _iteratorNormalCompletion7 = true;
                        var _didIteratorError7 = false;
                        var _iteratorError7 = undefined;

                        try {
                            for (var _iterator7 = _this8.translationTable.rows[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                var row = _step7.value;

                                row.options.saveButton.enable();
                            }
                        } catch (err) {
                            _didIteratorError7 = true;
                            _iteratorError7 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                    _iterator7.return();
                                }
                            } finally {
                                if (_didIteratorError7) {
                                    throw _iteratorError7;
                                }
                            }
                        }
                    }, timeout);
                    _this8.uploadFile.setValue("");
                };
                reader.readAsText(file);
            };
        }
    }, {
        key: "exportToFile",
        value: function exportToFile() {
            var language = this.language;
            var keyEntryMap = new Map();
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = TranslationEntryStore.all()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var entry = _step8.value;

                    if (entry.getLanguage().id === language.id) {
                        keyEntryMap.set(entry.getTranslationKey().id, entry);
                    }
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            var output = [];
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
                for (var _iterator9 = TranslationKeyStore.all()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var key = _step9.value;

                    var _entry = keyEntryMap.get(key.id);
                    output.push({
                        keyId: key.id,
                        entryId: _entry ? _entry.id : "",
                        keyValue: key.value,
                        entryValue: _entry ? _entry.value : ""
                    });
                }
            } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                    }
                } finally {
                    if (_didIteratorError9) {
                        throw _iteratorError9;
                    }
                }
            }

            var file = new Blob([JSON.stringify(output, null, 2)], { type: 'text/plain;charset=utf-8' });

            FileSaver.saveAs(file, "translations.json");
        }
    }]);
    return TranslationEntryManager;
}(Panel);

var TranslationKeyTableRow = function (_TableRow2) {
    inherits(TranslationKeyTableRow, _TableRow2);

    function TranslationKeyTableRow() {
        classCallCheck(this, TranslationKeyTableRow);
        return possibleConstructorReturn(this, (TranslationKeyTableRow.__proto__ || Object.getPrototypeOf(TranslationKeyTableRow)).apply(this, arguments));
    }

    createClass(TranslationKeyTableRow, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(TranslationKeyTableRow.prototype.__proto__ || Object.getPrototypeOf(TranslationKeyTableRow.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this10 = this;

            get(TranslationKeyTableRow.prototype.__proto__ || Object.getPrototypeOf(TranslationKeyTableRow.prototype), "onMount", this).call(this);
            this.deleteButton.addClickListener(function () {
                _this10.deleteKey();
            });
            this.renameButton.addClickListener(function () {
                _this10.rename();
            });
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(TranslationKeyTableRow.prototype.__proto__ || Object.getPrototypeOf(TranslationKeyTableRow.prototype), "redraw", this).call(this);
            this.textInput.hide();
            this.renameState = false;

            var editable = this.options.entry.editable;
            if (!editable) {
                this.renameButton.hide();
                this.deleteButton.hide();
            } else {
                this.renameButton.show();
                this.deleteButton.show();
            }
        }
    }, {
        key: "deleteKey",
        value: function deleteKey() {
            var _this11 = this;

            var key = this.options.entry.key;
            var table = this.options.entry.table;
            var request = {
                editKeys: JSON.stringify({
                    type: "delete",
                    keyId: key.id
                })
            };
            table.changed = true;
            this.hide();
            ajaxCall(request, function () {
                _this11.options.entry.table.changed = true;
                TranslationKeyStore.applyDeleteEvent({ objectId: key.id });
                var _iteratorNormalCompletion10 = true;
                var _didIteratorError10 = false;
                var _iteratorError10 = undefined;

                try {
                    for (var _iterator10 = TranslationEntryStore.all()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                        var entry = _step10.value;

                        if (entry.translationKeyId == key.id) {
                            TranslationEntryStore.applyDeleteEvent({ objectId: entry.id });
                        }
                    }
                } catch (err) {
                    _didIteratorError10 = true;
                    _iteratorError10 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion10 && _iterator10.return) {
                            _iterator10.return();
                        }
                    } finally {
                        if (_didIteratorError10) {
                            throw _iteratorError10;
                        }
                    }
                }
            });
        }
    }, {
        key: "rename",
        value: function rename() {
            var _this12 = this;

            if (!this.renameState) {
                this.renameButton.setLabel("Save");
                this.textInput.setValue(this.textElement.getValue());
                this.oldTextElementValue = this.textElement.getValue();
                this.textElement.setValue("");
                this.textInput.show();
                this.renameState = true;
            } else {
                this.renameButton.setLabel("Rename");
                this.textInput.hide();
                if (this.textInput.getValue() != "") {
                    this.textElement.setValue(this.textInput.getValue());

                    var value = this.textInput.getValue();
                    var key = this.options.entry.key;
                    var request = {
                        editKeys: JSON.stringify({
                            type: "rename",
                            keyId: key.id,
                            newValue: value
                        })
                    };
                    ajaxCall(request, function () {
                        _this12.options.entry.table.changed = true;
                        _this12.options.entry.table.redraw();
                    });
                } else {
                    this.textElement.setValue(this.oldTextElementValue);
                }
                this.renameState = false;
            }
        }
    }]);
    return TranslationKeyTableRow;
}(TableRow);

var TranslationKeyTable = function (_Table2) {
    inherits(TranslationKeyTable, _Table2);

    function TranslationKeyTable() {
        classCallCheck(this, TranslationKeyTable);
        return possibleConstructorReturn(this, (TranslationKeyTable.__proto__ || Object.getPrototypeOf(TranslationKeyTable)).apply(this, arguments));
    }

    createClass(TranslationKeyTable, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(TranslationKeyTable.prototype.__proto__ || Object.getPrototypeOf(TranslationKeyTable.prototype), "setOptions", this).call(this, options);
            this.editable = false;
        }
    }, {
        key: "getRowClass",
        value: function getRowClass() {
            return TranslationKeyTableRow;
        }
    }, {
        key: "setColumns",
        value: function setColumns() {
            var numberStyle = {
                textAlign: "right"
            };

            get(TranslationKeyTable.prototype.__proto__ || Object.getPrototypeOf(TranslationKeyTable.prototype), "setColumns", this).call(this, [{
                value: function value(entry) {
                    return entry.key.id;
                },
                headerName: "Key ID",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return [UI.createElement(UI.TextElement, { ref: "textElement", value: entry.key.value }), UI.createElement(TextInput, { ref: "textInput" })];
                },
                headerName: "Entry value",
                sortDescending: true,
                cellStyle: numberStyle,
                headerStyle: numberStyle
            }, {
                value: function value(entry) {
                    return [UI.createElement(
                        "div",
                        { className: "btn-group" },
                        UI.createElement(Button, { ref: "renameButton", label: "Rename", level: Level.INFO }),
                        UI.createElement(Button, { ref: "deleteButton", label: "Delete", level: Level.DANGER })
                    )];
                },
                headerName: "Actions",
                sortDescending: true
            }]);
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(TranslationKeyTable.prototype.__proto__ || Object.getPrototypeOf(TranslationKeyTable.prototype), "onMount", this).call(this);
            this.changed = false;
        }
    }, {
        key: "getEntryKey",
        value: function getEntryKey(entry, index) {
            return index;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            var ret = [];
            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
                for (var _iterator11 = TranslationKeyStore.all()[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var key = _step11.value;

                    ret.push({ key: key, table: this, editable: this.editable });
                }
            } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion11 && _iterator11.return) {
                        _iterator11.return();
                    }
                } finally {
                    if (_didIteratorError11) {
                        throw _iteratorError11;
                    }
                }
            }

            return ret;
        }
    }, {
        key: "makeEditable",
        value: function makeEditable() {
            this.editable = true;
            this.redraw();
        }
    }, {
        key: "makeNoneditable",
        value: function makeNoneditable() {
            this.editable = false;
            this.redraw();
        }
    }]);
    return TranslationKeyTable;
}(Table);

var TranslationKeyManager = function (_Panel2) {
    inherits(TranslationKeyManager, _Panel2);

    function TranslationKeyManager() {
        classCallCheck(this, TranslationKeyManager);
        return possibleConstructorReturn(this, (TranslationKeyManager.__proto__ || Object.getPrototypeOf(TranslationKeyManager)).apply(this, arguments));
    }

    createClass(TranslationKeyManager, [{
        key: "render",
        value: function render() {
            var style = {
                display: "inline-block",
                overflow: "auto",
                resize: "none",
                height: "46px",
                width: "300px",
                "vertical-align": "top"
            };

            return [UI.createElement(
                "label",
                null,
                "Enable editing: \xA0 "
            ), UI.createElement(CheckboxInput, { ref: "editableCheckbox" }), UI.createElement(TranslationKeyTable, { ref: "table" }), UI.createElement(TextArea, { ref: "textArea", className: "form-control", style: style }), UI.createElement(Button, { label: "Add keys", ref: "saveButton", style: { marginLeft: "20px" }, level: Level.INFO }), UI.createElement(UI.TextElement, { ref: "addStatus" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this15 = this;

            get(TranslationKeyManager.prototype.__proto__ || Object.getPrototypeOf(TranslationKeyManager.prototype), "onMount", this).call(this);
            this.changed = false;
            this.saveButton.addClickListener(function () {
                _this15.saveKeys();
            });
            this.editableCheckbox.addClickListener(function () {
                _this15.switchEditable();
            });
        }
    }, {
        key: "switchEditable",
        value: function switchEditable() {
            if (this.editableCheckbox.getValue()) {
                this.table.makeEditable();
            } else {
                this.table.makeNoneditable();
            }
        }
    }, {
        key: "hasChanged",
        value: function hasChanged() {
            return this.table.changed || this.changed;
        }
    }, {
        key: "setUnchanged",
        value: function setUnchanged() {
            this.table.changed = false;
            this.changed = false;
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(TranslationKeyManager.prototype.__proto__ || Object.getPrototypeOf(TranslationKeyManager.prototype), "redraw", this).call(this);
        }
    }, {
        key: "saveKeys",
        value: function saveKeys() {
            var _this16 = this;

            var value = this.textArea.getValue();
            this.textArea.setValue("");

            var request = {
                editKeys: JSON.stringify({
                    type: "add",
                    keys: value
                })
            };
            this.saveButton.disable();
            this.changed = true;
            ajaxCall(request, function (data) {
                _this16.saveButton.setLabel("Success!");
                _this16.saveButton.setLevel(Level.SUCCESS);
                _this16.textArea.setValue("");
                _this16.changed = true;
                _this16.addStatus.setValue(data.keyInfo.added + " keys added, " + data.keyInfo.alreadyExists + " keys already exists");
                setTimeout(function () {
                    _this16.saveButton.enable();
                    _this16.saveButton.setLabel("Add keys");
                    _this16.saveButton.setLevel(Level.INFO);
                    _this16.addStatus.setValue("");
                    _this16.table.redraw();
                }, 2000);
            }, function () {
                _this16.saveButton.setLabel("Failed!");
                _this16.saveButton.setLevel(Level.ERROR);
                setTimeout(function () {
                    _this16.saveButton.enable();
                    _this16.saveButton.setLabel("Add keys");
                    _this16.saveButton.setLevel(Level.INFO);
                }, 700);
            });
        }
    }]);
    return TranslationKeyManager;
}(Panel);

var TranslationManager = function (_Panel3) {
    inherits(TranslationManager, _Panel3);

    function TranslationManager() {
        classCallCheck(this, TranslationManager);
        return possibleConstructorReturn(this, (TranslationManager.__proto__ || Object.getPrototypeOf(TranslationManager)).apply(this, arguments));
    }

    createClass(TranslationManager, [{
        key: "getUrlPrefix",
        value: function getUrlPrefix(urlPart) {
            var url = "/manage/translation/";
            if (urlPart) {
                url += urlPart + "/";
            }
            return url;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                TabArea,
                { ref: "tabArea", variableHeightPanels: true },
                UI.createElement(TranslationKeyManager, { ref: "keyManager", tabHref: this.getUrlPrefix("keys"), title: "Edit keys", active: true }),
                UI.createElement(TranslationEntryManager, { ref: "entryManager", tabHref: this.getUrlPrefix("entries"), title: "Edit entries" })
            )];
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (!this.tabArea) {
                this.initialUrlParts = urlParts;
            } else {
                this.showUrlTab(urlParts[0] || "keys");
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this18 = this;

            get(TranslationManager.prototype.__proto__ || Object.getPrototypeOf(TranslationManager.prototype), "onMount", this).call(this);

            this.setURL(this.initialUrlParts);
            delete this.initialUrlParts;

            this.tabArea.titleArea.addClass("text-center");

            this.tabArea.children[1].addClickListener(function () {
                if (_this18.keyManager.hasChanged()) {
                    _this18.entryManager.redraw();
                    _this18.keyManager.setUnchanged();
                }
            });
        }
    }, {
        key: "showUrlTab",
        value: function showUrlTab(urlPart) {
            if (urlPart === "keys") {
                this.keyManager.dispatch("show");
            } else if (urlPart === "entries") {
                this.entryManager.dispatch("show");
                if (this.keyManager.hasChanged()) {
                    this.entryManager.redraw();
                    this.keyManager.setUnchanged();
                }
            }
        }
    }]);
    return TranslationManager;
}(Panel);

var DocumentationEntry = function (_StoreObject) {
    inherits(DocumentationEntry, _StoreObject);

    function DocumentationEntry() {
        classCallCheck(this, DocumentationEntry);
        return possibleConstructorReturn(this, (DocumentationEntry.__proto__ || Object.getPrototypeOf(DocumentationEntry)).apply(this, arguments));
    }

    createClass(DocumentationEntry, [{
        key: "getArticle",
        value: function getArticle() {
            var article = ArticleStore.get(this.articleId);
            return article && article.getTranslation();
        }
    }, {
        key: "getParent",
        value: function getParent() {
            return DocumentationEntryStore.get(this.parentId);
        }
    }, {
        key: "toString",
        value: function toString() {
            return this.getName();
        }
    }, {
        key: "getFullURL",
        value: function getFullURL() {
            var parent = this.getParent();
            if (parent) {
                return parent.getFullURL() + "/" + this.urlName;
            } else {
                return this.urlName;
            }
            return "";
        }
    }, {
        key: "getName",
        value: function getName() {
            return this.name || this.getArticle().getName();
        }
    }, {
        key: "getParentIndex",
        value: function getParentIndex() {
            return this.parentIndex || this.id;
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            var entries = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = DocumentationEntryStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var documentationEntry = _step.value;

                    if (documentationEntry.parentId === this.id) {
                        entries.push(documentationEntry);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            entries.sort(function (a, b) {
                return a.getParentIndex() - b.getParentIndex();
            });

            return entries;
        }
    }]);
    return DocumentationEntry;
}(StoreObject);

var DocumentationEntryStoreClass = function (_GenericObjectStore) {
    inherits(DocumentationEntryStoreClass, _GenericObjectStore);

    function DocumentationEntryStoreClass() {
        classCallCheck(this, DocumentationEntryStoreClass);
        return possibleConstructorReturn(this, (DocumentationEntryStoreClass.__proto__ || Object.getPrototypeOf(DocumentationEntryStoreClass)).call(this, "DocumentationEntry", DocumentationEntry));
    }

    return DocumentationEntryStoreClass;
}(GenericObjectStore);

var DocumentationEntryStore = new DocumentationEntryStoreClass();

var _class$110, _descriptor$48, _descriptor2$42, _descriptor3$36, _descriptor4$32, _descriptor5$29, _descriptor6$25;

function _initDefineProp$49(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$50(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DocumentationStyle = (_class$110 = function (_StyleSheet) {
    inherits(DocumentationStyle, _StyleSheet);

    function DocumentationStyle() {
        classCallCheck(this, DocumentationStyle);

        var _this = possibleConstructorReturn(this, (DocumentationStyle.__proto__ || Object.getPrototypeOf(DocumentationStyle)).call(this, { updateOnResize: true }));

        _initDefineProp$49(_this, "panel", _descriptor$48, _this);

        _initDefineProp$49(_this, "navPanel", _descriptor2$42, _this);

        _initDefineProp$49(_this, "article", _descriptor3$36, _this);

        _initDefineProp$49(_this, "articleSwitcher", _descriptor4$32, _this);

        _initDefineProp$49(_this, "navElementDiv", _descriptor5$29, _this);

        _initDefineProp$49(_this, "documentationPanel", _descriptor6$25, _this);

        return _this;
    }

    return DocumentationStyle;
}(StyleSheet), _descriptor$48 = _applyDecoratedDescriptor$50(_class$110.prototype, "panel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "100%"
        };
    }
}), _descriptor2$42 = _applyDecoratedDescriptor$50(_class$110.prototype, "navPanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "20%",
            maxWidth: "20%",
            height: "100%",
            display: "inline-block",
            float: "left",
            backgroundColor: "#f2f4f9",
            color: "#252525",
            overflowX: "auto",
            overflowY: "auto"
        };
    }
}), _descriptor3$36 = _applyDecoratedDescriptor$50(_class$110.prototype, "article", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: "80%",
            maxWidth: "80%",
            backgroundColor: "#f2f4f9",
            minHeight: "100%",
            maxHeight: "100%",
            height: "100%",
            display: "inline-block",
            overflowX: "hidden",
            overflowY: "scroll"
        };
    }
}), _descriptor4$32 = _applyDecoratedDescriptor$50(_class$110.prototype, "articleSwitcher", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "960px",
            maxWidth: "100%",
            textAlign: "justify", // TODO: DO WE WANT THIS ?
            paddingTop: "25px", // TODO: HERE, A BETTER PADDING
            paddingBottom: "30px",
            minHeight: "100%",
            marginBottom: "-5px",
            display: "inline-block",
            paddingLeft: "5%",
            paddingRight: "5%",
            backgroundColor: "#fff",
            height: "auto !important"
        };
    }
}), _descriptor5$29 = _applyDecoratedDescriptor$50(_class$110.prototype, "navElementDiv", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: "14px",
            paddingLeft: "12px",
            paddingTop: ".75em",
            paddingBottom: ".75em"
        };
    }
}), _descriptor6$25 = _applyDecoratedDescriptor$50(_class$110.prototype, "documentationPanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: function height() {
                return window.innerHeight - 45 + "px";
            },
            overflow: "hidden",
            position: "absolute",
            minWidth: "100%",
            maxWidth: "100%",
            backgroundColor: "#fff"
        };
    }
}), _class$110);

var EditEntryModal = function (_ActionModal) {
    inherits(EditEntryModal, _ActionModal);

    function EditEntryModal() {
        classCallCheck(this, EditEntryModal);
        return possibleConstructorReturn(this, (EditEntryModal.__proto__ || Object.getPrototypeOf(EditEntryModal)).apply(this, arguments));
    }

    createClass(EditEntryModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Edit documentation entry";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Apply";
        }
    }, {
        key: "getEntry",
        value: function getEntry() {
            return this.options.entry;
        }
    }, {
        key: "getParentInput",
        value: function getParentInput() {}
    }, {
        key: "getAjaxUrl",
        value: function getAjaxUrl() {
            return "/docs/edit_entry/";
        }
    }, {
        key: "getAjaxRequest",
        value: function getAjaxRequest() {
            return {
                entryId: this.getEntry().id,
                urlName: this.urlNameInput.getValue(),
                name: this.nameInput.getValue(),
                articleId: parseInt(this.articleIdInput.getValue()) || 0,
                parentIndex: parseInt(this.parentIndexInput.getValue()) || 0
            };
        }
    }, {
        key: "getBody",
        value: function getBody() {
            return [UI.createElement(
                Form,
                { style: { marginTop: "10px", color: "initial", fontSize: "initial" } },
                UI.createElement(
                    FormField,
                    { label: "URL name", style: { fontWeight: "initial" } },
                    UI.createElement(TextInput, { ref: "urlNameInput", value: this.getEntry().urlName })
                ),
                UI.createElement(
                    FormField,
                    { label: "Name", style: { fontWeight: "initial" } },
                    UI.createElement(TextInput, { ref: "nameInput", value: this.getEntry().name })
                ),
                UI.createElement(
                    FormField,
                    { label: "Article Id", style: { fontWeight: "initial" } },
                    UI.createElement(TextInput, { ref: "articleIdInput", value: this.getEntry().articleId,
                        placeholder: "Enter 0 (or leave blank) to create a new article instead" })
                ),
                this.getParentInput(),
                UI.createElement(
                    FormField,
                    { label: "Parent index", style: { fontWeight: "initial" } },
                    UI.createElement(TextInput, { ref: "parentIndexInput", value: this.getEntry().parentIndex })
                )
            )];
        }
    }, {
        key: "check",
        value: function check(data) {
            if (!data.urlName) {
                return "URL name cannot be empty.";
            }
            if (!data.name) {
                return "Name cannot be empty.";
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = DocumentationEntryStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var entry = _step.value;

                    if (entry === this.getEntry()) {
                        continue;
                    }
                    if (entry.getName() === data.name) {
                        return "Name already exists.";
                    }
                    if (entry.urlName === data.urlName) {
                        return "URL name already exists";
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "action",
        value: function action() {
            var request = this.getAjaxRequest();
            var errorMessage = this.check(request);
            if (!errorMessage) {
                Ajax.postJSON(this.getAjaxUrl(), request);
            } else {
                this.messageArea.showMessage(errorMessage, "red");
            }
            this.hide();
        }
    }]);
    return EditEntryModal;
}(ActionModal);

var CreateEntryModal = function (_EditEntryModal) {
    inherits(CreateEntryModal, _EditEntryModal);

    function CreateEntryModal() {
        classCallCheck(this, CreateEntryModal);
        return possibleConstructorReturn(this, (CreateEntryModal.__proto__ || Object.getPrototypeOf(CreateEntryModal)).apply(this, arguments));
    }

    createClass(CreateEntryModal, [{
        key: "getTitle",
        value: function getTitle() {
            return "Create documentation entry";
        }
    }, {
        key: "getActionName",
        value: function getActionName() {
            return "Create";
        }
    }, {
        key: "getEntry",
        value: function getEntry() {
            return {
                urlName: "",
                name: "",
                articleId: "",
                parentIndex: "",
                id: 0
            };
        }
    }, {
        key: "getParentInput",
        value: function getParentInput() {
            var entries = DocumentationEntryStore.all();
            entries.push({
                toString: function toString() {
                    return "No Parent";
                },
                id: 0
            });
            return UI.createElement(
                FormField,
                { label: "Parent", style: { fontWeight: "initial" } },
                UI.createElement(Select, { ref: "parentInput", options: entries, selected: entries[entries.length - 1], style: { height: "30px" } })
            );
        }
    }, {
        key: "getAjaxUrl",
        value: function getAjaxUrl() {
            return "/docs/create/";
        }
    }, {
        key: "getAjaxRequest",
        value: function getAjaxRequest() {
            var request = get(CreateEntryModal.prototype.__proto__ || Object.getPrototypeOf(CreateEntryModal.prototype), "getAjaxRequest", this).call(this);
            request.parentId = this.parentInput.get().id;
            return request;
        }
    }]);
    return CreateEntryModal;
}(EditEntryModal);

var CreateEntryButton = ActionModalButton(CreateEntryModal);

var CollapseIconClass = function (_FACollapseIcon) {
    inherits(CollapseIconClass, _FACollapseIcon);

    function CollapseIconClass() {
        classCallCheck(this, CollapseIconClass);
        return possibleConstructorReturn(this, (CollapseIconClass.__proto__ || Object.getPrototypeOf(CollapseIconClass)).apply(this, arguments));
    }

    createClass(CollapseIconClass, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(CollapseIconClass.prototype.__proto__ || Object.getPrototypeOf(CollapseIconClass.prototype), "extraNodeAttributes", this).call(this, attr);
            if (!this.options.collapsed) {
                // this is not really a hack, but we might want this with em?
                attr.setStyle("margin-left", "-2px");
                attr.setStyle("margin-right", "2px");
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.addClickListener(function (event) {
                event.stopPropagation();
                _this2.options.parent.toggleCollapsed();
            });
        }
    }]);
    return CollapseIconClass;
}(FACollapseIcon);

var DocumentationNavElementContent = function (_UI$Element) {
    inherits(DocumentationNavElementContent, _UI$Element);

    function DocumentationNavElementContent() {
        classCallCheck(this, DocumentationNavElementContent);
        return possibleConstructorReturn(this, (DocumentationNavElementContent.__proto__ || Object.getPrototypeOf(DocumentationNavElementContent)).apply(this, arguments));
    }

    createClass(DocumentationNavElementContent, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(DocumentationStyle.getInstance().navElementDiv); // TODO: add this later

            // TODO: this should be in 2 separate classes
            if (this.options.active) {
                attr.setStyle("backgroundColor", "#2980b9");
                attr.setStyle("color", "#161616");
                attr.setStyle("fontWeight", "bold");
            } else {
                attr.setStyle("backgroundColor", "#f2f4f9");
                attr.setStyle("color", "#161616");
            }
        }
    }, {
        key: "setCollapsed",
        value: function setCollapsed(collapsed) {
            if (this.options.collapsed === collapsed) {
                return;
            }
            this.options.collapsed = collapsed;
            if (!this.options.shouldToggle) {
                return;
            }
            this.collapseIcon.setCollapsed(collapsed);
            this.dispatch("toggleCollapsed");
        }
    }, {
        key: "toggleCollapsed",
        value: function toggleCollapsed() {
            this.setCollapsed(!this.options.collapsed);
        }
    }, {
        key: "setActive",
        value: function setActive(active$$1) {
            var _this4 = this;

            this.options.active = active$$1;
            this.redraw();

            if (active$$1) {
                var documentationSwitchDispatcher = this.options.documentationSwitchDispatcher;

                documentationSwitchDispatcher.dispatch(this.options.documentationEntry);
                documentationSwitchDispatcher.addListenerOnce(function (documentationEntry) {
                    if (documentationEntry != _this4.options.documentationEntry) {
                        _this4.setActive(false);
                    }
                });

                this.dispatch("setActive", active$$1);
            }
        }
    }, {
        key: "render",
        value: function render() {
            var collapseIcon = void 0;

            if (this.options.shouldToggle) {
                collapseIcon = UI.createElement(CollapseIconClass, {
                    ref: "collapseIcon",
                    collapsed: this.options.collapsed,
                    style: { width: "0.8em" },
                    parent: this
                });
            }

            // If the collapse Icon shouldn't be displayed, we should add the additional 12px width in order to keep the tags aligned
            var alignTagsStyle = {};

            if (!this.options.shouldToggle) {
                alignTagsStyle = {
                    "padding-left": "12px"
                };
            }

            return [collapseIcon, UI.createElement(
                "span",
                { style: alignTagsStyle },
                UI.T(this.options.documentationEntry.getName())
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            if (this.options.active) {
                this.setActive(true);
            }

            this.addClickListener(function () {
                _this5.setActive(true);
                if (_this5.options.shouldToggle) {
                    _this5.toggleCollapsed();
                }
            });
        }
    }]);
    return DocumentationNavElementContent;
}(UI.Element);

var dragAndDropHandler = new Dispatcher();

var DraggableDocumentationNavElementContent = function (_Draggable) {
    inherits(DraggableDocumentationNavElementContent, _Draggable);

    function DraggableDocumentationNavElementContent() {
        classCallCheck(this, DraggableDocumentationNavElementContent);
        return possibleConstructorReturn(this, (DraggableDocumentationNavElementContent.__proto__ || Object.getPrototypeOf(DraggableDocumentationNavElementContent)).apply(this, arguments));
    }

    createClass(DraggableDocumentationNavElementContent, [{
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(DraggableDocumentationNavElementContent.prototype.__proto__ || Object.getPrototypeOf(DraggableDocumentationNavElementContent.prototype), "getNodeAttributes", this).call(this);
            attr.setStyle("cursor", "pointer");
            return attr;
        }
    }, {
        key: "getDocumentationEntry",
        value: function getDocumentationEntry() {
            return this.options.parent.getDocumentationEntry();
        }
    }, {
        key: "render",
        value: function render() {
            return [get(DraggableDocumentationNavElementContent.prototype.__proto__ || Object.getPrototypeOf(DraggableDocumentationNavElementContent.prototype), "render", this).call(this), UI.createElement("span", { className: "fa fa-pencil-square-o", ref: "editEntry",
                style: { "cursor": "pointer", "margin-right": "10px", "float": "right" } })];
        }
    }, {
        key: "getDirectOffsets",
        value: function getDirectOffsets() {
            return {
                top: this.node.offsetTop,
                left: this.node.offsetLeft,
                height: this.node.offsetHeight,
                width: this.node.offsetWidth
            };
        }
    }, {
        key: "getOffset",
        value: function getOffset$$1(type) {
            return this.getDirectOffsets()[type];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            get(DraggableDocumentationNavElementContent.prototype.__proto__ || Object.getPrototypeOf(DraggableDocumentationNavElementContent.prototype), "onMount", this).call(this);
            this.editEntry.addClickListener(function () {
                EditEntryModal.show({ entry: _this7.getDocumentationEntry() });
            });
            if (!this.options.parent.options.isRoot) {
                var totalDelta = 0;
                this.addDragListener({
                    onStart: function onStart() {
                        totalDelta = 0;
                    },
                    onDrag: function onDrag(deltaX, deltaY) {
                        totalDelta += deltaY;
                        if (!_this7.dragged && Math.abs(totalDelta) > 30) {
                            _this7.dragged = true;
                            _this7.setStyle("cursor", "move");
                            if (_this7.options.shouldToggle) {
                                _this7.setCollapsed(true);
                            }
                            _this7.setStyle("position", "absolute");
                            _this7.setStyle("border", "2px solid red");
                            _this7.setStyle("border-radius", "3px");
                            _this7.setStyle("width", _this7.node.offsetWidth + 20 + "px");
                            _this7.setStyle("opacity", 0.85);
                            deltaY = totalDelta;
                        }
                        if (_this7.dragged) {
                            _this7.setStyle("left", _this7.getOffset("left") + deltaX + "px");
                            _this7.setStyle("top", _this7.getOffset("top") + deltaY + "px");
                            dragAndDropHandler.dispatch("drag", _this7, _this7.getOffset("top"));
                        }
                    },
                    onEnd: function onEnd() {
                        if (_this7.dragged) {
                            _this7.dragged = false;
                            dragAndDropHandler.dispatch("drop", _this7, _this7.getOffset("top"));
                        }
                    }
                });
            }
        }
    }]);
    return DraggableDocumentationNavElementContent;
}(Draggable(DocumentationNavElementContent));

var DocumentationNavElement = function DocumentationNavElement(ContentClass) {
    return function (_UI$Element2) {
        inherits(DocumentationNavElementClass, _UI$Element2);

        function DocumentationNavElementClass() {
            classCallCheck(this, DocumentationNavElementClass);
            return possibleConstructorReturn(this, (DocumentationNavElementClass.__proto__ || Object.getPrototypeOf(DocumentationNavElementClass)).apply(this, arguments));
        }

        createClass(DocumentationNavElementClass, [{
            key: "getDefaultOptions",
            value: function getDefaultOptions() {
                return {
                    collapsed: true
                };
            }
        }, {
            key: "extraNodeAttributes",
            value: function extraNodeAttributes(attr) {
                attr.setStyle("cursor", "pointer");
                attr.setStyle("padding-left", ((this.options.level || 0) > 0 ? 12 : 0) + "px");
            }
        }, {
            key: "getDocumentationEntry",
            value: function getDocumentationEntry() {
                return this.options.documentationEntry;
            }
        }, {
            key: "render",
            value: function render() {
                var _this9 = this;

                var level = this.options.level || 0;
                var collapsed = this.options.collapsed && !this.options.isRoot;

                this.subEntries = this.subEntries || [];

                var subEntries = this.getDocumentationEntry().getEntries().map(function (subEntry, index) {
                    return UI.createElement(DocumentationNavElementClass, {
                        documentationEntry: subEntry,
                        ref: _this9.refLinkArray("subEntries", index),
                        level: _this9.options.isRoot ? level : level + 1,
                        panel: _this9.options.panel,
                        documentationSwitchDispatcher: _this9.options.documentationSwitchDispatcher
                    });
                });

                var content = UI.createElement(ContentClass, {
                    ref: "titleElement", documentationEntry: this.getDocumentationEntry(),
                    shouldToggle: subEntries.length && !this.options.isRoot,
                    collapsed: collapsed, parent: this,
                    documentationSwitchDispatcher: this.options.documentationSwitchDispatcher });

                return [content,
                // TODO: should be hidden, depending on collapsed
                // TODO: do something consistent about this hidden stuff
                UI.createElement(
                    "div",
                    { ref: "subEntryArea", className: collapsed ? "hidden" : "" },
                    subEntries
                )];
            }
        }, {
            key: "showArticle",
            value: function showArticle() {
                var documentationEntry = this.getDocumentationEntry();
                this.options.panel.setArticle(documentationEntry);
            }
        }, {
            key: "onMount",
            value: function onMount() {
                var _this10 = this;

                // TODO: a bit too many listeners here, should probably be done the other way around?
                this.titleElement.addListener("toggleCollapsed", function () {
                    _this10.subEntryArea.toggleClass("hidden");
                });

                this.attachListener(this.getDocumentationEntry(), "show", function () {
                    _this10.showArticle();
                    _this10.titleElement.setActive(true);
                });

                this.attachListener(this.getDocumentationEntry(), "setCollapsed", function (collapsed) {
                    _this10.titleElement.setCollapsed(collapsed);
                });

                this.titleElement.addListener("setActive", function (active$$1) {
                    if (active$$1) {
                        _this10.showArticle();
                    }
                });
            }
        }]);
        return DocumentationNavElementClass;
    }(UI.Element);
};

var SimpleDocumentationNavElement = DocumentationNavElement(DocumentationNavElementContent);
var DraggableDocumentationNavElement = DocumentationNavElement(DraggableDocumentationNavElementContent);

var _dec$54, _class$111;

var DocumentationPanel = (_dec$54 = registerStyle(DocumentationStyle), _dec$54(_class$111 = function (_UI$Element) {
    inherits(DocumentationPanel, _UI$Element);

    function DocumentationPanel() {
        classCallCheck(this, DocumentationPanel);

        var _this = possibleConstructorReturn(this, (DocumentationPanel.__proto__ || Object.getPrototypeOf(DocumentationPanel)).apply(this, arguments));

        _this.documentationSwitchDispatcher = new Dispatcher();
        return _this;
    }

    createClass(DocumentationPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.documentationPanel);
        }
    }, {
        key: "getDocumentationEntry",
        value: function getDocumentationEntry() {
            return DocumentationEntryStore.get(this.options.documentationEntryId);
        }
    }, {
        key: "render",
        value: function render() {
            var documentationEntry = this.getDocumentationEntry();
            return [UI.createElement(
                Panel,
                { orientation: Orientation.HORIZONTAL, className: this.styleSheet.panel },
                UI.createElement(
                    Panel,
                    { ref: "navPanel", className: this.styleSheet.navPanel },
                    UI.createElement(SimpleDocumentationNavElement, {
                        documentationEntry: documentationEntry,
                        isRoot: true, panel: this,
                        level: 0, documentationSwitchDispatcher: this.documentationSwitchDispatcher
                    })
                ),
                UI.createElement(
                    Panel,
                    { className: this.styleSheet.article },
                    UI.createElement(ArticleSwitcher, { ref: "articleSwitcher", className: this.styleSheet.articleSwitcher,
                        initialArticle: documentationEntry.getArticle(), lazyRender: true })
                )
            )];
        }
    }, {
        key: "getBaseUrl",
        value: function getBaseUrl() {
            return "/docs/";
        }
    }, {
        key: "getUrlPrefix",
        value: function getUrlPrefix(suffix) {
            var url = this.getBaseUrl();
            if (suffix) {
                url += suffix + "/";
            }
            return url;
        }
    }, {
        key: "checkUrl",
        value: function checkUrl(urlParts, documentationEntry) {
            return documentationEntry.getFullURL() === urlParts.join("/");
        }
    }, {
        key: "setURL",
        value: function setURL(urlParts) {
            if (this.articleSwitcher) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = DocumentationEntryStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var documentationEntry = _step.value;

                        if (this.checkUrl(urlParts, documentationEntry)) {
                            this.focusToDocumentationEntry(documentationEntry);
                            return;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            } else {
                this.initialUrlParts = urlParts;
            }
        }
    }, {
        key: "setArticle",
        value: function setArticle(documentationEntry) {
            this.articleSwitcher.setActive(documentationEntry.getArticle());
            Router.changeURL(this.getUrlPrefix(documentationEntry.getFullURL()));
        }
    }, {
        key: "focusToDocumentationEntry",
        value: function focusToDocumentationEntry(documentationEntry) {
            documentationEntry.dispatch("show");
            this.uncollapsePathTo(documentationEntry);
        }
    }, {
        key: "uncollapsePathTo",
        value: function uncollapsePathTo(documentationEntry) {
            while (documentationEntry) {
                documentationEntry.dispatch("setCollapsed", false);
                documentationEntry = documentationEntry.getParent();
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.setURL(this.initialUrlParts);
            delete this.initialUrlParts;
        }
    }]);
    return DocumentationPanel;
}(UI.Element)) || _class$111);

var AdminDocumentationPanel = function (_DocumentationPanel) {
    inherits(AdminDocumentationPanel, _DocumentationPanel);

    function AdminDocumentationPanel() {
        classCallCheck(this, AdminDocumentationPanel);
        return possibleConstructorReturn(this, (AdminDocumentationPanel.__proto__ || Object.getPrototypeOf(AdminDocumentationPanel)).apply(this, arguments));
    }

    createClass(AdminDocumentationPanel, [{
        key: "getBaseUrl",
        value: function getBaseUrl() {
            return "/docs/edit/";
        }
    }, {
        key: "getDocumentationEntry",
        value: function getDocumentationEntry() {
            var documentationEntry = DocumentationEntryStore.get(1);
            documentationEntry.getEntries = function () {
                var entries = [];
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = DocumentationEntryStore.all()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _documentationEntry = _step.value;

                        if ((_documentationEntry.parentId === this.id || !_documentationEntry.parentId) && _documentationEntry.id !== this.id) {
                            entries.push(_documentationEntry);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                entries.sort(function (a, b) {
                    return a.getParentIndex() - b.getParentIndex();
                });

                return entries;
            };

            return documentationEntry;
        }
    }, {
        key: "render",
        value: function render() {
            var documentationEntry = this.getDocumentationEntry();
            return [UI.createElement(
                Panel,
                { orientation: Orientation.HORIZONTAL, className: this.styleSheet.panel, key: "container" },
                UI.createElement(
                    Panel,
                    { ref: "navPanel", className: this.styleSheet.navPanel },
                    UI.createElement(
                        "div",
                        { style: { maxHeight: "90%", overflowY: "auto" }, key: "navigationContainer" },
                        UI.createElement(DraggableDocumentationNavElement, {
                            ref: "root",
                            documentationEntry: documentationEntry,
                            isRoot: true,
                            panel: this,
                            level: 0,
                            documentationSwitchDispatcher: this.documentationSwitchDispatcher
                        })
                    ),
                    UI.createElement(
                        "div",
                        { style: { position: "absolute", bottom: "5%" } },
                        UI.createElement(Button, { ref: "trash", faIcon: "trash", disabled: true,
                            level: Level.WARNING, size: Size.EXTRA_LARGE,
                            style: { marginLeft: "50px", padding: "16px 22px" } }),
                        UI.createElement(CreateEntryButton, { faIcon: "plus",
                            level: Level.PRIMARY, size: Size.EXTRA_LARGE,
                            style: { marginLeft: "50px", padding: "16px 22px" } })
                    )
                ),
                UI.createElement(
                    Panel,
                    { className: this.styleSheet.article },
                    UI.createElement(ArticleSwitcher, {
                        ref: "articleSwitcher",
                        initialArticle: documentationEntry.getArticle(),
                        lazyRender: true,
                        showEditButton: true,
                        className: this.styleSheet.articleSwitcher })
                )
            )];
        }
    }, {
        key: "checkUrl",
        value: function checkUrl(urlParts, documentationEntry) {
            return "edit/" + documentationEntry.getFullURL() === urlParts.join("/");
        }
    }, {
        key: "getNavElement",
        value: function getNavElement(entry) {
            var explore = function explore(entryNavElement) {
                if (entryNavElement.getDocumentationEntry() === entry) {
                    return entryNavElement;
                }
                var navElement = null;
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = entryNavElement.subEntries[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var subEntry = _step2.value;

                        navElement = navElement || explore(subEntry);
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                return navElement;
            };
            explore(this.root);
        }
    }, {
        key: "modifyEntry",
        value: function modifyEntry(entry, newParent, nextSibling) {
            var modified = [];
            if (newParent === -1) {
                modified.push({
                    entryId: entry.id,
                    parentId: -1
                });
                DocumentationEntryStore.applyDeleteEvent({
                    objectId: entry.id
                });
            } else if (!newParent) {
                entry.parentId = null;
                entry.parentIndex = null;
                modified.push({
                    entryId: entry.id,
                    parentId: 0,
                    parentIndex: 0
                });
            } else {
                var newBrothers = [];
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = DocumentationEntryStore.all()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var docEntry = _step3.value;

                        if (docEntry.parentId === newParent.id && docEntry !== entry) {
                            newBrothers.push(docEntry);
                        }
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                newBrothers.sort(function (a, b) {
                    return a.parentIndex - b.parentIndex;
                });
                entry.parentId = newParent.id;
                if (newBrothers.length) {
                    newBrothers[0].parentIndex = 1;
                    if (nextSibling === newBrothers[0]) {
                        entry.parentIndex = 1;
                        newBrothers[0].parentIndex = 2;
                    }
                    modified.push({
                        entryId: newBrothers[0].id,
                        parentIndex: newBrothers[0].parentIndex
                    });
                    for (var i = 1; i < newBrothers.length; i += 1) {
                        newBrothers[i].parentIndex = newBrothers[i - 1].parentIndex + 1;
                        if (newBrothers[i] === nextSibling) {
                            entry.parentIndex = newBrothers[i].parentIndex;
                            newBrothers[i].parentIndex += 1;
                        }
                        modified.push({
                            entryId: newBrothers[i].id,
                            parentIndex: newBrothers[i].parentIndex
                        });
                    }
                    if (!nextSibling) {
                        entry.parentIndex = newBrothers.length + 1;
                    }
                }
                modified.push({
                    entryId: entry.id,
                    parentId: newParent.id,
                    parentIndex: entry.parentIndex
                });
            }
            Ajax.postJSON("/docs/change_parents/", { modifiedEntries: JSON.stringify(modified) });
        }
    }, {
        key: "setTarget",
        value: function setTarget(element, eventType, borderType, visibleEntries) {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = visibleEntries[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var visibleElement = _step4.value;

                    visibleElement.titleElement.setStyle("border", "");
                    visibleElement.titleElement.setStyle("border-top", "");
                    visibleElement.titleElement.setStyle("border-bottom", "");
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.trash.setLevel(Level.WARNING);
            if (!element) {
                this.trash.setLevel(Level.DANGER);
                return;
            }
            if (eventType === "drag") {
                element.titleElement.setStyle(borderType, "2px solid red");
                return [null, null, null];
            } else {
                var newParent = void 0,
                    nextSibling = void 0;
                // Drop: add the element to its new position
                if (borderType === "border") {
                    newParent = element.getDocumentationEntry();
                    nextSibling = null;
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;

                    try {
                        for (var _iterator5 = DocumentationEntryStore.all()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                            var docEntry = _step5.value;

                            if (docEntry.parentId === newParent.id && (nextSibling === null || nextSibling.parentIndex > docEntry.parentIndex)) {
                                nextSibling = docEntry;
                            }
                        }
                    } catch (err) {
                        _didIteratorError5 = true;
                        _iteratorError5 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                _iterator5.return();
                            }
                        } finally {
                            if (_didIteratorError5) {
                                throw _iteratorError5;
                            }
                        }
                    }
                } else if (borderType === "border-top") {
                    nextSibling = element.getDocumentationEntry();
                    newParent = DocumentationEntryStore.get(nextSibling.parentId);
                } else {
                    nextSibling = element.getDocumentationEntry();
                    newParent = DocumentationEntryStore.get(nextSibling.parentId);
                    nextSibling = null;
                }
                return [newParent, nextSibling];
            }
        }
    }, {
        key: "getTrashOffset",
        value: function getTrashOffset() {
            // -50px for the navbar
            return getOffset(this.trash).top - 50;
        }
    }, {
        key: "redrawAndUncollapse",
        value: function redrawAndUncollapse(visibleEntries, entry) {
            var _this2 = this;

            this.redraw();
            var exploreAndUncollapse = function exploreAndUncollapse(entryNavElement) {
                if (entryNavElement.getDocumentationEntry() === entry) {
                    return;
                }
                if (visibleEntries.indexOf(entryNavElement.getDocumentationEntry()) !== -1 && entryNavElement.getDocumentationEntry().parentId) {
                    var parentEntry = DocumentationEntryStore.get(entryNavElement.getDocumentationEntry().parentId);
                    var parentEntryNavElement = _this2.getNavElement(parentEntry);
                    if (parentEntryNavElement && parentEntryNavElement.titleElement.options.shouldToggle) {
                        parentEntryNavElement.titleElement.setCollapsed(false);
                    }
                }
                var _iteratorNormalCompletion6 = true;
                var _didIteratorError6 = false;
                var _iteratorError6 = undefined;

                try {
                    for (var _iterator6 = entryNavElement.subEntries[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var subEntry = _step6.value;

                        exploreAndUncollapse(subEntry);
                    }
                } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion6 && _iterator6.return) {
                            _iterator6.return();
                        }
                    } finally {
                        if (_didIteratorError6) {
                            throw _iteratorError6;
                        }
                    }
                }
            };
            exploreAndUncollapse(this.root);
        }
    }, {
        key: "getVisibleEntries",
        value: function getVisibleEntries(draggedItem) {
            var visibleEntries = [];
            var exploreEntries = function exploreEntries(entryNavElement) {
                if (entryNavElement.titleElement === draggedItem) {
                    return;
                }
                visibleEntries.push(entryNavElement);
                if (!entryNavElement.titleElement.options.collapsed) {
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;

                    try {
                        for (var _iterator7 = entryNavElement.subEntries[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var subEntry = _step7.value;

                            exploreEntries(subEntry);
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7.return) {
                                _iterator7.return();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }
                }
            };
            exploreEntries(this.root);
            return visibleEntries;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            get(AdminDocumentationPanel.prototype.__proto__ || Object.getPrototypeOf(AdminDocumentationPanel.prototype), "onMount", this).call(this);
            this.attachCreateListener(DocumentationEntryStore, function (entry) {
                _this3.attachUpdateListener(entry, function () {
                    _this3.focusToDocumentationEntry(entry);
                });
            }, true);
            dragAndDropHandler.addListener(function (type, draggedItem, top) {
                var titleHeight = 40;

                var visibleEntries = _this3.getVisibleEntries(draggedItem);
                if (!visibleEntries.length) {
                    return;
                }

                // TODO: Refactor this! Make UIElement or NodeWrapper support direct offsets
                var getTop = function getTop(element) {
                    return element.titleElement.getOffset("top");
                };

                visibleEntries.sort(function (a, b) {
                    return getTop(a) - getTop(b);
                });

                var entry = draggedItem.getDocumentationEntry(),
                    newParent = null,
                    nextSibling = null;
                if (Math.abs(_this3.getTrashOffset() - top) < titleHeight * 2) {
                    newParent = -1;
                    _this3.setTarget(null, type, "border", visibleEntries);
                } else {
                    if (getTop(visibleEntries[0]) > top) {
                        var _setTarget = _this3.setTarget(visibleEntries[0], type, "border-top", visibleEntries);

                        var _setTarget2 = slicedToArray(_setTarget, 2);

                        newParent = _setTarget2[0];
                        nextSibling = _setTarget2[1];
                    } else if (getTop(visibleEntries[visibleEntries.length - 1]) + titleHeight * 0.25 < top) {
                        var _setTarget3 = _this3.setTarget(visibleEntries[visibleEntries.length - 1], type, "border-bottom", visibleEntries);

                        var _setTarget4 = slicedToArray(_setTarget3, 2);

                        newParent = _setTarget4[0];
                        nextSibling = _setTarget4[1];
                    } else {
                        var bordered = false;
                        var _iteratorNormalCompletion8 = true;
                        var _didIteratorError8 = false;
                        var _iteratorError8 = undefined;

                        try {
                            for (var _iterator8 = visibleEntries[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                                var visibleEntry = _step8.value;

                                if (Math.abs(getTop(visibleEntry) - top) < titleHeight * 0.25) {
                                    var _setTarget9 = _this3.setTarget(visibleEntry, type, "border", visibleEntries);

                                    var _setTarget10 = slicedToArray(_setTarget9, 2);

                                    newParent = _setTarget10[0];
                                    nextSibling = _setTarget10[1];

                                    bordered = true;
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError8 = true;
                            _iteratorError8 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion8 && _iterator8.return) {
                                    _iterator8.return();
                                }
                            } finally {
                                if (_didIteratorError8) {
                                    throw _iteratorError8;
                                }
                            }
                        }

                        if (!bordered) {
                            for (var i = 0; i < visibleEntries.length; i += 1) {
                                if (getTop(visibleEntries[i]) > top) {
                                    if (i > 0 && top - getTop(visibleEntries[i - 1]) < getTop(visibleEntries[i]) - top && visibleEntries[i].getDocumentationEntry().parentId !== visibleEntries[i - 1].getDocumentationEntry().id) {
                                        var _setTarget5 = _this3.setTarget(visibleEntries[i - 1], type, "border-bottom", visibleEntries);

                                        var _setTarget6 = slicedToArray(_setTarget5, 2);

                                        newParent = _setTarget6[0];
                                        nextSibling = _setTarget6[1];
                                    } else {
                                        var _setTarget7 = _this3.setTarget(visibleEntries[i], type, "border-top", visibleEntries);

                                        var _setTarget8 = slicedToArray(_setTarget7, 2);

                                        newParent = _setTarget8[0];
                                        nextSibling = _setTarget8[1];
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }

                if (type === "drop") {
                    var changePosition = function changePosition(modifyEntry) {
                        if (modifyEntry) {
                            _this3.modifyEntry(entry, newParent, nextSibling);
                        }
                        _this3.redraw();
                        _this3.focusToDocumentationEntry(entry);
                    };

                    if (newParent === -1) {
                        if (window.confirm("Are you sure you want to delete this entry and all it's sub-entries?")) {
                            changePosition(true);
                        } else {
                            changePosition(false);
                        }
                    } else {
                        changePosition(true);
                    }
                }
            });
        }
    }]);
    return AdminDocumentationPanel;
}(DocumentationPanel);

// Particular case for /docs/ and /docs/edit/
var DocumentationRoute = function (_TerminalRoute) {
    inherits(DocumentationRoute, _TerminalRoute);

    function DocumentationRoute() {
        classCallCheck(this, DocumentationRoute);

        var _this = possibleConstructorReturn(this, (DocumentationRoute.__proto__ || Object.getPrototypeOf(DocumentationRoute)).call(this, "docs", StateDependentElement(DocumentationPanel), "Documentation"));

        _this.subroutes = [new TerminalRoute("edit", StateDependentElement(AdminDocumentationPanel), [], "Edit Documentation")];
        return _this;
    }

    createClass(DocumentationRoute, [{
        key: "matchesOwnNode",
        value: function matchesOwnNode(urlParts) {
            return urlParts.length === 0 || urlParts[0] !== "edit";
        }
    }]);
    return DocumentationRoute;
}(TerminalRoute);

var AnalyticsPanel = function (_UI$Element) {
    inherits(AnalyticsPanel, _UI$Element);

    function AnalyticsPanel() {
        classCallCheck(this, AnalyticsPanel);
        return possibleConstructorReturn(this, (AnalyticsPanel.__proto__ || Object.getPrototypeOf(AnalyticsPanel)).apply(this, arguments));
    }

    createClass(AnalyticsPanel, [{
        key: "render",
        value: function render() {
            return UI.createElement(
                CardPanel,
                { title: "Analytics Panel", level: Level.PRIMARY, style: { margin: "10px 30%" } },
                UI.createElement(
                    "div",
                    { style: { padding: "5px" } },
                    "Analytics is not online right now!"
                )
            );
        }
    }]);
    return AnalyticsPanel;
}(UI.Element);

var AceCardPanel = function (_CardPanel) {
    inherits(AceCardPanel, _CardPanel);

    function AceCardPanel() {
        classCallCheck(this, AceCardPanel);
        return possibleConstructorReturn(this, (AceCardPanel.__proto__ || Object.getPrototypeOf(AceCardPanel)).apply(this, arguments));
    }

    createClass(AceCardPanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                bodyStyle: {
                    padding: "0"
                }
            };
        }
    }]);
    return AceCardPanel;
}(CardPanel);

// This class uses a base user submission as an input to render the code source and details about the code.


var SourceCardPanel = function (_AceCardPanel) {
    inherits(SourceCardPanel, _AceCardPanel);

    function SourceCardPanel() {
        classCallCheck(this, SourceCardPanel);
        return possibleConstructorReturn(this, (SourceCardPanel.__proto__ || Object.getPrototypeOf(SourceCardPanel)).apply(this, arguments));
    }

    createClass(SourceCardPanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            // Currently, only custom runs are forkable.
            return Object.assign({
                fork: false
            }, get(SourceCardPanel.prototype.__proto__ || Object.getPrototypeOf(SourceCardPanel.prototype), "getDefaultOptions", this).call(this));
        }
    }, {
        key: "getProgrammingLanguage",
        value: function getProgrammingLanguage() {
            return this.options.job.getProgrammingLanguage();
        }
    }, {
        key: "getTitle",
        value: function getTitle() {
            var _this3 = this;

            var buttonStyle = { margin: "0.3em" };
            var forkButton = this.options.forkable ? UI.createElement(AjaxButton, { ref: "forkButton", level: Level.INFO, size: Size.SMALL, style: buttonStyle,
                statusOptions: [{ faIcon: "code-fork", label: UI.T("Fork") }, { faIcon: "spinner fa-spin", label: " creating workspace..." }, "Success", "Failed"]
            }) : null;
            return [UI.createElement(
                "span",
                { style: buttonStyle },
                this.getProgrammingLanguage().toString()
            ), UI.createElement(
                "span",
                { style: buttonStyle },
                Formatter.memory(this.options.job.getSize())
            ), UI.createElement(Button, { ref: "downloadSourceButton", label: UI.T("Download"),
                level: Level.INFO, size: Size.SMALL, faIcon: "download", style: buttonStyle }), UI.createElement(Button, { label: UI.T("Copy to clipboard"), faIcon: "files-o", style: buttonStyle, level: Level.INFO,
                size: Size.SMALL, onClick: function onClick() {
                    return _this3.sourceCodeHighlighter.copyTextToClipboard();
                } }), forkButton];
        }
    }, {
        key: "render",
        value: function render() {
            var codeHighlighterOptions = {};

            if (this.getProgrammingLanguage()) {
                codeHighlighterOptions.aceMode = this.getProgrammingLanguage().aceMode;
            }

            return UI.createElement(StaticCodeHighlighter, _extends({ ref: "sourceCodeHighlighter" }, codeHighlighterOptions, {
                value: this.options.job.sourceText, maxLines: 512 }));
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.downloadSourceButton.addClickListener(function () {
                var fileContentBlob = new Blob([_this4.options.job.sourceText], { type: "text/plain;charset=utf-8" });
                var programmingLanguage = _this4.getProgrammingLanguage();
                var fileName = _this4.options.name;

                if (programmingLanguage) {
                    fileName += "." + programmingLanguage.getExtension();
                }

                FileSaver.saveAs(fileContentBlob, fileName);
            });

            if (this.options.forkable) {
                this.forkButton.addClickListener(function () {
                    if (USER.isAuthenticated) {
                        _this4.forkToWorkspace();
                    } else {
                        window.open("/workspace/fork/" + _this4.options.job.urlHash, "_blank");
                    }
                });
            }
        }

        // This fork works only for custom runs.

    }, {
        key: "forkToWorkspace",
        value: function forkToWorkspace() {
            if (this.options.forkable) {
                this.forkButton.postJSON("/eval/fork_custom_run/", {
                    customRunId: this.options.job.id
                }).then(function (data) {
                    return window.open("/workspace/" + data.workspaceId, "_blank");
                });
            }
        }
    }]);
    return SourceCardPanel;
}(AceCardPanel);

var InputCardPanel = function (_AceCardPanel2) {
    inherits(InputCardPanel, _AceCardPanel2);

    function InputCardPanel() {
        classCallCheck(this, InputCardPanel);
        return possibleConstructorReturn(this, (InputCardPanel.__proto__ || Object.getPrototypeOf(InputCardPanel)).apply(this, arguments));
    }

    createClass(InputCardPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Input");
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(StaticCodeHighlighter, { value: this.options.customRun.stdin, maxLines: 32 });
        }
    }]);
    return InputCardPanel;
}(AceCardPanel);

var OutputCardPanel = function (_AceCardPanel3) {
    inherits(OutputCardPanel, _AceCardPanel3);

    function OutputCardPanel() {
        classCallCheck(this, OutputCardPanel);
        return possibleConstructorReturn(this, (OutputCardPanel.__proto__ || Object.getPrototypeOf(OutputCardPanel)).apply(this, arguments));
    }

    createClass(OutputCardPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Output");
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(StaticCodeHighlighter, { value: this.options.customRun.stdout, maxLines: 32 });
        }
    }]);
    return OutputCardPanel;
}(AceCardPanel);

var StderrCardPanel = function (_AceCardPanel4) {
    inherits(StderrCardPanel, _AceCardPanel4);

    function StderrCardPanel() {
        classCallCheck(this, StderrCardPanel);
        return possibleConstructorReturn(this, (StderrCardPanel.__proto__ || Object.getPrototypeOf(StderrCardPanel)).apply(this, arguments));
    }

    createClass(StderrCardPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Stderr");
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(StaticCodeHighlighter, { value: this.options.customRun.stderr, maxLines: 32 });
        }
    }]);
    return StderrCardPanel;
}(AceCardPanel);

var CompilationCardPanel = function (_CardPanel2) {
    inherits(CompilationCardPanel, _CardPanel2);

    function CompilationCardPanel() {
        classCallCheck(this, CompilationCardPanel);
        return possibleConstructorReturn(this, (CompilationCardPanel.__proto__ || Object.getPrototypeOf(CompilationCardPanel)).apply(this, arguments));
    }

    createClass(CompilationCardPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Compilation");
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(CompilationStatusPanel, { customRun: this.options.customRun });
        }
    }]);
    return CompilationCardPanel;
}(CardPanel);

var CustomRunPanel = function (_Panel) {
    inherits(CustomRunPanel, _Panel);

    function CustomRunPanel() {
        classCallCheck(this, CustomRunPanel);
        return possibleConstructorReturn(this, (CustomRunPanel.__proto__ || Object.getPrototypeOf(CustomRunPanel)).apply(this, arguments));
    }

    createClass(CustomRunPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(GlobalStyle.Container.SMALL);
            attr.setStyle("marginBottom", "20px");
        }
    }, {
        key: "render",
        value: function render() {
            var ioPanel = void 0;
            var executionStatusPanel = void 0;
            if (!this.options.customRun.compileOnly) {
                ioPanel = this.getIOPanel();
                executionStatusPanel = UI.createElement(ExecutionStatusPanel, { customRun: this.options.customRun });
            }

            var result = [UI.createElement(
                "div",
                { style: { margin: "25px 0" } },
                UI.createElement(SourceCardPanel, { job: this.options.customRun, name: this.options.customRun.urlHash,
                    forkable: true })
            )];
            if (!this.options.customRun.shareOnly) {
                result = [].concat(toConsumableArray(result), [ioPanel, UI.createElement(
                    "div",
                    { style: { margin: "25px 0" } },
                    UI.createElement(CompilationCardPanel, { customRun: this.options.customRun })
                ), executionStatusPanel]);
            }
            return result;
        }
    }, {
        key: "getIOPanel",
        value: function getIOPanel() {
            var stderrPanel = void 0;
            if (this.options.customRun.stderr) {
                stderrPanel = UI.createElement(StderrCardPanel, { customRun: this.options.customRun });
            }

            return UI.createElement(
                "div",
                { style: { margin: "25px 0" } },
                UI.createElement(
                    "div",
                    { className: "" + GlobalStyle.FlexContainer.HORIZONTAL },
                    UI.createElement(InputCardPanel, { customRun: this.options.customRun }),
                    UI.createElement(OutputCardPanel, { customRun: this.options.customRun }),
                    stderrPanel
                )
            );
        }
    }]);
    return CustomRunPanel;
}(Panel);

var CustomRunWidget = function (_UI$Element) {
    inherits(CustomRunWidget, _UI$Element);

    function CustomRunWidget() {
        classCallCheck(this, CustomRunWidget);
        return possibleConstructorReturn(this, (CustomRunWidget.__proto__ || Object.getPrototypeOf(CustomRunWidget)).apply(this, arguments));
    }

    createClass(CustomRunWidget, [{
        key: "render",
        value: function render() {
            var customRun = CustomRunStore.get(this.options.customRunId);
            return customRun && UI.createElement(CustomRunPanel, { customRun: customRun });
        }
    }]);
    return CustomRunWidget;
}(UI.Element);

var _class$112, _descriptor$49, _descriptor2$43, _descriptor3$37, _descriptor4$33, _dec$55, _class3$37;

function _initDefineProp$50(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$51(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var SubmissionResultsTable = function (_CardPanel) {
    inherits(SubmissionResultsTable, _CardPanel);

    function SubmissionResultsTable() {
        classCallCheck(this, SubmissionResultsTable);
        return possibleConstructorReturn(this, (SubmissionResultsTable.__proto__ || Object.getPrototypeOf(SubmissionResultsTable)).apply(this, arguments));
    }

    createClass(SubmissionResultsTable, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Results");
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(EvalJobResultsTable, { evalJob: this.options.evalJob });
        }
    }]);
    return SubmissionResultsTable;
}(CardPanel);

var SubmissionSummaryCardPanel = function (_CardPanel2) {
    inherits(SubmissionSummaryCardPanel, _CardPanel2);

    function SubmissionSummaryCardPanel() {
        classCallCheck(this, SubmissionSummaryCardPanel);
        return possibleConstructorReturn(this, (SubmissionSummaryCardPanel.__proto__ || Object.getPrototypeOf(SubmissionSummaryCardPanel)).apply(this, arguments));
    }

    createClass(SubmissionSummaryCardPanel, [{
        key: "getTitle",
        value: function getTitle() {
            return UI.T("Summary");
        }
    }, {
        key: "render",
        value: function render() {
            var evalJobUIHandler = new EvalJobUIHandler(this.options.evalJob);
            return UI.createElement(
                "div",
                { style: { padding: 10 } },
                evalJobUIHandler.getSummary()
            );
        }
    }]);
    return SubmissionSummaryCardPanel;
}(CardPanel);

var SubmissionWidgetStyle = (_class$112 = function (_StyleSheet) {
    inherits(SubmissionWidgetStyle, _StyleSheet);

    function SubmissionWidgetStyle() {
        var _ref;

        var _temp, _this3, _ret;

        classCallCheck(this, SubmissionWidgetStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this3 = possibleConstructorReturn(this, (_ref = SubmissionWidgetStyle.__proto__ || Object.getPrototypeOf(SubmissionWidgetStyle)).call.apply(_ref, [this].concat(args))), _this3), _initDefineProp$50(_this3, "submissionPanel", _descriptor$49, _this3), _initDefineProp$50(_this3, "section", _descriptor2$43, _this3), _initDefineProp$50(_this3, "flexSection", _descriptor3$37, _this3), _initDefineProp$50(_this3, "cardPanels", _descriptor4$33, _this3), _temp), possibleConstructorReturn(_this3, _ret);
    }

    return SubmissionWidgetStyle;
}(StyleSheet), _descriptor$49 = _applyDecoratedDescriptor$51(_class$112.prototype, "submissionPanel", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginBottom: "20px",
            width: "1200px",
            marginLeft: 15,
            marginRight: 15,
            maxWidth: "calc(100% - 30px)"
        };
    }
}), _descriptor2$43 = _applyDecoratedDescriptor$51(_class$112.prototype, "section", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: "25px 0"
        };
    }
}), _descriptor3$37 = _applyDecoratedDescriptor$51(_class$112.prototype, "flexSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            flexDirection: "column"
            // flexWrap: "wrap",
        };
    }
}), _descriptor4$33 = _applyDecoratedDescriptor$51(_class$112.prototype, "cardPanels", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginBottom: 25,
            flex: 1
        };
    }
}), _class$112);
var SubmissionPanel = (_dec$55 = registerStyle(SubmissionWidgetStyle), _dec$55(_class3$37 = function (_Panel) {
    inherits(SubmissionPanel, _Panel);

    function SubmissionPanel() {
        classCallCheck(this, SubmissionPanel);
        return possibleConstructorReturn(this, (SubmissionPanel.__proto__ || Object.getPrototypeOf(SubmissionPanel)).apply(this, arguments));
    }

    createClass(SubmissionPanel, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(SubmissionPanel.prototype.__proto__ || Object.getPrototypeOf(SubmissionPanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.SMALL);
            attr.addClass(this.styleSheet.submissionPanel);
        }
    }, {
        key: "render",
        value: function render() {
            // TODO: Change the name passed to the Source Card Panel
            var styleSheet = this.styleSheet;
            var evalJob = this.options.evalJob;


            return [UI.createElement(
                "div",
                { className: styleSheet.section },
                UI.createElement(SourceCardPanel, { job: evalJob,
                    name: evalJob.id,
                    forkable: false })
            ), UI.createElement(
                "div",
                { className: styleSheet.flexSection },
                UI.createElement(SubmissionSummaryCardPanel, { evalJob: evalJob,
                    className: styleSheet.cardPanels }),
                UI.createElement(CompilationCardPanel, { customRun: evalJob,
                    className: styleSheet.cardPanels })
            ), UI.createElement(SubmissionResultsTable, { evalJob: evalJob,
                bodyStyle: { padding: "0% 2%" } })];
        }
    }]);
    return SubmissionPanel;
}(Panel)) || _class3$37);


var SubmissionWidget = function (_UI$Element) {
    inherits(SubmissionWidget, _UI$Element);

    function SubmissionWidget() {
        classCallCheck(this, SubmissionWidget);
        return possibleConstructorReturn(this, (SubmissionWidget.__proto__ || Object.getPrototypeOf(SubmissionWidget)).apply(this, arguments));
    }

    createClass(SubmissionWidget, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                display: "flex",
                justifyContent: "center"
            });
        }
    }, {
        key: "renderNotLoaded",
        value: function renderNotLoaded() {
            var renderLoading = StateDependentElement.renderLoading;
            if (typeof renderLoading === "function") {
                renderLoading = renderLoading();
            }
            return renderLoading;
        }
    }, {
        key: "renderError",
        value: function renderError() {
            var renderError = StateDependentElement.renderError;
            if (typeof renderError === "function") {
                renderError = renderError({ message: "Could not find submission with id " + this.options.args[0] });
            }
            return renderError;
        }
    }, {
        key: "render",
        value: function render() {
            var _this6 = this;

            var evalJobId = parseInt(this.options.args[0]);
            if (this.options.notPublic) {
                return this.renderError();
            }
            var evalJob = EvalJobStore.get(evalJobId);
            if (evalJob) {
                return UI.createElement(SubmissionPanel, { evalJob: evalJob });
            }
            EvalJobStore.fetchWithContest(evalJobId, function () {
                return _this6.redraw();
            }, function () {
                return _this6.updateOptions({ notPublic: true });
            });
            return this.renderNotLoaded();
        }
    }]);
    return SubmissionWidget;
}(UI.Element);

var PasswordResetFromKey = function (_UI$Element) {
    inherits(PasswordResetFromKey, _UI$Element);

    function PasswordResetFromKey() {
        classCallCheck(this, PasswordResetFromKey);
        return possibleConstructorReturn(this, (PasswordResetFromKey.__proto__ || Object.getPrototypeOf(PasswordResetFromKey)).apply(this, arguments));
    }

    createClass(PasswordResetFromKey, [{
        key: "render",
        value: function render() {
            var _this2 = this;

            if (this.options.tokenFail) {
                return [UI.createElement(
                    "div",
                    { className: "col-sm-8 col-sm-offset-2 text-center" },
                    UI.createElement(
                        "h1",
                        null,
                        "Invalid password reset link"
                    ),
                    UI.createElement(
                        "p",
                        null,
                        "The password reset link is invalid, either because it has already been used or has been copied incorrectly from the email. Please request a ",
                        UI.createElement(Link, { href: "/accounts/password_reset/", value: "new password reset" }),
                        "."
                    )
                )];
            }

            return [UI.createElement(
                "div",
                { className: "text-center" },
                UI.createElement(
                    "h1",
                    null,
                    "Set password"
                )
            ), UI.createElement(
                FormField,
                { ref: "passwordFormField", label: "New password" },
                UI.createElement(PasswordInput, { ref: "passwordInput" })
            ), UI.createElement(
                FormField,
                { label: " " },
                UI.createElement(
                    "div",
                    null,
                    UI.createElement(AjaxButton, { ref: "setPasswordButton", level: Level.PRIMARY, onClick: function onClick() {
                            return _this2.setNewPassword();
                        },
                        statusOptions: ["Set password", { faIcon: "spinner fa-spin", label: " Setting..." }, "Password set", "Password failed"] })
                )
            )];
        }
    }, {
        key: "setNewPassword",
        value: function setNewPassword() {
            var _this3 = this;

            this.passwordFormField.removeError();

            this.setPasswordButton.postJSON("/accounts/password_change/", {
                newPassword: this.passwordInput.getValue()
            }).then(function () {
                return location.replace("/");
            }, function (error) {
                return _this3.passwordFormField.setError(error.message);
            });
        }
    }]);
    return PasswordResetFromKey;
}(UI.Element);

var _class$113, _descriptor$50, _descriptor2$44, _descriptor3$38, _descriptor4$34, _descriptor5$30, _descriptor6$26, _descriptor7$21, _dec$56, _class3$38;

function _initDefineProp$51(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$52(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var PasswordChangeStyle = (_class$113 = function (_LoginStyle) {
    inherits(PasswordChangeStyle, _LoginStyle);

    function PasswordChangeStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, PasswordChangeStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = PasswordChangeStyle.__proto__ || Object.getPrototypeOf(PasswordChangeStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$51(_this, "className", _descriptor$50, _this), _initDefineProp$51(_this, "loginWidget", _descriptor2$44, _this), _initDefineProp$51(_this, "forgotPassword", _descriptor3$38, _this), _initDefineProp$51(_this, "signInButtonContainer", _descriptor4$34, _this), _initDefineProp$51(_this, "signInButton", _descriptor5$30, _this), _initDefineProp$51(_this, "rememberMeContainer", _descriptor6$26, _this), _initDefineProp$51(_this, "input", _descriptor7$21, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return PasswordChangeStyle;
}(LoginStyle), _descriptor$50 = _applyDecoratedDescriptor$52(_class$113.prototype, "className", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "30%",
            minWidth: "300px",
            margin: "0 auto"
        };
    }
}), _descriptor2$44 = _applyDecoratedDescriptor$52(_class$113.prototype, "loginWidget", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: 0,
            width: "auto",
            height: "auto"
        };
    }
}), _descriptor3$38 = _applyDecoratedDescriptor$52(_class$113.prototype, "forgotPassword", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            visibility: "hidden"
        };
    }
}), _descriptor4$34 = _applyDecoratedDescriptor$52(_class$113.prototype, "signInButtonContainer", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "auto"
        };
    }
}), _descriptor5$30 = _applyDecoratedDescriptor$52(_class$113.prototype, "signInButton", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: this.themeProperties.COLOR_PRIMARY,
            color: enhance(this.themeProperties.COLOR_PRIMARY, 1),
            minWidth: "initial",
            paddingLeft: 20,
            paddingRight: 20,
            outline: "none",
            ":hover": {
                backgroundColor: enhance(this.themeProperties.COLOR_PRIMARY, 0.15),
                color: enhance(this.themeProperties.COLOR_PRIMARY, 1),
                border: 0
            }
        };
    }
}), _descriptor6$26 = _applyDecoratedDescriptor$52(_class$113.prototype, "rememberMeContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "29px"
        };
    }
}), _descriptor7$21 = _applyDecoratedDescriptor$52(_class$113.prototype, "input", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "inherit !important",
            borderBottom: "2px solid " + this.themeProperties.COLOR_PRIMARY,
            borderRadius: "0 !important",
            ":hover": {
                borderBottom: "2px solid " + this.themeProperties.COLOR_PRIMARY + " !important"
            },
            ":focus": {
                borderBottom: "2px solid " + this.themeProperties.COLOR_PRIMARY + " !important"
            }
        };
    }
}), _class$113);

var AccountActivation = (_dec$56 = registerStyle(PasswordChangeStyle), _dec$56(_class3$38 = function (_LoginWidget) {
    inherits(AccountActivation, _LoginWidget);

    function AccountActivation() {
        classCallCheck(this, AccountActivation);
        return possibleConstructorReturn(this, (AccountActivation.__proto__ || Object.getPrototypeOf(AccountActivation)).apply(this, arguments));
    }

    createClass(AccountActivation, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.className);
        }
    }, {
        key: "getThirdPartyLogin",
        value: function getThirdPartyLogin() {}
    }, {
        key: "getClearBothArea",
        value: function getClearBothArea() {}
    }, {
        key: "getRememberMeCheckbox",
        value: function getRememberMeCheckbox() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.rememberMeContainer },
                get(AccountActivation.prototype.__proto__ || Object.getPrototypeOf(AccountActivation.prototype), "getRememberMeCheckbox", this).call(this)
            );
        }
    }, {
        key: "getSignInValue",
        value: function getSignInValue() {
            return "Set password";
        }
    }, {
        key: "sendLogin",
        value: function sendLogin() {
            var _this3 = this;

            this.clearErrorMessage();

            var password = this.passwordInput.getValue();
            var passwordConfirm = this.passwordConfirmInput.getValue();
            if (password !== passwordConfirm) {
                this.setErrorMessage({ message: "Passwords don't match." });
                return;
            }

            Ajax.postJSON("/accounts/password_change/", {
                newPassword: password
            }).then(function () {
                return location.href = "/";
            }, function (error) {
                return _this3.setErrorMessage(error);
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "form",
                { ref: "form" },
                this.getPasswordInput(),
                this.getPasswordInput({
                    ref: "passwordConfirmInput",
                    name: "passwordConfirm",
                    placeholder: "Confirm Password"
                }),
                this.getSignInButton(),
                UI.createElement("div", { style: { clear: "both", height: "20px" } }),
                this.getErrorArea()
            )];
        }
    }]);
    return AccountActivation;
}(LoginWidget)) || _class3$38);

var PieChartSector = function (_SVG$Group) {
    inherits(PieChartSector, _SVG$Group);

    function PieChartSector() {
        classCallCheck(this, PieChartSector);
        return possibleConstructorReturn(this, (PieChartSector.__proto__ || Object.getPrototypeOf(PieChartSector)).apply(this, arguments));
    }

    createClass(PieChartSector, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                opacity: 0.65,
                hoverTime: 250
            };
        }
    }, {
        key: "getArcPoint",
        value: function getArcPoint(angle, radius, orientation) {
            var spacing = this.options.spacing;
            var center = this.options.center;

            var line = lineEquation(center, polarToCartesian(angle, radius, center));

            // TODO: This binary search can be replaced by O(1) formula
            var left = 0,
                right = Math.PI / 2;
            for (var step = 0; step < 20; ++step) {
                var mid = (left + right) / 2;
                var dist = distancePointLine(polarToCartesian(angle + (orientation === 1 ? 1 : -1) * mid, radius, center), line);
                if (dist > spacing / 2) {
                    right = mid;
                } else {
                    left = mid;
                }
            }
            return polarToCartesian(angle + (orientation === 1 ? 1 : -1) * left, radius, center);
        }
    }, {
        key: "getPath",
        value: function getPath() {
            var outerExtra = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var innerExtra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

            if (innerExtra === -1) {
                innerExtra = outerExtra / 2;
            }

            var startAngle = this.options.startAngle;
            var angleSpan = this.options.angleSpan;

            var innerRadius = this.options.innerRadius + innerExtra;
            var outerRadius = this.options.outerRadius + outerExtra;

            var innerStartPoint = this.getArcPoint(startAngle, innerRadius, 1);
            var innerEndPoint = this.getArcPoint(startAngle + angleSpan, innerRadius, -1);
            var outerStartPoint = this.getArcPoint(startAngle, outerRadius, 1);
            var outerEndPoint = this.getArcPoint(startAngle + angleSpan, outerRadius, -1);

            var largeArcFlag = angleSpan <= Math.PI ? 0 : 1;

            return "M " + innerStartPoint.x + " " + innerStartPoint.y + " " + "A " + innerRadius + " " + innerRadius + " 0 " + largeArcFlag + " 1 " + innerEndPoint.x + " " + innerEndPoint.y + "L " + outerEndPoint.x + " " + outerEndPoint.y + " " + "A " + outerRadius + " " + outerRadius + " 0 " + largeArcFlag + " 0 " + outerStartPoint.x + " " + outerStartPoint.y + "Z";
        }
    }, {
        key: "getMiddlePoint",
        value: function getMiddlePoint() {
            var outerExtra = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var innerExtra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

            if (innerExtra === -1) {
                innerExtra = outerExtra / 2;
            }

            var startAngle = this.options.startAngle;
            var angleSpan = this.options.angleSpan;

            var innerRadius = this.options.innerRadius + innerExtra;
            var outerRadius = this.options.outerRadius + outerExtra;

            return this.getArcPoint(startAngle + angleSpan / 2, (innerRadius + outerRadius) / 2, -1);
        }
    }, {
        key: "changeRadiusTransition",
        value: function changeRadiusTransition(extra, duration) {
            var _this2 = this;

            return new Transition({
                func: function func(t) {
                    _this2.path.setPath(_this2.getPath(t * extra));
                    var middlePoint = _this2.getMiddlePoint(t * extra);
                    _this2.label.setPosition(middlePoint.x, middlePoint.y);
                },
                duration: duration
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(SVG.Path, { ref: "path", d: this.getPath(), fill: this.options.pathFill }), UI.createElement(SVG.Text, _extends({ ref: "label",
                text: (this.options.percent * 100).toFixed(1) + "%"
            }, this.getMiddlePoint(), {
                color: "white",
                fill: "white"
            }))];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.addNodeListener("mouseenter", function () {
                _this3.changeOpacityTransition(1, _this3.options.hoverTime).start();
                _this3.changeRadiusTransition(_this3.options.hoverExpandRadius, _this3.options.hoverTime).start();
            });
            this.addNodeListener("mouseout", function () {
                _this3.changeOpacityTransition(0.65, _this3.options.hoverTime).start();
                _this3.changeRadiusTransition(0, _this3.options.hoverTime).start();
            });
        }
    }]);
    return PieChartSector;
}(SVG.Group);

var PieChart = function (_SVG$Group2) {
    inherits(PieChart, _SVG$Group2);

    function PieChart() {
        classCallCheck(this, PieChart);
        return possibleConstructorReturn(this, (PieChart.__proto__ || Object.getPrototypeOf(PieChart)).apply(this, arguments));
    }

    createClass(PieChart, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                innerRadius: 40,
                outerRadius: 60,
                hoverExpandRadius: 10,
                startAngle: Math.PI * 3 / 2,
                spacing: 2
            };
        }
    }, {
        key: "render",
        value: function render() {
            var pieChartSectors = [];

            var totalSize = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.options.sectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var sector = _step.value;

                    totalSize += sector.size;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var currentAngle = this.options.startAngle;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.options.sectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _sector = _step2.value;

                    var angleSpan = 2 * Math.PI * _sector.size / totalSize;

                    pieChartSectors.push(UI.createElement(PieChartSector, {
                        startAngle: currentAngle,
                        angleSpan: angleSpan,
                        innerRadius: this.options.innerRadius,
                        outerRadius: this.options.outerRadius,
                        hoverExpandRadius: this.options.hoverExpandRadius,
                        center: this.options.center,
                        spacing: this.options.spacing,
                        pathFill: _sector.color,
                        percent: _sector.size / totalSize
                    }));

                    currentAngle += angleSpan;
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return pieChartSectors;
        }
    }]);
    return PieChart;
}(SVG.Group);

var PieChartSVG = function (_SVG$SVGRoot) {
    inherits(PieChartSVG, _SVG$SVGRoot);

    function PieChartSVG() {
        classCallCheck(this, PieChartSVG);
        return possibleConstructorReturn(this, (PieChartSVG.__proto__ || Object.getPrototypeOf(PieChartSVG)).apply(this, arguments));
    }

    createClass(PieChartSVG, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                width: 240,
                height: 240,
                innerRadius: 50,
                outerRadius: 100,
                hoverExpandRadius: 20
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("height", this.options.height + "px");
            attr.setStyle("width", this.options.width + "px");
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(PieChart, { center: { x: this.options.width / 2, y: this.options.height / 2 },
                innerRadius: this.options.innerRadius,
                outerRadius: this.options.outerRadius,
                hoverExpectedRadius: this.options.hoverExpandRadius,
                sectors: this.options.sectors
            })];
        }
    }]);
    return PieChartSVG;
}(SVG.SVGRoot);

var _class$114, _descriptor$51, _descriptor2$45, _descriptor3$39, _descriptor4$35, _descriptor5$31, _dec$57, _class3$39, _dec2$23, _class4$9;

function _initDefineProp$52(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$53(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var QuestionnaireAnswersStyle = (_class$114 = function (_QuestionnaireStyle) {
    inherits(QuestionnaireAnswersStyle, _QuestionnaireStyle);

    function QuestionnaireAnswersStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, QuestionnaireAnswersStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = QuestionnaireAnswersStyle.__proto__ || Object.getPrototypeOf(QuestionnaireAnswersStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$52(_this, "miniInstance", _descriptor$51, _this), _initDefineProp$52(_this, "questionnaireResponseWidget", _descriptor2$45, _this), _initDefineProp$52(_this, "responsesLeftSideContainer", _descriptor3$39, _this), _initDefineProp$52(_this, "responsesRightSide", _descriptor4$35, _this), _initDefineProp$52(_this, "rowList", _descriptor5$31, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return QuestionnaireAnswersStyle;
}(QuestionnaireStyle), _descriptor$51 = _applyDecoratedDescriptor$53(_class$114.prototype, "miniInstance", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "5px",
            border: "1px solid #eee",
            cursor: "pointer"
        };
    }
}), _descriptor2$45 = _applyDecoratedDescriptor$53(_class$114.prototype, "questionnaireResponseWidget", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-flex",
            height: "100%",
            width: "100%",
            overflow: "hidden",
            position: "relative"
        };
    }
}), _descriptor3$39 = _applyDecoratedDescriptor$53(_class$114.prototype, "responsesLeftSideContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "100%",
            overflow: "auto",
            width: "150px",
            borderRight: "1px solid #ddd"
        };
    }
}), _descriptor4$35 = _applyDecoratedDescriptor$53(_class$114.prototype, "responsesRightSide", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "inline-block",
            flex: "1",
            width: "calc(100% - 150px)",
            height: "100%",
            overflow: "auto"
        };
    }
}), _descriptor5$31 = _applyDecoratedDescriptor$53(_class$114.prototype, "rowList", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            maxHeight: "200px",
            overflowY: "auto"
        };
    }
}), _class$114);
var QuestionSummary = (_dec$57 = registerStyle(QuestionnaireAnswersStyle), _dec$57(_class3$39 = function (_UI$Element) {
    inherits(QuestionSummary, _UI$Element);

    function QuestionSummary() {
        classCallCheck(this, QuestionSummary);
        return possibleConstructorReturn(this, (QuestionSummary.__proto__ || Object.getPrototypeOf(QuestionSummary)).apply(this, arguments));
    }

    createClass(QuestionSummary, [{
        key: "getInstanceResponse",
        value: function getInstanceResponse(instance) {
            return instance.getQuestionResponse(this.options.question.id);
        }
    }, {
        key: "isOtherResponse",
        value: function isOtherResponse(response) {
            if (this.options.question.type === QuestionnaireQuestion.Type.SINGLE_CHOICE) {
                return (response.choiceIds || []).length === 0 && response.text;
            }
            return !!response.text;
        }
    }, {
        key: "getInstances",
        value: function getInstances() {
            var _this3 = this;

            return this.options.instances.filter(function (instance) {
                return _this3.getInstanceResponse(instance);
            });
        }
    }, {
        key: "buildChoiceFrequencyMap",
        value: function buildChoiceFrequencyMap() {
            var frequencyMap = new Map();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getInstances()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var instance = _step.value;

                    var instanceResponse = this.getInstanceResponse(instance);
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = (instanceResponse.choiceIds || [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var choiceId = _step2.value;

                            frequencyMap.set(choiceId, (frequencyMap.get(choiceId) || 0) + 1);
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }

                    if (this.isOtherResponse(instanceResponse)) {
                        frequencyMap.set(0, (frequencyMap.get(0) || 0) + 1);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return frequencyMap;
        }
    }, {
        key: "getQuestionOptions",
        value: function getQuestionOptions() {
            var options = [].concat(toConsumableArray(this.options.question.getOptions()));
            if (this.options.question.otherChoice) {
                options.push({ id: 0, answer: "Other" });
            }
            return options;
        }
    }, {
        key: "getPieChart",
        value: function getPieChart() {
            var frequencyMap = this.buildChoiceFrequencyMap();
            var options = this.options.question.getOptions();
            var sectorData = [];
            for (var i = 0; i < options.length; i += 1) {
                if (frequencyMap.get(options[i].id)) {
                    sectorData.push({
                        size: frequencyMap.get(options[i].id),
                        color: ColorGenerator.getPersistentColor(i)
                    });
                }
            }
            if (frequencyMap.get(0)) {
                sectorData.push({
                    size: frequencyMap.get(0),
                    color: ColorGenerator.getPersistentColor(options.length)
                });
            }
            return UI.createElement(PieChartSVG, { sectors: sectorData });
        }
    }, {
        key: "getColorList",
        value: function getColorList() {
            var _this4 = this;

            var frequencyMap = this.buildChoiceFrequencyMap();
            return UI.createElement(Table, { entries: this.getQuestionOptions(),
                columns: [{ value: function value(option) {
                        return UI.createElement(MarkupRenderer, { value: option.answer, className: _this4.styleSheet.markup });
                    }, headerName: UI.T("Choice") }, { value: function value(option) {
                        return frequencyMap.get(option.id) || 0;
                    }, headerName: UI.T("Votes") }, { value: function value(option, index) {
                        return UI.createElement("div", { style: { height: "20px", width: "20px", backgroundColor: ColorGenerator.getPersistentColor(index) } });
                    },
                    headerName: UI.T("Color") }, { value: function value(option) {
                        return UI.createElement(CheckboxInput, { ref: _this4.refLink("optionFilter" + option.id) });
                    }, headerName: UI.T("Filter") }] });
        }
    }, {
        key: "render",
        value: function render() {
            var question = this.options.question;
            var content = void 0;
            if (question.type === QuestionnaireQuestion.Type.PLAIN_TEXT) {
                content = UI.createElement(RowList$$1, { rows: this.getInstances(),
                    className: this.styleSheet.rowList,
                    rowParser: function rowParser(instance) {
                        return [UI.createElement(UserHandle, { userId: instance.userId }), ": ", instance.getQuestionResponse(question.id).text];
                    } });
            } else {
                content = [UI.createElement(
                    "div",
                    { style: { display: "inline-block", height: "100%", width: "50%", textAlign: "center", float: "left" } },
                    this.getPieChart()
                ), UI.createElement(
                    "div",
                    { style: { display: "inline-block", height: "100%", width: "50%", float: "right" } },
                    this.getColorList()
                ), UI.createElement("div", { style: { clear: "both" } })];
                var otherAnswers = this.getInstances().filter(function (instance) {
                    return instance.getQuestionResponse(question.id).text;
                });
                if (otherAnswers.length) {
                    content.push(UI.createElement(
                        "h4",
                        { style: { marginRight: "10px" } },
                        "Other answers:"
                    ));
                    content.push(UI.createElement(RowList$$1, { rows: otherAnswers,
                        className: this.styleSheet.rowList,
                        rowParser: function rowParser(instance) {
                            return [UI.createElement(UserHandle, { userId: instance.userId }), ": ", instance.getQuestionResponse(question.id).text];
                        } }));
                }
            }
            return UI.createElement(
                CardPanel,
                { level: Level.PRIMARY, title: question.text, headingCentered: false,
                    style: { marginBottom: "10px", width: "80%", marginLeft: "10%" } },
                content
            );
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            if (this.options.question.type !== QuestionnaireQuestion.Type.PLAIN_TEXT) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = this.getQuestionOptions()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var option = _step3.value;

                        this["optionFilter" + option.id].addChangeListener(function () {
                            var acceptableChoices = [];
                            var _iteratorNormalCompletion4 = true;
                            var _didIteratorError4 = false;
                            var _iteratorError4 = undefined;

                            try {
                                for (var _iterator4 = _this5.getQuestionOptions()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                    var choice = _step4.value;

                                    if (_this5["optionFilter" + choice.id].getValue()) {
                                        acceptableChoices.push(choice.id);
                                    }
                                }
                            } catch (err) {
                                _didIteratorError4 = true;
                                _iteratorError4 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                        _iterator4.return();
                                    }
                                } finally {
                                    if (_didIteratorError4) {
                                        throw _iteratorError4;
                                    }
                                }
                            }

                            _this5.options.widget.dispatch("updateFilter", _this5.options.question, acceptableChoices);
                        });
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }
        }
    }]);
    return QuestionSummary;
}(UI.Element)) || _class3$39);

var QuestionnaireSummaryWidget = function (_UI$Element2) {
    inherits(QuestionnaireSummaryWidget, _UI$Element2);

    function QuestionnaireSummaryWidget() {
        classCallCheck(this, QuestionnaireSummaryWidget);
        return possibleConstructorReturn(this, (QuestionnaireSummaryWidget.__proto__ || Object.getPrototypeOf(QuestionnaireSummaryWidget)).apply(this, arguments));
    }

    createClass(QuestionnaireSummaryWidget, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                filters: {}
            };
        }
    }, {
        key: "getQuestionnaire",
        value: function getQuestionnaire() {
            return QuestionnaireStore.get(this.options.questionnaireId);
        }
    }, {
        key: "respectsFilters",
        value: function respectsFilters(instance) {
            var filters = this.options.filters || {};
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
                for (var _iterator5 = Object.keys(filters)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var questionId = _step5.value;

                    var response = instance.getQuestionResponse(parseInt(questionId));
                    var acceptableOptions = filters[questionId];
                    if (Array.isArray(acceptableOptions) && acceptableOptions.length) {
                        if (!response) {
                            return false;
                        }
                        var respectsFilter = false;
                        var _iteratorNormalCompletion6 = true;
                        var _didIteratorError6 = false;
                        var _iteratorError6 = undefined;

                        try {
                            for (var _iterator6 = (response.choiceIds || [])[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                var choiceId = _step6.value;

                                if (acceptableOptions.indexOf(choiceId) >= 0) {
                                    respectsFilter = true;
                                }
                            }
                        } catch (err) {
                            _didIteratorError6 = true;
                            _iteratorError6 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                    _iterator6.return();
                                }
                            } finally {
                                if (_didIteratorError6) {
                                    throw _iteratorError6;
                                }
                            }
                        }

                        if (!respectsFilter) {
                            return false;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
                        _iterator5.return();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            return true;
        }
    }, {
        key: "getInstances",
        value: function getInstances() {
            var _this7 = this;

            return this.getQuestionnaire().getAllInstances().filter(function (instance) {
                return _this7.respectsFilters(instance);
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this8 = this;

            var instances = this.getInstances();
            return this.getQuestionnaire().getQuestions().map(function (question) {
                return UI.createElement(QuestionSummary, { question: question, instances: instances, widget: _this8 });
            });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            this.addListener("updateFilter", function (question, acceptableOptions) {
                _this9.options.filters[question.id] = acceptableOptions;
                _this9.redraw();
                _this9.dispatch("updateInstanceList", _this9.getInstances());
            });
        }
    }]);
    return QuestionnaireSummaryWidget;
}(UI.Element);

var QuestionnaireInstanceSwitcher = function (_Switcher) {
    inherits(QuestionnaireInstanceSwitcher, _Switcher);
    createClass(QuestionnaireInstanceSwitcher, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign(get(QuestionnaireInstanceSwitcher.prototype.__proto__ || Object.getPrototypeOf(QuestionnaireInstanceSwitcher.prototype), "getDefaultOptions", this).call(this), {
                lazyRender: true
            });
        }
    }]);

    function QuestionnaireInstanceSwitcher() {
        classCallCheck(this, QuestionnaireInstanceSwitcher);

        var _this10 = possibleConstructorReturn(this, (QuestionnaireInstanceSwitcher.__proto__ || Object.getPrototypeOf(QuestionnaireInstanceSwitcher)).apply(this, arguments));

        _this10.instanceMap = new Map();
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
            for (var _iterator7 = _this10.options.children[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var instanceUIElement = _step7.value;

                _this10.instanceMap.set(instanceUIElement.options.instance.id, instanceUIElement);
            }
        } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                    _iterator7.return();
                }
            } finally {
                if (_didIteratorError7) {
                    throw _iteratorError7;
                }
            }
        }

        if (!_this10.instanceMap.has(0)) {
            _this10.instanceMap.set(0, UI.createElement("div", null));
        }
        return _this10;
    }

    createClass(QuestionnaireInstanceSwitcher, [{
        key: "switchToInstance",
        value: function switchToInstance(instance) {
            if (!instance) {
                this.setActive(this.instanceMap.get(0));
                return;
            }
            this.setActive(this.instanceMap.get(instance.id));
        }
    }]);
    return QuestionnaireInstanceSwitcher;
}(Switcher);

var FullInstancePage = function (_UI$Element3) {
    inherits(FullInstancePage, _UI$Element3);

    function FullInstancePage() {
        classCallCheck(this, FullInstancePage);
        return possibleConstructorReturn(this, (FullInstancePage.__proto__ || Object.getPrototypeOf(FullInstancePage)).apply(this, arguments));
    }

    createClass(FullInstancePage, [{
        key: "render",
        value: function render() {
            var _this12 = this;

            return this.options.instance.getQuestionnaire().getQuestions().map(function (question) {
                return UI.createElement(QuestionPage, { question: question, instance: _this12.options.instance,
                    editable: false, style: { paddingBottom: 0 } });
            });
        }
    }]);
    return FullInstancePage;
}(UI.Element);

var QuestionnaireResponsesWidget = (_dec2$23 = registerStyle(QuestionnaireAnswersStyle), _dec2$23(_class4$9 = function (_UI$Element4) {
    inherits(QuestionnaireResponsesWidget, _UI$Element4);

    function QuestionnaireResponsesWidget() {
        classCallCheck(this, QuestionnaireResponsesWidget);
        return possibleConstructorReturn(this, (QuestionnaireResponsesWidget.__proto__ || Object.getPrototypeOf(QuestionnaireResponsesWidget)).apply(this, arguments));
    }

    createClass(QuestionnaireResponsesWidget, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.questionnaireResponseWidget);
        }
    }, {
        key: "getQuestionnaire",
        value: function getQuestionnaire() {
            return QuestionnaireStore.get(this.options.questionnaireId);
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(QuestionnaireResponsesWidget.prototype.__proto__ || Object.getPrototypeOf(QuestionnaireResponsesWidget.prototype), "setOptions", this).call(this, options);
            this.options.instances = this.options.instances || this.getQuestionnaire().getAllInstances();
        }
    }, {
        key: "switchToInstance",
        value: function switchToInstance(instance) {
            this.instanceSwitcher.switchToInstance(instance);

            var allInstances = this.getInstances();
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = allInstances[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var otherInstance = _step8.value;

                    var obj = this["miniInstanceDiv" + otherInstance.id];
                    if (instance === otherInstance) {
                        obj.setStyle("background-color", Theme.Global.getProperty("COLOR_INFO", "#ddd"));
                    } else {
                        obj.setStyle("background-color", Theme.Global.getProperty("COLOR_DEFAULT", "#fff"));
                    }
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }
        }
    }, {
        key: "getInstances",
        value: function getInstances() {
            return this.options.instances;
        }
    }, {
        key: "render",
        value: function render() {
            var _this14 = this;

            var allInstances = this.getInstances();
            var miniResponses = allInstances.map(function (instance) {
                return UI.createElement(
                    "div",
                    { onClick: function onClick() {
                            return _this14.switchToInstance(instance);
                        }, ref: "miniInstanceDiv" + instance.id,
                        className: _this14.styleSheet.miniInstance },
                    UI.createElement(UserHandle, { disableClick: true, userId: instance.userId })
                );
            });
            var fullInstances = allInstances.map(function (instance) {
                return UI.createElement(FullInstancePage, { instance: instance });
            });
            return [UI.createElement(
                "div",
                { className: this.styleSheet.responsesLeftSideContainer },
                miniResponses
            ), UI.createElement(
                QuestionnaireInstanceSwitcher,
                { ref: "instanceSwitcher", className: this.styleSheet.responsesRightSide },
                fullInstances
            )];
        }
    }, {
        key: "redraw",
        value: function redraw() {
            get(QuestionnaireResponsesWidget.prototype.__proto__ || Object.getPrototypeOf(QuestionnaireResponsesWidget.prototype), "redraw", this).call(this);
            this.switchToInstance(this.getInstances()[0]);
        }
    }]);
    return QuestionnaireResponsesWidget;
}(UI.Element)) || _class4$9);


var QuestionnaireAnswersPanel = function (_UI$Element5) {
    inherits(QuestionnaireAnswersPanel, _UI$Element5);

    function QuestionnaireAnswersPanel() {
        classCallCheck(this, QuestionnaireAnswersPanel);
        return possibleConstructorReturn(this, (QuestionnaireAnswersPanel.__proto__ || Object.getPrototypeOf(QuestionnaireAnswersPanel)).apply(this, arguments));
    }

    createClass(QuestionnaireAnswersPanel, [{
        key: "render",
        value: function render() {
            return [UI.createElement(
                TabArea,
                null,
                UI.createElement(
                    Panel,
                    { title: UI.T("Summary"), style: { paddingTop: "10px" } },
                    UI.createElement(QuestionnaireSummaryWidget, { questionnaireId: this.options.questionnaireId, ref: "questionnaireSummary" })
                ),
                UI.createElement(
                    Panel,
                    { title: UI.T("Responses") },
                    UI.createElement(QuestionnaireResponsesWidget, { questionnaireId: this.options.questionnaireId, ref: "questionnaireResponses" })
                )
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this16 = this;

            this.questionnaireSummary.addListener("updateInstanceList", function (instances) {
                _this16.questionnaireResponses.updateOptions({ instances: instances });
            });
        }
    }]);
    return QuestionnaireAnswersPanel;
}(UI.Element);

var DelayedQuestionnaireAnswersPanel = function (_UI$Element6) {
    inherits(DelayedQuestionnaireAnswersPanel, _UI$Element6);

    function DelayedQuestionnaireAnswersPanel() {
        classCallCheck(this, DelayedQuestionnaireAnswersPanel);
        return possibleConstructorReturn(this, (DelayedQuestionnaireAnswersPanel.__proto__ || Object.getPrototypeOf(DelayedQuestionnaireAnswersPanel)).apply(this, arguments));
    }

    createClass(DelayedQuestionnaireAnswersPanel, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    margin: "0 10%"
                }
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            // this is here since this class can be used as a stand-alone page in a webapp
            // pattern of URL in mind: /questionnaire/{id}/answers/
            options.questionnaireId = options.questionnaireId || parseInt(options.args[0]) || 0;
            get(DelayedQuestionnaireAnswersPanel.prototype.__proto__ || Object.getPrototypeOf(DelayedQuestionnaireAnswersPanel.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "render",
        value: function render() {
            if (this.options.error) {
                return StateDependentElement.renderError(this.options.error);
            }
            if (!this.options.loaded) {
                return StateDependentElement.renderLoading();
            }
            return UI.createElement(QuestionnaireAnswersPanel, { questionnaireId: this.options.questionnaireId });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this18 = this;

            Ajax.getJSON("/questionnaire_all_answers/", {
                questionnaireId: this.options.questionnaireId
            }).then(function () {
                return _this18.updateOptions({ loaded: true });
            }, function (error) {
                return _this18.updateOptions({ error: error });
            });
        }
    }]);
    return DelayedQuestionnaireAnswersPanel;
}(UI.Element);

var _class$115, _descriptor$52, _descriptor2$46, _descriptor3$40, _descriptor4$36, _descriptor5$32, _descriptor6$27, _dec$58, _class3$40, _class4$10, _descriptor7$22, _dec2$24, _class6$4, _class7$8, _descriptor8$18, _descriptor9$14, _descriptor10$12, _dec3$8, _class9$2, _class10, _descriptor11$10, _dec4$2, _class12;

function _initDefineProp$53(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$54(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var IEEE_PRIMARY_COLOR = "#185e9c";

var CountdownStyle = (_class$115 = function (_StyleSheet) {
    inherits(CountdownStyle, _StyleSheet);

    function CountdownStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, CountdownStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = CountdownStyle.__proto__ || Object.getPrototypeOf(CountdownStyle)).call.apply(_ref, [this].concat(args))), _this), _this.timeSectionHeight = 180, _this.timeSectionDigitsContainerHeight = 120, _this.primaryColor = IEEE_PRIMARY_COLOR, _initDefineProp$53(_this, "countdown", _descriptor$52, _this), _initDefineProp$53(_this, "timeSection", _descriptor2$46, _this), _initDefineProp$53(_this, "timeSectionDigitsContainer", _descriptor3$40, _this), _initDefineProp$53(_this, "digitContainer", _descriptor4$36, _this), _initDefineProp$53(_this, "digitContainerSeparator", _descriptor5$32, _this), _initDefineProp$53(_this, "timeSectionDescription", _descriptor6$27, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    // renderTimeSection style


    return CountdownStyle;
}(StyleSheet), _descriptor$52 = _applyDecoratedDescriptor$54(_class$115.prototype, "countdown", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            maxWidth: "100%",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexWrap: "wrap",
            flexDirection: "row"
        };
    }
}), _descriptor2$46 = _applyDecoratedDescriptor$54(_class$115.prototype, "timeSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexDirection: "column"
        };
    }
}), _descriptor3$40 = _applyDecoratedDescriptor$54(_class$115.prototype, "timeSectionDigitsContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex"
        };
    }
}), _descriptor4$36 = _applyDecoratedDescriptor$54(_class$115.prototype, "digitContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.timeSectionDigitsContainerHeight,
            width: 75,
            margin: 5,
            borderRadius: "10px",
            boxShadow: "0px 0px 5px " + this.primaryColor,
            background: "linear-gradient(to bottom," + (this.primaryColor + " 0%, ") + (this.primaryColor + " 49.5%,") + (enhance(this.primaryColor, 1) + " 49.5%,") + (enhance(this.primaryColor, 1) + " 50.5%,") + (enhance(this.primaryColor, 0.15) + " 50.5%,") + (enhance(this.primaryColor, 0.15) + " 100%") + ")",
            color: enhance(this.primaryColor, 1),
            fontSize: 60,
            display: "flex",
            justifyContent: "center",
            alignItems: "center"
        };
    }
}), _descriptor5$32 = _applyDecoratedDescriptor$54(_class$115.prototype, "digitContainerSeparator", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: 20,
            height: this.timeSectionHeight - this.timeSectionDigitsContainerHeight,
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            textShadow: "0px 0px 5px " + this.primaryColor,
            fontSize: 40,
            paddingBottom: 60,
            color: this.primaryColor
        };
    }
}), _descriptor6$27 = _applyDecoratedDescriptor$54(_class$115.prototype, "timeSectionDescription", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.timeSectionHeight - this.timeSectionDigitsContainerHeight,
            marginLeft: 10,
            marginRight: 10,
            fontSize: 22,
            textTransform: "uppercase",
            display: "flex",
            alignItems: "center",
            color: this.primaryColor
        };
    }
}), _class$115);

// Countdown - gets the StemDate of the end of the event (options.endTime)
// TODO: This is 1x4 = 4 sections. (days, hours, minutes, seconds)
// TODO: Add 2x3 = 6 sections (+ years, months)
// TODO: This is easy to reuse, even after IEE contest. :)

var Countdown = (_dec$58 = registerStyle(CountdownStyle), _dec$58(_class3$40 = function (_UI$Element) {
    inherits(Countdown, _UI$Element);

    function Countdown() {
        classCallCheck(this, Countdown);
        return possibleConstructorReturn(this, (Countdown.__proto__ || Object.getPrototypeOf(Countdown)).apply(this, arguments));
    }

    createClass(Countdown, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                hasDays: true,
                hasHours: true,
                hasMinutes: true,
                hasSeconds: true
            };
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass(this.styleSheet.countdown);
        }
    }, {
        key: "getTimeLeft",
        value: function getTimeLeft() {
            var currentServerTime = ServerTime.now();
            var endTime = this.options.endTime;

            endTime = endTime || currentServerTime;

            return endTime.diffDuration(currentServerTime);
        }
    }, {
        key: "renderTimeSection",
        value: function renderTimeSection(digits, description, hasSeparator) {
            if (digits === "") {
                return null;
            }

            var styleSheet = this.styleSheet;
            var separator = void 0;
            if (hasSeparator) {
                separator = UI.createElement(
                    "div",
                    { className: styleSheet.digitContainerSeparator },
                    ":"
                );
            }

            return [UI.createElement(
                "div",
                { className: styleSheet.timeSection },
                UI.createElement(
                    "div",
                    { className: styleSheet.timeSectionDigitsContainer },
                    digits.split("").map(function (digit) {
                        return UI.createElement(
                            "div",
                            { className: styleSheet.digitContainer },
                            digit
                        );
                    })
                ),
                UI.createElement(
                    "div",
                    { className: styleSheet.timeSectionDescription },
                    description
                )
            ), separator];
        }
    }, {
        key: "formatTimeUnit",
        value: function formatTimeUnit(value) {
            var shouldHideNull = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (value === 0 && shouldHideNull) {
                return "";
            }

            if (value < 10) {
                return "0" + String(value);
            }
            return String(value);
        }
    }, {
        key: "hasEnded",
        value: function hasEnded() {
            return this.getTimeLeft().valueOf() === 0;
        }
    }, {
        key: "render",
        value: function render() {
            if (this.hasEnded()) {
                return null;
            }

            var timeLeft = this.getTimeLeft();

            return [this.options.hasDays ? this.renderTimeSection(this.formatTimeUnit(timeLeft.toDays(), true), "Days", this.options.hasHours || this.options.hasMinutes || this.options.hasSeconds) : "", this.options.hasHours ? this.renderTimeSection(this.formatTimeUnit(timeLeft.getHours()), "Hours", this.options.hasMinutes || this.options.hasSeconds) : "", this.options.hasMinutes ? this.renderTimeSection(this.formatTimeUnit(timeLeft.getMinutes()), "Minutes", this.options.hasSeconds) : "", this.options.hasSeconds ? this.renderTimeSection(this.formatTimeUnit(timeLeft.getSeconds()), "Seconds") : ""];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.intervalId = setInterval(function () {
                _this3.redraw();
                if (_this3.hasEnded()) {
                    _this3.onUnmount();
                }
            }, 1000);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            clearInterval(this.intervalId);
        }
    }]);
    return Countdown;
}(UI.Element)) || _class3$40);

var ContestCountdownStyle = (_class4$10 = function (_StyleSheet2) {
    inherits(ContestCountdownStyle, _StyleSheet2);

    function ContestCountdownStyle() {
        var _ref2;

        var _temp2, _this4, _ret2;

        classCallCheck(this, ContestCountdownStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this4 = possibleConstructorReturn(this, (_ref2 = ContestCountdownStyle.__proto__ || Object.getPrototypeOf(ContestCountdownStyle)).call.apply(_ref2, [this].concat(args))), _this4), _this4.primaryColor = IEEE_PRIMARY_COLOR, _initDefineProp$53(_this4, "countdownDescription", _descriptor7$22, _this4), _temp2), possibleConstructorReturn(_this4, _ret2);
    }

    return ContestCountdownStyle;
}(StyleSheet), _descriptor7$22 = _applyDecoratedDescriptor$54(_class4$10.prototype, "countdownDescription", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            color: this.primaryColor,
            fontSize: 25,
            padding: "15px 0"
        };
    }
}), _class4$10);

var ContestCountdown = (_dec2$24 = registerStyle(ContestCountdownStyle), _dec2$24(_class6$4 = function (_UI$Element2) {
    inherits(ContestCountdown, _UI$Element2);

    function ContestCountdown() {
        classCallCheck(this, ContestCountdown);
        return possibleConstructorReturn(this, (ContestCountdown.__proto__ || Object.getPrototypeOf(ContestCountdown)).apply(this, arguments));
    }

    createClass(ContestCountdown, [{
        key: "checkEndTimeChange",
        value: function checkEndTimeChange(value) {
            if (value == null || !this.endTime || !this.endTime.isSame(value)) {
                this.endTime = value;
                this.redraw();
            }
        }
    }, {
        key: "updateEndTime",
        value: function updateEndTime() {
            var contest = this.options.contest;


            if (contest.getStartTime() && !contest.hasStarted()) {
                this.checkEndTimeChange(StemDate(contest.getStartTime()));
            } else if (contest.getEndTime() && !contest.hasFinished()) {
                this.checkEndTimeChange(StemDate(contest.getEndTime()));
            } else {
                this.checkEndTimeChange(null);
            }

            this.redraw();
        }
    }, {
        key: "getCountdownTopDescription",
        value: function getCountdownTopDescription() {
            var contest = this.options.contest;

            var description = void 0;

            if (!contest.hasStarted()) {
                description = "Contest starts in";
            } else if (contest.hasStarted() && !contest.hasFinished()) {
                description = "Contest ends in";
            } else {
                description = "Contest has ended, congratulations everyone!";
            }

            return UI.createElement(
                "div",
                { className: this.styleSheet.countdownDescription },
                description
            );
        }
    }, {
        key: "getCountdownBottomDescription",
        value: function getCountdownBottomDescription() {
            var contest = this.options.contest;


            if (!contest.hasStarted()) {
                return [UI.createElement(
                    "div",
                    { className: this.styleSheet.countdownDescription },
                    contest.getFormattedStartTime()
                ), UI.createElement(
                    "div",
                    { className: this.styleSheet.countdownDescription },
                    "The first task will open automatically when the contest starts."
                )];
            }
            return null;
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getCountdownTopDescription(), UI.createElement(Countdown, { endTime: this.endTime }), this.getCountdownBottomDescription()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            this.updateEndTime();
            this.intervalId = setInterval(function () {
                return _this6.updateEndTime();
            }, 1000);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            clearInterval(this.intervalId);
        }
    }]);
    return ContestCountdown;
}(UI.Element)) || _class6$4);

// TODO: The Countdown.jsx file should end here.

var IEEEXtremeCountdownStyle = (_class7$8 = function (_CountdownStyle) {
    inherits(IEEEXtremeCountdownStyle, _CountdownStyle);

    function IEEEXtremeCountdownStyle() {
        var _ref3;

        var _temp3, _this7, _ret3;

        classCallCheck(this, IEEEXtremeCountdownStyle);

        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return _ret3 = (_temp3 = (_this7 = possibleConstructorReturn(this, (_ref3 = IEEEXtremeCountdownStyle.__proto__ || Object.getPrototypeOf(IEEEXtremeCountdownStyle)).call.apply(_ref3, [this].concat(args))), _this7), _initDefineProp$53(_this7, "digitContainer", _descriptor8$18, _this7), _initDefineProp$53(_this7, "digitContainerSeparator", _descriptor9$14, _this7), _initDefineProp$53(_this7, "timeSectionDescription", _descriptor10$12, _this7), _temp3), possibleConstructorReturn(_this7, _ret3);
    }

    createClass(IEEEXtremeCountdownStyle, [{
        key: "getResizePercent",
        value: function getResizePercent() {
            if (window.innerWidth > 850) {
                return 0.8;
            }
            if (window.innerWidth > 600) {
                return 0.75;
            }
            if (window.innerWidth > 500) {
                return 0.6;
            }
            return 0.45;
        }
    }]);
    return IEEEXtremeCountdownStyle;
}(CountdownStyle), _descriptor8$18 = _applyDecoratedDescriptor$54(_class7$8.prototype, "digitContainer", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.getResizePercent() * this.timeSectionDigitsContainerHeight,
            width: this.getResizePercent() * 75,
            fontSize: this.getResizePercent() * 60
        };
    }
}), _descriptor9$14 = _applyDecoratedDescriptor$54(_class7$8.prototype, "digitContainerSeparator", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: this.getResizePercent() * 20,
            height: this.getResizePercent() * (this.timeSectionHeight - this.timeSectionDigitsContainerHeight),
            fontSize: this.getResizePercent() * 40,
            paddingBottom: this.getResizePercent() * 60
        };
    }
}), _descriptor10$12 = _applyDecoratedDescriptor$54(_class7$8.prototype, "timeSectionDescription", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.getResizePercent() * (this.timeSectionHeight - this.timeSectionDigitsContainerHeight),
            fontSize: this.getResizePercent() * 22
        };
    }
}), _class7$8);
var IEEEXtremeCountdown = (_dec3$8 = registerStyle(IEEEXtremeCountdownStyle), _dec3$8(_class9$2 = function (_Countdown) {
    inherits(IEEEXtremeCountdown, _Countdown);

    function IEEEXtremeCountdown() {
        classCallCheck(this, IEEEXtremeCountdown);
        return possibleConstructorReturn(this, (IEEEXtremeCountdown.__proto__ || Object.getPrototypeOf(IEEEXtremeCountdown)).apply(this, arguments));
    }

    return IEEEXtremeCountdown;
}(Countdown)) || _class9$2);
var IEEEXtremeContestCountdownStyle = (_class10 = function (_ContestCountdownStyl) {
    inherits(IEEEXtremeContestCountdownStyle, _ContestCountdownStyl);

    function IEEEXtremeContestCountdownStyle() {
        var _ref4;

        var _temp4, _this9, _ret4;

        classCallCheck(this, IEEEXtremeContestCountdownStyle);

        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        return _ret4 = (_temp4 = (_this9 = possibleConstructorReturn(this, (_ref4 = IEEEXtremeContestCountdownStyle.__proto__ || Object.getPrototypeOf(IEEEXtremeContestCountdownStyle)).call.apply(_ref4, [this].concat(args))), _this9), _initDefineProp$53(_this9, "countdownDescription", _descriptor11$10, _this9), _temp4), possibleConstructorReturn(_this9, _ret4);
    }

    createClass(IEEEXtremeContestCountdownStyle, [{
        key: "getResizePercent",
        value: function getResizePercent() {
            if (window.innerWidth > 850) {
                return 0.8;
            }
            if (window.innerWidth > 600) {
                return 0.75;
            }
            return 0.6;
        }
    }]);
    return IEEEXtremeContestCountdownStyle;
}(ContestCountdownStyle), _descriptor11$10 = _applyDecoratedDescriptor$54(_class10.prototype, "countdownDescription", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: this.getResizePercent() * 25,
            padding: this.getResizePercent() * 5 + "px 0"
        };
    }
}), _class10);

var IEEEXtremeContestCountdown = (_dec4$2 = registerStyle(IEEEXtremeContestCountdownStyle), _dec4$2(_class12 = function (_ContestCountdown) {
    inherits(IEEEXtremeContestCountdown, _ContestCountdown);

    function IEEEXtremeContestCountdown() {
        classCallCheck(this, IEEEXtremeContestCountdown);
        return possibleConstructorReturn(this, (IEEEXtremeContestCountdown.__proto__ || Object.getPrototypeOf(IEEEXtremeContestCountdown)).apply(this, arguments));
    }

    createClass(IEEEXtremeContestCountdown, [{
        key: "render",
        value: function render() {
            return [this.getCountdownTopDescription(), UI.createElement(IEEEXtremeCountdown, { endTime: this.endTime }), this.getCountdownBottomDescription()];
        }
    }]);
    return IEEEXtremeContestCountdown;
}(ContestCountdown)) || _class12);

var _class$116, _descriptor$53, _descriptor2$47, _descriptor3$41, _descriptor4$37, _descriptor5$33, _descriptor6$28, _dec$59, _class3$41, _class4$11, _descriptor7$23, _descriptor8$19, _descriptor9$15, _descriptor10$13, _descriptor11$11, _descriptor12$9, _descriptor13$9, _descriptor14$9, _descriptor15$8, _descriptor16$8, _descriptor17$8, _descriptor18$5, _descriptor19$5, _descriptor20$5, _descriptor21$3, _descriptor22$2, _descriptor23$2, _dec2$25, _class6$5;

function _initDefineProp$54(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$55(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var IEEE_PRIMARY_COLOR$1 = "#185e9c";
var IEEE_SECONDARY_COLOR = "#FF8D3A";

var IEEEXtreme11LogoSrc = "/static/svg/XtremeLogo.svg";

var IEEELoginStyle = (_class$116 = function (_LoginStyle) {
    inherits(IEEELoginStyle, _LoginStyle);

    function IEEELoginStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, IEEELoginStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = IEEELoginStyle.__proto__ || Object.getPrototypeOf(IEEELoginStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$54(_this, "loginWidget", _descriptor$53, _this), _initDefineProp$54(_this, "forgotPassword", _descriptor2$47, _this), _initDefineProp$54(_this, "signInButtonContainer", _descriptor3$41, _this), _initDefineProp$54(_this, "signInButton", _descriptor4$37, _this), _initDefineProp$54(_this, "rememberMeContainer", _descriptor5$33, _this), _initDefineProp$54(_this, "input", _descriptor6$28, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return IEEELoginStyle;
}(LoginStyle), _descriptor$53 = _applyDecoratedDescriptor$55(_class$116.prototype, "loginWidget", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: 0,
            width: "auto",
            height: "auto"
        };
    }
}), _descriptor2$47 = _applyDecoratedDescriptor$55(_class$116.prototype, "forgotPassword", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            visibility: "hidden"
        };
    }
}), _descriptor3$41 = _applyDecoratedDescriptor$55(_class$116.prototype, "signInButtonContainer", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "auto"
        };
    }
}), _descriptor4$37 = _applyDecoratedDescriptor$55(_class$116.prototype, "signInButton", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: IEEE_PRIMARY_COLOR$1,
            color: enhance(IEEE_PRIMARY_COLOR$1, 1),
            minWidth: "initial",
            paddingLeft: 20,
            paddingRight: 20,
            outline: "none",
            ":hover": {
                backgroundColor: enhance(IEEE_PRIMARY_COLOR$1, 0.15),
                color: enhance(IEEE_PRIMARY_COLOR$1, 1),
                border: 0
            }
        };
    }
}), _descriptor5$33 = _applyDecoratedDescriptor$55(_class$116.prototype, "rememberMeContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "29px"
        };
    }
}), _descriptor6$28 = _applyDecoratedDescriptor$55(_class$116.prototype, "input", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "inherit !important",
            borderBottom: "2px solid " + IEEE_PRIMARY_COLOR$1,
            borderRadius: "0 !important",
            ":hover": {
                borderBottom: "2px solid " + IEEE_PRIMARY_COLOR$1 + " !important"
            },
            ":focus": {
                borderBottom: "2px solid " + IEEE_PRIMARY_COLOR$1 + " !important"
            }
        };
    }
}), _class$116);

var IEEELoginWidget = (_dec$59 = registerStyle(IEEELoginStyle), _dec$59(_class3$41 = function (_LoginWidget) {
    inherits(IEEELoginWidget, _LoginWidget);

    function IEEELoginWidget() {
        classCallCheck(this, IEEELoginWidget);
        return possibleConstructorReturn(this, (IEEELoginWidget.__proto__ || Object.getPrototypeOf(IEEELoginWidget)).apply(this, arguments));
    }

    createClass(IEEELoginWidget, [{
        key: "getThirdPartyLogin",
        value: function getThirdPartyLogin() {}
    }, {
        key: "getClearBothArea",
        value: function getClearBothArea() {}
    }, {
        key: "getRememberMeCheckbox",
        value: function getRememberMeCheckbox() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.rememberMeContainer },
                get(IEEELoginWidget.prototype.__proto__ || Object.getPrototypeOf(IEEELoginWidget.prototype), "getRememberMeCheckbox", this).call(this)
            );
        }
    }]);
    return IEEELoginWidget;
}(LoginWidget)) || _class3$41);

var IEEEPasswordResetRequestWidget = function (_IEEELoginWidget) {
    inherits(IEEEPasswordResetRequestWidget, _IEEELoginWidget);

    function IEEEPasswordResetRequestWidget() {
        classCallCheck(this, IEEEPasswordResetRequestWidget);
        return possibleConstructorReturn(this, (IEEEPasswordResetRequestWidget.__proto__ || Object.getPrototypeOf(IEEEPasswordResetRequestWidget)).apply(this, arguments));
    }

    createClass(IEEEPasswordResetRequestWidget, [{
        key: "getSignInValue",
        value: function getSignInValue() {
            return "Request password reset";
        }
    }, {
        key: "sendLogin",
        value: function sendLogin() {
            var _this4 = this;

            this.clearErrorMessage();
            var data = {
                email: this.emailInput.getValue()
            };
            Ajax.postJSON("/ieee_password_reset_request/", data).then(function () {
                return _this4.setErrorMessage({ message: "An email was sent to all members of your team." }, false);
            }, function (error) {
                return _this4.setErrorMessage(error);
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "form",
                { ref: "form" },
                this.getEmailInput("envelope"),
                this.getSignInButton(),
                UI.createElement("div", { style: { clear: "both", height: "20px" } }),
                this.getErrorArea()
            )];
        }
    }]);
    return IEEEPasswordResetRequestWidget;
}(IEEELoginWidget);

var IEEEXtreme11ContestSummaryStyle = (_class4$11 = function (_StyleSheet) {
    inherits(IEEEXtreme11ContestSummaryStyle, _StyleSheet);

    function IEEEXtreme11ContestSummaryStyle() {
        var _ref2;

        var _temp2, _this5, _ret2;

        classCallCheck(this, IEEEXtreme11ContestSummaryStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this5 = possibleConstructorReturn(this, (_ref2 = IEEEXtreme11ContestSummaryStyle.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestSummaryStyle)).call.apply(_ref2, [this].concat(args))), _this5), _initDefineProp$54(_this5, "ieeeXtreme11ContestSummary", _descriptor7$23, _this5), _initDefineProp$54(_this5, "logoSectionContainer", _descriptor8$19, _this5), _initDefineProp$54(_this5, "sectionContainer", _descriptor9$15, _this5), _initDefineProp$54(_this5, "logoContainer", _descriptor10$13, _this5), _initDefineProp$54(_this5, "image", _descriptor11$11, _this5), _initDefineProp$54(_this5, "countdown", _descriptor12$9, _this5), _initDefineProp$54(_this5, "sectionTitleContainer", _descriptor13$9, _this5), _initDefineProp$54(_this5, "sectionTitle", _descriptor14$9, _this5), _initDefineProp$54(_this5, "sponsorsAndPartners", _descriptor15$8, _this5), _initDefineProp$54(_this5, "sponsorContainer", _descriptor16$8, _this5), _initDefineProp$54(_this5, "sponsorImageContainer", _descriptor17$8, _this5), _initDefineProp$54(_this5, "sponsorImage", _descriptor18$5, _this5), _initDefineProp$54(_this5, "sponsorName", _descriptor19$5, _this5), _initDefineProp$54(_this5, "textSection", _descriptor20$5, _this5), _initDefineProp$54(_this5, "sponsorsAndPartnersLogosContainer", _descriptor21$3, _this5), _this5.loginContainer = {
            width: "100%",
            display: "flex",
            flexDirection: "row",
            justifyContent: "space-around"
        }, _initDefineProp$54(_this5, "infoLinesContainer", _descriptor22$2, _this5), _initDefineProp$54(_this5, "infoLine", _descriptor23$2, _this5), _temp2), possibleConstructorReturn(_this5, _ret2);
    }

    return IEEEXtreme11ContestSummaryStyle;
}(StyleSheet), _descriptor7$23 = _applyDecoratedDescriptor$55(_class4$11.prototype, "ieeeXtreme11ContestSummary", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: 1200,
            // backgroundColor: "#ddd",
            margin: "0 auto",
            maxWidth: "100%"
        };
    }
}), _descriptor8$19 = _applyDecoratedDescriptor$55(_class4$11.prototype, "logoSectionContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexDirection: Device.isMobileDevice() || window.innerWidth < 1125 ? "column" : "row"
        };
    }
}), _descriptor9$15 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sectionContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexDirection: Device.isMobileDevice() || window.innerWidth < 850 ? "column" : "row"
        };
    }
}), _descriptor10$13 = _applyDecoratedDescriptor$55(_class4$11.prototype, "logoContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            // width: "100%",
            display: "flex",
            justifyContent: "center",
            alignItems: "center"
        };
    }
}), _descriptor11$11 = _applyDecoratedDescriptor$55(_class4$11.prototype, "image", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: Device.isMobileDevice() ? "100%" : 450
        };
    }
}), _descriptor12$9 = _applyDecoratedDescriptor$55(_class4$11.prototype, "countdown", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: Device.isMobileDevice() ? "100%" : 670
        };
    }
}), _descriptor13$9 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sectionTitleContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            marginTop: 30
        };
    }
}), _descriptor14$9 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sectionTitle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            // width: 32,
            lineHeight: 30,
            paddingBottom: 20,

            textAlign: "center",
            fontSize: 25,

            borderBottom: "2px solid " + IEEE_PRIMARY_COLOR$1,

            display: "flex",
            justifyContent: "center",

            color: IEEE_SECONDARY_COLOR,
            marginTop: Device.isMobileDevice() ? 0 : 30,
            marginBottom: 20
        };
    }
}), _descriptor15$8 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sponsorsAndPartners", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center"
        };
    }
}), _descriptor16$8 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sponsorContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: 200,
            color: "inherit",
            cursor: "pointer",
            width: "40%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "space-between"
        };
    }
}), _descriptor17$8 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sponsorImageContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flex: 1
        };
    }
}), _descriptor18$5 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sponsorImage", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: 120,
            display: "flex"
        };
    }
}), _descriptor19$5 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sponsorName", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            // alignItems: "center",
            paddingTop: 10,
            flex: 1,
            textAlign: "center",
            fontSize: 17,
            maxHeight: 50,
            letterSpacing: 0.5
        };
    }
}), _descriptor20$5 = _applyDecoratedDescriptor$55(_class4$11.prototype, "textSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: 17,
            // paddingLeft: "5%",
            // paddingRight: "5%",
            textAlign: "justify",
            lineHeight: 22,
            letterSpacing: 0.5,
            display: "flex",
            flexDirection: "column",
            flex: 1,
            paddingLeft: 30,
            paddingRight: 30
        };
    }
}), _descriptor21$3 = _applyDecoratedDescriptor$55(_class4$11.prototype, "sponsorsAndPartnersLogosContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center"
        };
    }
}), _descriptor22$2 = _applyDecoratedDescriptor$55(_class4$11.prototype, "infoLinesContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            flexWrap: "wrap",
            flexDirection: "row",
            width: "100%",
            justifyContent: "center"
        };
    }
}), _descriptor23$2 = _applyDecoratedDescriptor$55(_class4$11.prototype, "infoLine", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "50%",
            textAlign: "center",
            color: IEEE_PRIMARY_COLOR$1,
            fontSize: 15,
            fontWeight: 700
        };
    }
}), _class4$11);

var IEEEXtreme11ContestSummary = (_dec2$25 = registerStyle(IEEEXtreme11ContestSummaryStyle), _dec2$25(_class6$5 = function (_ContestSummary) {
    inherits(IEEEXtreme11ContestSummary, _ContestSummary);

    function IEEEXtreme11ContestSummary() {
        classCallCheck(this, IEEEXtreme11ContestSummary);
        return possibleConstructorReturn(this, (IEEEXtreme11ContestSummary.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestSummary)).apply(this, arguments));
    }

    createClass(IEEEXtreme11ContestSummary, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(IEEEXtreme11ContestSummary.prototype.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestSummary.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.ieeeXtreme11ContestSummary);
        }
    }, {
        key: "getRegisterButton",
        value: function getRegisterButton() {
            return null;
        }
    }, {
        key: "renderInfoLines",
        value: function renderInfoLines() {
            var _this7 = this;

            var stats = this.getContest().getStatistics() || {};
            var infoLines = [{ label: UI.T("Teams Registered"), value: this.getContest().getNumUsers() || "N/A" }, { label: UI.T("Users Online"), value: stats.numUsersOnline || "N/A" }, { label: UI.T("Submissions"), value: stats.numSubmissions || "N/A" }, { label: UI.T("Compiles"), value: stats.numCompiles || "N/A" }, { label: UI.T("Example Runs"), value: stats.numExampleRuns || "N/A" }, { label: UI.T("Custom Runs"), value: stats.numCustomRuns || "N/A" }].filter(function (infoLine) {
                return infoLine.value !== "0" && infoLine.value !== "N/A";
            });

            return UI.createElement(
                "div",
                { className: this.styleSheet.infoLinesContainer },
                infoLines.map(function (infoLine) {
                    return UI.createElement(
                        "div",
                        { className: _this7.styleSheet.infoLine },
                        infoLine.label,
                        " - ",
                        infoLine.value
                    );
                })
            );
        }
    }, {
        key: "getSectionTitle",
        value: function getSectionTitle(title) {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.sectionTitleContainer },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sectionTitle },
                    title
                )
            )];
        }
    }, {
        key: "getSponsor",
        value: function getSponsor(name, imageURL, websiteURL) {
            return [UI.createElement(
                Link,
                { className: this.styleSheet.sponsorContainer, href: websiteURL, newTab: true },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sponsorImageContainer },
                    UI.createElement(Image$1, { src: imageURL, className: this.styleSheet.sponsorImage })
                ),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sponsorName },
                    name
                )
            )];
        }
    }, {
        key: "getUnauthenticated",
        value: function getUnauthenticated() {
            if (USER.isAuthenticated) {
                return null;
            }
            return UI.createElement(
                "div",
                { className: this.styleSheet.sectionContainer, style: { alignItems: "flex-start" } },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.textSection },
                    this.getSectionTitle("Sign in"),
                    UI.createElement(
                        "p",
                        null,
                        "You must login using your team account from the official email to continue to IEEEXtreme 11.0:"
                    ),
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.loginContainer },
                        UI.createElement(IEEELoginWidget, null)
                    )
                ),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.textSection },
                    this.getSectionTitle("Forgot password?"),
                    UI.createElement(
                        "p",
                        null,
                        "Enter your email address below, and an email with further instructions on how to reset your password will be sent to all members of your team:"
                    ),
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.loginContainer },
                        UI.createElement(IEEEPasswordResetRequestWidget, null)
                    )
                )
            );
        }
    }, {
        key: "getAboutIEEEXtreme",
        value: function getAboutIEEEXtreme() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.textSection },
                this.getSectionTitle("IEEEXtreme"),
                UI.createElement(
                    "p",
                    null,
                    "IEEEXtreme is a global challenge in which teams of IEEE Student members \u2013 advised and proctored by an IEEE member, and often supported by an IEEE Student Branch \u2013 compete in a 24-hour time span against each other to solve a set of programming problems."
                ),
                UI.createElement(
                    "p",
                    null,
                    "See the full IEEEXtreme 11.0 rules ",
                    UI.createElement(
                        Link,
                        { href: "http://ieeextreme.org/rules/", newTab: true },
                        "here"
                    ),
                    "."
                )
            )];
        }
    }, {
        key: "getPlatformHelp",
        value: function getPlatformHelp() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.textSection },
                this.getSectionTitle("Programming Environment"),
                UI.createElement(
                    "p",
                    null,
                    "You can find out more about the CS Academy environment from the ",
                    UI.createElement(
                        Link,
                        { href: "/about", newTab: true },
                        " about page"
                    ),
                    "."
                ),
                UI.createElement(
                    "p",
                    null,
                    "To familiarize yourself with the platform, and try to solve some problems with the past IEEEXtreme competitions, please access the ",
                    UI.createElement(
                        Link,
                        { href: "/ieeextreme-practice/", newTab: true },
                        "the practice community"
                    ),
                    "."
                )
            )];
        }
    }, {
        key: "getPartners",
        value: function getPartners() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.sponsorsAndPartners },
                this.getSectionTitle("Partners"),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sponsorsAndPartnersLogosContainer },
                    this.getSponsor("CS Academy", "https://publicmedia1.csacademy.com/public/1507825790-2709659969.png", "https://csacademy.com/"),
                    this.getSponsor("IEEE Women in Engineering (WIE)", "https://publicmedia1.csacademy.com/public/1507825773-4126646961.png", "http://wie.ieee.org/")
                )
            ), UI.createElement("div", { style: { paddingBottom: 50 } })];
        }
    }, {
        key: "getSponsors",
        value: function getSponsors() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.sponsorsAndPartners },
                this.getSectionTitle("Sponsors"),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sponsorsAndPartnersLogosContainer },
                    this.getSponsor("Digi-Key", "https://publicmedia1.csacademy.com/public/1507825798-3658821305.png", "https://www.digikey.com/"),
                    this.getSponsor("Das Keyboard", "https://publicmedia1.csacademy.com/public/1507825798-1062166350.png", "https://www.daskeyboard.com/"),
                    this.getSponsor("SyncFusion", "https://publicmedia1.csacademy.com/public/1507825798-1786594109.png", "https://www.syncfusion.com/?utm_source=Code_Camps_User_Groups&utm_medium=listing&utm_campaign=ieeextremeoct17")
                )
            )];
        }
    }, {
        key: "getLogo",
        value: function getLogo() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.logoContainer + " " + this.styleSheet.textSection },
                UI.createElement(Image$1, { src: IEEEXtreme11LogoSrc, className: this.styleSheet.image }),
                this.renderInfoLines()
            );
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.logoSectionContainer },
                this.getLogo(),
                UI.createElement(IEEEXtremeContestCountdown, { contest: this.getContest(), className: this.styleSheet.countdown + " " + this.styleSheet.textSection })
            ), this.getUnauthenticated(), UI.createElement(
                "div",
                { className: this.styleSheet.sectionContainer, style: { alignItems: "flex-start" } },
                this.getAboutIEEEXtreme(),
                this.getPlatformHelp()
            ), UI.createElement(
                "div",
                { className: this.styleSheet.sectionContainer },
                this.getPartners(),
                this.getSponsors()
            ), UI.createElement(
                "div",
                { className: this.styleSheet.sectionContainer },
                UI.createElement(
                    "div",
                    { style: { marginTop: 30 } },
                    UI.createElement("hr", null),
                    UI.createElement(
                        "h4",
                        null,
                        "For any technical issues, please send an email to contact@csacademy.com"
                    ),
                    UI.createElement(
                        "h4",
                        null,
                        "Please try to provide as many details as possible for your problem (OS, browser, steps to reproduce, etc)."
                    ),
                    UI.createElement(
                        "h4",
                        null,
                        "Have a great contest experience!"
                    )
                )
            ), UI.createElement("div", { style: { height: 50, width: "100%" } })];
        }
    }]);
    return IEEEXtreme11ContestSummary;
}(ContestSummary)) || _class6$5);

var IEEEXtremeUserHandle = function (_UserHandle) {
    inherits(IEEEXtremeUserHandle, _UserHandle);

    function IEEEXtremeUserHandle() {
        classCallCheck(this, IEEEXtremeUserHandle);
        return possibleConstructorReturn(this, (IEEEXtremeUserHandle.__proto__ || Object.getPrototypeOf(IEEEXtremeUserHandle)).apply(this, arguments));
    }

    createClass(IEEEXtremeUserHandle, [{
        key: "getRatingColor",
        value: function getRatingColor() {
            var contestTeam = this.options.contestTeam;


            if (contestTeam.ieeeTeamType === 3) {
                // proctor
                return enhance(IEEE_SECONDARY_COLOR, 0.3);
            }
            return enhance(IEEE_PRIMARY_COLOR$1, 0.3);
        }
    }]);
    return IEEEXtremeUserHandle;
}(UserHandle);

var IEEETeamType = {
    OFFICIAL: 1,
    LATE_REGISTRATION: 2,
    PROCTOR: 3,
    HIGH_SCHOOL: 4
};

var IEEERegion = {
    "R1": "(R1) Northeastern US",
    "R2": "(R2) Eastern US",
    "R3": "(R3) Southern US",
    "R4": "(R4) Central US",
    "R5": "(R5) Southwestern US",
    "R6": "(R6) Western US",
    "R7": "(R7) Canada",
    "R8": "(R8) Africa, Europe, Middle East",
    "R9": "(R9) Latin America",
    "R0": "(R10) Asia and Pacific"
};

var IEEEXtremeContestUsersFilter = function (_ContestUsersFilter) {
    inherits(IEEEXtremeContestUsersFilter, _ContestUsersFilter);

    function IEEEXtremeContestUsersFilter() {
        classCallCheck(this, IEEEXtremeContestUsersFilter);
        return possibleConstructorReturn(this, (IEEEXtremeContestUsersFilter.__proto__ || Object.getPrototypeOf(IEEEXtremeContestUsersFilter)).apply(this, arguments));
    }

    createClass(IEEEXtremeContestUsersFilter, [{
        key: "render",
        value: function render() {
            var teamTypeOptions = [["Teams", new Set([IEEETeamType.OFFICIAL, IEEETeamType.LATE_REGISTRATION])], ["Proctor", new Set([IEEETeamType.PROCTOR])], ["High School", new Set([IEEETeamType.HIGH_SCHOOL])]].map(function (_ref) {
                var _ref2 = slicedToArray(_ref, 2),
                    name = _ref2[0],
                    typeSet = _ref2[1];

                return {
                    toString: function toString() {
                        return name;
                    },
                    typeSet: typeSet
                };
            });

            var regions = [];
            regions.push({
                toString: function toString() {
                    return "All regions";
                },
                region: ""
            });

            var _loop = function _loop(key) {
                regions.push({
                    toString: function toString() {
                        return IEEERegion[key];
                    },
                    region: key
                });
            };

            for (var key in IEEERegion) {
                _loop(key);
            }

            return [UI.createElement(Select, { ref: "filterUsers", style: { height: "2.2em", marginLeft: "10px" },
                options: teamTypeOptions, selected: teamTypeOptions[0] }), UI.createElement(Select, { ref: "filterCountry", style: { height: "2.2em", marginLeft: "10px" },
                options: this.options.contest.getCountries() }), UI.createElement(Select, { ref: "filterRegion", style: { height: "2.2em", marginLeft: "10px" },
                options: regions }), UI.createElement(TextInput, { ref: "findTeamInput", style: { height: "2.03em", marginLeft: "10px", verticalAlign: "middle" },
                placeholder: "Find team..." })];
        }
    }, {
        key: "getFilter",
        value: function getFilter() {
            var _this2 = this;

            this.options.findUser = this.findTeamInput.getValue();
            this.options.countryIdFilter = this.filterCountry.get().id;
            this.options.regionIdFilter = this.filterRegion.get().region;

            return function (contestTeam) {
                var keywords = _this2.options.findUser.trim().toLowerCase();
                var publicUser = PublicUserStore.get(contestTeam.userId);

                var teamTypeSet = _this2.filterUsers.get().typeSet;
                var ieeeTeamType = contestTeam.ieeeTeamType; // TODO: get from contest user

                if (!teamTypeSet.has(ieeeTeamType)) {
                    return false;
                }
                // TODO: Public user should have been in state.
                if (!publicUser) {
                    return false;
                }
                if (keywords !== "") {
                    if ((publicUser.name || "").toLowerCase().indexOf(keywords) == -1 && (publicUser.username || "").toLowerCase().indexOf(keywords) == -1) {
                        return false;
                    }
                }
                if (_this2.options.countryIdFilter && publicUser.countryId !== _this2.options.countryIdFilter) {
                    return false;
                }
                // check this one, might be regionIdFilter - 1
                if (_this2.options.regionIdFilter && contestTeam.region !== _this2.options.regionIdFilter) {
                    return false;
                }
                return true;
            };
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this3 = this;

            this.filterUsers.addChangeListener(function () {
                _this3.updateFilter();
            });
            this.filterCountry.addChangeListener(function () {
                _this3.updateFilter();
            });
            this.filterRegion.addChangeListener(function () {
                _this3.updateFilter();
            });
            this.findTeamInput.addNodeListener("keyup", function () {
                _this3.updateFilter();
            });

            this.updateFilter();

            var updateThrottler = new CallThrottler({ throttle: 300 });
            var updateCountryFilterThrottled = updateThrottler.wrap(function () {
                return _this3.filterCountry.updateOptions({ options: _this3.options.contest.getCountries() });
            });
            this.attachListener(this.options.contest, "contestUserUpdate", updateCountryFilterThrottled);
        }
    }]);
    return IEEEXtremeContestUsersFilter;
}(ContestUsersFilter);

var IEEEXtremeContestUsersTable = function (_ContestUsersTable) {
    inherits(IEEEXtremeContestUsersTable, _ContestUsersTable);

    function IEEEXtremeContestUsersTable() {
        classCallCheck(this, IEEEXtremeContestUsersTable);
        return possibleConstructorReturn(this, (IEEEXtremeContestUsersTable.__proto__ || Object.getPrototypeOf(IEEEXtremeContestUsersTable)).apply(this, arguments));
    }

    createClass(IEEEXtremeContestUsersTable, [{
        key: "getUniversityAndRegionColumns",
        value: function getUniversityAndRegionColumns() {
            var centerStyle = {
                textAlign: "left",
                margin: "auto",
                verticalAlign: "middle"
            };

            var columns = [{
                value: function value(contestTeam) {
                    return contestTeam.university || "-";
                },
                rawValue: function rawValue(contestTeam) {
                    return contestTeam.university || "-";
                },
                headerName: "University",
                sortDescending: true,
                headerStyle: centerStyle,
                cellStyle: centerStyle
            }, {
                value: function value(contestTeam) {
                    return contestTeam.region && IEEERegion[contestTeam.region] || "-";
                },
                rawValue: function rawValue(contestTeam) {
                    return contestTeam.region && IEEERegion[contestTeam.region] || "-";
                },
                headerName: "Region",
                sortDescending: true,
                headerStyle: centerStyle,
                cellStyle: centerStyle
            }];

            return columns;
        }
    }, {
        key: "getUserColumn",
        value: function getUserColumn() {
            var centerStyle = {
                textAlign: "left",
                margin: "auto",
                verticalAlign: "middle"
            };

            return [{
                value: function value(contestTeam) {
                    var handle = UI.createElement(IEEEXtremeUserHandle, { userId: contestTeam.userId,
                        contestTeam: contestTeam,
                        showCountry: true,
                        noPopup: true });

                    if (!contestTeam.getContest().isVirtual()) {
                        return handle;
                    } else {
                        //TODO: refactor this to update every minute
                        return UI.createElement(
                            "span",
                            null,
                            handle,
                            " virtual ",
                            contestTeam.getContestStartTime() < ServerTime.now().unix() && ServerTime.now().unix() < contestTeam.getContestEndTime() ? new Duration((ServerTime.now().unix() - contestTeam.getContestStartTime()) * 1000).format("HH:mm") : ""
                        );
                    }
                },
                rawValue: function rawValue(contestTeam) {
                    return contestTeam.getPublicUser().username || "publicuser-" + contestTeam.userId;
                },
                headerName: "Team",
                sortDescending: true,
                headerStyle: centerStyle,
                cellStyle: centerStyle
            }];
        }
    }, {
        key: "getColumns",
        value: function getColumns() {
            var numberStyle = {
                textAlign: "right",
                width: "1%",
                verticalAlign: "middle"
            };

            var centerStyle = {
                textAlign: "left",
                margin: "auto",
                verticalAlign: "middle"
            };

            var columns = [{
                value: function value(contestTeam, index) {
                    return index + 1;
                },
                headerName: "#",
                sortDescending: false,
                headerStyle: { verticalAlign: "middle" },
                cellStyle: numberStyle
            }].concat(toConsumableArray(this.getUserColumn()), toConsumableArray(this.getUniversityAndRegionColumns()));

            if (this.options.contest.hasStarted()) {
                columns.push({
                    value: function value(contestTeam) {
                        return contestTeam.totalScore;
                    },
                    rawValue: function rawValue(contestTeam) {
                        return contestTeam.totalScore;
                    },
                    headerName: "Total Score",
                    sortDescending: true,
                    headerStyle: centerStyle,
                    cellStyle: centerStyle
                });
            }

            return columns;
        }
    }]);
    return IEEEXtremeContestUsersTable;
}(ContestUsersTable);

var IEEEXtremeScoreboardEntriesManager = function (_ScoreboardEntriesMan) {
    inherits(IEEEXtremeScoreboardEntriesManager, _ScoreboardEntriesMan);

    function IEEEXtremeScoreboardEntriesManager() {
        classCallCheck(this, IEEEXtremeScoreboardEntriesManager);
        return possibleConstructorReturn(this, (IEEEXtremeScoreboardEntriesManager.__proto__ || Object.getPrototypeOf(IEEEXtremeScoreboardEntriesManager)).apply(this, arguments));
    }

    createClass(IEEEXtremeScoreboardEntriesManager, [{
        key: "cacheEntries",
        value: function cacheEntries() {
            var entries = this.filterEntries(this.getRawEntries());
            Contest.calculateRanks(entries);
            this.cachedEntries = this.sortEntries(entries);
            this.dispatch("update");
        }
    }]);
    return IEEEXtremeScoreboardEntriesManager;
}(ScoreboardEntriesManager);

var IEEEXtremeScoreboardTable = function (_ScoreboardTable) {
    inherits(IEEEXtremeScoreboardTable, _ScoreboardTable);

    function IEEEXtremeScoreboardTable() {
        classCallCheck(this, IEEEXtremeScoreboardTable);
        return possibleConstructorReturn(this, (IEEEXtremeScoreboardTable.__proto__ || Object.getPrototypeOf(IEEEXtremeScoreboardTable)).apply(this, arguments));
    }

    createClass(IEEEXtremeScoreboardTable, [{
        key: "shouldShowTaskColumns",
        value: function shouldShowTaskColumns() {
            return this.options.showFullScoreboard;
        }
    }, {
        key: "getEntriesManager",
        value: function getEntriesManager() {
            if (!this.entriesManager) {
                this.entriesManager = new IEEEXtremeScoreboardEntriesManager(this.options.contest, this.options.virtualContest, this.getComparator());
            }
            return this.entriesManager;
        }
    }, {
        key: "renderContestUserAndContestTaskCell",
        value: function renderContestUserAndContestTaskCell(contestUser, contestTask) {
            var _this7 = this;

            if (!contestUser.scores) {
                return "-";
            }

            var userTaskSummary = contestUser.scores[contestTask.id];
            if (this.options.virtualContest) {
                var virtualContestTask = contestTask.getVirtualTask();
                userTaskSummary = userTaskSummary || contestUser.scores[virtualContestTask.id];
            }
            if (!userTaskSummary) {
                return "-";
            }

            var userScore = userTaskSummary.score || 0;
            var score = void 0,
                penalty = void 0;
            if (contestTask.hasPartialScore()) {
                score = UI.createElement(
                    "span",
                    null,
                    Formatter.truncate(userScore * contestTask.pointsWorth, 2)
                );
            } else if (userScore == 1) {
                score = UI.createElement("span", { className: "fa fa-check fa-lg", style: { color: "green" } });
            } else {
                score = UI.createElement("span", { className: "fa fa-times fa-lg", style: { color: "red" } });
            }
            if (contestTask.hasPenalty()) {
                var contestStartTime = StemDate(contestUser.getContestStartTime());
                var solutionTime = StemDate(userTaskSummary.scoreTime);
                var solutionTimeRelative = solutionTime.diffDuration(contestStartTime);
                if (contestTask.hasPartialScore() || userScore == 1) {
                    penalty = UI.createElement(
                        "div",
                        { style: { fontSize: "0.8em", color: "grey" } },
                        solutionTimeRelative.format("HH:mm")
                    );
                }
            }
            return UI.createElement(
                "div",
                { onClick: function onClick() {
                        return _this7.showSubmissions(contestUser, contestTask);
                    } },
                [score, penalty]
            );
        }
    }, {
        key: "getColumns",
        value: function getColumns() {
            var columns = get(IEEEXtremeScoreboardTable.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeScoreboardTable.prototype), "getColumns", this).call(this);

            columns.splice.apply(columns, [1, 1].concat(toConsumableArray(this.getUserColumn())));
            if (!this.options.showFullScoreboard) {
                columns.splice.apply(columns, [3, 0].concat(toConsumableArray(this.getUniversityAndRegionColumns())));
            }

            return columns;
        }
    }]);
    return IEEEXtremeScoreboardTable;
}(ScoreboardTable);

IEEEXtremeScoreboardTable.prototype.getUniversityAndRegionColumns = IEEEXtremeContestUsersTable.prototype.getUniversityAndRegionColumns;
IEEEXtremeScoreboardTable.prototype.getUserColumn = IEEEXtremeContestUsersTable.prototype.getUserColumn;

var IEEEXtremeScoreboard = function (_Scoreboard) {
    inherits(IEEEXtremeScoreboard, _Scoreboard);

    function IEEEXtremeScoreboard() {
        classCallCheck(this, IEEEXtremeScoreboard);
        return possibleConstructorReturn(this, (IEEEXtremeScoreboard.__proto__ || Object.getPrototypeOf(IEEEXtremeScoreboard)).apply(this, arguments));
    }

    createClass(IEEEXtremeScoreboard, [{
        key: "getContestUsersFilter",
        value: function getContestUsersFilter() {
            return UI.createElement(IEEEXtremeContestUsersFilter, { ref: "contestUsersFilter", contest: this.options.contest });
        }
    }, {
        key: "getContestUsersTableClass",
        value: function getContestUsersTableClass() {
            return IEEEXtremeContestUsersTable;
        }
    }, {
        key: "getScoreboardTableClass",
        value: function getScoreboardTableClass() {
            return IEEEXtremeScoreboardTable;
        }
    }, {
        key: "toggleScoreboard",
        value: function toggleScoreboard() {
            this.showFullScoreboard = !this.showFullScoreboard;

            this.showFullScoreboardButton.setLabel("Show scores on tasks");
            if (this.showFullScoreboard) {
                this.showFullScoreboardButton.setLabel("Show region & university");
            }

            this.scoreboardTable.updateOptions({
                showFullScoreboard: this.showFullScoreboard
            });
        }
    }, {
        key: "getScoreboardActionableArea",
        value: function getScoreboardActionableArea() {
            var _this9 = this;

            var button = void 0;
            if (this.options.contest.hasStarted()) {
                button = UI.createElement(Button, { ref: "showFullScoreboardButton",
                    onClick: function onClick() {
                        return _this9.toggleScoreboard();
                    },
                    label: "Show scores on tasks",
                    style: { marginLeft: "10px", height: "2.2em", paddingTop: 0, paddingBottom: 0 },
                    level: Level.PRIMARY,
                    size: Size.SMALL });
            }
            return [get(IEEEXtremeScoreboard.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeScoreboard.prototype), "getScoreboardActionableArea", this).call(this), button];
        }
    }]);
    return IEEEXtremeScoreboard;
}(Scoreboard);

var IEEEXtreme11ContestTaskSummaryPanel = function (_ContestTaskSummaryPa) {
    inherits(IEEEXtreme11ContestTaskSummaryPanel, _ContestTaskSummaryPa);

    function IEEEXtreme11ContestTaskSummaryPanel() {
        classCallCheck(this, IEEEXtreme11ContestTaskSummaryPanel);
        return possibleConstructorReturn(this, (IEEEXtreme11ContestTaskSummaryPanel.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestTaskSummaryPanel)).apply(this, arguments));
    }

    createClass(IEEEXtreme11ContestTaskSummaryPanel, [{
        key: "render",
        value: function render() {
            var renderedChildren = get(IEEEXtreme11ContestTaskSummaryPanel.prototype.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestTaskSummaryPanel.prototype), "render", this).call(this);
            var logoStyle = {
                maxWidth: "360px",
                marginBottom: "-10px"
            };
            return [UI.createElement(
                "div",
                { style: { textAlign: "center" } },
                UI.createElement("img", { style: logoStyle, src: IEEEXtreme11LogoSrc })
            ), renderedChildren];
        }
    }]);
    return IEEEXtreme11ContestTaskSummaryPanel;
}(ContestTaskSummaryPanel);

var IEEEXtreme11ContestTaskPanel = function (_DelayedContestTaskPa) {
    inherits(IEEEXtreme11ContestTaskPanel, _DelayedContestTaskPa);

    function IEEEXtreme11ContestTaskPanel() {
        classCallCheck(this, IEEEXtreme11ContestTaskPanel);
        return possibleConstructorReturn(this, (IEEEXtreme11ContestTaskPanel.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestTaskPanel)).apply(this, arguments));
    }

    createClass(IEEEXtreme11ContestTaskPanel, [{
        key: "getContestTaskSummaryPanelClass",
        value: function getContestTaskSummaryPanelClass() {
            return IEEEXtreme11ContestTaskSummaryPanel;
        }
    }]);
    return IEEEXtreme11ContestTaskPanel;
}(DelayedContestTaskPanel);

var _class$117, _descriptor$54, _descriptor2$48, _descriptor3$42, _descriptor4$38, _descriptor5$34, _descriptor6$29, _descriptor7$24, _descriptor8$20, _descriptor9$16, _descriptor10$14, _dec$60, _class3$42, _class4$12, _descriptor11$12, _descriptor12$10, _descriptor13$10, _descriptor14$10, _descriptor15$9, _descriptor16$9, _descriptor17$9, _descriptor18$6, _dec2$26, _class6$6;

function _initDefineProp$55(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$56(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var formatFloat = function formatFloat(score) {
    score = Math.ceil(parseFloat(score) * 100);
    if (score % 100 === 0) {
        return parseInt(score / 100);
    } else if (score % 10 === 0) {
        return parseFloat(score / 100).toFixed(1);
    } else {
        return parseFloat(score / 100).toFixed(2);
    }
};

function hiddenBelowWidth(width) {
    return window.innerWidth <= width ? "none !important" : null;
}

var IEEEXtremeContestTaskBubbleStyle = (_class$117 = function (_ContestTaskBubbleSty) {
    inherits(IEEEXtremeContestTaskBubbleStyle, _ContestTaskBubbleSty);

    function IEEEXtremeContestTaskBubbleStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, IEEEXtremeContestTaskBubbleStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = IEEEXtremeContestTaskBubbleStyle.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTaskBubbleStyle)).call.apply(_ref, [this].concat(args))), _this), _this.height = 100, _initDefineProp$55(_this, "className", _descriptor$54, _this), _initDefineProp$55(_this, "timeAdded", _descriptor2$48, _this), _initDefineProp$55(_this, "averageScore", _descriptor3$42, _this), _initDefineProp$55(_this, "attemptsCount", _descriptor4$38, _this), _initDefineProp$55(_this, "taskDescription", _descriptor5$34, _this), _initDefineProp$55(_this, "taskName", _descriptor6$29, _this), _initDefineProp$55(_this, "pointsWorth", _descriptor7$24, _this), _initDefineProp$55(_this, "attempted", _descriptor8$20, _this), _initDefineProp$55(_this, "average", _descriptor9$16, _this), _initDefineProp$55(_this, "userScore", _descriptor10$14, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return IEEEXtremeContestTaskBubbleStyle;
}(ContestTaskBubbleStyle), _descriptor$54 = _applyDecoratedDescriptor$56(_class$117.prototype, "className", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            flexDirection: "row"
        };
    }
}), _descriptor2$48 = _applyDecoratedDescriptor$56(_class$117.prototype, "timeAdded", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            color: "#999",
            fontSize: "14px",
            lineHeight: this.height / 2,
            textAlign: "left"
        };
    }
}), _descriptor3$42 = _applyDecoratedDescriptor$56(_class$117.prototype, "averageScore", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            lineHeight: this.height / 2,
            fontSize: "30px",
            marginTop: "15px",
            marginBottom: "-15px"
        };
    }
}), _descriptor4$38 = _applyDecoratedDescriptor$56(_class$117.prototype, "attemptsCount", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            lineHeight: this.height / 2
        };
    }
}), _descriptor5$34 = _applyDecoratedDescriptor$56(_class$117.prototype, "taskDescription", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            flex: "1",
            paddingLeft: "5%",
            overflow: "hidden",
            position: "relative"
        };
    }
}), _descriptor6$29 = _applyDecoratedDescriptor$56(_class$117.prototype, "taskName", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            textAlign: "left",
            paddingLeft: 0,
            marginBottom: "-10px",
            marginTop: "10px"
        };
    }
}), _descriptor7$24 = _applyDecoratedDescriptor$56(_class$117.prototype, "pointsWorth", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: "94px",
            fontSize: "20px",
            fontWeight: "bold",
            color: "black",
            display: hiddenBelowWidth(672)
        };
    }
}), _descriptor8$20 = _applyDecoratedDescriptor$56(_class$117.prototype, "attempted", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: hiddenBelowWidth(772),
            minWidth: "100px"
        };
    }
}), _descriptor9$16 = _applyDecoratedDescriptor$56(_class$117.prototype, "average", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: hiddenBelowWidth(872),
            minWidth: "90px"
        };
    }
}), _descriptor10$14 = _applyDecoratedDescriptor$56(_class$117.prototype, "userScore", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: "100px"
        };
    }
}), _class$117);

var IEEEXtremeContestTaskBubble = (_dec$60 = registerStyle(IEEEXtremeContestTaskBubbleStyle), _dec$60(_class3$42 = function (_ContestTaskBubble) {
    inherits(IEEEXtremeContestTaskBubble, _ContestTaskBubble);

    function IEEEXtremeContestTaskBubble() {
        classCallCheck(this, IEEEXtremeContestTaskBubble);
        return possibleConstructorReturn(this, (IEEEXtremeContestTaskBubble.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTaskBubble)).apply(this, arguments));
    }

    createClass(IEEEXtremeContestTaskBubble, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return Object.assign({}, get(IEEEXtremeContestTaskBubble.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTaskBubble.prototype), "getDefaultOptions", this).call(this), {
                circleStrokeWidth: 4,
                circlePadding: 4
            });
        }
    }, {
        key: "getTaskDescriptionSection",
        value: function getTaskDescriptionSection() {
            var _this3 = this;

            var timeAdded = this.getContestTask().getBroadcastDelay();
            var timeAddedMessage = void 0;
            if (timeAdded > 0) {
                timeAddedMessage = "added after " + Formatter.duration(timeAdded, {
                    hours: true,
                    minutes: true,
                    lastSeparator: " and "
                });
            } else {
                timeAddedMessage = "added at contest start";
            }
            var newLabel = void 0;
            var duration = ServerTime.now().diffDuration(this.getContestTask().getTimeAvailable());
            if (timeAdded > 0 && duration.toMinutes() < 10) {
                newLabel = UI.createElement(Label, { label: "NEW !", level: Level.DANGER, style: {
                        position: "absolute",
                        left: "-28px",
                        top: "14px",
                        padding: "0 30px",
                        transform: "rotate(-45deg)",
                        pointerEvents: "none",
                        userSelect: "none"
                    } });
                setTimeout(function () {
                    return _this3.redraw();
                }, 10 * 60 * 1000 - duration.toMilliseconds() + 2000);
            }
            return UI.createElement(
                "div",
                { className: this.styleSheet.taskDescription },
                newLabel,
                UI.createElement(
                    "div",
                    { className: this.styleSheet.taskName },
                    UI.T(this.getContestTask().longName)
                ),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.timeAdded },
                    timeAddedMessage
                )
            );
        }
    }, {
        key: "getPointsWorthSection",
        value: function getPointsWorthSection() {
            var pointsWorth = formatFloat(this.getContestTask().pointsWorth);
            return UI.createElement(
                "div",
                { className: this.styleSheet.pointsWorth, ref: "pointsWorth" },
                pointsWorth
            );
        }
    }, {
        key: "getCircleArgs",
        value: function getCircleArgs() {
            return Object.assign({}, get(IEEEXtremeContestTaskBubble.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTaskBubble.prototype), "getCircleArgs", this).call(this), {
                radius: (this.styleSheet.height * 0.8 - this.options.circleStrokeWidth) / 2 - this.options.circlePadding,
                stroke: this.getScoreColor(this.getContestTask().getContest().getUser(USER.id).scores[this.getContestTask().id].score)
            });
        }
    }, {
        key: "getSVGContent",
        value: function getSVGContent(firstText, secondText, hasCircle, circleRatio) {
            var fill = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "black";

            var circle = void 0;
            if (hasCircle) {
                circle = this.getCircleArc(circleRatio);
            }
            return [circle, UI.createElement(SVG.Text, { x: this.styleSheet.height / 2, y: this.styleSheet.height / 2 - 9,
                text: firstText, fontSize: "16", fill: fill }), UI.createElement(SVG.Text, { x: this.styleSheet.height / 2, y: this.styleSheet.height / 2 + 9,
                text: secondText, fontSize: "10", fill: fill })];
        }
    }, {
        key: "getUserScoreSection",
        value: function getUserScoreSection() {
            var contestTask = this.getContestTask();
            var contestUser = contestTask.getContest().getUser(USER.id);
            var pointsSVG = void 0;

            if (contestUser && contestUser.scores && contestUser.scores[contestTask.id]) {
                var scoreRatio = contestUser.scores[contestTask.id].score;
                var score = formatFloat(scoreRatio * this.getContestTask().pointsWorth);
                var scorePercent = formatFloat(scoreRatio * 100) + "%";
                pointsSVG = UI.createElement(
                    SVG.SVGRoot,
                    { height: this.styleSheet.height, width: this.styleSheet.height },
                    this.getSVGContent(score + "p", scorePercent, true, scoreRatio, this.getScoreColor(scoreRatio))
                );
            }
            return UI.createElement(
                "div",
                { className: this.styleSheet.userScore },
                pointsSVG
            );
        }
    }, {
        key: "getAttemptedSection",
        value: function getAttemptedSection() {
            var content = void 0;
            var userCount = this.getContestTask().getContest().getUsers().filter(function (contestUser) {
                return contestUser.ieeeTeamType <= 2;
            }).length;
            if (this.getContestTask().getContest()._loadedScoreboard) {
                var attemptsRatio = this.attemptsCount / userCount;
                var attemptsPercent = formatFloat(attemptsRatio ? attemptsRatio * 100 : 0) + "%";
                var attemptsMessage = this.attemptsCount ? this.attemptsCount == 1 ? "1 team" : this.attemptsCount + " teams" : "no attempts";
                content = UI.createElement(
                    SVG.SVGRoot,
                    { height: this.styleSheet.height, width: this.styleSheet.height },
                    this.getSVGContent(attemptsPercent, attemptsMessage, false, 0)
                );
            }
            return UI.createElement(
                "div",
                { className: this.styleSheet.attempted, ref: "attempted" },
                content
            );
        }
    }, {
        key: "redraw",
        value: function redraw() {
            var _this4 = this;

            if (!this.redrawThrottler) {
                this.redrawThrottler = new CallThrottler({ throttle: 1000 });
                this.redrawThrottled = this.redrawThrottler.wrap(function () {
                    return get(IEEEXtremeContestTaskBubble.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTaskBubble.prototype), "redraw", _this4).call(_this4);
                });
            }
            this.redrawThrottled();
        }
    }, {
        key: "getAverageSection",
        value: function getAverageSection() {
            var content = void 0;
            if (this.getContestTask().getContest()._loadedScoreboard) {
                var average = this.attemptsCount ? this.averageScore + "p" : "-";
                var averageRatio = this.averageScore / this.getContestTask().pointsWorth;
                var averagePercent = formatFloat(averageRatio * 100) + "%";
                content = UI.createElement(
                    SVG.SVGRoot,
                    { height: this.styleSheet.height, width: this.styleSheet.height },
                    this.getSVGContent(average, averagePercent, false, 0)
                );
            }
            return UI.createElement(
                "div",
                { className: this.styleSheet.average, ref: "averageScore" },
                content
            );
        }
    }, {
        key: "computeStatistics",
        value: function computeStatistics() {
            var count = 0,
                sum = 0;
            var contestTask = this.getContestTask();
            var users = contestTask.getContest().getUsers().filter(function (contestUser) {
                return contestUser.ieeeTeamType <= 2;
            });
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = users[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var user = _step.value;

                    if (user.scores && user.scores[contestTask.id]) {
                        count += 1;
                        sum += user.scores[contestTask.id].score;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.attemptsCount = count;
            this.averageScore = formatFloat(count ? sum / count * this.getContestTask().pointsWorth : 0);
        }
    }, {
        key: "render",
        value: function render() {
            this.computeStatistics();
            return [this.getTaskDescriptionSection(), this.getUserScoreSection(), this.getPointsWorthSection(), this.getAttemptedSection(), this.getAverageSection()];
        }
    }, {
        key: "getScoreColor",
        value: function getScoreColor(percent) {
            var colorSuccess = "#185f9c";
            var colorDanger = "#e2722d";
            return Color.interpolate(colorDanger, colorSuccess, percent);
            if (percent < 0.5) {
                return Color.interpolate(colorDanger, colorWarning, 2 * percent);
            }
            return Color.interpolate(colorWarning, colorSuccess, 2 * percent - 1);
        }
    }]);
    return IEEEXtremeContestTaskBubble;
}(ContestTaskBubble)) || _class3$42);

var IEEEXtremeColumnContentGetters = function (_ColumnContentGetters) {
    inherits(IEEEXtremeColumnContentGetters, _ColumnContentGetters);

    function IEEEXtremeColumnContentGetters() {
        classCallCheck(this, IEEEXtremeColumnContentGetters);
        return possibleConstructorReturn(this, (IEEEXtremeColumnContentGetters.__proto__ || Object.getPrototypeOf(IEEEXtremeColumnContentGetters)).apply(this, arguments));
    }

    createClass(IEEEXtremeColumnContentGetters, null, [{
        key: "getTimeAdded",
        value: function getTimeAdded(contestTask, isArchive) {
            // TODO: Add code for Archive when needed.
            return contestTask.getBroadcastDelay();
        }
    }, {
        key: "getAverageScore",
        value: function getAverageScore(contestTask, isArchive) {
            // TODO: Add code for Archive when needed.
            var count = 0,
                sum = 0;
            var users = contestTask.getContest().getUsers().filter(function (contestUser) {
                return contestUser.ieeeTeamType <= 2;
            });
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = users[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var user = _step2.value;

                    if (user.scores && user.scores[contestTask.id]) {
                        count += 1;
                        sum += user.scores[contestTask.id].score;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return sum / count;
        }
    }, {
        key: "getPointsWorth",
        value: function getPointsWorth(contestTask, isArchive) {
            return contestTask.pointsWorth;
        }
    }, {
        key: "getTried",
        value: function getTried(contestTask, isArchive) {
            var users = contestTask.getContest().getUsers().filter(function (contestUser) {
                return contestUser.ieeeTeamType <= 2;
            });
            var tried = 0;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = users[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var user = _step3.value;

                    if (user.scores && user.scores[contestTask.id]) {
                        tried += 1;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return tried;
        }
    }]);
    return IEEEXtremeColumnContentGetters;
}(ColumnContentGetters);

var IEEEXtremeContestTaskListHeaderStyle = (_class4$12 = function (_ContestTaskListHeade) {
    inherits(IEEEXtremeContestTaskListHeaderStyle, _ContestTaskListHeade);

    function IEEEXtremeContestTaskListHeaderStyle() {
        var _ref2;

        var _temp2, _this6, _ret2;

        classCallCheck(this, IEEEXtremeContestTaskListHeaderStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this6 = possibleConstructorReturn(this, (_ref2 = IEEEXtremeContestTaskListHeaderStyle.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTaskListHeaderStyle)).call.apply(_ref2, [this].concat(args))), _this6), _initDefineProp$55(_this6, "className", _descriptor11$12, _this6), _initDefineProp$55(_this6, "timeAdded", _descriptor12$10, _this6), _initDefineProp$55(_this6, "taskDescription", _descriptor13$10, _this6), _initDefineProp$55(_this6, "userScore", _descriptor14$10, _this6), _initDefineProp$55(_this6, "pointsWorth", _descriptor15$9, _this6), _initDefineProp$55(_this6, "attempted", _descriptor16$9, _this6), _initDefineProp$55(_this6, "averageScore", _descriptor17$9, _this6), _initDefineProp$55(_this6, "taskName", _descriptor18$6, _this6), _temp2), possibleConstructorReturn(_this6, _ret2);
    }

    return IEEEXtremeContestTaskListHeaderStyle;
}(ContestTaskListHeaderStyle), _descriptor11$12 = _applyDecoratedDescriptor$56(_class4$12.prototype, "className", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            textAlign: "left"
        };
    }
}), _descriptor12$10 = _applyDecoratedDescriptor$56(_class4$12.prototype, "timeAdded", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: this.height,
            lineHeight: this.height + "px",
            minWidth: "34%",
            color: "rgb(55,55,55)",
            fontSize: "14px"
        };
    }
}), _descriptor13$10 = _applyDecoratedDescriptor$56(_class4$12.prototype, "taskDescription", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            flex: "1",
            flexDirection: "row"
        };
    }
}), _descriptor14$10 = _applyDecoratedDescriptor$56(_class4$12.prototype, "userScore", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: "100px"
        };
    }
}), _descriptor15$9 = _applyDecoratedDescriptor$56(_class4$12.prototype, "pointsWorth", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: "94px",
            display: hiddenBelowWidth(672)
        };
    }
}), _descriptor16$9 = _applyDecoratedDescriptor$56(_class4$12.prototype, "attempted", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: "100px",
            display: hiddenBelowWidth(872)
        };
    }
}), _descriptor17$9 = _applyDecoratedDescriptor$56(_class4$12.prototype, "averageScore", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: "90px",
            display: hiddenBelowWidth(772)
        };
    }
}), _descriptor18$6 = _applyDecoratedDescriptor$56(_class4$12.prototype, "taskName", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "-10px"
        };
    }
}), _class4$12);
var IEEEXtremeTaskListHeader = (_dec2$26 = registerStyle(IEEEXtremeContestTaskListHeaderStyle), _dec2$26(_class6$6 = function (_ContestTaskListHeade2) {
    inherits(IEEEXtremeTaskListHeader, _ContestTaskListHeade2);

    function IEEEXtremeTaskListHeader() {
        classCallCheck(this, IEEEXtremeTaskListHeader);
        return possibleConstructorReturn(this, (IEEEXtremeTaskListHeader.__proto__ || Object.getPrototypeOf(IEEEXtremeTaskListHeader)).apply(this, arguments));
    }

    createClass(IEEEXtremeTaskListHeader, [{
        key: "createSortableHeaders",
        value: function createSortableHeaders() {
            this.NameSort = SortableHeaderMixin(this, IEEEXtremeColumnContentGetters.getName);
            this.ScoreSort = SortableHeaderMixin(this, IEEEXtremeColumnContentGetters.getScore, this.NameSort.cmp);
            this.AttemptedSort = SortableHeaderMixin(this, IEEEXtremeColumnContentGetters.getTried, this.NameSort.cmp);
            this.PointsWorthSort = SortableHeaderMixin(this, IEEEXtremeColumnContentGetters.getPointsWorth, this.NameSort.cmp);
            this.TimeAddedSort = SortableHeaderMixin(this, IEEEXtremeColumnContentGetters.getTimeAdded, this.NameSort.cmp);
            this.AverageScoreSort = SortableHeaderMixin(this, IEEEXtremeColumnContentGetters.getAverageScore, this.NameSort.cmp);
        }
    }, {
        key: "render",
        value: function render() {
            var _headers;

            this.headers = [];
            var name = UI.createElement(this.NameSort, { name: UI.T("Task"), className: this.styleSheet.taskName, style: { marginRight: "2px", display: "inline-block" } });
            var timeAdded = UI.createElement(this.TimeAddedSort, { name: UI.T("Time added"), state: -1 });
            var score = UI.createElement(this.ScoreSort, { name: UI.T("Your score"), className: this.styleSheet.userScore });
            var pointsWorth = UI.createElement(this.PointsWorthSort, { ref: "pointsWorth", name: UI.T("Points worth"), className: this.styleSheet.pointsWorth });
            var attempted = UI.createElement(this.AttemptedSort, { ref: "attempted", name: UI.T("Teams tried"), className: this.styleSheet.attempted });
            var averageScore = UI.createElement(this.AverageScoreSort, { ref: "averageScore", name: UI.T("Average score"), className: this.styleSheet.averageScore });
            (_headers = this.headers).push.apply(_headers, [name, score, timeAdded, attempted, averageScore]);
            return [UI.createElement(
                "div",
                { className: this.styleSheet.className },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.taskDescription },
                    name,
                    "|",
                    timeAdded
                ),
                score,
                pointsWorth,
                attempted,
                averageScore
            )];
        }
    }]);
    return IEEEXtremeTaskListHeader;
}(ContestTaskListHeader)) || _class6$6);

var NextTaskIntervalCounter = function (_UI$Element) {
    inherits(NextTaskIntervalCounter, _UI$Element);

    function NextTaskIntervalCounter() {
        classCallCheck(this, NextTaskIntervalCounter);
        return possibleConstructorReturn(this, (NextTaskIntervalCounter.__proto__ || Object.getPrototypeOf(NextTaskIntervalCounter)).apply(this, arguments));
    }

    createClass(NextTaskIntervalCounter, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    textAlign: "center"
                }
            };
        }
    }, {
        key: "render",
        value: function render() {
            var nextTaskAnnouncement = void 0;
            var nextTaskUnix = this.options.contest.getNextTaskTimestamp();
            var formatUnit = function formatUnit(value) {
                if (value <= 9) {
                    return "0" + value;
                }
                return value;
            };

            if (nextTaskUnix) {
                var diff = (nextTaskUnix - ServerTime.now().unix()) * 1000;
                if (diff >= -30 * 1000) {
                    if (diff < 0) {
                        diff = 0;
                    }
                    var diffDuration = new Duration(diff);
                    var diffFormat = formatUnit(diffDuration.getHours()) + ":" + formatUnit(diffDuration.getMinutes()) + ":" + formatUnit(diffDuration.getSeconds());
                    var message = "Next task will be added in " + diffFormat;
                    nextTaskAnnouncement = UI.createElement(
                        "h3",
                        null,
                        message
                    );
                }
            }
            return nextTaskAnnouncement;
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this9 = this;

            this.interval = setInterval(function () {
                return _this9.redraw();
            }, 1000);
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            clearInterval(this.interval);
        }
    }]);
    return NextTaskIntervalCounter;
}(UI.Element);

var IEEEXtremeContestTasksList = function (_ContestTaskList) {
    inherits(IEEEXtremeContestTasksList, _ContestTaskList);

    function IEEEXtremeContestTasksList() {
        classCallCheck(this, IEEEXtremeContestTasksList);
        return possibleConstructorReturn(this, (IEEEXtremeContestTasksList.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTasksList)).apply(this, arguments));
    }

    createClass(IEEEXtremeContestTasksList, [{
        key: "getHeader",
        value: function getHeader() {
            return UI.createElement(IEEEXtremeTaskListHeader, { ref: "header", isArchive: this.options.isArchive, contest: this.getContest() });
        }
    }, {
        key: "getContestTaskBubble",
        value: function getContestTaskBubble(task) {
            return UI.createElement(IEEEXtremeContestTaskBubble, { key: task.id, isArchive: this.options.isArchive, contestTask: task });
        }
    }, {
        key: "handleResize",
        value: function handleResize() {
            if (window.innerWidth > 1106) {
                this.setStyle("margin", null);
            }
            if (window.innerWidth <= 1106) {
                this.setStyle("margin", "0");
            }
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(NextTaskIntervalCounter, { contest: this.getContest() })].concat(toConsumableArray(get(IEEEXtremeContestTasksList.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTasksList.prototype), "render", this).call(this)));
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this11 = this;

            get(IEEEXtremeContestTasksList.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeContestTasksList.prototype), "onMount", this).call(this);
            this.handleResize();
            window.addEventListener("resize", function () {
                return _this11.handleResize();
            });
        }
    }]);
    return IEEEXtremeContestTasksList;
}(ContestTaskList);

var IEEEXtremeContestScoreTracker = function (_ContestScoreTracker) {
    inherits(IEEEXtremeContestScoreTracker, _ContestScoreTracker);

    function IEEEXtremeContestScoreTracker() {
        classCallCheck(this, IEEEXtremeContestScoreTracker);
        return possibleConstructorReturn(this, (IEEEXtremeContestScoreTracker.__proto__ || Object.getPrototypeOf(IEEEXtremeContestScoreTracker)).apply(this, arguments));
    }

    createClass(IEEEXtremeContestScoreTracker, [{
        key: "officialOrLateRegistration",
        value: function officialOrLateRegistration(user) {
            return user.ieeeTeamType === IEEETeamType.OFFICIAL || user.ieeeTeamType === IEEETeamType.LATE_REGISTRATION;
        }
    }, {
        key: "getRankText",
        value: function getRankText() {
            var _this2 = this;

            if (!this.options.loadedScoreboard) {
                return;
            }

            var contest = this.getContest();
            var user = this.getContestUser();
            var contestUsers = contest.getBaseContest().getUsers();

            if (this.officialOrLateRegistration(user)) {
                contestUsers = contestUsers.filter(function (contestUser) {
                    return _this2.officialOrLateRegistration(contestUser);
                });
            }

            var rank = 1;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = contestUsers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestUser = _step.value;

                    if (ContestUser.compare(user, contestUser) > 0) {
                        rank += 1;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return "Rank " + rank + " / " + contestUsers.length;
        }
    }]);
    return IEEEXtremeContestScoreTracker;
}(ContestScoreTracker);

var IEEEXtremeTopLevelContestNavigationHandler = function (_TopLevelContestNavig) {
    inherits(IEEEXtremeTopLevelContestNavigationHandler, _TopLevelContestNavig);

    function IEEEXtremeTopLevelContestNavigationHandler() {
        classCallCheck(this, IEEEXtremeTopLevelContestNavigationHandler);
        return possibleConstructorReturn(this, (IEEEXtremeTopLevelContestNavigationHandler.__proto__ || Object.getPrototypeOf(IEEEXtremeTopLevelContestNavigationHandler)).apply(this, arguments));
    }

    createClass(IEEEXtremeTopLevelContestNavigationHandler, [{
        key: "getTasksDropdownElements",
        value: function getTasksDropdownElements() {
            return [];
        }
    }, {
        key: "createRankInfo",
        value: function createRankInfo() {
            var tracker = UI.createElement(IEEEXtremeContestScoreTracker, { contest: this.contest, loadedScoreboard: this.contestPanel._loadedScoreboard });
            this.contestPanel.attachListener(tracker, "update", function () {
                return NavManager.Global.checkForWrap();
            });
            return UI.createElement(NavElement, { value: tracker, key: "rank" });
        }
    }, {
        key: "getLeftChildren",
        value: function getLeftChildren() {
            var leftChildren = get(IEEEXtremeTopLevelContestNavigationHandler.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeTopLevelContestNavigationHandler.prototype), "getLeftChildren", this).call(this);
            leftChildren.push(this.createHelp());
            leftChildren.push(this.createPhotos());
            return leftChildren;
        }
    }, {
        key: "createHelp",
        value: function createHelp() {
            return UI.createElement(NavLinkElement, { href: this.getURLPrefix("help"), key: "help", value: UI.T("Help") });
        }
    }, {
        key: "createPhotos",
        value: function createPhotos() {
            return UI.createElement(NavLinkElement, { href: this.getURLPrefix("photos"), key: "photos", value: UI.T("Photos") });
        }
    }]);
    return IEEEXtremeTopLevelContestNavigationHandler;
}(TopLevelContestNavigationHandler);

var IEEEXtreme11ContestPanel = function (_ContestPanel) {
    inherits(IEEEXtreme11ContestPanel, _ContestPanel);
    createClass(IEEEXtreme11ContestPanel, [{
        key: "getURLPrefix",
        value: function getURLPrefix(str) {
            var url = "/" + this.getContest().name + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }]);

    function IEEEXtreme11ContestPanel() {
        var _ref;

        classCallCheck(this, IEEEXtreme11ContestPanel);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this4 = possibleConstructorReturn(this, (_ref = IEEEXtreme11ContestPanel.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestPanel)).call.apply(_ref, [this].concat(args)));

        _this4.navHandler = new IEEEXtremeTopLevelContestNavigationHandler(_this4.getContest(), _this4);
        return _this4;
    }

    createClass(IEEEXtreme11ContestPanel, [{
        key: "getSummaryPanel",
        value: function getSummaryPanel() {
            return UI.createElement(IEEEXtreme11ContestSummary, { contest: this.getContest() });
        }
    }, {
        key: "getScoreboardPanel",
        value: function getScoreboardPanel() {
            return this.getContest().canShowScoreboard() && UI.createElement(IEEEXtremeScoreboard, { ref: this.refLink("scoreboard"),
                contest: this.getBaseContest(),
                virtualContest: this.getVirtualContest(),
                originalContest: this.getContest() });
        }
    }, {
        key: "getTasksListPanel",
        value: function getTasksListPanel() {
            return UI.createElement(IEEEXtremeContestTasksList, { ref: this.refLink("contestTaskList"), contest: this.getContest(), isArchive: false,
                className: GlobalStyle.Container.SMALL });
        }
    }, {
        key: "getContestTaskPanel",
        value: function getContestTaskPanel(contestTask) {
            return UI.createElement(IEEEXtreme11ContestTaskPanel, { contestTaskId: contestTask.id });
        }
    }, {
        key: "getHelpPage",
        value: function getHelpPage() {
            return UI.createElement(RecursiveArticleRenderer, { articleId: 1417 });
        }
    }, {
        key: "getPhotosPage",
        value: function getPhotosPage() {
            return UI.createElement(RecursiveArticleRenderer, { articleId: 1418 });
        }
    }, {
        key: "getSubroutes",
        value: function getSubroutes() {
            var _this5 = this;

            var subroutes = get(IEEEXtreme11ContestPanel.prototype.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestPanel.prototype), "getSubroutes", this).call(this);
            subroutes.push(new Route("help", function () {
                return _this5.getHelpPage();
            }, [], "Help"));
            subroutes.push(new Route("photos", function () {
                return _this5.getPhotosPage();
            }, [], "Photos"));
            return subroutes;
        }
    }]);
    return IEEEXtreme11ContestPanel;
}(ContestPanel);

var IEEEXtremeTopLevelUnauthenticatedNavigationHandler = function (_IEEEXtremeTopLevelCo) {
    inherits(IEEEXtremeTopLevelUnauthenticatedNavigationHandler, _IEEEXtremeTopLevelCo);

    function IEEEXtremeTopLevelUnauthenticatedNavigationHandler() {
        classCallCheck(this, IEEEXtremeTopLevelUnauthenticatedNavigationHandler);
        return possibleConstructorReturn(this, (IEEEXtremeTopLevelUnauthenticatedNavigationHandler.__proto__ || Object.getPrototypeOf(IEEEXtremeTopLevelUnauthenticatedNavigationHandler)).apply(this, arguments));
    }

    createClass(IEEEXtremeTopLevelUnauthenticatedNavigationHandler, [{
        key: "getLeftChildren",
        value: function getLeftChildren() {
            return [UI.createElement(NavLinkElement, { href: this.getURLPrefix("summary"), key: "summary",
                value: UI.T("Summary") }), this.createPhotos()];
        }
    }, {
        key: "getRightChildren",
        value: function getRightChildren() {
            return [];
        }
    }, {
        key: "createPhotos",
        value: function createPhotos() {
            return UI.createElement(NavLinkElement, { href: this.getURLPrefix("photos"), key: "photos", value: UI.T("Photos") });
        }
    }]);
    return IEEEXtremeTopLevelUnauthenticatedNavigationHandler;
}(IEEEXtremeTopLevelContestNavigationHandler);

var IEEEXtreme11Unauthenticated = function (_Router) {
    inherits(IEEEXtreme11Unauthenticated, _Router);

    function IEEEXtreme11Unauthenticated() {
        var _ref2;

        classCallCheck(this, IEEEXtreme11Unauthenticated);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var _this7 = possibleConstructorReturn(this, (_ref2 = IEEEXtreme11Unauthenticated.__proto__ || Object.getPrototypeOf(IEEEXtreme11Unauthenticated)).call.apply(_ref2, [this].concat(args)));

        _this7.navHandler = new IEEEXtremeTopLevelUnauthenticatedNavigationHandler(_this7.getContest(), _this7);
        return _this7;
    }

    createClass(IEEEXtreme11Unauthenticated, [{
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "getURLPrefix",
        value: function getURLPrefix(str) {
            var url = "/" + this.getContest().name + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            var _this8 = this;

            this.routes = this.routes || new Route(null, function () {
                return _this8.getSummaryPanel();
            }, this.getSubroutes());
            return this.routes;
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    height: "100%"
                }
            };
        }
    }, {
        key: "getSummaryPanel",
        value: function getSummaryPanel() {
            return UI.createElement(IEEEXtreme11ContestSummary, { contest: this.getContest() });
        }
    }, {
        key: "getPhotosPage",
        value: function getPhotosPage() {
            return UI.createElement(RecursiveArticleRenderer, { articleId: 1418 });
        }
    }, {
        key: "getSubroutes",
        value: function getSubroutes() {
            var _this9 = this;

            return [new Route("summary", function () {
                return _this9.getSummaryPanel();
            }), new Route("photos", function () {
                return _this9.getPhotosPage();
            }, [], "Photos")];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(IEEEXtreme11Unauthenticated.prototype.__proto__ || Object.getPrototypeOf(IEEEXtreme11Unauthenticated.prototype), "onMount", this).call(this);

            this.navHandler.apply();
        }
    }]);
    return IEEEXtreme11Unauthenticated;
}(Router);

var IEEEXtreme11ContestPanelWrapper = function (_DelayedArchiveOrCont) {
    inherits(IEEEXtreme11ContestPanelWrapper, _DelayedArchiveOrCont);

    function IEEEXtreme11ContestPanelWrapper() {
        classCallCheck(this, IEEEXtreme11ContestPanelWrapper);
        return possibleConstructorReturn(this, (IEEEXtreme11ContestPanelWrapper.__proto__ || Object.getPrototypeOf(IEEEXtreme11ContestPanelWrapper)).apply(this, arguments));
    }

    createClass(IEEEXtreme11ContestPanelWrapper, [{
        key: "renderUnauthenticated",
        value: function renderUnauthenticated() {
            return UI.createElement(IEEEXtreme11Unauthenticated, { ref: "child", contest: ContestStore.get(this.contestId) });
        }
    }, {
        key: "dispatchUrlChange",
        value: function dispatchUrlChange() {
            var _this11 = this;

            setTimeout(function () {
                if (!_this11.options.error) {
                    _this11.child.setURL(_this11.urlParts);
                }
            });
        }
    }, {
        key: "renderLoaded",
        value: function renderLoaded() {
            if (!USER.isAuthenticated) {
                return this.renderUnauthenticated();
            }
            if (this.options.error) {
                return this.renderError();
            }
            return UI.createElement(IEEEXtreme11ContestPanel, { contestId: this.contestId, ref: "child" });
        }
    }]);
    return IEEEXtreme11ContestPanelWrapper;
}(DelayedArchiveOrContestPanel);

var _class$118, _descriptor$55, _descriptor2$49, _descriptor3$43, _descriptor4$39, _descriptor5$35, _descriptor6$30, _dec$61, _class3$43, _class4$13, _descriptor7$25, _descriptor8$21, _descriptor9$17, _descriptor10$15, _descriptor11$13, _descriptor12$11, _descriptor13$11, _descriptor14$11, _descriptor15$10, _descriptor16$10, _descriptor17$10, _descriptor18$7, _descriptor19$6, _descriptor20$6, _descriptor21$4, _descriptor22$3, _descriptor23$3, _dec2$27, _class6$7;

function _initDefineProp$56(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$57(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var IEEE_PRIMARY_COLOR$2 = "#185e9c";
var IEEE_SECONDARY_COLOR$1 = "#FF8D3A";

var IEEEXtreme12LogoSrc = "https://publicmedia1.csacademy.com/public/1539332480-711642356.png";

var IEEELoginStyle$1 = (_class$118 = function (_LoginStyle) {
    inherits(IEEELoginStyle, _LoginStyle);

    function IEEELoginStyle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, IEEELoginStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = IEEELoginStyle.__proto__ || Object.getPrototypeOf(IEEELoginStyle)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$56(_this, "loginWidget", _descriptor$55, _this), _initDefineProp$56(_this, "forgotPassword", _descriptor2$49, _this), _initDefineProp$56(_this, "signInButtonContainer", _descriptor3$43, _this), _initDefineProp$56(_this, "signInButton", _descriptor4$39, _this), _initDefineProp$56(_this, "rememberMeContainer", _descriptor5$35, _this), _initDefineProp$56(_this, "input", _descriptor6$30, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return IEEELoginStyle;
}(LoginStyle), _descriptor$55 = _applyDecoratedDescriptor$57(_class$118.prototype, "loginWidget", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: 0,
            width: "auto",
            height: "auto"
        };
    }
}), _descriptor2$49 = _applyDecoratedDescriptor$57(_class$118.prototype, "forgotPassword", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            visibility: "hidden"
        };
    }
}), _descriptor3$43 = _applyDecoratedDescriptor$57(_class$118.prototype, "signInButtonContainer", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: "auto"
        };
    }
}), _descriptor4$39 = _applyDecoratedDescriptor$57(_class$118.prototype, "signInButton", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: IEEE_PRIMARY_COLOR$2,
            color: enhance(IEEE_PRIMARY_COLOR$2, 1),
            minWidth: "initial",
            paddingLeft: 20,
            paddingRight: 20,
            outline: "none",
            ":hover": {
                backgroundColor: enhance(IEEE_PRIMARY_COLOR$2, 0.15),
                color: enhance(IEEE_PRIMARY_COLOR$2, 1),
                border: 0
            }
        };
    }
}), _descriptor5$35 = _applyDecoratedDescriptor$57(_class$118.prototype, "rememberMeContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            marginLeft: "29px"
        };
    }
}), _descriptor6$30 = _applyDecoratedDescriptor$57(_class$118.prototype, "input", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "inherit !important",
            borderBottom: "2px solid " + IEEE_PRIMARY_COLOR$2,
            borderRadius: "0 !important",
            ":hover": {
                borderBottom: "2px solid " + IEEE_PRIMARY_COLOR$2 + " !important"
            },
            ":focus": {
                borderBottom: "2px solid " + IEEE_PRIMARY_COLOR$2 + " !important"
            }
        };
    }
}), _class$118);

var IEEELoginWidget$1 = (_dec$61 = registerStyle(IEEELoginStyle$1), _dec$61(_class3$43 = function (_LoginWidget) {
    inherits(IEEELoginWidget, _LoginWidget);

    function IEEELoginWidget() {
        classCallCheck(this, IEEELoginWidget);
        return possibleConstructorReturn(this, (IEEELoginWidget.__proto__ || Object.getPrototypeOf(IEEELoginWidget)).apply(this, arguments));
    }

    createClass(IEEELoginWidget, [{
        key: "getThirdPartyLogin",
        value: function getThirdPartyLogin() {}
    }, {
        key: "getClearBothArea",
        value: function getClearBothArea() {}
    }, {
        key: "getRememberMeCheckbox",
        value: function getRememberMeCheckbox() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.rememberMeContainer },
                get(IEEELoginWidget.prototype.__proto__ || Object.getPrototypeOf(IEEELoginWidget.prototype), "getRememberMeCheckbox", this).call(this)
            );
        }
    }]);
    return IEEELoginWidget;
}(LoginWidget)) || _class3$43);

var IEEEPasswordResetRequestWidget$1 = function (_IEEELoginWidget) {
    inherits(IEEEPasswordResetRequestWidget, _IEEELoginWidget);

    function IEEEPasswordResetRequestWidget() {
        classCallCheck(this, IEEEPasswordResetRequestWidget);
        return possibleConstructorReturn(this, (IEEEPasswordResetRequestWidget.__proto__ || Object.getPrototypeOf(IEEEPasswordResetRequestWidget)).apply(this, arguments));
    }

    createClass(IEEEPasswordResetRequestWidget, [{
        key: "getSignInValue",
        value: function getSignInValue() {
            return "Request password reset";
        }
    }, {
        key: "sendLogin",
        value: function sendLogin() {
            var _this4 = this;

            this.clearErrorMessage();
            var data = {
                email: this.emailInput.getValue()
            };
            Ajax.postJSON("/ieee_password_reset_request/", data).then(function () {
                return _this4.setErrorMessage({ message: "An email was sent to all members of your team." }, false);
            }, function (error) {
                return _this4.setErrorMessage(error);
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "form",
                { ref: "form" },
                this.getEmailInput("envelope"),
                this.getSignInButton(),
                UI.createElement("div", { style: { clear: "both", height: "20px" } }),
                this.getErrorArea()
            )];
        }
    }]);
    return IEEEPasswordResetRequestWidget;
}(IEEELoginWidget$1);

var IEEEXtreme12ContestSummaryStyle = (_class4$13 = function (_StyleSheet) {
    inherits(IEEEXtreme12ContestSummaryStyle, _StyleSheet);

    function IEEEXtreme12ContestSummaryStyle() {
        var _ref2;

        var _temp2, _this5, _ret2;

        classCallCheck(this, IEEEXtreme12ContestSummaryStyle);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        return _ret2 = (_temp2 = (_this5 = possibleConstructorReturn(this, (_ref2 = IEEEXtreme12ContestSummaryStyle.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestSummaryStyle)).call.apply(_ref2, [this].concat(args))), _this5), _initDefineProp$56(_this5, "ieeeXtreme12ContestSummary", _descriptor7$25, _this5), _initDefineProp$56(_this5, "logoSectionContainer", _descriptor8$21, _this5), _initDefineProp$56(_this5, "sectionContainer", _descriptor9$17, _this5), _initDefineProp$56(_this5, "logoContainer", _descriptor10$15, _this5), _initDefineProp$56(_this5, "image", _descriptor11$13, _this5), _initDefineProp$56(_this5, "countdown", _descriptor12$11, _this5), _initDefineProp$56(_this5, "sectionTitleContainer", _descriptor13$11, _this5), _initDefineProp$56(_this5, "sectionTitle", _descriptor14$11, _this5), _initDefineProp$56(_this5, "sponsorsAndPartners", _descriptor15$10, _this5), _initDefineProp$56(_this5, "sponsorContainer", _descriptor16$10, _this5), _initDefineProp$56(_this5, "sponsorImageContainer", _descriptor17$10, _this5), _initDefineProp$56(_this5, "sponsorImage", _descriptor18$7, _this5), _initDefineProp$56(_this5, "sponsorName", _descriptor19$6, _this5), _initDefineProp$56(_this5, "textSection", _descriptor20$6, _this5), _initDefineProp$56(_this5, "sponsorsAndPartnersLogosContainer", _descriptor21$4, _this5), _this5.loginContainer = {
            width: "100%",
            display: "flex",
            flexDirection: "row",
            justifyContent: "space-around"
        }, _initDefineProp$56(_this5, "infoLinesContainer", _descriptor22$3, _this5), _initDefineProp$56(_this5, "infoLine", _descriptor23$3, _this5), _temp2), possibleConstructorReturn(_this5, _ret2);
    }

    return IEEEXtreme12ContestSummaryStyle;
}(StyleSheet), _descriptor7$25 = _applyDecoratedDescriptor$57(_class4$13.prototype, "ieeeXtreme12ContestSummary", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: 1200,
            // backgroundColor: "#ddd",
            margin: "0 auto",
            maxWidth: "100%"
        };
    }
}), _descriptor8$21 = _applyDecoratedDescriptor$57(_class4$13.prototype, "logoSectionContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexDirection: Device.isMobileDevice() || window.innerWidth < 1125 ? "column" : "row"
        };
    }
}), _descriptor9$17 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sectionContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flexDirection: Device.isMobileDevice() || window.innerWidth < 850 ? "column" : "row"
        };
    }
}), _descriptor10$15 = _applyDecoratedDescriptor$57(_class4$13.prototype, "logoContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            // width: "100%",
            display: "flex",
            justifyContent: "center",
            alignItems: "center"
        };
    }
}), _descriptor11$13 = _applyDecoratedDescriptor$57(_class4$13.prototype, "image", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: Device.isMobileDevice() ? "100%" : 450
        };
    }
}), _descriptor12$11 = _applyDecoratedDescriptor$57(_class4$13.prototype, "countdown", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            minWidth: Device.isMobileDevice() ? "100%" : 670
        };
    }
}), _descriptor13$11 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sectionTitleContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            marginTop: 30
        };
    }
}), _descriptor14$11 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sectionTitle", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            // width: 32,
            lineHeight: 30,
            paddingBottom: 20,

            textAlign: "center",
            fontSize: 25,

            borderBottom: "2px solid " + IEEE_PRIMARY_COLOR$2,

            display: "flex",
            justifyContent: "center",

            color: IEEE_SECONDARY_COLOR$1,
            marginTop: Device.isMobileDevice() ? 0 : 30,
            marginBottom: 20
        };
    }
}), _descriptor15$10 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sponsorsAndPartners", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center"
        };
    }
}), _descriptor16$10 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sponsorContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: 200,
            color: "inherit",
            cursor: "pointer",
            width: "40%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "space-between"
        };
    }
}), _descriptor17$10 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sponsorImageContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "100%",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            flex: 1
        };
    }
}), _descriptor18$7 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sponsorImage", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: 120,
            display: "flex"
        };
    }
}), _descriptor19$6 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sponsorName", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center",
            // alignItems: "center",
            paddingTop: 10,
            flex: 1,
            textAlign: "center",
            fontSize: 17,
            maxHeight: 50,
            letterSpacing: 0.5
        };
    }
}), _descriptor20$6 = _applyDecoratedDescriptor$57(_class4$13.prototype, "textSection", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontSize: 17,
            // paddingLeft: "5%",
            // paddingRight: "5%",
            textAlign: "justify",
            lineHeight: 22,
            letterSpacing: 0.5,
            display: "flex",
            flexDirection: "column",
            flex: 1,
            paddingLeft: 30,
            paddingRight: 30
        };
    }
}), _descriptor21$4 = _applyDecoratedDescriptor$57(_class4$13.prototype, "sponsorsAndPartnersLogosContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            justifyContent: "center"
        };
    }
}), _descriptor22$3 = _applyDecoratedDescriptor$57(_class4$13.prototype, "infoLinesContainer", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "flex",
            flexWrap: "wrap",
            flexDirection: "row",
            width: "100%",
            justifyContent: "center"
        };
    }
}), _descriptor23$3 = _applyDecoratedDescriptor$57(_class4$13.prototype, "infoLine", [styleRule], {
    enumerable: true,
    initializer: function initializer() {
        return {
            width: "50%",
            textAlign: "center",
            color: IEEE_PRIMARY_COLOR$2,
            fontSize: 15,
            fontWeight: 700
        };
    }
}), _class4$13);

var IEEEXtreme12ContestSummary = (_dec2$27 = registerStyle(IEEEXtreme12ContestSummaryStyle), _dec2$27(_class6$7 = function (_ContestSummary) {
    inherits(IEEEXtreme12ContestSummary, _ContestSummary);

    function IEEEXtreme12ContestSummary() {
        classCallCheck(this, IEEEXtreme12ContestSummary);
        return possibleConstructorReturn(this, (IEEEXtreme12ContestSummary.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestSummary)).apply(this, arguments));
    }

    createClass(IEEEXtreme12ContestSummary, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(IEEEXtreme12ContestSummary.prototype.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestSummary.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(this.styleSheet.ieeeXtreme12ContestSummary);
        }
    }, {
        key: "getRegisterButton",
        value: function getRegisterButton() {
            return null;
        }
    }, {
        key: "renderInfoLines",
        value: function renderInfoLines() {
            var _this7 = this;

            var stats = this.getContest().getStatistics() || {};
            var infoLines = [{ label: UI.T("Teams Registered"), value: this.getContest().getNumUsers() || "N/A" }, { label: UI.T("Users Online"), value: stats.numUsersOnline || "N/A" }, { label: UI.T("Submissions"), value: stats.numSubmissions || "N/A" }, { label: UI.T("Compiles"), value: stats.numCompiles || "N/A" }, { label: UI.T("Example Runs"), value: stats.numExampleRuns || "N/A" }, { label: UI.T("Custom Runs"), value: stats.numCustomRuns || "N/A" }].filter(function (infoLine) {
                return infoLine.value !== "0" && infoLine.value !== "N/A";
            });

            return UI.createElement(
                "div",
                { className: this.styleSheet.infoLinesContainer },
                infoLines.map(function (infoLine) {
                    return UI.createElement(
                        "div",
                        { className: _this7.styleSheet.infoLine },
                        infoLine.label,
                        " - ",
                        infoLine.value
                    );
                })
            );
        }
    }, {
        key: "getSectionTitle",
        value: function getSectionTitle(title) {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.sectionTitleContainer },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sectionTitle },
                    title
                )
            )];
        }
    }, {
        key: "getSponsor",
        value: function getSponsor(name, imageURL, websiteURL) {
            return [UI.createElement(
                Link,
                { className: this.styleSheet.sponsorContainer, href: websiteURL, newTab: true },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sponsorImageContainer },
                    UI.createElement(Image$1, { src: imageURL, className: this.styleSheet.sponsorImage })
                ),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sponsorName },
                    name
                )
            )];
        }
    }, {
        key: "getUnauthenticated",
        value: function getUnauthenticated() {
            if (USER.isAuthenticated) {
                return null;
            }
            return UI.createElement(
                "div",
                { className: this.styleSheet.sectionContainer, style: { alignItems: "flex-start" } },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.textSection },
                    this.getSectionTitle("Sign in"),
                    UI.createElement(
                        "p",
                        null,
                        "You must login using your team account from the official email to continue to IEEEXtreme 12.0:"
                    ),
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.loginContainer },
                        UI.createElement(IEEELoginWidget$1, null)
                    )
                ),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.textSection },
                    this.getSectionTitle("Forgot password?"),
                    UI.createElement(
                        "p",
                        null,
                        "Enter your email address below, and an email with further instructions on how to reset your password will be sent to all members of your team:"
                    ),
                    UI.createElement(
                        "div",
                        { className: this.styleSheet.loginContainer },
                        UI.createElement(IEEEPasswordResetRequestWidget$1, null)
                    )
                )
            );
        }
    }, {
        key: "getAboutIEEEXtreme",
        value: function getAboutIEEEXtreme() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.textSection },
                this.getSectionTitle("IEEEXtreme"),
                UI.createElement(
                    "p",
                    null,
                    UI.createElement(
                        Link,
                        { href: "https://ieeextreme.org/", newTab: true },
                        "IEEEXtreme"
                    ),
                    " is a global challenge in which teams of IEEE Student members \u2013 advised and proctored by an IEEE member, and often supported by an IEEE Student Branch \u2013 compete in a 24-hour time span against each other to solve a set of programming problems."
                ),
                UI.createElement(
                    "p",
                    null,
                    "See the full IEEEXtreme 12.0 rules ",
                    UI.createElement(
                        Link,
                        { href: "https://ieeextreme.org/rules/", newTab: true },
                        "here"
                    ),
                    "."
                )
            )];
        }
    }, {
        key: "getPlatformHelp",
        value: function getPlatformHelp() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.textSection },
                this.getSectionTitle("Programming Environment"),
                UI.createElement(
                    "p",
                    null,
                    "You can find out more about the CS Academy environment from the ",
                    UI.createElement(
                        Link,
                        { href: "/about", newTab: true },
                        " about page"
                    ),
                    "."
                ),
                UI.createElement(
                    "p",
                    null,
                    "To familiarize yourself with the platform, and try to solve some problems with the past IEEEXtreme competitions, please access the ",
                    UI.createElement(
                        Link,
                        { href: "/ieeextreme-practice/", newTab: true },
                        "the practice community"
                    ),
                    "."
                )
            )];
        }
    }, {
        key: "getPartners",
        value: function getPartners() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.sponsorsAndPartners },
                this.getSectionTitle("Partners"),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sponsorsAndPartnersLogosContainer },
                    this.getSponsor("CS Academy", "https://publicmedia1.csacademy.com/public/1507825790-2709659969.png", "https://csacademy.com/")
                )
            ), UI.createElement("div", { style: { paddingBottom: 50 } })];
        }
    }, {
        key: "getSponsors",
        value: function getSponsors() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.sponsorsAndPartners },
                this.getSectionTitle("Sponsors"),
                UI.createElement(
                    "div",
                    { className: this.styleSheet.sponsorsAndPartnersLogosContainer },
                    this.getSponsor("Digi-Key", "https://publicmedia1.csacademy.com/public/1507825798-3658821305.png", "https://www.digikey.com/"),
                    this.getSponsor("O’Reilly", "https://publicmedia1.csacademy.com/public/1539360542-201526386.svg", "https://www.oreilly.com/"),
                    this.getSponsor("SyncFusion", "https://publicmedia1.csacademy.com/public/1507825798-1786594109.png", "https://www.syncfusion.com/?utm_source=Code_Camps_User_Groups&utm_medium=listing&utm_campaign=ieeextremeoct17")
                )
            )];
        }
    }, {
        key: "getLogo",
        value: function getLogo() {
            return UI.createElement(
                "div",
                { className: this.styleSheet.logoContainer + " " + this.styleSheet.textSection },
                UI.createElement(
                    Link,
                    { href: "https://ieeextreme.org", newTab: true },
                    UI.createElement(Image$1, { src: IEEEXtreme12LogoSrc, className: this.styleSheet.image })
                ),
                this.renderInfoLines()
            );
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "div",
                { className: this.styleSheet.logoSectionContainer },
                this.getLogo(),
                UI.createElement(IEEEXtremeContestCountdown, { contest: this.getContest(), className: this.styleSheet.countdown + " " + this.styleSheet.textSection })
            ), this.getUnauthenticated(), UI.createElement(
                "div",
                { className: this.styleSheet.sectionContainer, style: { alignItems: "flex-start" } },
                this.getAboutIEEEXtreme(),
                this.getPlatformHelp()
            ), UI.createElement(
                "div",
                { className: this.styleSheet.sectionContainer },
                this.getPartners(),
                this.getSponsors()
            ), UI.createElement(
                "div",
                { className: this.styleSheet.sectionContainer },
                UI.createElement(
                    "div",
                    { style: { marginTop: 30 } },
                    UI.createElement("hr", null),
                    UI.createElement(
                        "h4",
                        null,
                        "For any technical issues, please send an email to contact@csacademy.com"
                    ),
                    UI.createElement(
                        "h4",
                        null,
                        "Please try to provide as many details as possible for your problem (OS, browser, steps to reproduce, etc)."
                    ),
                    UI.createElement(
                        "h4",
                        null,
                        "Have a great contest experience!"
                    )
                )
            ), UI.createElement("div", { style: { height: 50, width: "100%" } })];
        }
    }]);
    return IEEEXtreme12ContestSummary;
}(ContestSummary)) || _class6$7);

var IEEEXtreme12ContestTaskSummaryPanel = function (_ContestTaskSummaryPa) {
    inherits(IEEEXtreme12ContestTaskSummaryPanel, _ContestTaskSummaryPa);

    function IEEEXtreme12ContestTaskSummaryPanel() {
        classCallCheck(this, IEEEXtreme12ContestTaskSummaryPanel);
        return possibleConstructorReturn(this, (IEEEXtreme12ContestTaskSummaryPanel.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestTaskSummaryPanel)).apply(this, arguments));
    }

    createClass(IEEEXtreme12ContestTaskSummaryPanel, [{
        key: "render",
        value: function render() {
            var renderedChildren = get(IEEEXtreme12ContestTaskSummaryPanel.prototype.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestTaskSummaryPanel.prototype), "render", this).call(this);
            var logoStyle = {
                maxWidth: "360px",
                marginBottom: "-10px"
            };
            return [UI.createElement(
                "div",
                { style: { textAlign: "center" } },
                UI.createElement("img", { style: logoStyle, src: IEEEXtreme12LogoSrc })
            ), renderedChildren];
        }
    }]);
    return IEEEXtreme12ContestTaskSummaryPanel;
}(ContestTaskSummaryPanel);

var IEEEXtreme12ContestTaskPanel = function (_DelayedContestTaskPa) {
    inherits(IEEEXtreme12ContestTaskPanel, _DelayedContestTaskPa);

    function IEEEXtreme12ContestTaskPanel() {
        classCallCheck(this, IEEEXtreme12ContestTaskPanel);
        return possibleConstructorReturn(this, (IEEEXtreme12ContestTaskPanel.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestTaskPanel)).apply(this, arguments));
    }

    createClass(IEEEXtreme12ContestTaskPanel, [{
        key: "getContestTaskSummaryPanelClass",
        value: function getContestTaskSummaryPanelClass() {
            return IEEEXtreme12ContestTaskSummaryPanel;
        }
    }]);
    return IEEEXtreme12ContestTaskPanel;
}(DelayedContestTaskPanel);

var IEEEXtremeContestScoreTracker$1 = function (_ContestScoreTracker) {
    inherits(IEEEXtremeContestScoreTracker, _ContestScoreTracker);

    function IEEEXtremeContestScoreTracker() {
        classCallCheck(this, IEEEXtremeContestScoreTracker);
        return possibleConstructorReturn(this, (IEEEXtremeContestScoreTracker.__proto__ || Object.getPrototypeOf(IEEEXtremeContestScoreTracker)).apply(this, arguments));
    }

    createClass(IEEEXtremeContestScoreTracker, [{
        key: "officialOrLateRegistration",
        value: function officialOrLateRegistration(user) {
            return user.ieeeTeamType === IEEETeamType.OFFICIAL || user.ieeeTeamType === IEEETeamType.LATE_REGISTRATION;
        }
    }, {
        key: "getRankText",
        value: function getRankText() {
            var _this2 = this;

            if (!this.options.loadedScoreboard) {
                return;
            }

            var contest = this.getContest();
            var user = this.getContestUser();
            var contestUsers = contest.getBaseContest().getUsers();

            if (this.officialOrLateRegistration(user)) {
                contestUsers = contestUsers.filter(function (contestUser) {
                    return _this2.officialOrLateRegistration(contestUser);
                });
            }

            var rank = 1;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = contestUsers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var contestUser = _step.value;

                    if (ContestUser.compare(user, contestUser) > 0) {
                        rank += 1;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return "Rank " + rank + " / " + contestUsers.length;
        }
    }]);
    return IEEEXtremeContestScoreTracker;
}(ContestScoreTracker);

var IEEEXtremeTopLevelContestNavigationHandler$1 = function (_TopLevelContestNavig) {
    inherits(IEEEXtremeTopLevelContestNavigationHandler, _TopLevelContestNavig);

    function IEEEXtremeTopLevelContestNavigationHandler() {
        classCallCheck(this, IEEEXtremeTopLevelContestNavigationHandler);
        return possibleConstructorReturn(this, (IEEEXtremeTopLevelContestNavigationHandler.__proto__ || Object.getPrototypeOf(IEEEXtremeTopLevelContestNavigationHandler)).apply(this, arguments));
    }

    createClass(IEEEXtremeTopLevelContestNavigationHandler, [{
        key: "getTasksDropdownElements",
        value: function getTasksDropdownElements() {
            return [];
        }
    }, {
        key: "createRankInfo",
        value: function createRankInfo() {
            var tracker = UI.createElement(IEEEXtremeContestScoreTracker$1, { contest: this.contest, loadedScoreboard: this.contestPanel._loadedScoreboard });
            this.contestPanel.attachListener(tracker, "update", function () {
                return NavManager.Global.checkForWrap();
            });
            return UI.createElement(NavElement, { value: tracker, key: "rank" });
        }
    }, {
        key: "getLeftChildren",
        value: function getLeftChildren() {
            var leftChildren = get(IEEEXtremeTopLevelContestNavigationHandler.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremeTopLevelContestNavigationHandler.prototype), "getLeftChildren", this).call(this);
            // leftChildren.push(this.createHelp());
            // leftChildren.push(this.createPhotos());
            return leftChildren;
        }
    }, {
        key: "createHelp",
        value: function createHelp() {
            return UI.createElement(NavLinkElement, { href: this.getURLPrefix("help"), key: "help", value: UI.T("Help") });
        }
    }, {
        key: "createPhotos",
        value: function createPhotos() {
            return UI.createElement(NavLinkElement, { href: this.getURLPrefix("photos"), key: "photos", value: UI.T("Photos") });
        }
    }]);
    return IEEEXtremeTopLevelContestNavigationHandler;
}(TopLevelContestNavigationHandler);

var IEEEXtreme12ContestPanel = function (_ContestPanel) {
    inherits(IEEEXtreme12ContestPanel, _ContestPanel);
    createClass(IEEEXtreme12ContestPanel, [{
        key: "getURLPrefix",
        value: function getURLPrefix(str) {
            var url = "/" + this.getContest().name + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }]);

    function IEEEXtreme12ContestPanel() {
        var _ref;

        classCallCheck(this, IEEEXtreme12ContestPanel);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this4 = possibleConstructorReturn(this, (_ref = IEEEXtreme12ContestPanel.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestPanel)).call.apply(_ref, [this].concat(args)));

        _this4.navHandler = new IEEEXtremeTopLevelContestNavigationHandler$1(_this4.getContest(), _this4);
        return _this4;
    }

    createClass(IEEEXtreme12ContestPanel, [{
        key: "getSummaryPanel",
        value: function getSummaryPanel() {
            return UI.createElement(IEEEXtreme12ContestSummary, { contest: this.getContest() });
        }
    }, {
        key: "getScoreboardPanel",
        value: function getScoreboardPanel() {
            return this.getContest().canShowScoreboard() && UI.createElement(IEEEXtremeScoreboard, { ref: this.refLink("scoreboard"),
                contest: this.getBaseContest(),
                virtualContest: this.getVirtualContest(),
                originalContest: this.getContest() });
        }
    }, {
        key: "getTasksListPanel",
        value: function getTasksListPanel() {
            return UI.createElement(IEEEXtremeContestTasksList, { ref: this.refLink("contestTaskList"), contest: this.getContest(), isArchive: false,
                className: GlobalStyle.Container.SMALL });
        }
    }, {
        key: "getContestTaskPanel",
        value: function getContestTaskPanel(contestTask) {
            return UI.createElement(IEEEXtreme12ContestTaskPanel, { contestTaskId: contestTask.id });
        }
    }, {
        key: "getHelpPage",
        value: function getHelpPage() {
            return UI.createElement(RecursiveArticleRenderer, { articleId: 1417 });
        }
    }, {
        key: "getPhotosPage",
        value: function getPhotosPage() {
            return UI.createElement(RecursiveArticleRenderer, { articleId: 1418 });
        }
    }, {
        key: "getSubroutes",
        value: function getSubroutes() {
            var subroutes = get(IEEEXtreme12ContestPanel.prototype.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestPanel.prototype), "getSubroutes", this).call(this);
            // subroutes.push(new Route("help", () => this.getHelpPage(), [], "Help"));
            // subroutes.push(new Route("photos", () => this.getPhotosPage(), [], "Photos"));
            return subroutes;
        }
    }]);
    return IEEEXtreme12ContestPanel;
}(ContestPanel);

var IEEEXtremeTopLevelUnauthenticatedNavigationHandler$1 = function (_IEEEXtremeTopLevelCo) {
    inherits(IEEEXtremeTopLevelUnauthenticatedNavigationHandler, _IEEEXtremeTopLevelCo);

    function IEEEXtremeTopLevelUnauthenticatedNavigationHandler() {
        classCallCheck(this, IEEEXtremeTopLevelUnauthenticatedNavigationHandler);
        return possibleConstructorReturn(this, (IEEEXtremeTopLevelUnauthenticatedNavigationHandler.__proto__ || Object.getPrototypeOf(IEEEXtremeTopLevelUnauthenticatedNavigationHandler)).apply(this, arguments));
    }

    createClass(IEEEXtremeTopLevelUnauthenticatedNavigationHandler, [{
        key: "getLeftChildren",
        value: function getLeftChildren() {
            return [UI.createElement(NavLinkElement, { href: this.getURLPrefix("summary"), key: "summary",
                value: UI.T("Summary") })];
        }
    }, {
        key: "getRightChildren",
        value: function getRightChildren() {
            return [];
        }
    }, {
        key: "createPhotos",
        value: function createPhotos() {
            return UI.createElement(NavLinkElement, { href: this.getURLPrefix("photos"), key: "photos", value: UI.T("Photos") });
        }
    }]);
    return IEEEXtremeTopLevelUnauthenticatedNavigationHandler;
}(IEEEXtremeTopLevelContestNavigationHandler$1);

var IEEEXtreme12Unauthenticated = function (_Router) {
    inherits(IEEEXtreme12Unauthenticated, _Router);

    function IEEEXtreme12Unauthenticated() {
        var _ref2;

        classCallCheck(this, IEEEXtreme12Unauthenticated);

        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var _this6 = possibleConstructorReturn(this, (_ref2 = IEEEXtreme12Unauthenticated.__proto__ || Object.getPrototypeOf(IEEEXtreme12Unauthenticated)).call.apply(_ref2, [this].concat(args)));

        _this6.navHandler = new IEEEXtremeTopLevelUnauthenticatedNavigationHandler$1(_this6.getContest(), _this6);
        return _this6;
    }

    createClass(IEEEXtreme12Unauthenticated, [{
        key: "getContest",
        value: function getContest() {
            return this.options.contest;
        }
    }, {
        key: "getURLPrefix",
        value: function getURLPrefix(str) {
            var url = "/" + this.getContest().name + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            var _this7 = this;

            this.routes = this.routes || new Route(null, function () {
                return _this7.getSummaryPanel();
            }, this.getSubroutes());
            return this.routes;
        }
    }, {
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                style: {
                    height: "100%"
                }
            };
        }
    }, {
        key: "getSummaryPanel",
        value: function getSummaryPanel() {
            return UI.createElement(IEEEXtreme12ContestSummary, { contest: this.getContest() });
        }
    }, {
        key: "getPhotosPage",
        value: function getPhotosPage() {
            return UI.createElement(RecursiveArticleRenderer, { articleId: 1418 });
        }
    }, {
        key: "getSubroutes",
        value: function getSubroutes() {
            var _this8 = this;

            return [new Route("summary", function () {
                return _this8.getSummaryPanel();
            })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            get(IEEEXtreme12Unauthenticated.prototype.__proto__ || Object.getPrototypeOf(IEEEXtreme12Unauthenticated.prototype), "onMount", this).call(this);

            this.navHandler.apply();
        }
    }]);
    return IEEEXtreme12Unauthenticated;
}(Router);

var IEEEXtreme12ContestPanelWrapper = function (_DelayedArchiveOrCont) {
    inherits(IEEEXtreme12ContestPanelWrapper, _DelayedArchiveOrCont);

    function IEEEXtreme12ContestPanelWrapper() {
        classCallCheck(this, IEEEXtreme12ContestPanelWrapper);
        return possibleConstructorReturn(this, (IEEEXtreme12ContestPanelWrapper.__proto__ || Object.getPrototypeOf(IEEEXtreme12ContestPanelWrapper)).apply(this, arguments));
    }

    createClass(IEEEXtreme12ContestPanelWrapper, [{
        key: "renderUnauthenticated",
        value: function renderUnauthenticated() {
            return UI.createElement(IEEEXtreme12Unauthenticated, { ref: "child", contest: ContestStore.get(this.contestId) });
        }
    }, {
        key: "dispatchUrlChange",
        value: function dispatchUrlChange() {
            var _this10 = this;

            setTimeout(function () {
                if (!_this10.options.error) {
                    _this10.child.setURL(_this10.urlParts);
                }
            });
        }
    }, {
        key: "renderLoaded",
        value: function renderLoaded() {
            if (!USER.isAuthenticated) {
                return this.renderUnauthenticated();
            }
            if (this.options.error) {
                return this.renderError();
            }
            return UI.createElement(IEEEXtreme12ContestPanel, { contestId: this.contestId, ref: "child" });
        }
    }]);
    return IEEEXtreme12ContestPanelWrapper;
}(DelayedArchiveOrContestPanel);

var IEEEXTREME_URL = "ieeextreme-practice";

var IEEEXtremePracticeContestSummary = function (_ContestSummary) {
    inherits(IEEEXtremePracticeContestSummary, _ContestSummary);

    function IEEEXtremePracticeContestSummary() {
        classCallCheck(this, IEEEXtremePracticeContestSummary);
        return possibleConstructorReturn(this, (IEEEXtremePracticeContestSummary.__proto__ || Object.getPrototypeOf(IEEEXtremePracticeContestSummary)).apply(this, arguments));
    }

    createClass(IEEEXtremePracticeContestSummary, [{
        key: "getRegisterButton",
        value: function getRegisterButton() {
            return null;
        }
    }, {
        key: "getNeedLoginMessage",
        value: function getNeedLoginMessage() {
            if (USER.isAuthenticated) {
                return;
            }
            return UI.createElement(
                "h4",
                null,
                "You need to be authenticated to submit a solution, please login."
            );
        }
    }, {
        key: "getDescription",
        value: function getDescription() {
            return UI.createElement(
                "div",
                { style: { marginTop: "20px" } },
                UI.createElement(
                    "h3",
                    null,
                    "Welcome to the practice community for IEEEXtreme!"
                ),
                UI.createElement(
                    "h4",
                    null,
                    "Please familiarize yourself with the contest interface."
                ),
                this.getNeedLoginMessage(),
                UI.createElement(
                    "h4",
                    null,
                    "You can read more about the environment your sources will he evaluated with ",
                    UI.createElement(
                        Link,
                        { href: "/about/environment", newTab: true },
                        "here"
                    )
                ),
                UI.createElement(
                    "h4",
                    null,
                    "We recommend you also try the ",
                    UI.createElement(Link, { value: "CS Academy archive", href: "/contest/archive/", newTab: true }),
                    " of problems where you will find some easier, and also not so easy tasks."
                )
            );
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(Image$1, { src: "/static/svg/XtremeLogo_practice_community.svg" }),
            // this.getInfo(false),
            this.getDescription()];
        }
    }]);
    return IEEEXtremePracticeContestSummary;
}(ContestSummary);

var IEEEXtremePracticeNavigationHandler = function (_TopLevelArchiveNavig) {
    inherits(IEEEXtremePracticeNavigationHandler, _TopLevelArchiveNavig);

    function IEEEXtremePracticeNavigationHandler() {
        classCallCheck(this, IEEEXtremePracticeNavigationHandler);
        return possibleConstructorReturn(this, (IEEEXtremePracticeNavigationHandler.__proto__ || Object.getPrototypeOf(IEEEXtremePracticeNavigationHandler)).apply(this, arguments));
    }

    createClass(IEEEXtremePracticeNavigationHandler, [{
        key: "getLeftChildren",
        value: function getLeftChildren() {
            return [UI.createElement(NavLinkElement, { href: this.getURLPrefix(), value: UI.T("Summary") })].concat(toConsumableArray(get(IEEEXtremePracticeNavigationHandler.prototype.__proto__ || Object.getPrototypeOf(IEEEXtremePracticeNavigationHandler.prototype), "getLeftChildren", this).call(this)));
        }
    }]);
    return IEEEXtremePracticeNavigationHandler;
}(TopLevelArchiveNavigationHandler);

var IEEEXtremePracticeArchivePanel = function (_ArchivePanel) {
    inherits(IEEEXtremePracticeArchivePanel, _ArchivePanel);
    createClass(IEEEXtremePracticeArchivePanel, [{
        key: "getURLPrefix",
        value: function getURLPrefix(str) {
            var url = "/" + this.getArchive().name + "/";
            if (str) {
                url += str + "/";
            }
            return url;
        }
    }]);

    function IEEEXtremePracticeArchivePanel() {
        var _ref;

        classCallCheck(this, IEEEXtremePracticeArchivePanel);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this3 = possibleConstructorReturn(this, (_ref = IEEEXtremePracticeArchivePanel.__proto__ || Object.getPrototypeOf(IEEEXtremePracticeArchivePanel)).call.apply(_ref, [this].concat(args)));

        _this3.navHandler = new IEEEXtremePracticeNavigationHandler(_this3.getArchive(), _this3);
        return _this3;
    }

    createClass(IEEEXtremePracticeArchivePanel, [{
        key: "getSummaryPanel",
        value: function getSummaryPanel() {
            return UI.createElement(IEEEXtremePracticeContestSummary, { contest: this.getArchive() });
        }
    }, {
        key: "getTasks",
        value: function getTasks() {
            return UI.createElement(ContestTaskListWithFilters, { contest: this.getArchive(), isArchive: true });
        }
    }, {
        key: "getRoutes",
        value: function getRoutes() {
            var _this4 = this;

            this.routes = this.routes || new Route(null, function () {
                return _this4.getSummaryPanel();
            }, [new Route("tasks", function () {
                return _this4.getTasks();
            }), new Route("task", function () {
                return _this4.getTasks();
            }, [new TerminalRoute("%s", function (options) {
                var contestTask = ContestTaskStore.getByContestIdAndUrlName(_this4.getArchive().baseContestId, options.args[0]);
                return contestTask && UI.createElement(DelayedContestTaskPanel, { contestTaskId: contestTask.id });
            })]), new Route("scoreboard", function () {
                return _this4.getScoreboard();
            }), new Route("submissions", function () {
                return _this4.getSubmissions();
            }), new Route("chat", function () {
                return _this4.getChat();
            })]);
            return this.routes;
        }
    }]);
    return IEEEXtremePracticeArchivePanel;
}(ArchivePanel);

var IEEEXtremePracticeContestPanelWrapper = function (_DelayedArchiveOrCont) {
    inherits(IEEEXtremePracticeContestPanelWrapper, _DelayedArchiveOrCont);

    function IEEEXtremePracticeContestPanelWrapper() {
        classCallCheck(this, IEEEXtremePracticeContestPanelWrapper);
        return possibleConstructorReturn(this, (IEEEXtremePracticeContestPanelWrapper.__proto__ || Object.getPrototypeOf(IEEEXtremePracticeContestPanelWrapper)).apply(this, arguments));
    }

    createClass(IEEEXtremePracticeContestPanelWrapper, [{
        key: "getAjaxUrl",
        value: function getAjaxUrl() {
            return "/" + IEEEXTREME_URL + "/";
        }
    }, {
        key: "renderLoaded",
        value: function renderLoaded() {
            return UI.createElement(IEEEXtremePracticeArchivePanel, { archiveId: this.archiveId, ref: "child" });
        }
    }]);
    return IEEEXtremePracticeContestPanelWrapper;
}(DelayedArchiveOrContestPanel);

var IEEEPasswordResetWidget = function (_IEEELoginWidget) {
    inherits(IEEEPasswordResetWidget, _IEEELoginWidget);

    function IEEEPasswordResetWidget() {
        classCallCheck(this, IEEEPasswordResetWidget);
        return possibleConstructorReturn(this, (IEEEPasswordResetWidget.__proto__ || Object.getPrototypeOf(IEEEPasswordResetWidget)).apply(this, arguments));
    }

    createClass(IEEEPasswordResetWidget, [{
        key: "getSignInValue",
        value: function getSignInValue() {
            return "Set password";
        }
    }, {
        key: "sendLogin",
        value: function sendLogin() {
            var _this2 = this;

            this.clearErrorMessage();

            var password = this.passwordInput.getValue();
            var passwordConfirm = this.passwordConfirmInput.getValue();
            if (password !== passwordConfirm) {
                this.setErrorMessage({ message: "Passwords don't match." });
                return;
            }

            Ajax.postJSON("/accounts/password_change/", {
                newPassword: password
            }).then(function () {
                return _this2.setErrorMessage({ message: "Successfully set the new password" }, false);
            }, function (error) {
                return _this2.setErrorMessage(error);
            });
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "form",
                { ref: "form" },
                this.getPasswordInput(),
                this.getPasswordInput({
                    ref: "passwordConfirmInput",
                    name: "passwordConfirm",
                    placeholder: "Confirm Password"
                }),
                this.getSignInButton(),
                UI.createElement("div", { style: { clear: "both", height: "20px" } }),
                this.getErrorArea()
            )];
        }
    }]);
    return IEEEPasswordResetWidget;
}(IEEELoginWidget);

var IEEEXtreme11PasswordReset = function (_StateDependentElemen) {
    inherits(IEEEXtreme11PasswordReset, _StateDependentElemen);

    function IEEEXtreme11PasswordReset() {
        classCallCheck(this, IEEEXtreme11PasswordReset);
        return possibleConstructorReturn(this, (IEEEXtreme11PasswordReset.__proto__ || Object.getPrototypeOf(IEEEXtreme11PasswordReset)).apply(this, arguments));
    }

    createClass(IEEEXtreme11PasswordReset, [{
        key: "getPasswordResetArea",
        value: function getPasswordResetArea() {
            var text = "Enter a new password:",
                passwordResetWidget = null;
            if (this.options.error) {
                text = this.options.error.message;
            } else {
                passwordResetWidget = UI.createElement(
                    "div",
                    { className: this.styleSheet.loginContainer, style: { width: 500 } },
                    UI.createElement(IEEEPasswordResetWidget, null)
                );
            }
            return [UI.createElement(
                "div",
                { style: { display: "flex", justifyContent: "center", alignItems: "center", flexDirection: "column" } },
                UI.createElement(
                    "div",
                    { className: this.styleSheet.textSection },
                    UI.createElement(
                        "p",
                        null,
                        UI.createElement(RawHTML, { innerHTML: text })
                    )
                ),
                passwordResetWidget
            )];
        }
    }, {
        key: "getLogo",
        value: function getLogo() {
            return [];
        }
    }, {
        key: "renderLoaded",
        value: function renderLoaded() {
            return [this.getLogo(), this.getSectionTitle("Password reset"), this.getPasswordResetArea()];
        }
    }, {
        key: "onDelayedMount",
        value: function onDelayedMount() {}
    }]);
    return IEEEXtreme11PasswordReset;
}(StateDependentElement(IEEEXtreme11ContestSummary));

var GenericErrorView = function (_UI$Element) {
    inherits(GenericErrorView, _UI$Element);

    function GenericErrorView() {
        classCallCheck(this, GenericErrorView);
        return possibleConstructorReturn(this, (GenericErrorView.__proto__ || Object.getPrototypeOf(GenericErrorView)).apply(this, arguments));
    }

    createClass(GenericErrorView, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(GenericErrorView.prototype.__proto__ || Object.getPrototypeOf(GenericErrorView.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.addClass(GlobalStyle.Container.EXTRA_SMALL);
        }
    }, {
        key: "render",
        value: function render() {
            return StateDependentElement.renderError(ErrorHandlers.PAGE_NOT_FOUND);
        }
    }]);
    return GenericErrorView;
}(UI.Element);

var PageNotFoundRoute = function (_Route) {
    inherits(PageNotFoundRoute, _Route);

    function PageNotFoundRoute() {
        classCallCheck(this, PageNotFoundRoute);
        return possibleConstructorReturn(this, (PageNotFoundRoute.__proto__ || Object.getPrototypeOf(PageNotFoundRoute)).call(this, [], GenericErrorView, [], "Page not found"));
    }

    createClass(PageNotFoundRoute, [{
        key: "matches",
        value: function matches(urlParts) {
            return {
                args: [],
                urlParts: urlParts
            };
        }
    }, {
        key: "matchesOwnNode",
        value: function matchesOwnNode() {
            return true;
        }
    }]);
    return PageNotFoundRoute;
}(Route);

var ROUTES = new Route(null, StateDependentElement(FrontPagePanel), [new TerminalRoute("about", CSAAboutPage, [], "About CS Academy"), new Route("problem-setting", ProblemSetting), new Route("lessons", StateDependentElement(LessonList), [], "Lessons"), new Route(["lesson", "%s"], StateDependentElement(LessonPanel)), new Route("ratings", StateDependentElement(GlobalRatings), [], "Ratings Leaderboard"), new Route("real_ratings", StateDependentElement(GlobalRatings)), new Route("reputations", StateDependentElement(GlobalRatings)), new Route(["code", "%s"], StateDependentElement(CustomRunWidget), [], "CS Academy - Code"), new Route(["submission", "%s"], SubmissionWidget, [], "CS Academy - Submission"), new BlogRoute(), new ForumRoute(), new Route(["eval", "global"], StateDependentElement(SubmissionSummaryGlobalFilter)), new Route(["eval", "manager"], EvalTaskManager), new Route(["eval", "checkers"], StateDependentElement(CheckerManager)), new TerminalRoute(["task", "%s", "edit"], StateDependentElement(EvalTaskEditor)), new Route(["article", "manager"], ArticleManager), new Route(["article", "%s", "edit"], StateDependentElement(ArticleEditor)), new Route("app", null, [new Route("graph_editor", GraphEditor, [], "Graph Editor"), new Route("diffing_tool", DiffWidgetApp), new Route("geometry_widget", CSAGeometryWidget, [], "Geometry Widget")]), new Route("contests", StateDependentElement(ContestList), [], "Contests"), new Route("contest", null, [new Route("manager", StateDependentElement(ContestManager)), new Route(["invite", "%s"], StateDependentElement(ContestInvitePage)), new Route(["%s", "edit"], StateDependentElement(ContestEditPanel)), new TerminalRoute("%s", DelayedArchiveOrContestPanel)]), new Route("private-archives", StateDependentElement(PrivateArchiveList)), new Route("private-archive", null, [new TerminalRoute("%s", StateDependentElement(PrivateArchivePanelWrapper))]), new Route("interview", StateDependentElement(InterviewApp), [new TerminalRoute("%s", StateDependentElement(InterviewPanelWrapper))]), new Route("accounts", null, [new TerminalRoute("settings", StateDependentElement(AccountSettingsPanel)), new Route("workspace_settings", StateDependentElement(UserWorkspaceSettingsPanel)), new Route(["email_address_verify", "%s"], StateDependentElement(EmailConfirmed)), new Route(["email_unsubscribe", "%s"], StateDependentElement(EmailUnsubscribe)), new Route("password_reset", PasswordReset, [new Route("%s", StateDependentElement(PasswordResetFromKey))]), new Route(["activate", "%s"], AccountActivation)]), new Route(["user", "%s"], StateDependentElement(UserProfilePanel)), new Route(["userid", "%s"], StateDependentElement(UserProfilePanel)), new TerminalRoute("messages", MessagesPanel), new TerminalRoute("workspace", WorkspaceManagerWrapper), new TerminalRoute(["email", "manager"], StateDependentElement(EmailManager)), new Route(["storage", "manager"], StateDependentElement(StorageManager)), new Route(["baseconfig", "command", "manager"], StateDependentElement(CommandManager)), new Route("manage", StateDependentElement(AdminPanel), [new TerminalRoute("icarus", StateDependentElement(Icarus)), new Route("users", StateDependentElement(UserStats)), new Route("charts", StatisticCharts, [], "Statistics"), new TerminalRoute("translation", StateDependentElement(TranslationManager))]), new DocumentationRoute(), new TerminalRoute("ieeextreme11", IEEEXtreme11ContestPanelWrapper), new TerminalRoute("ieeextreme12", IEEEXtreme12ContestPanelWrapper), new TerminalRoute("ieeextreme12-mock-8b6786ce", IEEEXtreme12ContestPanelWrapper), new TerminalRoute("ieeextreme-practice", IEEEXtremePracticeContestPanelWrapper), new Route(["ieee_password_reset", "%s"], IEEEXtreme11PasswordReset), new Route(["questionnaire", "%s", "answers"], DelayedQuestionnaireAnswersPanel), new Route("analytics", AnalyticsPanel), new PageNotFoundRoute()]);

var _class$119, _temp$26;

function getRTCPeerConnection() {
    if (window.hasOwnProperty("RTCPeerConnection")) {
        return window.RTCPeerConnection;
    }
    if (window.hasOwnProperty("webkitRTCPeerConnection")) {
        return window.webkitRTCPeerConnection;
    }
    if (window.hasOwnProperty("mozRTCPeerConnection")) {
        return window.mozRTCPeerConnection;
    }
    throw Error("RTC Peer connection is not supported in your browser");
}

// MediaChannelClass API
//
// A communication channel through which the "handshake" between the two users
// that call each other can be made.
// The class must follow the API below, and provide the following events:
// - dispatch("candidate") when an ICECandidate arrives from remote (the listener takes <<candidate>> as a parameter)
// - dispatch("description") when the remote peer's description arrives (the listener takes <<description>> as a parameter)
// - dispatch("connectionClosed") whenever the remote peer disconnects from the call (the listener takes no arguments)
//
//
// class MediaChannel extends Dispatchable {
//     // userId is the id of the user attached to this channel
//     constructor(userId) {
//         super(...arguments);
//     }
//
//     // Submit a call request from the attached user to the user with id = userId
//     // Upon accepting the call, call acceptCallback with no parameters
//     // Upon refusal, call rejectCallback with a parameter, a string describing the error
//     // (Rejected, Busy, Timeout etc)
//     call(userId, acceptCallback, rejectCallback) {
//
//     }
//
//     // Listen for calls from other users
//     listenForCall(receiveCallback) {
//
//     }
//
//     // When a remote call comes in through "listenForCall",
//     // this function is called if the user attached accepted the call
//     establishConnection() {
//
//     }
//
//     // When a remote call comes in through "listenForCall",
//     // this function is called if the user attached refused the call
//     refuseConnection() {
//
//     }
//
//     // Signal to the remote end of an ongoing call that the attached user
//     // closed the connection (stopped streaming)
//     killConnection() {
//
//     }
//
//     // A generic method to send a json from one peer to the other.
//     // Will be called to send descriptions and ice candidates
//     sendMessage(json) {
//
//     }
// }

var UserMediaStream = (_temp$26 = _class$119 = function (_Dispatchable) {
    inherits(UserMediaStream, _Dispatchable);

    function UserMediaStream(user, ChannelClass) {
        var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UserMediaStream.defaultConfig;
        var input = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { audio: true, video: true };
        classCallCheck(this, UserMediaStream);

        var _this = possibleConstructorReturn(this, (UserMediaStream.__proto__ || Object.getPrototypeOf(UserMediaStream)).apply(this, arguments));

        _this.user = user;
        _this.input = input;
        _this.config = config;
        _this.channel = new ChannelClass(_this.user.id);
        _this.channel.addListener("candidate", function (candidate) {
            _this.handleIceCandidate(candidate);
        });
        _this.channel.addListener("description", function (description) {
            _this.handleDescription(description);
        });
        _this.channel.addListener("connectionClosed", function () {
            _this.stopStream(false);
        });

        _this.channel.listenForCall(function (userId) {
            _this.requestCallConfirmation(userId, function () {
                _this.createPeerConnection();
                _this.channel.establishConnection();
                _this.addListener("receivedDescription", function () {
                    _this.captureUserMedia(false);
                });
            }, function () {
                _this.channel.refuseConnection();
            });
        });
        return _this;
    }

    createClass(UserMediaStream, [{
        key: "setInput",
        value: function setInput(input) {
            this.input = input;
        }
    }, {
        key: "getInput",
        value: function getInput() {
            return this.input;
        }
    }, {
        key: "setConfig",
        value: function setConfig(config) {
            this.config = config;
        }
    }, {
        key: "getConfig",
        value: function getConfig() {
            return this.config;
        }
    }, {
        key: "requestCallConfirmation",
        value: function requestCallConfirmation(userId, acceptCallback, rejectCallback) {
            if (confirm("Connect to call from user with id " + userId + "?")) {
                acceptCallback();
            } else {
                rejectCallback();
            }
        }
    }, {
        key: "sendCandidate",
        value: function sendCandidate(candidate) {
            this.channel.sendMessage({
                "candidate": candidate
            });
        }
    }, {
        key: "sendDescription",
        value: function sendDescription(description) {
            this.channel.sendMessage({
                "description": description
            });
        }
    }, {
        key: "createPeerConnection",
        value: function createPeerConnection() {
            var _this2 = this;

            var PeerConnection = getRTCPeerConnection();
            try {
                this.peerConnection = new PeerConnection(this.getConfig());
            } catch (e) {
                this.peerConnection = new PeerConnection({});
            }

            this.peerConnection.onicecandidate = function (event) {
                if (event && event.candidate) {
                    _this2.sendCandidate(event.candidate);
                }
            };
            // Once the stream arrives
            this.peerConnection.onaddstream = function (event) {
                _this2.setRemoteStream(event.stream);
                _this2.dispatch("remoteStreamReady");
            };
        }
    }, {
        key: "captureUserMedia",
        value: function captureUserMedia(proactive) {
            var _this3 = this;

            navigator.getUserMedia(this.getInput(), function (stream) {
                _this3.setLocalStream(stream);
                var descriptionCallback = function descriptionCallback(description) {
                    _this3.peerConnection.setLocalDescription(description);
                    _this3.sendDescription(description);
                    _this3._localDescriptionReady = true;
                    if (_this3._iceCandidates) {
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = _this3._iceCandidates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var candidate = _step.value;

                                _this3.handleIceCandidate(candidate);
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                };
                if (proactive) {
                    _this3.peerConnection.createOffer().then(descriptionCallback);
                } else {
                    _this3.peerConnection.createAnswer().then(descriptionCallback);
                }
            }, function (error) {
                throw Error(error.toString());
            });
        }
    }, {
        key: "handleIceCandidate",
        value: function handleIceCandidate(candidate) {
            if (this._localDescriptionReady) {
                console.log("Processing candidate", JSON.stringify(candidate));
                this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
            } else {
                if (!this._iceCandidates) {
                    this._iceCandidates = [];
                }
                this._iceCandidates.push(candidate);
            }
        }
    }, {
        key: "handleDescription",
        value: function handleDescription(description) {
            this.peerConnection.setRemoteDescription(new RTCSessionDescription(description));
            this.dispatch("receivedDescription");
        }
    }, {
        key: "startStream",
        value: function startStream(userId) {
            var _this4 = this;

            if (this.user.id === userId) {
                throw Error("You can't stream to yourself, wtf?!");
            }
            if (this.peerConnection) {
                throw Error("User already streaming!");
            }

            this.channel.connect(userId, function () {
                _this4.createPeerConnection();
                _this4.captureUserMedia(true);
            }, function (error) {
                _this4.dispatch("rejected", error);
            });
        }
    }, {
        key: "stopStream",
        value: function stopStream() {
            var killRemote = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getLocalStream().getTracks()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var track = _step2.value;

                    track.stop();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.peerConnection.close();
            delete this.peerConnection;
            if (killRemote) {
                this.channel.killConnection();
            }
            if (this.remoteStream) {
                delete this.remoteStream;
                if (this._remoteStreamURL) {
                    delete this._remoteStreamURL;
                }
            }
            if (this.localStream) {
                delete this.localStream;
                if (this._localStreamURL) {
                    delete this._localStreamURL;
                }
            }
            this.dispatch("connectionClosed");
        }
    }, {
        key: "setRemoteStream",
        value: function setRemoteStream(stream) {
            this.remoteStream = stream;
        }
    }, {
        key: "getRemoteStream",
        value: function getRemoteStream() {
            return this.remoteStream;
        }
    }, {
        key: "getRemoteStreamURL",
        value: function getRemoteStreamURL() {
            if (!this._remoteStreamURL) {
                this._remoteStreamURL = window.URL.createObjectURL(this.getRemoteStream());
            }
            return this._remoteStreamURL;
        }
    }, {
        key: "setLocalStream",
        value: function setLocalStream(stream) {
            this.localStream = stream;
            this.peerConnection.addStream(this.getLocalStream());
            this.dispatch("localStreamReady");
        }
    }, {
        key: "getLocalStream",
        value: function getLocalStream() {
            return this.localStream;
        }
    }, {
        key: "getLocalStreamURL",
        value: function getLocalStreamURL() {
            if (!this._localStreamURL) {
                this._localStreamURL = window.URL.createObjectURL(this.getLocalStream());
            }
            return this._localStreamURL;
        }
    }]);
    return UserMediaStream;
}(Dispatchable), _class$119.defaultConfig = {
    "iceServers": [{ 'url': 'stun:stun.l.google.com:19302' }]
}, _temp$26);

var MultimediaCall = function (_StoreObject) {
    inherits(MultimediaCall, _StoreObject);

    function MultimediaCall() {
        classCallCheck(this, MultimediaCall);
        return possibleConstructorReturn(this, (MultimediaCall.__proto__ || Object.getPrototypeOf(MultimediaCall)).apply(this, arguments));
    }

    createClass(MultimediaCall, [{
        key: "getStreamName",
        value: function getStreamName() {
            return "call-" + this.sourceId + "-" + this.targetId + "-" + this.id;
        }
    }]);
    return MultimediaCall;
}(StoreObject);

var MultimediaCallStore = new GenericObjectStore("multimediacall", MultimediaCall);

var WSMediaChannel = function (_Dispatchable) {
    inherits(WSMediaChannel, _Dispatchable);

    function WSMediaChannel(userId) {
        classCallCheck(this, WSMediaChannel);

        var _this = possibleConstructorReturn(this, (WSMediaChannel.__proto__ || Object.getPrototypeOf(WSMediaChannel)).apply(this, arguments));

        _this.userId = userId;
        return _this;
    }

    createClass(WSMediaChannel, [{
        key: "getListenStreamName",
        value: function getListenStreamName() {
            return "user-" + this.userId + "-events";
        }
    }, {
        key: "connect",
        value: function connect(userId, successCallback, errorCallback) {
            var _this2 = this;

            Ajax.getJSON("/multimedia/initiate_call/", {
                targetUserId: userId
            }).then(function (data) {
                GlobalState.importState({
                    "multimediacall": [data.multimediaCall]
                });
                _this2.setCurrentCall(MultimediaCallStore.get(data.multimediaCall.id));
                _this2.callUser(successCallback, errorCallback);
            });
        }
    }, {
        key: "listenForCall",
        value: function listenForCall(receiveCallback) {
            var _this3 = this;

            WebsocketSubscriber.addListener(this.getListenStreamName(), function (event) {
                if (event.pendingCall) {
                    GlobalState.importState({
                        "multimediacall": [event.pendingCall]
                    });
                    _this3._pendingConnection = MultimediaCallStore.get(event.pendingCall.id);
                    receiveCallback(event.senderId);
                }
            });
        }
    }, {
        key: "callUser",
        value: function callUser(successCallback, errorCallback) {
            var _this4 = this;

            Ajax.postJSON("/multimedia/call_user/", {
                callId: this.call.id
            }).then(function (data) {
                return _this4.addWSListener(successCallback, errorCallback);
            }, errorCallback);
        }
    }, {
        key: "setCurrentCall",
        value: function setCurrentCall(call) {
            this.call = call;
        }
    }, {
        key: "getStreamName",
        value: function getStreamName() {
            return this.call.getStreamName();
        }
    }, {
        key: "addWSListener",
        value: function addWSListener(successCallback, errorCallback) {
            var _this5 = this;

            WebsocketSubscriber.addListener(this.getStreamName(), function (event) {
                if (event.senderId === USER.id) {
                    return;
                }
                if (event.connectionStatus) {
                    if (event.connectionStatus === "accepted") {
                        successCallback();
                    } else {
                        errorCallback("Call Rejected");
                    }
                } else if (event.candidate) {
                    _this5.dispatch("candidate", event.candidate);
                } else if (event.description) {
                    _this5.dispatch("description", event.description);
                } else if (event.connectionClosed) {
                    _this5.dispatch("connectionClosed");
                }
            });
        }
    }, {
        key: "sendMessage",
        value: function sendMessage(message) {
            return Ajax.postJSON("/multimedia/broadcast_to_stream/", {
                callId: this.call.id,
                data: JSON.stringify(message)
            });
        }
    }, {
        key: "signalConnectionStatus",
        value: function signalConnectionStatus(connectionStatus) {
            return Ajax.postJSON("/multimedia/connection_status/", {
                callId: this._pendingConnection.id,
                connectionStatus: connectionStatus
            });
        }
    }, {
        key: "establishConnection",
        value: function establishConnection() {
            this.setCurrentCall(this._pendingConnection);
            this.addWSListener(NOOP_FUNCTION, NOOP_FUNCTION);
            this.signalConnectionStatus("accepted");
            delete this._pendingConnection;
        }
    }, {
        key: "refuseConnection",
        value: function refuseConnection() {
            this.signalConnectionStatus("refused");
            delete this._pendingConnection;
        }
    }, {
        key: "killConnection",
        value: function killConnection() {
            Ajax.postJSON("/multimedia/close_connection/", {
                callId: this.call.id
            });
        }
    }]);
    return WSMediaChannel;
}(Dispatchable);

var ChatPlugin = function (_Plugin) {
    inherits(ChatPlugin, _Plugin);

    function ChatPlugin() {
        classCallCheck(this, ChatPlugin);
        return possibleConstructorReturn(this, (ChatPlugin.__proto__ || Object.getPrototypeOf(ChatPlugin)).apply(this, arguments));
    }

    createClass(ChatPlugin, [{
        key: "linkToParent",
        value: function linkToParent(parent) {
            this.chatWidget = parent;
        }
    }, {
        key: "getChatbox",
        value: function getChatbox() {
            return this.chatWidget.chatInput;
        }
    }]);
    return ChatPlugin;
}(Plugin);

var UserMentionPlugin = function (_ChatPlugin) {
    inherits(UserMentionPlugin, _ChatPlugin);

    function UserMentionPlugin() {
        classCallCheck(this, UserMentionPlugin);

        var _this = possibleConstructorReturn(this, (UserMentionPlugin.__proto__ || Object.getPrototypeOf(UserMentionPlugin)).apply(this, arguments));

        if (!_this.getChatbox()) {
            return possibleConstructorReturn(_this);
        }

        if (_this.chatWidget.getPlugin("EnterToSendPlugin")) {
            _this.chatWidget.removePlugin("EnterToSendPlugin");
            _this._enterToSend = true;
        }
        _this.getChatbox().addNodeListener("keydown", function (event) {
            if (event.keyCode === 39 || event.keyCode === 37) {
                // Left and right arrows
                setTimeout(function () {
                    // This needs to be wrapped in a setTimeout as the getCaretPosition needs selectionEnd which
                    // updates async and does not have an event attached to it.
                    _this.handleChange();
                }, 0);
            }
            if (event.shiftKey || event.ctrlKey) {
                return;
            }
            if (event.key === "Enter" || event.keyCode === 13) {
                if (!_this.duringAutocomplete && _this._enterToSend) {
                    _this.chatWidget.sendMessage();
                    event.preventDefault();
                }
            }
            AutocompleteWindow.handleKeydownEvent(_this, event);
        });
        _this.getChatbox().addNodeListener("input", function () {
            _this.handleChange();
        });
        _this.getChatbox().addClickListener(function () {
            setTimeout(function () {
                _this.handleChange();
            }, 0);
        });

        _this.addListener("autocomplete", function (userIds) {
            AutocompleteWindow.handleAutocomplete(_this, userIds, _this.getChatbox());
        });
        _this.getChatbox().addListener("messageSent", function () {
            _this.duringAutocomplete = false;
            _this.dispatch("autocomplete", []);
        });
        return _this;
    }

    createClass(UserMentionPlugin, [{
        key: "autocompleteUser",
        value: function autocompleteUser(userId) {
            this.getChatbox().node.focus();
            var caretPosition = this.getCaretPosition();
            var text = this.getChatbox().getValue();
            var lastAtPosition = this.getLastAtPosition(caretPosition);
            var userMarkup = "<User id=\"" + userId + "\" /> ";
            text = text.substring(0, lastAtPosition + 1) + userMarkup + text.substring(caretPosition);
            this.getChatbox().setValue(text);
            this.setCaretPosition(lastAtPosition + 1 + userMarkup.length);
            this.dispatch("autocomplete", []);
        }
    }, {
        key: "handleChange",
        value: function handleChange() {
            var _this2 = this;

            var caretPosition = this.getCaretPosition();
            var lastAtPosition = this.getLastAtPosition(caretPosition);
            if (lastAtPosition === -1) {
                this.dispatch("autocomplete", []);
            } else {
                var prefix = this.getChatbox().getValue().substring(lastAtPosition + 1, caretPosition);
                AbstractUsernameAutocomplete.loadUsersForPrefix(prefix, function (userIds) {
                    _this2.dispatch("autocomplete", userIds);
                });
            }
        }
    }, {
        key: "getCaretPosition",
        value: function getCaretPosition() {
            var textArea = this.getChatbox().node;
            if (typeof textArea.selectionStart === "number" && typeof textArea.selectionEnd === "number") {
                return textArea.selectionEnd;
            }
            var range = document.selection.createRange();
            if (range && range.parentElement() == textArea) {
                var len = textArea.value.length;
                var normalizedValue = textArea.value.replace(/\r\n/g, "\n");

                // Create a working TextRange that lives only in the input
                var textInputRange = textArea.createTextRange();
                textInputRange.moveToBookmark(range.getBookmark());

                // Check if the start and end of the selection are at the very end
                // of the input, since moveStart/moveEnd doesn't return what we want
                // in those cases
                var endRange = textArea.createTextRange();
                endRange.collapse(false);

                if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                    return len;
                }
                var end = -textInputRange.moveEnd("character", -len);
                end += normalizedValue.slice(0, end).split("\n").length - 1;
                return end;
            }
            return null;
        }
    }, {
        key: "setCaretPosition",
        value: function setCaretPosition(caretPosition) {
            var node = this.getChatbox().node;
            if (node.createTextRange) {
                var range = node.createTextRange();
                range.move("character", caretPosition);
                range.select();
            } else {
                node.focus();
                if (node.selectionStart) {
                    node.setSelectionRange(caretPosition, caretPosition);
                }
            }
        }
    }, {
        key: "getLastAtPosition",
        value: function getLastAtPosition(caret) {
            var text = this.getChatbox().getValue();
            if (arguments.length < 1) {
                caret = text.length;
            }
            var lastAtPosition = caret - 1;
            while (lastAtPosition >= 0 && text.charCodeAt(lastAtPosition) !== 64) {
                var char = text[lastAtPosition];
                if (char !== "." && char !== "_" && !char.match(/\d/) && !char.match(/\w/)) {
                    lastAtPosition = -1;
                    break;
                }
                lastAtPosition -= 1;
            }
            return lastAtPosition;
        }
    }]);
    return UserMentionPlugin;
}(ChatPlugin);

var EnterToSendPlugin = function (_ChatPlugin) {
    inherits(EnterToSendPlugin, _ChatPlugin);

    function EnterToSendPlugin() {
        classCallCheck(this, EnterToSendPlugin);

        var _this = possibleConstructorReturn(this, (EnterToSendPlugin.__proto__ || Object.getPrototypeOf(EnterToSendPlugin)).apply(this, arguments));

        if (!_this.getChatbox()) {
            return possibleConstructorReturn(_this);
        }
        _this.callback = function (event) {
            if (!(event.shiftKey || event.ctrlKey) && (event.key === "Enter" || event.keyCode === 13)) {
                _this.chatWidget.sendMessage();
                event.preventDefault();
            }
        };
        _this.getChatbox().addNodeListener("keydown", _this.callback);
        return _this;
    }

    createClass(EnterToSendPlugin, [{
        key: "remove",
        value: function remove() {
            this.getChatbox().removeNodeListener("keydown", this.callback);
        }
    }]);
    return EnterToSendPlugin;
}(ChatPlugin);

function singlePageLinkOnMount() {
    var _this = this;

    this.addClickListener(function (event) {
        if (event.shiftKey || event.ctrlKey || event.metaKey || !_this.options.href || !isLocalUrl(_this.options.href) || _this.options.newTab || _this.options.target && _this.options.target !== "_self") {
            // Leave it to the browser
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        Router.changeURL(trimLocalUrl(_this.options.href));
    });
}

var StemApp = function (_UI$Element) {
    inherits(StemApp, _UI$Element);

    function StemApp() {
        classCallCheck(this, StemApp);
        return possibleConstructorReturn(this, (StemApp.__proto__ || Object.getPrototypeOf(StemApp)).apply(this, arguments));
    }

    createClass(StemApp, [{
        key: "getRoutes",
        value: function getRoutes() {
            return this.options.routes;
        }
    }, {
        key: "getBeforeContainer",
        value: function getBeforeContainer() {
            return null;
        }
    }, {
        key: "getRouterOptions",
        value: function getRouterOptions() {
            return {
                style: {
                    height: "100%"
                }
            };
        }
    }, {
        key: "getRouter",
        value: function getRouter() {
            return UI.createElement(Router, _extends({ routes: this.getRoutes(), ref: "router" }, this.getRouterOptions()));
        }
    }, {
        key: "getContainer",
        value: function getContainer() {
            return UI.createElement(
                GlobalContainer,
                null,
                this.getRouter()
            );
        }
    }, {
        key: "getAfterContainer",
        value: function getAfterContainer() {
            return null;
        }
    }, {
        key: "render",
        value: function render() {
            return [this.getBeforeContainer(), this.getContainer(), this.getAfterContainer()];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            this.router && this.router.addListener("change", function () {
                document.body.click();
                Dispatcher.Global.dispatch("closeAllModals");
            });
        }
    }], [{
        key: "init",
        value: function init() {
            Link.prototype.onMount = singlePageLinkOnMount;
            return self.appInstance = this.create(document.body);
        }
    }]);
    return StemApp;
}(UI.Element);

var _dec$62, _dec2$28, _dec3$9, _dec4$3, _dec5$1, _dec6$1, _dec7$1, _dec8, _dec9, _class$120, _descriptor$56, _descriptor2$50, _descriptor3$44, _descriptor4$40, _descriptor5$36, _descriptor6$31, _descriptor7$26, _descriptor8$22, _descriptor9$18;

function _initDefineProp$57(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$58(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var GlobalStyleSheet = (_dec$62 = styleRuleCustom({ selector: "body" }), _dec2$28 = styleRuleCustom({ selector: ".hidden" }), _dec3$9 = styleRuleCustom({ selector: "*" }), _dec4$3 = styleRuleCustom({ selector: "a" }), _dec5$1 = styleRuleCustom({ selector: "hr" }), _dec6$1 = styleRuleCustom({ selector: "code, pre" }), _dec7$1 = styleRuleCustom({ selector: "code" }), _dec8 = styleRuleCustom({ selector: "pre" }), _dec9 = styleRuleCustom({ selector: "pre code" }), _class$120 = function (_StyleSheet) {
    inherits(GlobalStyleSheet, _StyleSheet);

    function GlobalStyleSheet() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, GlobalStyleSheet);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = GlobalStyleSheet.__proto__ || Object.getPrototypeOf(GlobalStyleSheet)).call.apply(_ref, [this].concat(args))), _this), _initDefineProp$57(_this, "body", _descriptor$56, _this), _initDefineProp$57(_this, "hidden", _descriptor2$50, _this), _initDefineProp$57(_this, "everything", _descriptor3$44, _this), _initDefineProp$57(_this, "a", _descriptor4$40, _this), _initDefineProp$57(_this, "hr", _descriptor5$36, _this), _initDefineProp$57(_this, "codeAndPre", _descriptor6$31, _this), _initDefineProp$57(_this, "code", _descriptor7$26, _this), _initDefineProp$57(_this, "pre", _descriptor8$22, _this), _initDefineProp$57(_this, "preInCode", _descriptor9$18, _this), _temp), possibleConstructorReturn(_this, _ret);
    }

    return GlobalStyleSheet;
}(StyleSheet), _descriptor$56 = _applyDecoratedDescriptor$58(_class$120.prototype, "body", [_dec$62], {
    enumerable: true,
    initializer: function initializer() {
        return {
            margin: 0,
            fontSize: this.themeProperties.FONT_SIZE_DEFAULT,
            fontFamily: this.themeProperties.FONT_FAMILY_DEFAULT
        };
    }
}), _descriptor2$50 = _applyDecoratedDescriptor$58(_class$120.prototype, "hidden", [_dec2$28], {
    enumerable: true,
    initializer: function initializer() {
        return {
            display: "none !important"
        };
    }
}), _descriptor3$44 = _applyDecoratedDescriptor$58(_class$120.prototype, "everything", [_dec3$9], {
    enumerable: true,
    initializer: function initializer() {
        return {
            boxSizing: "border-box"
        };
    }
}), _descriptor4$40 = _applyDecoratedDescriptor$58(_class$120.prototype, "a", [_dec4$3], {
    enumerable: true,
    initializer: function initializer() {
        return {
            textDecoration: "none",
            color: this.themeProperties.COLOR_LINK
        };
    }
}), _descriptor5$36 = _applyDecoratedDescriptor$58(_class$120.prototype, "hr", [_dec5$1], {
    enumerable: true,
    initializer: function initializer() {
        return {
            height: 0,
            marginTop: "20px",
            marginBottom: "20px",
            border: 0,
            borderTop: "1px solid #eee",
            boxSizing: "content-box"
        };
    }
}), _descriptor6$31 = _applyDecoratedDescriptor$58(_class$120.prototype, "codeAndPre", [_dec6$1], {
    enumerable: true,
    initializer: function initializer() {
        return {
            fontFamily: this.themeProperties.FONT_FAMILY_MONOSPACE
        };
    }
}), _descriptor7$26 = _applyDecoratedDescriptor$58(_class$120.prototype, "code", [_dec7$1], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: "2px 4px", // TODO: should be in rem
            fontSize: "90%",
            color: "#345 !important", // TODO: take colors from theme
            backgroundColor: "#f8f2f4 !important",
            borderRadius: this.themeProperties.BUTTON_BORDER_RADIUS
        };
    }
}), _descriptor8$22 = _applyDecoratedDescriptor$58(_class$120.prototype, "pre", [_dec8], {
    enumerable: true,
    initializer: function initializer() {
        return {
            overflow: "auto",
            display: "block",
            padding: this.themeProperties.BUTTON_BORDER_RADIUS,
            margin: "0 0 10px",
            fontSize: "13px",
            lineHeight: "1.42857143",
            color: "#333",
            wordBreak: "break-all",
            wordWrap: "break-word",
            backgroundColor: "#f5f5f5",
            border: "1px solid #ccc"
        };
    }
}), _descriptor9$18 = _applyDecoratedDescriptor$58(_class$120.prototype, "preInCode", [_dec9], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: 0,
            fontSize: "inherit",
            color: "inherit",
            whiteSpace: "pre-wrap",
            backgroundColor: "transparent",
            borderRadius: 0
        };
    }
}), _class$120);

var _class$121, _temp$27;

var EstablishmentApp = (_temp$27 = _class$121 = function (_StemApp) {
    inherits(EstablishmentApp, _StemApp);

    function EstablishmentApp() {
        classCallCheck(this, EstablishmentApp);
        return possibleConstructorReturn(this, (EstablishmentApp.__proto__ || Object.getPrototypeOf(EstablishmentApp)).apply(this, arguments));
    }

    createClass(EstablishmentApp, null, [{
        key: "init",
        // Iphone 6

        value: function init() {
            this.loadPublicState();
            this.addAjaxProcessors();
            this.registerWebsocketStreams();
            this.initializeViewportMeta();
            this.configureTheme();
            this.initializeGlobalStyle();
            return get(EstablishmentApp.__proto__ || Object.getPrototypeOf(EstablishmentApp), "init", this).call(this);
        }
    }, {
        key: "loadPublicState",
        value: function loadPublicState() {
            GlobalState.importState(self.PUBLIC_STATE || {});
        }
    }, {
        key: "addAjaxProcessors",
        value: function addAjaxProcessors() {
            // Add the csrf cookie and credential for all requests
            Ajax.addPreprocessor(function (options) {
                options.credentials = options.credentials || "include";
                options.headers.set("X-CSRFToken", getCookie("csrftoken"));
            });

            // Add a postprocessor to load any state received from an Ajax response
            Ajax.addPostprocessor(function (payload, xhrPromise) {
                if (payload.state && !xhrPromise.options.disableStateImport) {
                    GlobalState.importState(payload.state);
                }
            });

            // Sync server time
            Ajax.addPostprocessor(function (payload, xhrPromise) {
                var responseHeaders = xhrPromise.getResponseHeaders();
                var responseDate = responseHeaders.get("date");
                if (responseDate) {
                    // Estimate server time, with 500ms rounding and 100 ms latency
                    var estimatedServerTime = new StemDate(responseDate).add(600);
                    ServerTime.set(estimatedServerTime, true);
                }
            });

            // Raise any error, to be handled by the error processor
            Ajax.addPostprocessor(function (payload) {
                if (payload.error) {
                    throw payload.error;
                }
            });

            // Prettify any error, so it's in a standardized format
            Ajax.addErrorPostprocessor(function (error) {
                return ErrorHandlers.wrapError(error);
            });

            // Add a default error handler
            Ajax.errorHandler = function (error) {
                return ErrorHandlers.showErrorAlert(error);
            };
        }
    }, {
        key: "registerWebsocketStreams",
        value: function registerWebsocketStreams() {
            // TODO: first check if websockets are enabled
            GlobalState.registerStream = function (streamName) {
                WebsocketSubscriber.addListener(streamName, GlobalState.applyEventWrapper);
            };

            //Register on the global event stream
            GlobalState.registerStream("global-events");

            //Register on the user event stream
            if (self.USER && self.USER.id) {
                GlobalState.registerStream("user-" + self.USER.id + "-events");
            }
        }
    }, {
        key: "initializeViewportMeta",
        value: function initializeViewportMeta() {
            return this.viewportMeta = ViewportMeta.create(document.head);
        }
    }, {
        key: "configureTheme",
        value: function configureTheme() {
            // Nothing to do by default
        }
    }, {
        key: "initializeGlobalStyle",
        value: function initializeGlobalStyle() {
            GlobalStyleSheet.initialize();
        }
    }]);
    return EstablishmentApp;
}(StemApp), _class$121.MIN_VIEWPORT_META_WIDTH = 375, _temp$27);

Theme.setProperties({
    COLOR_PRIMARY: "#202e3e",
    FONT_MONOSPACE: "'Source Code Pro', 'Monaco', 'Consolas', monospace",

    CSA_PLAYER_COLOR_FOCUSED: "#9bc",
    CSA_PLAYER_COLOR_UNFOCUSED: "#555",

    CARD_PANEL_TEXT_TRANSFORM: "initial",

    CONTEST_QUESTION_CARD_PANEL_WIDTH: 450,
    CONTEST_QUESTION_CARD_PANEL_MIN_WIDTH: 350,
    CONTEST_QUESTION_CARD_PANEL_PADDING: 10,
    CONTEST_QUESTION_CARD_PANEL_BODY_PADDING: 15,
    CONTEST_QUESTION_CARD_PANEL_LINE_HEIGHT: 18,

    CONTEST_QUESTION_CONTAINER: 920,
    MAIN_CONTAINER_EXTRA_PADDING_TOP_DESKTOP: 10,
    MAIN_CONTAINER_EXTRA_PADDING_TOP_MOBILE: 25,
    MAIN_CONTAINER_EXTRA_PADDING_BOTTOM_DESKTOP: 0,
    MAIN_CONTAINER_EXTRA_PADDING_BOTTOM_MOBILE: 0,

    NAV_MANAGER_BOX_SHADOW_NAVBAR: "0px 1px 0px rgb(0, 0, 0)",

    COLOR_COMPILE: "#3DB7C6",
    COLOR_RUN: "#3D7FC6",
    COLOR_SUBMIT: "#CC4949",
    COLOR_WORKSPACE: "#34435b"
});

var predefinedThemes = {
    "1": {
        COLOR_PRIMARY: "#202e3e",
        COLOR_SECONDARY: "#358ba4",
        COLOR_BACKGROUND_BODY: "#f8f8f8",
        COLOR_BACKGROUND_ALTERNATIVE: "#eee",
        FONT_FAMILY_DEFAULT: "Lato, 'Segoe UI', 'Lucida Sans Unicode', 'Helvetica Neue', Helvetica, Arial, sans-serif"
    },
    "2": {
        COLOR_PRIMARY: "#202",
        COLOR_SECONDARY: "#358ba4",
        COLOR_BACKGROUND_BODY: "#493349",
        COLOR_BACKGROUND_ALTERNATIVE: "#392339",
        FONT_FAMILY_DEFAULT: "Lato, 'Segoe UI', 'Lucida Sans Unicode', 'Helvetica Neue', Helvetica, Arial, sans-serif"
    },
    "3": {
        COLOR_PRIMARY: "#000",
        COLOR_SECONDARY: "#070",
        COLOR_BACKGROUND_BODY: "#222",
        COLOR_BACKGROUND_ALTERNATIVE: "#392339",
        FONT_FAMILY_DEFAULT: "monospace"
    },
    "custom": {
        // leave this empty
    }
};

var defaultThemeProperties = Object.assign({}, Theme.Global.properties);

function setUserThemeProperties() {
    var userThemeProperties = Object.assign({}, UserStore.getCurrentUser().getCustomSetting("theme", {}));
    var userThemeId = UserStore.getCurrentUser().getCustomSetting("themeId");

    if (!userThemeId) {
        return;
    }

    if (userThemeId === "custom") {
        for (var key in userThemeProperties) {
            var value = userThemeProperties[key];
            if (value === "null" || value === null) {
                value = defaultThemeProperties[key];
            }

            Theme.setProperties(defineProperty({}, key, value));
        }
        return;
    }

    Theme.setProperties(predefinedThemes[userThemeId]);
}

if (USER.isAuthenticated) {
    setUserThemeProperties();
    UserStore.getCurrentUser().addListener("updateCustomSetting", function (event) {
        if (event.key.startsWith("theme:") && event.origin === "set" || event.key === "themeId") {
            setUserThemeProperties();
        }
    });
}

PageTitleManager.setDefaultTitle("CS Academy");

ServerTime.setPageLoadTime(window.SERVER_PAGE_LOAD);

EstablishmentApp.addAjaxProcessors();

GlobalStyleSheet.initialize();

Theme.register(TabArea, MinimalistTabAreaStyle);

ArticleEditor.DiffWidgetClass = DelayedDiffWidget;

Link.prototype.onMount = singlePageLinkOnMount;

CodeEditor.requireAce = function (callback) {
    ensure("/static/js/ext/ace/ace.js", function () {
        CodeEditor.AceRange = window.ace.require("ace/range").Range;
        callback && callback();
    });
};

BlockCodeModifier.prototype.getElement = function (content) {
    return {
        tag: "CodeSnippet",
        value: content
    };
};

StateDependentElement.renderLoading = function () {
    return UI.createElement(
        "div",
        { style: { textAlign: "center" } },
        UI.createElement(CSALoadingLogo, { size: 250, style: { marginTop: "100px" } })
    );
};

StateDependentElement.renderError = function (error) {
    return UI.createElement(
        "div",
        { style: { textAlign: "center" } },
        UI.createElement(CSALogo, { size: 250, style: { marginTop: "100px" } }),
        UI.createElement(
            "h3",
            null,
            "Error: ",
            error.message
        )
    );
};

ChatWidget.defaultPlugins = [EnterToSendPlugin, UserMentionPlugin];
CommentWidget.defaultPlugins = [UserMentionPlugin];

// TODO: get rid of this!
var oldSetOptions = SVG.Element.prototype.setOptions;
SVG.Element.prototype.setOptions = function (options) {
    if (typeof this.getDefaultOptions === "function") {
        var defaultOptions = this.getDefaultOptions(options) || {};
        // TODO: consider this deep copy, seems really shady!
        var goodRef = options.ref;
        options = deepCopy({}, defaultOptions, options);
        if (goodRef) {
            options.ref = goodRef;
        }
    }
    oldSetOptions.call(this, options);
};

// Require ace, to be sure we have it if needed
setTimeout(function () {
    return CodeEditor.requireAce(function () {});
}, 250);

// Initialize calls for admins
if (USER.isSuperUser) {
    require(["ICEAdapter"], function () {
        window.userMediaStreamer = new UserMediaStream(USER, WSMediaChannel);
        Dispatcher.Global.dispatch("userListeningForCalls");
    });
}

// TODO: extend Establishment app
var CSAApp = function (_UI$Element) {
    inherits(CSAApp, _UI$Element);

    function CSAApp() {
        classCallCheck(this, CSAApp);
        return possibleConstructorReturn(this, (CSAApp.__proto__ || Object.getPrototypeOf(CSAApp)).apply(this, arguments));
    }

    createClass(CSAApp, [{
        key: "render",
        value: function render() {
            return [UI.createElement(CSANavManager, { ref: "navManager" }), UI.createElement(
                GlobalContainer,
                null,
                UI.createElement(Router, { routes: ROUTES, ref: "router", style: { height: "100%" } })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            Dispatcher.Global.addListener("externalURLChange", function () {
                if (_this2.navManager.leftSidePanel.visible) {
                    _this2.navManager.toggleLeftSidePanel();
                }
            });
            this.router.addListener("change", function () {
                document.body.click();
                Dispatcher.Global.dispatch("closeAllModals");
                BasePopup.clearBodyPopups();
            });
            this.navManager.initGlobalRouterListener();
            Dispatcher.Global.dispatch("initNavManagerDone");

            this.addClickListener(function () {
                return BasePopup.clearBodyPopups();
            });
        }
    }]);
    return CSAApp;
}(UI.Element);

var AppClass = CSAApp;
var viewportMeta = ViewportMeta.create(document.head, { minDeviceWidth: 450 });

//YOU CANNOT SET A NEW PARENT IN PLAYER POPUP!
var PlayerPopup = function (_BasePopup) {
    inherits(PlayerPopup, _BasePopup);

    function PlayerPopup() {
        classCallCheck(this, PlayerPopup);
        return possibleConstructorReturn(this, (PlayerPopup.__proto__ || Object.getPrototypeOf(PlayerPopup)).apply(this, arguments));
    }

    createClass(PlayerPopup, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            var options = get(PlayerPopup.prototype.__proto__ || Object.getPrototypeOf(PlayerPopup.prototype), "getDefaultOptions", this).call(this);
            options.backgroundColor = "#F7F2CB";
            options.arrowColor = "#F7F2CB";
            options.arrowDirection = Direction.DOWN;
            options.className = (options.className || "") + " hidden";
            return options;
        }
    }, {
        key: "setContent",
        value: function setContent(content) {
            this.contentArea.options.children = content;
            this.contentArea.redraw();
        }
    }, {
        key: "getPopupData",
        value: function getPopupData() {
            return { panel: this.parentNode, content: this.options.children, center: { x: this.options.x, y: this.options.y } };
        }
    }, {
        key: "setPopupData",
        value: function setPopupData(data) {
            this.setContent(data.content);
            this.setCenter(data.center);
        }
    }, {
        key: "show",
        value: function show() {
            if (this.hasClass("hidden")) {
                this.removeClass("hidden");
            }
        }
    }, {
        key: "hide",
        value: function hide() {
            if (!this.hasClass("hidden")) {
                this.addClass("hidden");
            }
        }
    }, {
        key: "showPopupTransition",
        value: function showPopupTransition(content, rawPosition, duration) {
            var dependsOn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

            var _this2 = this;

            var startTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
            var inMovie = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

            var position = void 0;
            if (typeof rawPosition === "function") {
                position = rawPosition();
            } else {
                position = rawPosition;
            }
            var result = new TransitionList();
            result.dependsOn = dependsOn;
            var showPopupModifier = new Modifier$1({
                func: function func(context) {
                    context.content = _this2.options.children;
                    //context.parent = this.options.parentNode;
                    context.center = { x: _this2.options.x, y: _this2.options.y };
                    if (_this2.options.style) {
                        context.opacity = _this2.options.style.opacity || 1;
                    } else {
                        context.opacity = 1;
                    }
                    _this2.setContent(content);
                    _this2.setCenter(position, true);
                    _this2.setStyle("opacity", 0);
                    _this2.show();
                },
                reverseFunc: function reverseFunc(context) {
                    _this2.setContent(context.content);
                    _this2.setCenter(context.center, true);
                    _this2.setStyle("opacity", context.opacity);
                    _this2.hide();
                },
                context: {}
            });
            result.push(showPopupModifier, false);
            var changeOpacityTransition = new Transition({
                func: function func(t) {
                    _this2.setStyle("opacity", t);
                },
                duration: duration / 2,
                dependsOn: [showPopupModifier],
                inMovie: inMovie
            });
            result.push(changeOpacityTransition, false);
            result.push(new Transition({
                func: function func(t) {},
                duration: duration / 2,
                inMovie: inMovie
            }), false);
            result.setStartTime(startTime);
            return result;
        }
    }, {
        key: "hidePopupTransition",
        value: function hidePopupTransition(duration) {
            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            var _this3 = this;

            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var inMovie = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            var result = new TransitionList();
            result.dependsOn = dependsOn;
            var changeOpacityTransition = new Transition({
                func: function func(t) {
                    _this3.setStyle("opacity", 1 - t);
                },
                duration: duration,
                dependsOn: [],
                inMovie: inMovie
            });
            result.push(changeOpacityTransition, false);
            result.push(new Modifier$1({
                func: function func() {
                    _this3.hide();
                },
                reverseFunc: function reverseFunc() {
                    _this3.show();
                },
                dependsOn: [changeOpacityTransition]
            }), false);
            result.setStartTime(startTime);
            return result;
        }
    }]);
    return PlayerPopup;
}(BasePopup);

var PopupDefinition = function (_Popup) {
    inherits(PopupDefinition, _Popup);

    function PopupDefinition(options) {
        classCallCheck(this, PopupDefinition);

        var _this4 = possibleConstructorReturn(this, (PopupDefinition.__proto__ || Object.getPrototypeOf(PopupDefinition)).call(this, options));

        _this4.stack = [{ content: _this4.options.content, title: _this4.options.title }];
        return _this4;
    }

    createClass(PopupDefinition, [{
        key: "getTitleAreaContent",
        value: function getTitleAreaContent() {
            return [UI.createElement(Button, { ref: "backButton", className: "pull-left", style: {
                    border: "none", backgroundColor: "transparent",
                    fontSize: "18pt", color: "#888888", padding: "2px", marginTop: "-12px", marginLeft: "-15px",
                    marginRight: "-15px"
                }, label: "<" })].concat(toConsumableArray(get(PopupDefinition.prototype.__proto__ || Object.getPrototypeOf(PopupDefinition.prototype), "getTitleAreaContent", this).call(this)));
        }
    }, {
        key: "getContent",
        value: function getContent() {
            return [UI.createElement(
                Panel,
                { ref: "titleArea", style: {
                        backgroundColor: "#F3F3F3", paddingLeft: "20px", fontSize: this.options.titleFontSize,
                        fontWeight: "bold", paddingTop: "6px", paddingBottom: "6px", textAlign: "center",
                        borderBottom: "1px solid #BEBEBE"
                    } },
                this.getTitleAreaContent()
            ), UI.createElement(MarkupRenderer, { value: this.options.content, style: { padding: "8px" } })];
        }
    }, {
        key: "pushDefinition",
        value: function pushDefinition(definition) {
            this.stack.push(definition);
            this.setStyle("left", "0px");
            this.setStyle("top", "0px");
            this.options.content = definition.content;
            this.options.title = definition.title;
            this.redraw();
            //this.recalculatePosition();
            this.bindInsideParent();
            if (this.stack.length > 1) {
                this.backButton.removeClass("hidden");
            }
        }
    }, {
        key: "popDefinition",
        value: function popDefinition() {
            this.stack.pop();
            this.setStyle("left", "0px");
            this.setStyle("top", "0px");
            this.options.content = this.stack[this.stack.length - 1].content;
            this.options.title = this.stack[this.stack.length - 1].title;
            this.redraw();
            //this.recalculatePosition();
            this.bindInsideParent();
            if (this.stack.length === 1) {
                this.backButton.addClass("hidden");
            }
        }
    }, {
        key: "recalculatePosition",
        value: function recalculatePosition() {
            // Compute the x and y coordinates of the popup
            var element = this.options.definition.node;
            var x = element.offsetWidth / 2;
            var y = element.offsetHeight;
            while (element !== this.parentNode && element.style.position !== "relative") {
                x += element.offsetLeft - element.scrollLeft;
                y += element.offsetTop - element.scrollTop;
                element = element.offsetParent;
            }
            this.setCenter({ x: x, y: y });
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            //this.recalculatePosition();
            get(PopupDefinition.prototype.__proto__ || Object.getPrototypeOf(PopupDefinition.prototype), "onMount", this).call(this);
            //Recompute position as it is not calculated properly

            //Back button behavior
            this.backButton.addClickListener(function (event) {
                event.stopPropagation();
                _this5.popDefinition();
                _this5.backButton.node.blur();
            });
            var backButtonColor = this.backButton.options.style.color;
            this.backButton.node.addEventListener("mouseover", function () {
                _this5.backButton.setStyle("color", "#0082AD");
            });
            this.backButton.node.addEventListener("mouseout", function () {
                _this5.backButton.setStyle("color", backButtonColor);
            });

            if (this.stack.length > 1) {
                this.backButton.removeClass("hidden");
            } else {
                this.backButton.addClass("hidden");
            }
        }
    }]);
    return PopupDefinition;
}(Popup);

var Definition = function (_UI$Element) {
    inherits(Definition, _UI$Element);

    function Definition() {
        classCallCheck(this, Definition);
        return possibleConstructorReturn(this, (Definition.__proto__ || Object.getPrototypeOf(Definition)).apply(this, arguments));
    }

    createClass(Definition, [{
        key: "setOptions",
        value: function setOptions(options) {
            get(Definition.prototype.__proto__ || Object.getPrototypeOf(Definition.prototype), "setOptions", this).call(this, options);
            this.options.term = this.options.term || this.options.value;
            if (this.options.term) {
                this.options.definition = TermDefinition.getDefinition(this.options.term.trim());
            }
            if (this.options.children.length == 0) {
                this.options.children = [this.options.value || this.options.term];
            }
        }
    }, {
        key: "getNodeType",
        value: function getNodeType() {
            return "span";
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(Definition.prototype.__proto__ || Object.getPrototypeOf(Definition.prototype), "getNodeAttributes", this).call(this);
            attr.setStyle("position", "relative");
            return attr;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(
                "span",
                { ref: "termDefinition", style: { fontWeight: "bold", color: "#0082AD", cursor: "pointer" } },
                this.options.children
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            this.addClickListener(function (event) {
                event.stopPropagation();
                var element = _this7;
                var popupContained = false;
                while (element) {
                    if (element instanceof PopupDefinition) {
                        popupContained = true;
                    }
                    element = element.parent;
                }

                var title = _this7.options.definition.title;
                var definition = _this7.options.definition.definition;

                if (!popupContained) {
                    if (_this7.constructor.activeDefinition === _this7) {
                        _this7.constructor.Popup.hide();
                        _this7.constructor.Popup = null;
                        _this7.constructor.activeDefinition = null;
                        return;
                    }
                    if (_this7.constructor.Popup && _this7.constructor.Popup.isInDocument()) {
                        _this7.constructor.Popup.hide();
                    }
                    _this7.constructor.Popup = PopupDefinition.create(_this7, {
                        target: _this7.termDefinition,
                        definition: _this7,
                        title: title,
                        content: definition,
                        width: "300px"
                    });
                } else {
                    _this7.constructor.Popup.pushDefinition({
                        title: title,
                        content: definition
                    });
                }
                _this7.constructor.activeDefinition = _this7;
            });
        }
    }]);
    return Definition;
}(UI.Element);

var FacebookShare = function (_UI$Primitive) {
    inherits(FacebookShare, _UI$Primitive);

    function FacebookShare() {
        classCallCheck(this, FacebookShare);
        return possibleConstructorReturn(this, (FacebookShare.__proto__ || Object.getPrototypeOf(FacebookShare)).apply(this, arguments));
    }

    createClass(FacebookShare, [{
        key: "extraNodeAtributes",
        value: function extraNodeAtributes(attr) {
            attr.setStyle("border", "none");
            attr.setStyle("overflow", "hidden");
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign({
                width: "150",
                height: "20",
                scrolling: "no",
                frameborder: "0",
                allowTransparency: "true",
                src: "",
                showFaces: "true",
                share: "true",
                layout: "button"
            }, options);
            if (!options.href) {
                options.href = window.location.href;
            }
            var link = options.href;
            var src = "https://www.facebook.com/plugins/like.php?href=";
            src += link;
            src += "\&width=" + options.width + "\&layout=" + options.layout + "\&action=like\&show_faces=" + options.showFaces + "\&share=" + options.share + "\&height=" + options.height + "\&appId";
            options.src = src;
            get(FacebookShare.prototype.__proto__ || Object.getPrototypeOf(FacebookShare.prototype), "setOptions", this).call(this, options);
        }
    }]);
    return FacebookShare;
}(UI.Primitive("iframe"));

var TwitterShare = function (_UI$Element) {
    inherits(TwitterShare, _UI$Element);

    function TwitterShare() {
        classCallCheck(this, TwitterShare);
        return possibleConstructorReturn(this, (TwitterShare.__proto__ || Object.getPrototypeOf(TwitterShare)).apply(this, arguments));
    }

    createClass(TwitterShare, [{
        key: "setOptions",
        value: function setOptions(options) {
            if (!options.title) {
                options.title = document.title;
            }
            if (!options.href) {
                options.href = window.location.href;
            }
            options.title = "https://twitter.com/intent/tweet?text=" + options.title;
            return options;
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.addClass("twitter-share-button");
        }
    }, {
        key: "onMount",
        value: function onMount() {
            if (!window.twttr) {
                window.twttr = function (d, s, id) {
                    var js,
                        fjs = d.getElementsByTagName(s)[0],
                        t = window.twttr || {};
                    if (d.getElementById(id)) return t;
                    js = d.createElement(s);
                    js.id = id;
                    js.src = "https://platform.twitter.com/widgets.js";
                    fjs.parentNode.insertBefore(js, fjs);

                    t._e = [];
                    t.ready = function (f) {
                        t._e.push(f);
                    };
                    return t;
                }(document, "script", "twitter-wjs");
            }
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(Link, { className: "twitter-share-button", href: this.options.title, value: "Tweet" }), UI.createElement("link", { rel: "canonical", href: this.options.href })];
        }
    }]);
    return TwitterShare;
}(UI.Element);

var VKShare = function (_Link) {
    inherits(VKShare, _Link);

    function VKShare() {
        classCallCheck(this, VKShare);
        return possibleConstructorReturn(this, (VKShare.__proto__ || Object.getPrototypeOf(VKShare)).apply(this, arguments));
    }

    createClass(VKShare, [{
        key: "setOptions",
        value: function setOptions(options) {
            if (!options.href) {
                options.href = window.location.href;
            }
            options.href = "http://vk.com/share.php?url=" + options.href;
            options.target = "_blank";
            get(VKShare.prototype.__proto__ || Object.getPrototypeOf(VKShare.prototype), "setOptions", this).call(this, options);
        }
    }, {
        key: "render",
        value: function render() {
            console.log("VK should work too");
            return [UI.createElement(Button, { size: Size.SMALL, style: { padding: "0.7px", fontSize: "11.5px", paddingLeft: "3px",
                    paddingRight: "3px", marginTop: "-12.5px", marginLeft: "9px", backgroundColor: "#597BA5",
                    color: "white" }, label: "Share", faIcon: "vk" })];
        }
    }]);
    return VKShare;
}(Link);

var ShareButtons = function (_UI$Element2) {
    inherits(ShareButtons, _UI$Element2);

    function ShareButtons() {
        classCallCheck(this, ShareButtons);
        return possibleConstructorReturn(this, (ShareButtons.__proto__ || Object.getPrototypeOf(ShareButtons)).apply(this, arguments));
    }

    createClass(ShareButtons, [{
        key: "render",
        value: function render() {
            if (!this.options.href) {
                this.options.href = window.location.href;
            }
            if (!this.options.title) {
                this.options.title = document.title;
            }
            return [UI.createElement(FacebookShare, { href: this.options.href, style: { display: "inline-block" } }), UI.createElement(TwitterShare, { title: this.options.title, href: this.options.href, style: { display: "inline-block" } }), UI.createElement(VKShare, { href: this.options.href, style: { display: "inline-block" } })];
        }
    }]);
    return ShareButtons;
}(UI.Element);

// Change base objects to support legacy code
function AddMethod(cls, name, func) {
    if (!cls.prototype[name]) {
        cls.prototype[name] = func;
    }
}

// Add method to erase the first occurrence of an element
AddMethod(Array, "erase", function (obj) {
    return this.splice(this.indexOf(obj), 1);
});

// Add methods to insert an element at a particular index
AddMethod(Array, "insert", function (index, obj) {
    return this.splice(index, 0, obj);
});

// Adds a method to get last element from an array
AddMethod(Array, "last", function () {
    return this[this.length - 1];
});

// Add a clone method to arrays
AddMethod(Array, "clone", function () {
    return this.slice();
});

var WebsocketCommandProcessor = function () {
    function WebsocketCommandProcessor() {
        classCallCheck(this, WebsocketCommandProcessor);
    }

    createClass(WebsocketCommandProcessor, null, [{
        key: "addCommandProcessor",
        value: function addCommandProcessor(commandType, callback) {
            this.GLOBAL.addListener(commandType, callback);
        }
    }, {
        key: "processCommand",
        value: function processCommand(command) {
            // TODO: should actually interpret this command more flexibly
            var commandType = command;
            var commandPayload = null;
            this.GLOBAL.dispatch(commandType, commandPayload);
        }
    }]);
    return WebsocketCommandProcessor;
}();

WebsocketCommandProcessor.GLOBAL = new Dispatchable();

// TODO: this probably shouldn't be here
WebsocketCommandProcessor.addCommandProcessor("reloadPage", function (payload) {
    location.reload();
});

WebsocketSubscriber.Global.addListener("serverCommand", function (command) {
    console.log("Processing server command ", command);
    WebsocketCommandProcessor.processCommand(command);
});

var SLOWING_FACTOR = 5;

var CSAForceTransition = function (_Transition) {
    inherits(CSAForceTransition, _Transition);

    function CSAForceTransition(options) {
        classCallCheck(this, CSAForceTransition);

        //TODO(@darius) Name these nodes and edges
        var _this = possibleConstructorReturn(this, (CSAForceTransition.__proto__ || Object.getPrototypeOf(CSAForceTransition)).call(this, {
            func: function func(t) {
                var frameIndex = Math.floor(t * (_this.nodeFrames.length - 1));
                var frame = _this.nodeFrames[frameIndex];

                if (frame === _this.nodeFrames.length - 1) {
                    return;
                }

                var nextFrame = _this.nodeFrames[frameIndex + 1];
                var percent = 1 - (t * (_this.nodeFrames.length - 1) - frameIndex);

                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = _this.graph.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var node = _step.value;

                        var currentCoords = frame.get(node);
                        var nextCoords = void 0;
                        if (nextFrame) {
                            nextCoords = nextFrame.get(node);
                        } else {
                            nextCoords = currentCoords;
                        }
                        node.setCenter({
                            x: percent * currentCoords.x + (1 - percent) * nextCoords.x,
                            y: percent * currentCoords.y + (1 - percent) * nextCoords.y
                        });
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                frame = _this.edgeFrames[frameIndex];
                nextFrame = _this.edgeFrames[frameIndex + 1];
                percent = 1 - (t * (_this.edgeFrames.length - 1) - frameIndex);

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = _this.graph.edges[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var edge = _step2.value;

                        var currentArcRadius = frame.get(edge).curveArcRadius;
                        var nextArcRadius = void 0;
                        if (nextFrame) {
                            nextArcRadius = nextFrame.get(edge).curveArcRadius;
                        } else {
                            nextArcRadius = currentArcRadius;
                        }
                        edge.setCurveArcRadius(percent * currentArcRadius + (1 - percent) * nextArcRadius);
                        edge.update();
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            },
            startTime: options.startTime,
            duration: options.duration
        }));

        _this.points = new Map();
        for (var i = 0; i < options.graph.nodes.length; i += 1) {
            _this.points.set(options.graph.nodes[i], options.graph.nodes[i].getCenter());
        }

        _this.lines = new Map();
        for (var _i = 0; _i < options.graph.edges.length; _i += 1) {
            _this.lines.set(options.graph.edges[_i], {
                curveArcRadius: options.graph.edges[_i].getCurveArcRadius()
            });
        }
        _this.graph = options.graph;
        _this.fps = options.fps || 60;
        _this.realFps = options.realFps || 10;
        _this.nodeFrames = [];
        _this.edgeFrames = [];
        _this.auxiliaryTransitions = [];
        return _this;
    }

    createClass(CSAForceTransition, [{
        key: "setDuration",
        value: function setDuration(duration) {
            this.duration = duration;
        }
    }, {
        key: "generateNewFrame",
        value: function generateNewFrame() {
            var _this2 = this;

            var graph = this.graph;

            // Generate first frame
            if (this.nodeFrames.length === 0) {
                this.nodeFrames.push(new Map(this.points));
                this.edgeFrames.push(new Map(this.lines));
                return;
            }

            // Create a force layout and run 1 step
            var forceLayout = new CSAForceLayout({
                points: this.graph.nodes.map(function (node) {
                    return _this2.points.get(node);
                }),
                edges: graph.options.edges.map(function (edge) {
                    return {
                        first: edge.source,
                        second: edge.target
                    };
                }),
                gravityCenter: graph.getGravityCenter()
            });
            var points = forceLayout.calculateVectors(1);
            for (var i = 0; i < graph.nodes.length; i += 1) {
                var node = graph.nodes[i];
                var coords = {
                    x: points[i].x + points[i].dx,
                    y: points[i].y + points[i].dy
                };
                if (!node.isFixed()) {
                    this.points.delete(node);
                    this.points.set(node, coords);
                }
            }

            //Calculate edge bending
            if (graph.options.supportsBending) {
                var bendingDelta = this.getBendingDelta();
                for (var _i2 = 0; _i2 < graph.edges.length; _i2 += 1) {
                    var edge = graph.edges[_i2];
                    var currentValue = this.lines.get(edge).curveArcRadius;
                    if (edge.options.supportsBending) {
                        this.lines.set(edge, {
                            curveArcRadius: currentValue + bendingDelta[_i2]
                        });
                    }
                }
            }

            // Run auxiliary transitions
            var frameTime = this.nodeFrames.length * 1000 / this.realFps;
            this.runAuxiliaryTransitions(frameTime);
            this.nodeFrames.push(new Map(this.points));
            this.edgeFrames.push(new Map(this.lines));
        }
    }, {
        key: "getBendingDelta",
        value: function getBendingDelta() {
            var delta = new Array(this.graph.edges.length);
            for (var i = 0; i < this.graph.edges.length; i += 1) {
                var edge = this.graph.edges[i];

                if (!edge.options.supportsBending) {
                    delta[i] = 0;
                    return;
                }

                var edgeStartCoords = this.points.get(edge.getSource());
                var edgeEndCoords = this.points.get(edge.getTarget());
                var edgeLine = lineEquation(edgeStartCoords, edgeEndCoords);
                var biggestNode = null;

                for (var _i3 = 0; _i3 < this.graph.nodes.length; _i3 += 1) {
                    if (this.graph.nodes[_i3] === edge.getSource() || this.graph.nodes[_i3] === edge.getTarget()) {
                        continue;
                    }
                    var nodeCoords = this.points.get(this.graph.nodes[_i3]);

                    // Take the node's projection on this line
                    var nodeProjection = perpendicularFoot(nodeCoords, edgeLine);

                    // If the node almost intersects the line and
                    // If the node's projection si on the segment determined by the edge points
                    // In other words, if the node almost intersects the segemnt determined by the edge
                    if (distancePointLine(nodeCoords, edgeLine) <= this.graph.nodes[_i3].getRadius() + 10 && pointOnSegment(nodeProjection, edgeStartCoords, edgeEndCoords)) {
                        // Store the node with the biggest radius out of all the ones that respect the above restrictions
                        if (biggestNode === null || this.graph.nodes[_i3].getRadius() > biggestNode.getRadius()) {
                            biggestNode = this.graph.nodes[_i3];
                        }
                    }
                }

                // Note that the code below is a little different than the one in CSAGraph
                // of the interactive graph
                // This one is slower and behaves more smoothly
                var currentCurveArcRadius = this.lines.get(edge).curveArcRadius;

                var targetCurveArcRadius = void 0;
                // If there exists a node that almost intersects the edge
                if (biggestNode !== null) {
                    // If the current edge's arc radius is 0
                    if (currentCurveArcRadius === 0) {
                        // Set the target arc radius to be opposite of the direction from which the node is coming
                        // Set it proportional to the node's radius
                        targetCurveArcRadius = 2.5 * biggestNode.getRadius() * (signedDistancePointLine(this.points.get(biggestNode), edgeLine) > 0 ? -1 : 1);
                    } else {
                        // Set the target arc radius radius to be in the direction that it's already going in
                        // This is to minimize annoying wiggling by the edges
                        targetCurveArcRadius = 2.5 * biggestNode.getRadius() * (currentCurveArcRadius < 0 ? -1 : 1);
                    }
                } else {
                    // Set the edge to be straight
                    targetCurveArcRadius = 0;
                }

                // With this delta, the edge will head towards its target radius with exponentially decaying speed
                delta[i] = (targetCurveArcRadius - currentCurveArcRadius) / SLOWING_FACTOR;
            }

            return delta;
        }
    }, {
        key: "forceFinish",
        value: function forceFinish() {
            var totalFrames = 1 + Math.ceil(this.duration * this.realFps / 1000);
            while (this.nodeFrames.length < totalFrames) {
                this.generateNewFrame();
            }

            return this;
        }
    }, {
        key: "runAuxiliaryTransitions",
        value: function runAuxiliaryTransitions(time) {
            for (var i = 0; i < this.auxiliaryTransitions.length; i += 1) {
                var transition = this.auxiliaryTransitions[i];
                if (time < transition.startTime || transition.isStopped()) {
                    continue;
                }
                transition.nextStep(time);
            }
        }
    }, {
        key: "moveNodeTransition",
        value: function moveNodeTransition(options) {
            var _this3 = this;

            return new Transition({
                func: function func(t, context) {
                    _this3.points.set(context.node, {
                        x: (1 - t) * context.coords.x + t * options.newCoords.x,
                        y: (1 - t) * context.coords.y + t * options.newCoords.y
                    });
                },
                context: {
                    coords: this.points.get(options.node),
                    node: options.node
                },
                duration: options.duration,
                startTime: options.startTime,
                dependsOn: options.dependsOn
            });
        }
    }, {
        key: "addTransition",
        value: function addTransition(transition) {
            this.auxiliaryTransitions.push(transition);
        }
    }]);
    return CSAForceTransition;
}(Transition);

var ProgrammingLanguageTable = function (_Table) {
    inherits(ProgrammingLanguageTable, _Table);

    function ProgrammingLanguageTable() {
        classCallCheck(this, ProgrammingLanguageTable);
        return possibleConstructorReturn(this, (ProgrammingLanguageTable.__proto__ || Object.getPrototypeOf(ProgrammingLanguageTable)).apply(this, arguments));
    }

    createClass(ProgrammingLanguageTable, [{
        key: "setColumns",
        value: function setColumns() {
            var cellStyle = {
                textAlign: "left",
                verticalAlign: "middle"
            };
            var nameHeaderStyle = {
                textAlign: "left",
                verticalAlign: "middle",
                width: "20%"
            };
            var compilerHeaderStyle = {
                textAlign: "left",
                verticalAlign: "middle",
                width: "30%"
            };
            var commentHeaderStyle = {
                textAlign: "left",
                verticalAlign: "middle",
                width: "50%"
            };
            var columns = [{
                value: function value(language) {
                    return language.name;
                },
                headerName: "Language",
                headerStyle: nameHeaderStyle,
                cellStyle: cellStyle
            }, {
                value: function value(language) {
                    return language.compiler;
                },
                headerName: "Compiler",
                headerStyle: compilerHeaderStyle,
                cellStyle: cellStyle
            }, {
                value: function value(language) {
                    if (language.comment) {
                        return UI.createElement(MarkupRenderer, { value: language.comment });
                    }
                    return null;
                },
                headerName: "Comment",
                headerStyle: commentHeaderStyle,
                cellStyle: cellStyle
            }];
            get(ProgrammingLanguageTable.prototype.__proto__ || Object.getPrototypeOf(ProgrammingLanguageTable.prototype), "setColumns", this).call(this, columns);
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return ProgrammingLanguage.all();
        }
    }]);
    return ProgrammingLanguageTable;
}(Table);

// TODO: should probably be in a modal component
var DemoMarkupEditor = function (_UI$Element) {
    inherits(DemoMarkupEditor, _UI$Element);

    function DemoMarkupEditor() {
        classCallCheck(this, DemoMarkupEditor);
        return possibleConstructorReturn(this, (DemoMarkupEditor.__proto__ || Object.getPrototypeOf(DemoMarkupEditor)).apply(this, arguments));
    }

    createClass(DemoMarkupEditor, [{
        key: "getArticle",
        value: function getArticle() {
            return ArticleStore.get(this.options.articleId);
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var article = this.getArticle();
            if (article) {
                return [UI.createElement(MarkupEditor, { value: article.markup, style: { height: "100%" }, showButtons: false })];
            }
            ArticleStore.fetch(this.options.articleId, function () {
                setTimeout(function () {
                    _this2.redraw();
                }, 100);
            });
            return [];
        }
    }]);
    return DemoMarkupEditor;
}(UI.Element);

var MarkupTable = function (_Table) {
    inherits(MarkupTable, _Table);

    function MarkupTable() {
        classCallCheck(this, MarkupTable);
        return possibleConstructorReturn(this, (MarkupTable.__proto__ || Object.getPrototypeOf(MarkupTable)).apply(this, arguments));
    }

    createClass(MarkupTable, [{
        key: "setColumns",
        value: function setColumns() {
            get(MarkupTable.prototype.__proto__ || Object.getPrototypeOf(MarkupTable.prototype), "setColumns", this).call(this, (this.options.columns || []).map(function (column) {
                return {
                    headerName: column.headerName || column.header,
                    value: function value(entry) {
                        return UI.createElement(MarkupRenderer, { value: entry[column.fieldName] || entry[column.field] || "" });
                    },
                    headerStyle: column.headerStyle || {},
                    cellStyle: column.cellStyle || {}
                };
            }));
        }
    }, {
        key: "getEntries",
        value: function getEntries() {
            return this.options.rows || this.options.entries;
        }
    }]);
    return MarkupTable;
}(Table);

var _class$122, _temp$28;

var YOUTUBE_API_SRC = "https://www.youtube.com/iframe_api";
var State$1 = {
    NOT_STARTED: 1,
    LOADING: 2,
    LOADED: 3,
    ERROR: 4
};

var YoutubeIframe = (_temp$28 = _class$122 = function (_UI$Element) {
    inherits(YoutubeIframe, _UI$Element);

    function YoutubeIframe() {
        classCallCheck(this, YoutubeIframe);
        return possibleConstructorReturn(this, (YoutubeIframe.__proto__ || Object.getPrototypeOf(YoutubeIframe)).apply(this, arguments));
    }

    createClass(YoutubeIframe, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                height: 270,
                width: 480
            };
        }
    }, {
        key: "getPlayer",
        value: function getPlayer() {
            return this.player;
        }
    }, {
        key: "initializeYoutube",
        value: function initializeYoutube() {
            this.player = new this.constructor.youtubeAPI.Player(this.node, {
                height: this.options.height,
                width: this.options.width,
                videoId: this.options.videoId
            });
            if (this._delayedListeners) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = this._delayedListeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _getPlayer;

                        var delayedListener = _step.value;

                        (_getPlayer = this.getPlayer()).addEventListener.apply(_getPlayer, toConsumableArray(delayedListener));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                delete this._delayedListeners;
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this2 = this;

            this.constructor.onYoutubeLoaded(function () {
                return _this2.initializeYoutube();
            });
        }
    }, {
        key: "onUnmount",
        value: function onUnmount() {
            this.getPlayer() && this.getPlayer().destroy();
        }
    }], [{
        key: "ensureYoutubeAPI",
        value: function ensureYoutubeAPI() {
            var _this3 = this;

            if (this.YOUTUBE_API_STATE === State$1.NOT_STARTED) {
                ensure(YOUTUBE_API_SRC, NOOP_FUNCTION);
                this.YOUTUBE_API_STATE = State$1.LOADING;

                // I do not like this pattern, Youtube...
                self.onYouTubeIframeAPIReady = function () {
                    _this3.YOUTUBE_API_STATE = State$1.LOADED;
                    _this3.youtubeAPI = YT;
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = _this3._registeredCallbacks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var callback = _step2.value;

                            callback();
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }

                    delete _this3._registeredCallbacks;
                };
            }
        }
    }, {
        key: "registerDelayedCallback",
        value: function registerDelayedCallback(callback) {
            if (!this._registeredCallbacks) {
                this._registeredCallbacks = [];
                this.ensureYoutubeAPI();
            }
            this._registeredCallbacks.push(callback);
        }
    }, {
        key: "onYoutubeLoaded",
        value: function onYoutubeLoaded(callback) {
            if (this.YOUTUBE_API_STATE === State$1.LOADED) {
                callback();
                return;
            }
            if (this.YOUTUBE_API_STATE === State$1.ERROR) {
                throw Error("The Youtube API could not be reached.");
            }
            this.registerDelayedCallback(callback);
        }
    }]);
    return YoutubeIframe;
}(UI.Element), _class$122.PLAYER_EVENTS = ["onReady", "onStateChange", "onPlaybackQualityChange", "onPlaybackRateChange", "onError", "onApiChange"], _class$122.YOUTUBE_API_STATE = State$1.NOT_STARTED, _temp$28);
var _iteratorNormalCompletion3 = true;
var _didIteratorError3 = false;
var _iteratorError3 = undefined;

try {
    var _loop$1 = function _loop() {
        var playerEvent = _step3.value;

        YoutubeIframe.prototype["add" + playerEvent.substring(2) + "Listener"] = function (callback) {
            var player = this.getPlayer();
            if (player) {
                player.addEventListener(playerEvent, callback);
            } else {
                this._delayedListeners = this._delayedListeners || [];

                for (var _len = arguments.length, extraArgs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    extraArgs[_key - 1] = arguments[_key];
                }

                this._delayedListeners.push([playerEvent, callback].concat(extraArgs));
            }
        };
    };

    for (var _iterator3 = YoutubeIframe.PLAYER_EVENTS[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        _loop$1();
    }
} catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
} finally {
    try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
        }
    } finally {
        if (_didIteratorError3) {
            throw _iteratorError3;
        }
    }
}

var LocalizedTime = function (_UI$Element) {
    inherits(LocalizedTime, _UI$Element);

    function LocalizedTime() {
        classCallCheck(this, LocalizedTime);
        return possibleConstructorReturn(this, (LocalizedTime.__proto__ || Object.getPrototypeOf(LocalizedTime)).apply(this, arguments));
    }

    createClass(LocalizedTime, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                format: "HH:mm",
                value: 0
            };
        }
    }, {
        key: "render",
        value: function render() {
            return new StemDate(this.options.value).format(this.options.format);
        }
    }]);
    return LocalizedTime;
}(UI.Element);

MarkupClassMap.addClass("LocalizedTime", LocalizedTime);
MarkupClassMap.addClass("Definition", Definition);
MarkupClassMap.addClass("Graph", GraphSVG);
MarkupClassMap.addClass("User", UserHandle);
MarkupClassMap.addClass("Submission", SubmissionSummaryMarkup);
MarkupClassMap.addClass("Emoji", UI.Emoji);
MarkupClassMap.addClass("Latex", Latex);
MarkupClassMap.addClass("Geometry", CSAGeometryWidgetSVG);
MarkupClassMap.addClass("Table", MarkupTable);

// TODO: this should be added only in about page ( & Analysis article )
MarkupClassMap.addClass("PLTable", ProgrammingLanguageTable);
MarkupClassMap.addClass("DemoMarkupEditor", DemoMarkupEditor);
MarkupClassMap.addClass("EvalTasksSolutionsWidget", EvalTasksSolutionsWidget);
MarkupClassMap.addClass("QuestionnaireButton", QuestionnaireButton);
MarkupClassMap.addClass("YoutubeVideo", YoutubeIframe);

var _class$123, _descriptor$57, _descriptor2$51, _dec$63, _class3$44;

function _initDefineProp$58(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

function _applyDecoratedDescriptor$59(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var CSAPlayerContainer = function (_UI$Element) {
    inherits(CSAPlayerContainer, _UI$Element);

    function CSAPlayerContainer() {
        classCallCheck(this, CSAPlayerContainer);
        return possibleConstructorReturn(this, (CSAPlayerContainer.__proto__ || Object.getPrototypeOf(CSAPlayerContainer)).apply(this, arguments));
    }

    createClass(CSAPlayerContainer, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle({
                width: "100%",
                height: "100%",
                position: "relative",
                display: "inline-block"
            });
        }
    }]);
    return CSAPlayerContainer;
}(UI.Element);

var PlayerCardPanelStyle = (_class$123 = function (_CardPanelStyle) {
    inherits(PlayerCardPanelStyle, _CardPanelStyle);

    function PlayerCardPanelStyle() {
        var _ref;

        var _temp, _this2, _ret;

        classCallCheck(this, PlayerCardPanelStyle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this2 = possibleConstructorReturn(this, (_ref = PlayerCardPanelStyle.__proto__ || Object.getPrototypeOf(PlayerCardPanelStyle)).call.apply(_ref, [this].concat(args))), _this2), _initDefineProp$58(_this2, "DEFAULT", _descriptor$57, _this2), _initDefineProp$58(_this2, "body", _descriptor2$51, _this2), _temp), possibleConstructorReturn(_this2, _ret);
    }

    return PlayerCardPanelStyle;
}(CardPanelStyle), _descriptor$57 = _applyDecoratedDescriptor$59(_class$123.prototype, "DEFAULT", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            backgroundColor: "#DBDBDB",
            color: "white"
        };
    }
}), _descriptor2$51 = _applyDecoratedDescriptor$59(_class$123.prototype, "body", [styleRuleInherit], {
    enumerable: true,
    initializer: function initializer() {
        return {
            padding: 0,
            height: "100%",
            width: "100%",
            position: "relative",
            overflow: "hidden"
        };
    }
}), _class$123);
var PlayerCardPanel = (_dec$63 = registerStyle(PlayerCardPanelStyle), _dec$63(_class3$44 = function (_CardPanel) {
    inherits(PlayerCardPanel, _CardPanel);

    function PlayerCardPanel() {
        classCallCheck(this, PlayerCardPanel);
        return possibleConstructorReturn(this, (PlayerCardPanel.__proto__ || Object.getPrototypeOf(PlayerCardPanel)).apply(this, arguments));
    }

    createClass(PlayerCardPanel, [{
        key: "setOptions",
        value: function setOptions(options) {
            options = Object.assign({
                // level: "default",
                color: "#DBDBDB"
            }, options);

            get(PlayerCardPanel.prototype.__proto__ || Object.getPrototypeOf(PlayerCardPanel.prototype), "setOptions", this).call(this, options);
            this.focused = false;
            return options;
        }
    }, {
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            get(PlayerCardPanel.prototype.__proto__ || Object.getPrototypeOf(PlayerCardPanel.prototype), "extraNodeAttributes", this).call(this, attr);
            attr.setStyle({
                marginBottom: "20px",
                display: "flex",
                flexDirection: "column",
                height: this.options.height + "px",
                width: this.options.width + "px"
            });
        }
    }, {
        key: "render",
        value: function render() {
            return UI.createElement(
                SVG.SVGRoot,
                { ref: "svg", width: "100%", height: "100%" },
                this.options.children
            );
        }
    }, {
        key: "getChildrenToRender",
        value: function getChildrenToRender() {
            return [this.options.nonSVGChildren, get(PlayerCardPanel.prototype.__proto__ || Object.getPrototypeOf(PlayerCardPanel.prototype), "getChildrenToRender", this).call(this)];
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.options.color = color;
            if (this.node) {
                this.panelTitle.setStyle("background-color", color);
                this.setStyle("border-color", color);
            }
        }
    }, {
        key: "toggleFocus",
        value: function toggleFocus(duration) {
            var _this4 = this;

            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;
            var modifier = new Modifier$1({
                func: function func() {
                    _this4.focused = !_this4.focused;
                },
                reverseFunc: function reverseFunc() {
                    _this4.focused = !_this4.focused;
                }
            });
            transitionList.push(modifier, false);

            var targetColor = this.focused ? "#DBDBDB" : "#87ACCC";
            transitionList.push(new Transition({
                func: function func(t, context) {
                    _this4.setColor(Color.interpolate(context.color, targetColor, t));
                },
                context: {
                    color: this.options.color
                },
                duration: duration,
                dependsOn: [modifier]
            }), false);

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }]);
    return PlayerCardPanel;
}(CardPanel)) || _class3$44);

var CSAPlayer = function (_UI$Element2) {
    inherits(CSAPlayer, _UI$Element2);

    function CSAPlayer() {
        classCallCheck(this, CSAPlayer);
        return possibleConstructorReturn(this, (CSAPlayer.__proto__ || Object.getPrototypeOf(CSAPlayer)).apply(this, arguments));
    }

    createClass(CSAPlayer, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                speedFactor: 1,
                fullPlayer: true,
                speedInterpolationArray: [{ x: 0, y: 0.5 }, { x: 0.25, y: 0.75 }, { x: 0.5, y: 1 }, { x: 0.75, y: 2 }, { x: 1, y: 4 }]
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            if (this.getDefaultOptions) {
                var defaultOptions = this.getDefaultOptions();
                get(CSAPlayer.prototype.__proto__ || Object.getPrototypeOf(CSAPlayer.prototype), "setOptions", this).call(this, Object.assign(defaultOptions, options));
            } else {
                get(CSAPlayer.prototype.__proto__ || Object.getPrototypeOf(CSAPlayer.prototype), "setOptions", this).call(this, options);
            }
        }
    }, {
        key: "redraw",
        value: function redraw() {
            this.pause();
            get(CSAPlayer.prototype.__proto__ || Object.getPrototypeOf(CSAPlayer.prototype), "redraw", this).call(this);
            if (this.movie) {
                delete this.movie;
            }
        }
    }, {
        key: "render",
        value: function render() {

            var buttonOptions = {
                style: {
                    "margin": "0 5px",
                    borderRadius: "4px"
                }
            };

            var result = [UI.createElement(ProgressBar, { ref: "progressBar", active: "true", value: "0", disableTransition: true,
                style: { height: "9px", "margin-bottom": "10px", cursor: "pointer" } }), UI.createElement(Button, { ref: "playButton", level: "default", size: Size.SMALL, style: buttonOptions.style, faIcon: "play" }), UI.createElement(Button, { ref: "pauseButton", level: "default", className: "hidden", size: Size.SMALL, style: buttonOptions.style, faIcon: "pause" }), UI.createElement(Button, { ref: "repeatButton", level: "default", className: "hidden", size: Size.SMALL, style: buttonOptions.style, faIcon: "repeat" })];

            if (this.options.fullPlayer === true) {
                result.push(UI.createElement(Button, { ref: "plusButton", level: "default", className: "pull-right", size: Size.SMALL, style: buttonOptions.style, faIcon: "plus-circle" }));
                result.push(UI.createElement(HorizontalSlideBar, { ref: "speedBar", className: "pull-right", width: 100, barWidth: 5, value: "0.5", style: { margin: "0 8px" } }));
                result.push(UI.createElement(Button, { ref: "minusButton", level: "default", className: "pull-right", size: Size.SMALL, style: buttonOptions.style, faIcon: "minus-circle" }));
            }

            return result;
        }
    }, {
        key: "setSpeedFactor",
        value: function setSpeedFactor(speedFactor) {
            this.options.speedFactor = speedFactor;
            if (this.movie) {
                this.movie.setSpeedFactor(speedFactor);
            }
        }
    }, {
        key: "pause",
        value: function pause() {
            this.options.paused = true;
            if (this.movie) {
                this.movie.pause();
            }
            if (this.pauseButton) {
                this.pauseButton.hide();
            }
            if (this.playButton) {
                this.playButton.show();
            }
        }
    }, {
        key: "play",
        value: function play() {
            this.options.paused = false;
            if (this.movie) {
                this.movie.resume();
            } else {
                this.buildMovie();
                this.movie.setSpeedFactor(this.options.speedFactor);
                this.movie.startAtPercent(0);
            }
            this.playButton.hide();
            this.pauseButton.show();
        }
    }, {
        key: "repeat",
        value: function repeat() {
            this.movie.startAtPercent(0);
            this.repeatButton.hide();
            this.pauseButton.show();
        }
    }, {
        key: "setProgressValue",
        value: function setProgressValue(progressValue) {
            this.progressBar.set(progressValue);
            if (progressValue === 1) {
                this.playButton.hide();
                this.pauseButton.hide();
                this.repeatButton.show();
            }
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this6 = this;

            if (this.options.fullPlayer) {
                this.speedBar.addListener("change", function (newValue) {
                    _this6.setSpeedFactor(interpolationValue(_this6.options.speedInterpolationArray, newValue));
                });

                this.minusButton.addClickListener(function () {
                    var newSpeed = _this6.options.speedInterpolationArray[0].x;
                    for (var i = 0; i < _this6.options.speedInterpolationArray.length; i += 1) {
                        var speed = _this6.options.speedInterpolationArray[i];
                        if (speed.y < _this6.options.speedFactor) {
                            newSpeed = speed.x;
                        }
                    }
                    _this6.speedBar.setValue(newSpeed);
                });

                this.plusButton.addClickListener(function () {
                    var newSpeed = _this6.options.speedInterpolationArray.last().x;
                    for (var i = _this6.options.speedInterpolationArray.length - 1; i >= 0; i -= 1) {
                        var speed = _this6.options.speedInterpolationArray[i];
                        if (speed.y > _this6.options.speedFactor) {
                            newSpeed = speed.x;
                        }
                    }
                    _this6.speedBar.setValue(newSpeed);
                });
            }
            this.playButton.addClickListener(function () {
                _this6.play();
            });

            this.progressBar.addClickListener(function (event) {
                if (!_this6.movie) {
                    _this6.buildMovie();
                    _this6.options.paused = false;
                }

                _this6.repeatButton.hide();
                if (_this6.options.paused) {
                    _this6.playButton.show();
                    _this6.pauseButton.hide();
                } else {
                    _this6.playButton.hide();
                    _this6.pauseButton.show();
                }

                var t = (Device.getEventX(event) - getOffset(_this6.progressBar).left) / _this6.progressBar.getWidth();
                _this6.movie.startAtPercent(t);
            });

            this.pauseButton.addClickListener(function () {
                _this6.pause();
            });

            this.repeatButton.addClickListener(function () {
                _this6.repeat();
            });
        }
    }, {
        key: "focusTransition",
        value: function focusTransition(focusPanels, duration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            var transitions = new TransitionList();
            transitions.dependsOn = dependsOn;
            if (!Array.isArray(focusPanels)) {
                focusPanels = [focusPanels];
            }

            for (var i = 0; i < this.panels.length; i += 1) {
                var panel = this.panels[i];
                if (panel.focused && focusPanels.indexOf(panel) === -1) {
                    transitions.add(panel.toggleFocus(duration), false);
                }
            }

            for (var _i = 0; _i < focusPanels.length; _i += 1) {
                var _panel = focusPanels[_i];
                if (!_panel.focused) {
                    transitions.add(_panel.toggleFocus(duration), false);
                }
            }

            transitions.setStartTime(startTime);
            return transitions;
        }
    }, {
        key: "delayTransition",
        value: function delayTransition(duration) {
            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            return new Transition({
                func: function func() {},
                duration: duration,
                startTime: startTime,
                dependsOn: dependsOn
            });
        }
    }]);
    return CSAPlayer;
}(UI.Element);

var VisualListElement = function (_SVG$Group) {
    inherits(VisualListElement, _SVG$Group);

    function VisualListElement() {
        classCallCheck(this, VisualListElement);
        return possibleConstructorReturn(this, (VisualListElement.__proto__ || Object.getPrototypeOf(VisualListElement)).apply(this, arguments));
    }

    createClass(VisualListElement, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                cellWidth: 40,
                cellHeight: 25,
                lineLength: 25,
                fill: "white",
                color: "black",
                strokeWidth: 1.5,
                textStrokeWidth: 1,
                fontSize: 15
            };
        }
    }, {
        key: "getLineCoords",
        value: function getLineCoords() {
            // Name shorteners
            var orientation = this.options.orientation;
            var x = this.options.coords.x;
            var y = this.options.coords.y;
            var cellWidth = this.options.cellWidth;
            var cellHeight = this.options.cellHeight;
            var lineLength = this.options.lineLength;

            return {
                x1: function () {
                    if (orientation === "right") {
                        return x + cellWidth;
                    } else if (orientation === "left") {
                        return x;
                    } else {
                        // orientation === "up" || orientation === "down"
                        return x + cellWidth / 2;
                    }
                }(),
                y1: function () {
                    if (orientation === "down") {
                        return y + cellHeight;
                    } else if (orientation === "up") {
                        return y;
                    } else {
                        // orientation === "left" || orientation === "right"
                        return y + cellHeight / 2;
                    }
                }(),
                x2: function () {
                    if (orientation === "right") {
                        return x + cellWidth + lineLength;
                    } else if (orientation === "left") {
                        return x - lineLength;
                    } else {
                        // orientation === "up" || orientation === "down"
                        return x + cellWidth / 2;
                    }
                }(),
                y2: function () {
                    if (orientation === "down") {
                        return y + cellHeight + lineLength;
                    } else if (orientation === "up") {
                        return y - lineLength;
                    } else {
                        // orientation === "left" || orientation === "right"
                        return y + cellHeight / 2;
                    }
                }()
            };
        }
    }, {
        key: "getCoords",
        value: function getCoords() {
            return this.options.coords;
        }
    }, {
        key: "setCoords",
        value: function setCoords(coords) {
            this.options.coords = coords;
            this.rect.setX(coords.x);
            this.rect.setY(coords.y);
            this.label.setPosition(coords.x + this.options.cellWidth / 2, coords.y + this.options.cellHeight / 2);
            if (this.options.hasLine) {
                var lineCoords = this.getLineCoords();
                this.line.setLine(lineCoords.x1, lineCoords.y1, lineCoords.x2, lineCoords.y2);
            }
            var clipPathRect = this.getClipPathRect();
            this.clipPathRect.setX(clipPathRect.x);
            this.clipPathRect.setY(clipPathRect.y);
            this.clipPathRect.setHeight(clipPathRect.height);
            this.clipPathRect.setWidth(clipPathRect.width);
        }
    }, {
        key: "getLabel",
        value: function getLabel() {
            return this.options.label;
        }
    }, {
        key: "setLabel",
        value: function setLabel(label) {
            this.options.label = label;
            this.label.setText(this.options.label);
        }
    }, {
        key: "hideLineTransition",
        value: function hideLineTransition(duration) {
            var _this2 = this;

            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var createLineModifier = new Modifier$1({
                func: function func() {
                    _this2.toggleLine(true);
                    _this2.line.setAttribute("opacity", 1);
                },
                reverseFunc: function reverseFunc() {
                    _this2.toggleLine(false);
                }
            });
            var changeOpacityTransition = new Transition({
                func: function func(t, context) {
                    if (_this2.line) {
                        _this2.line.setAttribute("opacity", context.opacity * (1 - t));
                    }
                },
                context: { opacity: 1 },
                duration: duration,
                dependsOn: [createLineModifier]
            });
            var removeLineModifier = new Modifier$1({
                func: function func() {
                    _this2.toggleLine(false);
                },
                reverseFunc: function reverseFunc() {
                    _this2.toggleLine(true);
                    _this2.line.setAttribute("opacity", 1);
                },
                startTime: duration,
                dependsOn: [createLineModifier, changeOpacityTransition]
            });
            var list = new TransitionList();
            list.dependsOn = dependsOn;
            list.push(createLineModifier, false);
            list.push(changeOpacityTransition, false);
            list.push(removeLineModifier, false);
            list.setStartTime(startTime);
            return list;
        }
    }, {
        key: "showLineTransition",
        value: function showLineTransition(duration) {
            var _this3 = this;

            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var ensureHasLineModifier = new Modifier$1({
                func: function func(context) {
                    context.addedLine = !_this3.line;
                    _this3.toggleLine(true);
                },
                reverseFunc: function reverseFunc(context) {
                    if (context.addedLine) {
                        _this3.toggleLine(false);
                    }
                },
                context: {}
            });
            var changeOpacityTransition = new Transition({
                func: function func(t, context) {
                    if (_this3.line) {
                        _this3.line.setAttribute("opacity", context.opacity + (1 - context.opacity) * t);
                    }
                },
                context: { opacity: 0 },
                duration: duration,
                dependsOn: [ensureHasLineModifier]
            });
            var list = new TransitionList();
            list.dependsOn = dependsOn;
            list.push(ensureHasLineModifier, false);
            list.push(changeOpacityTransition, false);
            list.setStartTime(startTime);
            return list;
        }
    }, {
        key: "showTransition",
        value: function showTransition(duration) {
            var _this4 = this;

            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            return new Transition({
                func: function func(t, context) {
                    _this4.setAttribute("opacity", context.opacity + (1 - context.opacity) * t);
                },
                context: { opacity: 0 },
                duration: duration,
                startTime: startTime,
                dependsOn: dependsOn
            });
        }
    }, {
        key: "hideTransition",
        value: function hideTransition(duration) {
            var _this5 = this;

            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            return new Transition({
                func: function func(t, context) {
                    _this5.setAttribute("opacity", context.opacity * (1 - t));
                },
                context: { opacity: 1 },
                duration: duration,
                startTime: startTime,
                dependsOn: dependsOn
            });
        }
    }, {
        key: "toggleLine",
        value: function toggleLine(boolFlag) {
            if (boolFlag === this.options.hasLine) {
                return;
            }
            this.options.hasLine = boolFlag;
            if (this.options.hasLine) {
                var lineCoords = this.getLineCoords();
                this.appendChild(UI.createElement(SVG.Line, {
                    ref: this.refLink("line"), x1: lineCoords.x1, y1: lineCoords.y1, x2: lineCoords.x2,
                    y2: lineCoords.y2, stroke: this.options.color, strokeWidth: this.options.strokeWidth
                }));
            } else {
                this.eraseChild(this.line);
                delete this.line;
            }
        }
    }, {
        key: "render",
        value: function render() {
            this.options.children = [];

            this.options.children.push(UI.createElement(
                SVG.Group,
                { ref: "cellGroup", clipPath: "url(#visualListElementClipPath" + uniqueId(this) + ")" },
                UI.createElement(SVG.Rect, {
                    ref: this.refLink("rect"), x: this.options.coords.x, y: this.options.coords.y,
                    width: this.options.cellWidth, height: this.options.cellHeight, fill: this.options.fill,
                    stroke: this.options.color, strokeWidth: this.options.strokeWidth
                }),
                UI.createElement(SVG.Text, {
                    ref: this.refLink("label"), x: this.options.coords.x + this.options.cellWidth / 2,
                    y: this.options.coords.y + this.options.cellHeight / 2, text: this.options.label,
                    fill: this.options.color, stroke: this.options.color, strokeWidth: this.options.textStrokeWidth,
                    fontSize: this.options.fontSize, textAnchor: "middle", dy: "0.35em"
                }),
                UI.createElement(
                    SVG.Defs,
                    { ref: this.refLink("defs") },
                    UI.createElement(
                        SVG.ClipPath,
                        { id: "visualListElementClipPath" + uniqueId(this) },
                        UI.createElement(SVG.Rect, _extends({ ref: this.refLink("clipPathRect") }, this.getClipPathRect()))
                    )
                )
            ));

            if (this.options.hasLine) {
                var lineCoords = this.getLineCoords();
                this.options.children.push(UI.createElement(SVG.Line, {
                    ref: this.refLink("line"), x1: lineCoords.x1, y1: lineCoords.y1, x2: lineCoords.x2,
                    y2: lineCoords.y2, stroke: this.options.color, strokeWidth: this.options.strokeWidth
                }));
            }

            return this.options.children;
        }
    }, {
        key: "getClipPathRect",
        value: function getClipPathRect() {
            // Name shorteners
            var strokeWidth = this.options.strokeWidth;
            var cellWidth = this.options.cellWidth;
            var cellHeight = this.options.cellHeight;
            var x = this.options.coords.x;
            var y = this.options.coords.y;

            return {
                x: x - strokeWidth / 2,
                y: y - strokeWidth / 2,
                width: cellWidth + strokeWidth,
                height: cellHeight + strokeWidth
            };
        }
    }, {
        key: "getColor",
        value: function getColor() {
            return this.options.color;
        }
    }, {
        key: "setColor",
        value: function setColor(color) {
            this.options.color = color;
            this.rect.setAttribute("stroke", color);
            this.label.setColor(color);
        }
    }, {
        key: "setFill",
        value: function setFill(color) {
            this.rect.setAttribute("fill", color);
        }
    }, {
        key: "moveTransition",
        value: function moveTransition(coords, duration) {
            var _this6 = this;

            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            return new Transition({
                func: function func(t, context) {
                    _this6.setCoords({
                        x: coords.x * t + context.coords.x * (1 - t),
                        y: coords.y * t + context.coords.y * (1 - t)
                    });
                },
                context: {
                    coords: this.options.coords
                },
                duration: duration,
                startTime: startTime,
                dependsOn: dependsOn
            });
        }
    }, {
        key: "slideNewValueTransition",
        value: function slideNewValueTransition(newValue, direction, duration) {
            var dependsOn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

            var _this7 = this;

            var startTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
            var inMovie = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;
            // Name shorteners
            var cellWidth = this.options.cellWidth;
            var cellHeight = this.options.cellHeight;
            var x = this.options.coords.x;
            var y = this.options.coords.y;

            var dummyStartX = void 0;
            var dummyStartY = void 0;
            var labelFinalX = void 0;
            var labelFinalY = void 0;

            if (direction === "up") {
                dummyStartX = x + cellWidth / 2;
                dummyStartY = y + cellHeight * 3 / 2;
                labelFinalX = x + cellWidth / 2;
                labelFinalY = y - cellHeight * 3 / 2;
            } else if (direction === "down") {
                dummyStartX = x + cellWidth / 2;
                dummyStartY = y - cellHeight / 2;
                labelFinalX = x + cellWidth / 2;
                labelFinalY = y + cellHeight * 3 / 2;
            } else if (direction === "left") {
                dummyStartX = x + cellWidth * 3 / 2;
                dummyStartY = y + cellHeight / 2;
                labelFinalX = x - cellWidth / 2;
                labelFinalY = y + cellHeight / 2;
            } else if (direction === "right") {
                dummyStartX = x - cellWidth / 2;
                dummyStartY = y + cellHeight / 2;
                labelFinalX = config.x + config.VisualListCell_width * 3 / 2;
                labelFinalY = config.y + config.VisualListCell_height / 2;
            }

            var dummy = UI.createElement(SVG.Text, { x: dummyStartX, y: dummyStartY, text: newValue,
                fill: this.options.color, stroke: this.options.color, strokeWidth: this.options.textStrokeWidth,
                fontSize: this.options.fontSize, textAnchor: "middle", dy: "0.35em" });

            // Add the dummy in DOM at start coords
            var appendChildModifier = new Modifier$1({
                func: function func() {
                    _this7.cellGroup.appendChild(dummy);
                    dummy.setPosition(dummyStartX, dummyStartY);
                },
                reverseFunc: function reverseFunc() {
                    _this7.cellGroup.eraseChild(dummy, !inMovie);
                }
            });
            transitionList.push(appendChildModifier, false);

            var moveStartTime = transitionList.getLength();
            // Move the dummy
            var t1 = dummy.moveTransition({ x: this.label.getX(), y: this.label.getY() }, duration, [appendChildModifier], moveStartTime);
            transitionList.add(t1, false);
            // Move the label
            var t2 = this.label.moveTransition({ x: labelFinalX, y: labelFinalY }, duration, [appendChildModifier], moveStartTime);
            transitionList.add(t2, false);

            // Replace dummy with real label
            var labelX = this.label.getX();
            var labelY = this.label.getY();
            var labelText = this.label.getText();
            transitionList.push(new Modifier$1({
                func: function func() {
                    _this7.setLabel(newValue);
                    _this7.label.setPosition(labelX, labelY);
                    _this7.cellGroup.eraseChild(dummy, !inMovie);
                },
                reverseFunc: function reverseFunc() {
                    _this7.setLabel(labelText);
                    _this7.cellGroup.appendChild(dummy);
                },
                dependsOn: [t1, t2]
            }), false);

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }]);
    return VisualListElement;
}(SVG.Group);

var VisualList = function (_SVG$Group2) {
    inherits(VisualList, _SVG$Group2);

    function VisualList() {
        classCallCheck(this, VisualList);
        return possibleConstructorReturn(this, (VisualList.__proto__ || Object.getPrototypeOf(VisualList)).apply(this, arguments));
    }

    createClass(VisualList, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                orientation: "right",
                batchSpacing: 12,
                box: {
                    x: 0,
                    y: 0,
                    width: 400,
                    height: 400
                },
                elementOptions: VisualListElement.prototype.getDefaultOptions()
            };
        }
    }, {
        key: "render",
        value: function render() {
            var elements = [];
            if (this.options.labels) {
                var batchCapacity = this.getBatchCapacity();
                for (var i = 0; i < this.options.labels.length; i += 1) {
                    elements.push(UI.createElement(VisualListElement, _extends({
                        coords: this.getCellCoords(i),
                        label: this.options.labels[i],
                        orientation: this.options.orientation,
                        hasLine: i % batchCapacity !== batchCapacity - 1 && i !== this.options.labels.length - 1
                    }, this.options.elementOptions)));
                }
            }

            this.options.children = [];
            // Add a clipPath
            this.options.children.push(UI.createElement(
                SVG.Defs,
                { ref: "defs" },
                UI.createElement(
                    SVG.ClipPath,
                    { id: "visualListClipPath" + uniqueId(this) },
                    UI.createElement(SVG.Rect, _extends({ ref: this.refLink("clipPathRect") }, this.getClipPathRect()))
                )
            ));
            this.options.clipPath = "url(#visualListClipPath" + uniqueId(this) + ")";
            // Add the list elements
            this.options.children.push(UI.createElement(
                SVG.Group,
                { ref: "elementsGroup" },
                elements
            ));

            return this.options.children;
        }
    }, {
        key: "getCell",
        value: function getCell(cellLabel) {
            for (var i = 0; i < this.elements.length; i += 1) {
                var element = this.elements[i];
                if (element.getLabel() === cellLabel) {
                    return element;
                }
            }
        }
    }, {
        key: "setBox",
        value: function setBox(box) {
            this.options.box = box;

            var clipPathBox = this.getClipPathRect();
            this.clipPathRect.setX(clipPathBox.x);
            this.clipPathRect.setY(clipPathBox.y);
            this.clipPathRect.setWidth(clipPathBox.width);
            this.clipPathRect.setHeight(clipPathBox.height);

            if (this.options.labels) {
                var batchCapacity = this.getBatchCapacity();
                for (var i = 0; i < this.elements.length; i += 1) {
                    var element = this.elements[i];
                    element.setCoords(this.getCellCoords(i));
                    element.toggleLine(i % batchCapacity !== batchCapacity - 1 && i !== this.elements.length - 1);
                }
            }
        }
    }, {
        key: "setLabels",
        value: function setLabels(labels) {
            var newElements = [];
            var batchCapacity = this.getBatchCapacity();
            for (var i = 0; i < labels.length; i += 1) {
                newElements.push(UI.createElement(VisualListElement, _extends({
                    coords: this.getCellCoords(i),
                    label: labels[i],
                    orientation: this.options.orientation,
                    hasLine: i % batchCapacity !== batchCapacity - 1 && i !== labels.length - 1
                }, this.options.elementOptions)));
            }
            while (this.elementsGroup.options.children.length > 0) {
                this.elementsGroup.eraseChildAtIndex(0, true);
            }
            this.elementsGroup.options.children = newElements;
            this.elementsGroup.redraw();
        }
    }, {
        key: "getBatchCapacity",
        value: function getBatchCapacity() {
            var batchLength = void 0;
            var cellLength = void 0;

            if (this.options.orientation === "left" || this.options.orientation === "right") {
                batchLength = this.options.box.width;
                cellLength = this.options.elementOptions.cellWidth;
            } else {
                batchLength = this.options.box.height;
                cellLength = this.options.elementOptions.cellHeight;
            }

            if (batchLength < cellLength) {
                console.log("ERROR: Tried to create a visual list with batchLength < cellLength");
            }

            return Math.floor((batchLength - cellLength) / (cellLength + this.options.elementOptions.lineLength)) + 1;
        }
    }, {
        key: "getCellCoords",
        value: function getCellCoords(cellIndex) {
            var batchCapacity = this.getBatchCapacity();

            // Name shorteners
            var x = this.options.box.x;
            var y = this.options.box.y;
            var orientation = this.options.orientation;
            var batchSpacing = this.options.batchSpacing;

            var cellWidth = this.options.elementOptions.cellWidth;
            var cellHeight = this.options.elementOptions.cellHeight;
            var lineLength = this.options.elementOptions.lineLength;

            if (orientation === "right") {
                return {
                    x: x + (cellWidth + lineLength) * (cellIndex % batchCapacity),
                    y: y + (cellHeight + batchSpacing) * Math.floor(cellIndex / batchCapacity)
                };
            } else if (orientation === "left") {
                return {
                    x: x - (cellWidth + lineLength) * (cellIndex % batchCapacity) - cellWidth,
                    y: y + (cellHeight + batchSpacing) * Math.floor(cellIndex / batchCapacity)
                };
            } else if (orientation === "down") {
                return {
                    x: x + (cellWidth + batchSpacing) * Math.floor(cellIndex / batchCapacity),
                    y: y + (cellHeight + lineLength) * (cellIndex % batchCapacity)
                };
            } else if (orientation === "up") {
                return {
                    x: x + (cellWidth + batchSpacing) * Math.floor(cellIndex / batchCapacity),
                    y: y - (cellHeight + lineLength) * (cellIndex % batchCapacity) - cellHeight
                };
            } else {
                console.log("ERROR: Wrong visual list orientation.");
            }
        }
    }, {
        key: "getClipPathRect",
        value: function getClipPathRect() {
            var batchCapacity = this.getBatchCapacity();

            // Name shorteners
            var x = this.options.box.x;
            var y = this.options.box.y;
            var width = this.options.box.width;
            var height = this.options.box.height;
            var orientation = this.options.orientation;

            var strokeWidth = this.options.elementOptions.strokeWidth;
            var cellWidth = this.options.elementOptions.cellWidth;
            var cellHeight = this.options.elementOptions.cellHeight;
            var lineLength = this.options.elementOptions.lineLength;

            // TODO: replace string with Direction/Orientation
            if (orientation === "right") {
                return {
                    x: x - strokeWidth / 2,
                    y: y - strokeWidth / 2,
                    width: (batchCapacity - 1) * (cellWidth + lineLength) + cellWidth + strokeWidth,
                    height: height + strokeWidth
                };
            } else if (orientation === "left") {
                // TODO(@wefgef): Fix strokeWidth stuff
                return {
                    x: x - ((batchCapacity - 1) * (cellWidth + lineLength) + cellWidth) - strokeWidth,
                    y: y - strokeWidth,
                    width: (batchCapacity - 1) * (cellWidth + lineLength) + cellWidth + 2 * strokeWidth,
                    height: height + 2 * strokeWidth
                };
            } else if (orientation === "down") {
                return {
                    x: x - strokeWidth,
                    y: y - strokeWidth,
                    width: width + 2 * strokeWidth,
                    height: (batchCapacity - 1) * (cellHeight + lineLength) + cellHeight + 2 * strokeWidth
                };
            } else if (orientation === "up") {
                return {
                    x: x - strokeWidth,
                    y: y - ((batchCapacity - 1) * (cellHeight + lineLength) + cellHeight) - strokeWidth,
                    width: width + 2 * strokeWidth,
                    height: (batchCapacity - 1) * (cellHeight + lineLength) + cellHeight + 2 * strokeWidth
                };
            } else {
                console.log("VisualList.config.VisualList_orientation is not valid: " + orientation);
            }
        }
    }, {
        key: "getNextDummyCoords",
        value: function getNextDummyCoords(batchIndex) {
            var batchCapacity = this.getBatchCapacity();

            // Name shorteners
            var x = this.options.box.x;
            var y = this.options.box.y;
            var orientation = this.options.orientation;
            var batchSpacing = this.options.batchSpacing;

            var cellWidth = this.options.elementOptions.cellWidth;
            var cellHeight = this.options.elementOptions.cellHeight;
            var lineLength = this.options.elementOptions.lineLength;

            if (orientation == "up") {
                return {
                    x: x + (cellWidth + batchSpacing) * batchIndex,
                    y: y - cellHeight - lineLength
                };
            } else if (orientation == "down") {
                return {
                    x: x + (cellWidth + batchSpacing) * batchIndex,
                    y: y + (cellHeight + lineLength) * batchCapacity
                };
            } else if (orientation == "left") {
                return {
                    x: x - cellWidth - lineLength,
                    y: y + (cellHeight + batchSpacing) * batchIndex
                };
            } else if (orientation == "right") {
                return {
                    x: x + (cellWidth + lineLength) * batchCapacity,
                    y: y + (cellHeight + batchSpacing) * batchIndex
                };
            } else {
                console.log("ERROR: Wrong visual list orientation.");
            }
        }
    }, {
        key: "getPrevDummyCoords",
        value: function getPrevDummyCoords(batchIndex) {
            var batchCapacity = this.getBatchCapacity();

            // Name shorteners
            var x = this.options.box.x;
            var y = this.options.box.y;
            var orientation = this.options.orientation;
            var batchSpacing = this.options.batchSpacing;

            var cellWidth = this.options.elementOptions.cellWidth;
            var cellHeight = this.options.elementOptions.cellHeight;
            var lineLength = this.options.elementOptions.lineLength;

            if (orientation == "up") {
                return {
                    x: x + (cellWidth + batchSpacing) * batchIndex,
                    y: y + (cellHeight + lineLength) * batchCapacity
                };
            } else if (orientation == "down") {
                return {
                    x: x + (cellWidth + batchSpacing) * batchIndex,
                    y: y - cellHeight - lineLength
                };
            } else if (orientation == "left") {
                return {
                    x: x + (cellWidth + lineLength) * batchCapacity,
                    y: y + (cellHeight + batchSpacing) * batchIndex
                };
            } else if (orientation == "right") {
                return {
                    x: x - cellWidth - lineLength,
                    y: y + (cellHeight + batchSpacing) * batchIndex
                };
            } else {
                console.log("ERROR: Wrong visual list orientation.");
            }
        }
    }, {
        key: "insertTransition",
        value: function insertTransition(cellIndex, label, maxDuration) {
            var dependsOn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

            var _this9 = this;

            var startTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
            var inMovie = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;
            var batchCapacity = this.getBatchCapacity();
            var elements = this.elements;

            // Data validation
            cellIndex = Math.max(cellIndex, 0);
            cellIndex = Math.min(cellIndex, elements.length);

            // Step1: Delete before line. Should satisfy:
            // a. The cell not added at the end of list
            // b. The cell is not first on its row
            // c. Lines have positive length
            var dep = [];
            if (cellIndex !== elements.length && cellIndex % batchCapacity !== 0 && this.options.elementOptions.lineLength) {
                var step1Duration = 0.25 * maxDuration;
                var t = elements[cellIndex - 1].hideLineTransition(step1Duration);
                transitionList.push(t, false);
                dep = [t];
            }

            // Step2: Create the gap. Should satisfy: the cell not added at the end of list
            if (cellIndex !== elements.length) {
                var step2Duration = 0.25 * maxDuration;
                // Create the dummies
                var dummies = [];
                for (var i = cellIndex + 1; i <= elements.length; i += 1) {
                    if (i % batchCapacity === 0) {
                        dummies.push(UI.createElement(VisualListElement, {
                            coords: this.getPrevDummyCoords(i / batchCapacity),
                            label: elements[i - 1].getLabel(),
                            orientation: this.options.orientation,
                            hasLine: i !== elements.length
                        }));
                    }
                }
                var setDummyCoordsModifier = new Modifier$1({
                    func: function func() {
                        var dummyIndex = 0;
                        for (var _i = cellIndex + 1; _i <= elements.length; _i += 1) {
                            if (_i % batchCapacity === 0) {
                                var dummy = dummies[dummyIndex];
                                dummyIndex += 1;
                                _this9.appendChild(dummy);
                                dummy.setCoords(_this9.getPrevDummyCoords(_i / batchCapacity));
                            }
                        }
                    },
                    reverseFunc: function reverseFunc() {
                        for (var _i2 = 0; _i2 < dummies.length; _i2 += 1) {
                            var dummy = dummies[_i2];
                            _this9.eraseChild(dummy, !inMovie);
                        }
                    },
                    dependsOn: dep
                });
                transitionList.push(setDummyCoordsModifier, false);

                // Move the cells to create the gap
                var moveTransition = new TransitionList();
                moveTransition.dependsOn = [setDummyCoordsModifier];
                for (var _i3 = cellIndex; _i3 < elements.length; _i3 += 1) {
                    if (_i3 % batchCapacity === batchCapacity - 1) {
                        moveTransition.add(elements[_i3].moveTransition(this.getNextDummyCoords((_i3 + 1) / batchCapacity - 1), step2Duration), false);
                    } else {
                        moveTransition.add(elements[_i3].moveTransition(this.getCellCoords(_i3 + 1), step2Duration), false);
                    }
                }
                var dummyIndex = 0;
                for (var _i4 = cellIndex + 1; _i4 <= elements.length; _i4 += 1) {
                    if (_i4 % batchCapacity === 0) {
                        var dummy = dummies[dummyIndex];
                        moveTransition.add(dummy.moveTransition(this.getCellCoords(_i4), step2Duration), false);
                        dummyIndex += 1;
                    }
                }
                transitionList.push(moveTransition, false);

                // Replace the dummies with the real elements
                var replaceModifier = new Modifier$1({
                    func: function func() {
                        var dummyIndex = 0;
                        for (var _i5 = cellIndex + 1; _i5 <= elements.length; _i5 += 1) {
                            if (_i5 % batchCapacity === 0) {
                                var element = elements[_i5 - 1];
                                var _dummy = dummies[dummyIndex];
                                element.setCoords(_this9.getCellCoords(_i5));
                                if (_i5 !== elements.length && batchCapacity > 1) {
                                    element.toggleLine(true);
                                }
                                _this9.eraseChild(_dummy, !inMovie);
                                dummyIndex += 1;
                            }
                        }
                    },
                    reverseFunc: function reverseFunc() {
                        var dummyIndex = 0;
                        for (var _i6 = cellIndex + 1; _i6 <= elements.length; _i6 += 1) {
                            if (_i6 % batchCapacity === 0) {
                                var element = elements[_i6 - 1];
                                var _dummy2 = dummies[dummyIndex];
                                if (_dummy2) {
                                    element.toggleLine(false);
                                    _this9.appendChild(_dummy2);
                                }
                                dummyIndex += 1;
                            }
                        }
                    },
                    dependsOn: [moveTransition]
                });
                transitionList.push(replaceModifier, false);
                dep = [replaceModifier];
            }

            // Step3: Create new element
            var step3Duration = 0.25 * maxDuration;
            var newElement = UI.createElement(VisualListElement, _extends({
                coords: this.getCellCoords(cellIndex),
                label: label,
                orientation: this.options.orientation,
                hasLine: false
            }, this.options.elementOptions));
            var createChildModifier = new Modifier$1({
                func: function func() {
                    _this9.elementsGroup.insertChild(newElement, cellIndex);
                    newElement.setAttribute("opacity", 0);
                },
                reverseFunc: function reverseFunc() {
                    newElement.setAttribute("opacity", 1);
                    _this9.elementsGroup.eraseChild(newElement, !inMovie);
                },
                dependsOn: dep
            });
            transitionList.push(createChildModifier, false);
            var transition = newElement.showTransition(step3Duration, [createChildModifier]);
            transitionList.push(transition, false);

            // Step 4: Add missing lines. Should satisfy: lines have positive length
            if (this.options.elementOptions.lineLength) {
                var step4Duration = 0.25 * maxDuration;
                var _startTime = transitionList.getLength();
                // Show new element line if not last in its row or last in the list
                if (cellIndex % batchCapacity !== batchCapacity - 1 && cellIndex !== elements.length) {
                    transitionList.add(newElement.showLineTransition(step4Duration, [transition], _startTime), false);
                }
                // Show previous element line if new element is not first in its row
                if (cellIndex % batchCapacity !== 0) {
                    transitionList.add(elements[cellIndex - 1].showLineTransition(step4Duration, [transition], _startTime), false);
                }
            }

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "deleteTransition",
        value: function deleteTransition(cellIndex, maxDuration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            var _this10 = this;

            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var inMovie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

            var transitionList = new TransitionList();
            transitionList.dependsOn = dependsOn;
            var batchCapacity = this.getBatchCapacity();
            var elements = this.elements;

            if (cellIndex < 0 || cellIndex >= elements.length) {
                return;
            }
            var dep = [];
            // Step1: Remove adjacent lines.
            if (this.options.elementOptions.lineLength) {
                var step1Duration = 0.25 * maxDuration;
                var removeStartTime = transitionList.getLength();
                // Remove previous line
                if (cellIndex % batchCapacity !== 0) {
                    var hideLineTransition = elements[cellIndex - 1].hideLineTransition(step1Duration, [], removeStartTime);
                    transitionList.add(hideLineTransition, false);
                    var toggleLineModifier = new Modifier$1({
                        func: function func() {
                            elements[cellIndex - 1].toggleLine(false);
                        },
                        reverseFunc: function reverseFunc() {
                            elements[cellIndex - 1].toggleLine(true);
                        },
                        dependsOn: [hideLineTransition],
                        startTime: removeStartTime + step1Duration + 1
                    });
                    transitionList.add(toggleLineModifier, false);
                    dep = [toggleLineModifier];
                }
                // Remove element line
                if (cellIndex % batchCapacity !== batchCapacity - 1 && cellIndex !== elements.length - 1) {
                    var hideLineTransition2 = elements[cellIndex].hideLineTransition(step1Duration, dep, removeStartTime);
                    transitionList.add(hideLineTransition2, false);
                    var toggleLineModifier2 = new Modifier$1({
                        func: function func() {
                            elements[cellIndex].toggleLine(false);
                        },
                        reverseFunc: function reverseFunc() {
                            elements[cellIndex].toggleLine(true);
                        },
                        dependsOn: [hideLineTransition2],
                        startTime: removeStartTime + step1Duration + 1
                    });
                    transitionList.add(toggleLineModifier2, false);
                    dep = [toggleLineModifier2];
                }
            }

            // Step2: Remove the element
            var step2Duration = 0.25 * maxDuration;
            var element = elements[cellIndex];
            var elementHideTransition = element.hideTransition(step2Duration, dep);
            transitionList.push(elementHideTransition);
            var removeElementModifier = new Modifier$1({
                func: function func() {
                    _this10.elementsGroup.eraseChild(element, !inMovie);
                },
                reverseFunc: function reverseFunc() {
                    _this10.elementsGroup.insertChild(element, cellIndex);
                },
                dependsOn: [elementHideTransition]
            });
            transitionList.push(removeElementModifier, false);

            // Step3: Close gap. Should satisfy: element not last
            if (cellIndex !== elements.length - 1) {
                var step3Duration = 0.25 * maxDuration;
                var dummies = [];
                for (var i = cellIndex; i + 1 < elements.length; i += 1) {
                    // If last in its batch
                    if (i % batchCapacity === batchCapacity - 1) {
                        var dummy = UI.createElement(VisualListElement, _extends({
                            coords: this.getNextDummyCoords((i + 1) / batchCapacity - 1),
                            label: elements[i + 1].getLabel(),
                            orientation: this.options.orientation,
                            hasLine: false
                        }, this.options.elementOptions));
                        dummies.push(dummy);
                    }
                }

                // Set initial dummy coords
                var setDummyCoordsModifier = new Modifier$1({
                    func: function func() {
                        var dummyIndex = 0;
                        for (var _i7 = cellIndex; _i7 < elements.length; _i7 += 1) {
                            if (_i7 % batchCapacity === batchCapacity - 1) {
                                var _dummy3 = dummies[dummyIndex];
                                if (!_dummy3) {
                                    return;
                                }
                                _this10.appendChild(_dummy3);
                                _dummy3.setCoords(_this10.getNextDummyCoords((_i7 + 1) / batchCapacity - 1));
                                dummyIndex += 1;
                            }
                        }
                    },
                    reverseFunc: function reverseFunc() {
                        for (var _i8 = 0; _i8 < dummies.length; _i8 += 1) {
                            var _dummy4 = dummies[_i8];
                            if (!_dummy4) {
                                return;
                            }
                            _this10.eraseChild(_dummy4, !inMovie);
                        }
                    },
                    dependsOn: [removeElementModifier]
                });
                transitionList.push(setDummyCoordsModifier, false);

                // Add missing lines
                var addMissingLinesModifier = new Modifier$1({
                    func: function func() {
                        for (var _i9 = cellIndex; _i9 + 1 < elements.length; _i9 += 1) {
                            if ((_i9 + 1) % batchCapacity === batchCapacity - 1) {
                                var _element = elements[_i9];
                                _element.toggleLine(true);
                            }
                        }
                    },
                    reverseFunc: function reverseFunc() {
                        for (var _i10 = cellIndex + 1; _i10 + 1 < elements.length; _i10 += 1) {
                            if ((_i10 + 1) % batchCapacity === batchCapacity - 1) {
                                var _element2 = elements[_i10];
                                _element2.toggleLine(false);
                            }
                        }
                    },
                    dependsOn: [removeElementModifier, setDummyCoordsModifier]
                });
                transitionList.push(addMissingLinesModifier, false);

                // Move the cells to create the gap
                var moveTransition = new TransitionList();
                moveTransition.dependsOn = [removeElementModifier, setDummyCoordsModifier, addMissingLinesModifier];
                for (var _i11 = cellIndex + 1; _i11 < elements.length; _i11 += 1) {
                    if (_i11 % batchCapacity == 0) {
                        moveTransition.add(elements[_i11].moveTransition(this.getPrevDummyCoords(_i11 / batchCapacity), step3Duration), false);
                    } else {
                        moveTransition.add(elements[_i11].moveTransition(elements[_i11 - 1].getCoords(), step3Duration), false);
                    }
                }
                var dummyIndex = 0;
                for (var _i12 = cellIndex; _i12 + 1 < elements.length; _i12 += 1) {
                    if (_i12 % batchCapacity === batchCapacity - 1) {
                        var _dummy5 = dummies[dummyIndex];
                        moveTransition.add(_dummy5.moveTransition(elements[_i12].getCoords(), step3Duration), false);
                        dummyIndex += 1;
                    }
                }
                transitionList.push(moveTransition, false);

                // Replace the dummies with the real elements
                var replaceModifier = new Modifier$1({
                    func: function func() {
                        var dummyIndex = 0;
                        for (var _i13 = cellIndex; _i13 < elements.length; _i13 += 1) {
                            if (_i13 % batchCapacity === batchCapacity - 1) {
                                var _element3 = elements[_i13];
                                var _dummy6 = dummies[dummyIndex];

                                _element3.setCoords(_dummy6.getCoords());
                                _this10.eraseChild(_dummy6, !inMovie);
                                dummyIndex += 1;
                            }
                        }
                    },
                    reverseFunc: function reverseFunc() {
                        for (var _i14 = 0; _i14 < dummies.length; _i14 += 1) {
                            var _dummy7 = dummies[_i14];
                            _this10.appendChild(_dummy7);
                        }
                    },
                    dependsOn: [moveTransition]
                });
                transitionList.push(replaceModifier, false);
                dep = [replaceModifier];
            }

            // Step4: Add missing line. Should satisfy:
            // a. The cell is deleted from the end of the list
            // b. The cell is first in its batch
            if (cellIndex !== elements.length - 1 && cellIndex % batchCapacity !== 0) {
                var step4Duration = 0.25 * maxDuration;
                transitionList.push(elements[cellIndex - 1].showLineTransition(step4Duration, dep), false);
            }

            transitionList.setStartTime(startTime);
            return transitionList;
        }
    }, {
        key: "changeValueTransition",
        value: function changeValueTransition(cellIndex, newLabel, direction, duration) {
            var dependsOn = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
            var startTime = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
            var inMovie = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

            return this.elements[cellIndex].slideNewValueTransition(newLabel, direction, duration, dependsOn, startTime, inMovie);
        }
    }, {
        key: "elements",
        get: function get$$1() {
            return this.elementsGroup.children;
        }
    }]);
    return VisualList;
}(SVG.Group);

var VisualQueue = function (_VisualList) {
    inherits(VisualQueue, _VisualList);

    function VisualQueue() {
        classCallCheck(this, VisualQueue);
        return possibleConstructorReturn(this, (VisualQueue.__proto__ || Object.getPrototypeOf(VisualQueue)).apply(this, arguments));
    }

    createClass(VisualQueue, [{
        key: "pushTransition",
        value: function pushTransition(label, maxDuration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var inMovie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

            return this.insertTransition(this.elements.length, label, maxDuration, dependsOn, startTime, inMovie);
        }
    }, {
        key: "popTransition",
        value: function popTransition(maxDuration) {
            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var inMovie = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            return this.deleteTransition(0, maxDuration, dependsOn, startTime, inMovie);
        }
    }, {
        key: "getPushQueuePosition",
        value: function getPushQueuePosition() {
            var deltaX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var deltaY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var cellCoords = this.getCellCoords(this.elements.length - 1);
            return {
                x: cellCoords.x + deltaX,
                y: cellCoords.y + deltaY
            };
        }
    }, {
        key: "getPopQueuePosition",
        value: function getPopQueuePosition() {
            var deltaX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var deltaY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var cellCoords = this.getCellCoords(0);
            return {
                x: cellCoords.x + deltaX,
                y: cellCoords.y + deltaY
            };
        }
    }]);
    return VisualQueue;
}(VisualList);

var Arrow = function (_SVG$Polygon) {
    inherits(Arrow, _SVG$Polygon);

    function Arrow() {
        classCallCheck(this, Arrow);
        return possibleConstructorReturn(this, (Arrow.__proto__ || Object.getPrototypeOf(Arrow)).apply(this, arguments));
    }

    createClass(Arrow, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                x: 0,
                y: 0,
                length: 10
            };
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(Arrow.prototype.__proto__ || Object.getPrototypeOf(Arrow.prototype), "setOptions", this).call(this, options);
            var arrowShaftLength = this.options.length * 0.6;
            var arrowHeadLength = this.options.length * 0.3;
            var arrowShaftWidth = this.options.length * 0.1;
            var arrowHeadWidth = this.options.length * 0.4;
            var spacing = this.options.length * 0.05;
            var startX = this.options.x + spacing;
            var startY = this.options.y - arrowShaftWidth / 2;
            this.options.points = [{ x: startX, y: startY }, { x: startX + arrowShaftLength, y: startY }, { x: startX + arrowShaftLength, y: startY - (arrowHeadWidth - arrowShaftWidth) / 2 }, { x: startX + arrowShaftLength + arrowHeadLength, y: startY + arrowShaftWidth / 2 }, { x: startX + arrowShaftLength, y: startY + arrowShaftWidth + (arrowHeadWidth - arrowShaftWidth) / 2 }, { x: startX + arrowShaftLength, y: startY + arrowShaftWidth }, { x: startX, y: startY + arrowShaftWidth }];
        }
    }, {
        key: "setCoords",
        value: function setCoords(x, y) {
            this.options.x = x;
            this.options.y = y;
            // TODO(@mikester): Why doesn't simple this.redraw() work?
            this.setOptions(this.options);
            this.redraw();
        }
    }]);
    return Arrow;
}(SVG.Polygon);

var AdjacencyList = function (_SVG$Group) {
    inherits(AdjacencyList, _SVG$Group);

    function AdjacencyList() {
        classCallCheck(this, AdjacencyList);
        return possibleConstructorReturn(this, (AdjacencyList.__proto__ || Object.getPrototypeOf(AdjacencyList)).apply(this, arguments));
    }

    createClass(AdjacencyList, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                box: {
                    x: 0,
                    y: 0,
                    width: 1000,
                    height: 1000
                },
                visualListOptions: VisualList.prototype.getDefaultOptions()
            };
        }
    }, {
        key: "render",
        value: function render() {
            this.options.children = [];

            // Name shortener
            var elementOptions = this.options.visualListOptions.elementOptions;

            // Create the main label
            this.options.children.push(UI.createElement(SVG.Text, { ref: "mainLabel",
                text: this.options.mainLabel,
                fontSize: elementOptions.fontSize,
                fill: elementOptions.color,
                stroke: elementOptions.color,
                strokeWidth: elementOptions.textStrokeWidth,
                x: this.options.box.x + elementOptions.cellWidth / 2,
                y: this.options.box.y + elementOptions.cellHeight / 2
            }));

            // Create the main arrow
            var arrowOptions = {
                x: this.options.box.x + elementOptions.cellWidth,
                y: this.options.box.y + elementOptions.cellHeight / 2,
                length: elementOptions.lineLength
            };
            this.options.children.push(UI.createElement(Arrow, _extends({ ref: "arrow" }, arrowOptions)));

            // Set visual list box
            this.options.visualListOptions.box = {
                x: this.options.box.x + elementOptions.cellWidth * 1.5 + elementOptions.lineLength,
                y: this.options.box.y,
                width: this.options.box.width - elementOptions.cellWidth * 1.5 - elementOptions.lineLength,
                height: this.options.box.height
            };

            // Create the visual list
            this.options.children.push(UI.createElement(VisualList, _extends({ ref: "visualList",
                labels: this.options.labels
            }, this.options.visualListOptions)));
            return this.options.children;
        }
    }, {
        key: "getDesiredHeight",
        value: function getDesiredHeight() {
            var lastCell = this.visualList.elements.last();
            if (typeof lastCell === "undefined") {
                return 0;
            }
            return lastCell.options.coords.y + lastCell.options.cellHeight - this.options.box.y;
        }
    }, {
        key: "getCell",
        value: function getCell(cellLabel) {
            return this.visualList.getCell(cellLabel);
        }
    }, {
        key: "setBox",
        value: function setBox(box) {
            var elementOptions = this.options.visualListOptions.elementOptions;
            this.options.box = box;

            this.mainLabel.setPosition(this.options.box.x + elementOptions.cellWidth / 2, this.options.box.y + elementOptions.cellHeight / 2);

            this.arrow.setCoords(this.options.box.x + elementOptions.cellWidth, this.options.box.y + elementOptions.cellHeight / 2);

            this.visualList.setBox({
                x: this.options.box.x + elementOptions.cellWidth * 1.5 + elementOptions.lineLength,
                y: this.options.box.y,
                width: this.options.box.width - elementOptions.cellWidth * 1.5 - elementOptions.lineLength,
                height: this.options.box.height
            });
        }
    }]);
    return AdjacencyList;
}(SVG.Group);

var AdjacencyLists = function (_SVG$Group2) {
    inherits(AdjacencyLists, _SVG$Group2);

    function AdjacencyLists() {
        classCallCheck(this, AdjacencyLists);
        return possibleConstructorReturn(this, (AdjacencyLists.__proto__ || Object.getPrototypeOf(AdjacencyLists)).apply(this, arguments));
    }

    createClass(AdjacencyLists, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                box: {
                    x: 0,
                    y: 0,
                    width: 1000,
                    height: 1000
                },
                listSpacing: 20,
                directed: false,
                indexType: "0",
                visibleLists: "all",
                listOptions: AdjacencyList.prototype.getDefaultOptions()
            };
        }
    }, {
        key: "getNodeLabel",
        value: function getNodeLabel(nodeIndex) {
            if (this.options.indexType === "0") {
                return nodeIndex;
            } else if (this.options.indexType === "1") {
                return nodeIndex + 1;
            } else {
                return this.nodes[nodeIndex].label || "N/A";
            }
        }
    }, {
        key: "getAdjacentLabels",
        value: function getAdjacentLabels(nodeIndex) {
            var result = [];
            for (var i = 0; i < this.options.edges.length; i += 1) {
                var edgeData = this.options.edges[i];
                if (edgeData.source === nodeIndex) {
                    result.push(this.getNodeLabel(edgeData.target));
                } else if (edgeData.target === nodeIndex && !edgeData.directed === true && !this.options.directed) {
                    result.push(this.getNodeLabel(edgeData.source));
                }
            }
            return result;
        }
    }, {
        key: "render",
        value: function render() {
            this.lists = [];
            for (var i = 0; i < this.options.nodes.length; i += 1) {
                var listOptions = deepCopy({}, this.options.listOptions);
                deepCopy(listOptions.box, this.options.box);
                this.lists.push(UI.createElement(AdjacencyList, _extends({
                    mainLabel: this.getNodeLabel(i),
                    labels: this.getAdjacentLabels(i)
                }, listOptions)));
            }

            this.options.children = [];
            for (var _i = 0; _i < this.lists.length; _i += 1) {
                var list = this.lists[_i];
                this.options.children.push(list);
            }

            return this.options.children;
        }
    }, {
        key: "setVisibleLists",
        value: function setVisibleLists(visibleLists) {
            for (var i = this.options.children.length - 1; i >= 0; i -= 1) {
                var list = this.options.children[i];
                this.eraseChild(list, false);
            }

            this.options.visibleLists = visibleLists;
            if (this.options.visibleLists === "all") {
                for (var _i2 = 0; _i2 < this.lists.length; _i2 += 1) {
                    var _list = this.lists[_i2];
                    this.insertChild(_list, _i2);
                }
            } else if (Array.isArray(this.options.visibleLists)) {
                for (var _i3 = 0; _i3 < this.options.visibleLists.length; _i3 += 1) {
                    var _list2 = this.lists[this.options.visibleLists[_i3]];
                    this.insertChild(_list2, _i3);
                }
            } else if (Number.isInteger(this.options.visibleLists)) {
                var _list3 = this.lists[this.options.visibleLists];
                this.insertChild(_list3, 0);
            }

            this.recomputeListHeights();
        }
    }, {
        key: "getVisibleLists",
        value: function getVisibleLists() {
            return this.options.visibleLists;
        }
    }, {
        key: "recomputeListHeights",
        value: function recomputeListHeights() {
            var heightSum = 0;
            for (var i = 0; i < this.options.children.length; i += 1) {
                var list = this.options.children[i];

                list.setBox({
                    x: this.options.box.x,
                    y: this.options.box.y + heightSum,
                    width: this.options.box.width,
                    height: this.options.box.height
                });

                var listHeight = list.getDesiredHeight();
                list.options.box.height = listHeight;

                heightSum += this.options.listSpacing + listHeight;
            }
        }
    }, {
        key: "getCell",
        value: function getCell(listIndex, cellLabel) {
            return this.lists[listIndex].getCell(cellLabel);
        }
    }, {
        key: "getPopupPosition",
        value: function getPopupPosition(listIndex, cellLabel) {
            var deltaX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var deltaY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

            var result = void 0;
            var cellCoords = this.getCell(listIndex, cellLabel).getCoords();
            result = {
                x: cellCoords.x + deltaX,
                y: cellCoords.y + deltaY
            };
            return result;
        }
    }, {
        key: "redraw",
        value: function redraw() {
            // Draw the adjacency lists
            get(AdjacencyLists.prototype.__proto__ || Object.getPrototypeOf(AdjacencyLists.prototype), "redraw", this).call(this);
            this.setVisibleLists(this.options.visibleLists);
        }
    }]);
    return AdjacencyLists;
}(SVG.Group);

var AdjacencyListsSVG = function (_SVG$SVGRoot) {
    inherits(AdjacencyListsSVG, _SVG$SVGRoot);

    function AdjacencyListsSVG() {
        classCallCheck(this, AdjacencyListsSVG);
        return possibleConstructorReturn(this, (AdjacencyListsSVG.__proto__ || Object.getPrototypeOf(AdjacencyListsSVG)).apply(this, arguments));
    }

    createClass(AdjacencyListsSVG, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                width: 1000,
                height: 1000,
                marginLeft: 20,
                marginTop: 40,
                directed: false
            };
        }
    }, {
        key: "getNodeAttributes",
        value: function getNodeAttributes() {
            var attr = get(AdjacencyListsSVG.prototype.__proto__ || Object.getPrototypeOf(AdjacencyListsSVG.prototype), "getNodeAttributes", this).call(this);
            attr.setStyle("height", this.options.height + "px");
            attr.setStyle("width", this.options.width + "px");
            return attr;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(AdjacencyLists, _extends({ ref: "adjacencyLists" }, this.options, {
                box: {
                    x: this.options.marginLeft,
                    y: this.options.marginTop,
                    width: this.options.width - this.options.marginLeft,
                    height: this.options.height - this.options.marginTop } }))];
        }
    }]);
    return AdjacencyListsSVG;
}(SVG.SVGRoot);

var VisualArray = function (_VisualList) {
    inherits(VisualArray, _VisualList);

    function VisualArray() {
        classCallCheck(this, VisualArray);
        return possibleConstructorReturn(this, (VisualArray.__proto__ || Object.getPrototypeOf(VisualArray)).apply(this, arguments));
    }

    createClass(VisualArray, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return deepCopy({}, get(VisualArray.prototype.__proto__ || Object.getPrototypeOf(VisualArray.prototype), "getDefaultOptions", this).call(this), {
                indexFontSize: 14,
                elementOptions: {
                    lineLength: 0
                }
            });
        }
    }, {
        key: "render",
        value: function render() {
            var result = get(VisualArray.prototype.__proto__ || Object.getPrototypeOf(VisualArray.prototype), "render", this).call(this);
            this.indices = [];

            var fontSize = this.options.indexFontSize;
            var cellHeight = this.options.elementOptions.cellHeight;
            var cellWidth = this.options.elementOptions.cellWidth;
            var color = this.options.elementOptions.color;
            var strokeWidth = this.options.elementOptions.textStrokeWidth;

            for (var i = 0; i < this.options.labels.length; i += 1) {
                var cellCoords = this.getCellCoords(i);
                var x = cellCoords.x + cellWidth / 2;
                var y = cellCoords.y + cellHeight + fontSize;

                this.indices.push(UI.createElement(SVG.Text, { text: i, x: x, y: y,
                    fill: color, stroke: color, strokeWidth: strokeWidth,
                    fontSize: fontSize, textAnchor: "middle", dy: "0.35em"
                }));
            }

            return result.concat(this.indices);
        }
    }, {
        key: "decrementValueTransition",
        value: function decrementValueTransition(cellIndex, duration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var inMovie = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var startTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            var newValue = parseInt(this.elements[cellIndex].getLabel()) - 1;
            return this.changeValueTransition(cellIndex, newValue, "up", duration, dependsOn, startTime, inMovie);
        }
    }, {
        key: "getPopupPosition",
        value: function getPopupPosition(index) {
            var deltaX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var deltaY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            var position = this.elements[index].getCoords();
            return {
                x: position.x + deltaX,
                y: position.y + deltaY
            };
        }
    }, {
        key: "hideTransition",
        value: function hideTransition(index, duration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var inMovie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

            var result = new TransitionList();
            result.dependsOn = dependsOn;
            result.add(this.elements[index].changeOpacityTransition(0, duration, [], 0, inMovie), false);
            result.add(this.indices[index].changeOpacityTransition(0, duration, [], 0, inMovie), false);
            result.setStartTime(startTime);
            return result;
        }
    }, {
        key: "moveElementTransition",
        value: function moveElementTransition(index, finalPosition, duration) {
            var _this2 = this;

            var dependsOn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
            var startTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            return new Transition({
                func: function func(t, context) {
                    var fontSize = _this2.options.indexFontSize;
                    var cellHeight = _this2.options.elementOptions.cellHeight;
                    var cellWidth = _this2.options.elementOptions.cellWidth;
                    var cellCoords = {
                        x: context.coords.x * (1 - t) + finalPosition.x * t,
                        y: context.coords.y * (1 - t) + finalPosition.y * t
                    };
                    _this2.elements[index].setCoords(cellCoords);
                    _this2.indices[index].setAttribute("x", cellCoords.x + cellWidth / 2);
                    _this2.indices[index].setAttribute("y", cellCoords.y + cellHeight + fontSize);
                },
                context: {
                    coords: this.elements[index].getCoords()
                },
                dependsOn: dependsOn,
                startTime: startTime,
                duration: duration
            });
        }
    }]);
    return VisualArray;
}(VisualList);

var VisualStack = function (_VisualList) {
    inherits(VisualStack, _VisualList);

    function VisualStack() {
        classCallCheck(this, VisualStack);
        return possibleConstructorReturn(this, (VisualStack.__proto__ || Object.getPrototypeOf(VisualStack)).apply(this, arguments));
    }

    createClass(VisualStack, [{
        key: "getDefaultOptions",
        value: function getDefaultOptions() {
            return {
                orientation: "up",
                batchSpacing: 12,
                box: {
                    x: 0,
                    y: 0,
                    width: 400,
                    height: 400
                },
                elementOptions: Object.assign(VisualListElement.prototype.getDefaultOptions(), {
                    lineLength: 0,
                    cellHeight: 25,
                    cellWidth: 40,
                    fontSize: 15
                })
            };
        }
    }, {
        key: "getPopupPosition",
        value: function getPopupPosition() {
            var deltaX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var deltaY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var cellCoords = this.getCellCoords(this.elements.length - 1);
            return {
                x: cellCoords.x + deltaX,
                y: cellCoords.y + deltaY
            };
        }
    }, {
        key: "pushTransition",
        value: function pushTransition(label, maxDuration) {
            var dependsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var startTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var inMovie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

            return this.insertTransition(this.elements.length, label, maxDuration, dependsOn, startTime, inMovie);
        }
    }, {
        key: "popTransition",
        value: function popTransition(maxDuration) {
            var dependsOn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var inMovie = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            return this.deleteTransition(this.elements.length - 1, maxDuration, dependsOn, startTime, inMovie);
        }
    }]);
    return VisualStack;
}(VisualList);

// TODO: this should support a summary mode and a full mode

var BlogEntry$1 = function (_Panel) {
    inherits(BlogEntry, _Panel);

    function BlogEntry() {
        classCallCheck(this, BlogEntry);
        return possibleConstructorReturn(this, (BlogEntry.__proto__ || Object.getPrototypeOf(BlogEntry)).apply(this, arguments));
    }

    createClass(BlogEntry, [{
        key: "getBlogEntry",
        value: function getBlogEntry() {
            return BlogEntryStore.get(this.blogEntryId);
        }
    }, {
        key: "render",
        value: function render() {
            var articleRenderer = UI.createElement(ArticleRenderer, { ref: "articleRenderer",
                article: this.getBlogEntry().getArticle(),
                liveLanguage: true });
            var commentWidget = void 0;

            var discussion = this.getBlogEntry().getDiscussion();

            return [articleRenderer, commentWidget];
        }
    }]);
    return BlogEntry;
}(Panel);

var EmailStatus = function (_StoreObject) {
    inherits(EmailStatus, _StoreObject);

    function EmailStatus() {
        classCallCheck(this, EmailStatus);
        return possibleConstructorReturn(this, (EmailStatus.__proto__ || Object.getPrototypeOf(EmailStatus)).apply(this, arguments));
    }

    return EmailStatus;
}(StoreObject);

var EmailStatusStoreClass = function (_GenericObjectStore) {
    inherits(EmailStatusStoreClass, _GenericObjectStore);

    function EmailStatusStoreClass() {
        classCallCheck(this, EmailStatusStoreClass);
        return possibleConstructorReturn(this, (EmailStatusStoreClass.__proto__ || Object.getPrototypeOf(EmailStatusStoreClass)).apply(this, arguments));
    }

    createClass(EmailStatusStoreClass, [{
        key: "registerStreams",
        value: function registerStreams() {
            GlobalState.registerStream("admin-email-manager");
        }
    }]);
    return EmailStatusStoreClass;
}(GenericObjectStore);

var EmailStatusStore = new EmailStatusStoreClass("EmailStatus", EmailStatus);

var Video = function (_UI$Primitive) {
    inherits(Video, _UI$Primitive);

    function Video() {
        classCallCheck(this, Video);
        return possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
    }

    createClass(Video, [{
        key: "setSourceObject",
        value: function setSourceObject(sourceObject) {
            this.node.srcObject = sourceObject;
        }
    }, {
        key: "resetSourceObject",
        value: function resetSourceObject() {
            this.node.srcObject = null;
        }
    }, {
        key: "getSourceObject",
        value: function getSourceObject() {
            return this.node.srcObject;
        }
    }]);
    return Video;
}(UI.Primitive("video"));

Video.domAttributesMap = CreateNodeAttributesMap(UI.Element.domAttributesMap, [["autoplay"], ["srcObject"]]);

var CallModal = function (_ActionModal) {
    inherits(CallModal, _ActionModal);

    function CallModal() {
        classCallCheck(this, CallModal);
        return possibleConstructorReturn(this, (CallModal.__proto__ || Object.getPrototypeOf(CallModal)).apply(this, arguments));
    }

    createClass(CallModal, [{
        key: "getBody",
        value: function getBody() {
            if (this.rejected) {
                return [UI.createElement(UserHandle, { userId: this.options.userId }), " rejected your call!"];
            }
            if (this.options.answered) {
                var callerId = this.options.userId,
                    calleeId = USER.id;
                if (this.options.proactive) {
                    var _ref = [calleeId, callerId];
                    callerId = _ref[0];
                    calleeId = _ref[1];
                }
                return [UI.createElement(CallWidget, { proactive: this.options.proactive, callerId: callerId, calleeId: calleeId,
                    style: { margin: "20px auto" }, ref: "callWidget" })];
            }
            return [UI.createElement(UserHandle, { userId: this.options.userId }), " is calling you!"];
        }
    }, {
        key: "disableHide",
        value: function disableHide() {
            var _this3 = this;

            this.oldHide = this.hide;
            this.hide = function () {};
            window.userMediaStreamer.addListener("connectionClosed", function () {
                _this3.oldHide();
            });
        }
    }, {
        key: "getFooter",
        value: function getFooter() {
            var _this4 = this;

            if (this.options.answered) {
                return [];
            }
            return [UI.createElement(
                ButtonGroup,
                null,
                UI.createElement(Button, { label: "Reject", level: Level.DANGER, onClick: function onClick() {
                        _this4.dispatch("reject");_this4.hide();
                    } }),
                UI.createElement(Button, { label: "Answer", level: Level.SUCCESS, onClick: function onClick() {
                        _this4.options.answered = true;
                        _this4.redraw();
                        _this4.show();
                        _this4.dispatch("accept");
                        _this4.disableHide();
                    } })
            )];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this5 = this;

            if (this.options.proactive) {
                this.disableHide();
                this.callWidget.addListener("rejected", function () {
                    _this5.rejected = true;
                    _this5.redraw();
                    _this5.show();
                    setTimeout(function () {
                        _this5.oldHide();
                    }, 1400);
                });
            } else {
                WebsocketSubscriber.addListener("user-" + USER.id + "-events", function (event) {
                    if (event.connectionStatus && event.senderId === USER.id && !_this5.options.answered && !_this5.rejected) {
                        _this5.hide();
                    }
                });
            }
        }
    }]);
    return CallModal;
}(ActionModal);

var CallWidget = function (_UI$Element) {
    inherits(CallWidget, _UI$Element);

    function CallWidget() {
        classCallCheck(this, CallWidget);
        return possibleConstructorReturn(this, (CallWidget.__proto__ || Object.getPrototypeOf(CallWidget)).apply(this, arguments));
    }

    createClass(CallWidget, [{
        key: "extraNodeAttributes",
        value: function extraNodeAttributes(attr) {
            attr.setStyle("position", "relative");
            attr.setStyle("height", this.options.height + "px");
            attr.setStyle("width", this.options.width + "px");
        }
    }, {
        key: "setOptions",
        value: function setOptions(options) {
            get(CallWidget.prototype.__proto__ || Object.getPrototypeOf(CallWidget.prototype), "setOptions", this).call(this, options);
            this.options.calleeId = this.options.calleeId || this.options.calledId;
            this.options.callerId = parseInt(this.options.callerId);
            this.options.calleeId = parseInt(this.options.calleeId);
            if (isNaN(this.options.callerId) || isNaN(this.options.calleeId)) {
                throw Error("Improperly instantiated CallWidget, needs 'callerId' and 'calleeId' set in options!");
            }

            if (!this.options.hasOwnProperty("enableAudio")) {
                this.options.enableAudio = true;
            }
            if (!this.options.hasOwnProperty("proactive")) {
                this.options.proactive = true;
            }

            this.options.height = this.options.height || 200;
            this.options.width = this.options.width || 200;

            this.options.localToRemoteRatio = this.options.localToRemoteRatio || 0.29;
        }
    }, {
        key: "render",
        value: function render() {
            return [UI.createElement(Video, { autoplay: true, ref: "remoteVideo", height: this.options.height + "px", width: this.options.width + "px", style: {
                    position: "absolute",
                    backgroundColor: "black"
                } }), UI.createElement(Video, { height: this.options.height * this.options.localToRemoteRatio + "px",
                width: this.options.width * this.options.localToRemoteRatio + "px",
                autoplay: true, ref: "localVideo", style: {
                    bottom: "0",
                    right: "0",
                    position: "absolute",
                    backgroundColor: "#333"
                } }), UI.createElement("div", { ref: "hangUp", className: "fa fa-phone fa-lg fa-3x", style: {
                    bottom: "30px",
                    left: this.options.width / 2 - 40 + "px",
                    position: "absolute",
                    borderRadius: "100px",
                    backgroundColor: "red",
                    color: "white",
                    padding: "10px",
                    cursor: "pointer",
                    transform: "rotate(135deg)",
                    "-ms-transform": "rotate(135deg)",
                    "-webkit-transform": "rotate(135deg)"
                } })];
        }
    }, {
        key: "getInput",
        value: function getInput() {
            return {
                audio: this.options.enableAudio,
                video: true
            };
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this7 = this;

            if (USER.isSuperUser && (this.options.callerId === USER.id || this.options.calleeId === USER.id)) {
                window.userMediaStreamer.setInput(this.getInput());
                this.attachListener(window.userMediaStreamer, "localStreamReady", function () {
                    _this7.localVideo.setSourceObject(window.userMediaStreamer.getLocalStream());
                    _this7.hangUp.addClickListener(function () {
                        window.userMediaStreamer.stopStream();
                    });
                });
                this.attachListener(window.userMediaStreamer, "remoteStreamReady", function () {
                    _this7.remoteVideo.setSourceObject(window.userMediaStreamer.getRemoteStream());
                });

                if (this.options.proactive) {
                    window.userMediaStreamer.startStream(this.options.calleeId);
                    this.attachListener(window.userMediaStreamer, "rejected", function (error) {
                        _this7.dispatch("rejected", error);
                    });
                }
            } else {
                throw Error("What are you trying to do?!");
            }
        }
    }]);
    return CallWidget;
}(UI.Element);

function updateCallConfirmationMethod() {
    window.userMediaStreamer.requestCallConfirmation = function (userId, acceptCallback, rejectCallback) {
        var callConfirmationModal = UI.createElement(CallModal, { userId: userId });
        callConfirmationModal.show();
        callConfirmationModal.addListener("accept", function () {
            acceptCallback();
        });
        callConfirmationModal.addListener("reject", function () {
            rejectCallback();
        });
    };
}

if (!window.userMediaStreamer) {
    Dispatcher.Global.addListener("userListeningForCalls", function () {
        updateCallConfirmationMethod();
    });
} else {
    updateCallConfirmationMethod();
}

Dispatcher.Global.addListener("startedCall", function (userId) {
    CallModal.show({
        userId: userId,
        answered: true,
        proactive: true
    });
});

var UserMediaRecorder = function (_Dispatchable) {
    inherits(UserMediaRecorder, _Dispatchable);

    function UserMediaRecorder() {
        var mimeType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "audio/webm";
        classCallCheck(this, UserMediaRecorder);

        var _this = possibleConstructorReturn(this, (UserMediaRecorder.__proto__ || Object.getPrototypeOf(UserMediaRecorder)).call(this));

        _this.mimeType = mimeType;
        _this.recordings = [];

        _this.mediaSource = new MediaSource();
        _this.mediaSource.addEventListener("sourceopen", function (event) {
            _this.sourceBuffer = _this.mediaSource.addSourceBuffer(_this.mimeType);
            _this.onSourceOpen(event);
            _this.dispatch("sourceopen", event);
        });
        return _this;
    }

    createClass(UserMediaRecorder, [{
        key: "startRecording",
        value: function startRecording() {
            var _this2 = this;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (this.mediaRecorder) {
                if (this.mediaRecorder.state === "recording") {
                    throw Error("The media recorder already running!");
                }
                delete this.mediaRecorder;
                delete this.stream;
            }

            if (!MediaRecorder.isTypeSupported(this.mimeType)) {
                throw Error(this.mimeType + ' is not supported');
            }

            navigator.mediaDevices.getUserMedia({
                audio: options.audio || false,
                video: options.video || false
            }).then(function (stream) {
                _this2.stream = stream;
                _this2.mediaRecorder = new MediaRecorder(_this2.stream, Object.assign({
                    mimeType: _this2.mimeType
                }, options));
                _this2.mediaRecorder.ondataavailable = function (event) {
                    if (event.data && event.data.size > 0) {
                        _this2.recordings.push(event.data);
                    }
                };
                _this2.mediaRecorder.start(10);
                _this2.dispatch("startRecording", stream);
            }).catch(function (error) {
                throw Error('navigator.getUserMedia error: ' + error.toString());
            });
        }
    }, {
        key: "stopRecording",
        value: function stopRecording() {
            this.mediaRecorder.stop();
            delete this.mediaRecorder;
        }
    }, {
        key: "getRecording",
        value: function getRecording() {
            return new Blob(this.recordings, { type: this.mimeType });
        }
    }, {
        key: "clearRecording",
        value: function clearRecording() {
            this.recordings = [];
        }
    }, {
        key: "onSourceOpen",
        value: function onSourceOpen(event) {
            // Nothing by default
        }
    }, {
        key: "getSourceBuffer",
        value: function getSourceBuffer() {
            return this.sourceBuffer;
        }
    }]);
    return UserMediaRecorder;
}(Dispatchable);

var Canvas = function (_UI$Element) {
    inherits(Canvas, _UI$Element);

    function Canvas() {
        classCallCheck(this, Canvas);
        return possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).apply(this, arguments));
    }

    createClass(Canvas, [{
        key: "getNodeType",
        value: function getNodeType() {
            return "canvas";
        }
    }, {
        key: "getContext2D",
        value: function getContext2D() {
            return this.node.getContext("2d");
        }
    }]);
    return Canvas;
}(UI.Element);

var ImageUpload = function (_UI$Element2) {
    inherits(ImageUpload, _UI$Element2);

    function ImageUpload() {
        classCallCheck(this, ImageUpload);
        return possibleConstructorReturn(this, (ImageUpload.__proto__ || Object.getPrototypeOf(ImageUpload)).apply(this, arguments));
    }

    createClass(ImageUpload, [{
        key: "render",
        value: function render() {
            var _this3 = this;

            return [UI.createElement(FileInput, { ref: "imageInput", fileTypes: ".jpg,.jpeg,.png" }), UI.createElement(NumberInput, { ref: "imageQualityInput", value: "0.7", min: "0", max: "1", step: "0.1", placeholder: "quality" }), UI.createElement(Button, { label: "Upload", onClick: function onClick() {
                    return _this3.uploadImage();
                } }), UI.createElement("div", { ref: "finalURL" }), UI.createElement("div", { ref: "preview" }), UI.createElement("img", { ref: "compressedImage" })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            var _this4 = this;

            this.imageInput.addChangeListener(function () {
                if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
                    console.error('The File APIs are not fully supported in this browser.');
                    return false;
                }
                _this4.finalURL.eraseAllChildren();
                _this4.processImage();
            });
        }
    }, {
        key: "uploadImage",
        value: function uploadImage() {
            var _this5 = this;

            if (!this.imageURI) {
                return;
            }

            var _imageURI$split = this.imageURI.split(","),
                _imageURI$split2 = slicedToArray(_imageURI$split, 2),
                uriMeta = _imageURI$split2[0],
                byteString = _imageURI$split2[1];

            var typeString = uriMeta.split(":")[1].split(";")[0];

            var byteArray = new Uint8Array(byteString.length);

            for (var i = 0; i < byteString.length; i += 1) {
                byteArray[i] = byteString.charCodeAt(i);
            }

            var imageBlob = new Blob([byteArray], { type: typeString });
            if (imageBlob.size > 1e6) {
                console.log("Image too large! Aborting upload");
                return;
            }

            var formData = new FormData();

            formData.append("image", imageBlob);

            Ajax.post("/storage/upload_image/", {
                dataType: "json",
                data: formData,
                processData: false,
                contentType: false
            }).then(function (data) {
                return _this5.finalURL.appendChild(UI.createElement(
                    "a",
                    { href: data.imageURL },
                    "Successfully uploaded. Click to view."
                ));
            });
        }
    }, {
        key: "processImage",
        value: function processImage() {
            var _this6 = this;

            while (this.preview.node.firstChild) {
                this.preview.node.removeChild(this.preview.node.firstChild);
            }

            this.imageURI = null;

            var file = this.imageInput.getFile();
            if (!file) {
                return;
            }

            if (!(file.type === "image/png" || file.type === "image/jpeg")) {
                alert("File " + file.name + " is not an valid image but a " + file.type);
                return false;
            }

            var reader = new FileReader();
            reader.readAsArrayBuffer(file);

            reader.onload = function (event) {
                // blob stuff
                var blob = new Blob([event.target.result]); // create blob...
                window.URL = window.URL || window.webkitURL;
                var blobURL = window.URL.createObjectURL(blob); // and get it's URL

                // helper Image object
                var image = new Image();
                image.src = blobURL;
                //preview.appendChild(image); // preview commented out, I am using the canvas instead
                image.onload = function () {
                    // have to wait till it's loaded
                    var resized = _this6.resizeImage(image); // send it to canvas
                    var newinput = document.createElement("input");
                    newinput.type = 'hidden';
                    newinput.name = 'image';
                    newinput.value = resized; // put result from canvas into new hidden input
                    console.log("resized size", resized.toString().length * 6 / 8 / 1024, "kb");
                    // console.log(resized);
                    _this6.compressedImage.node.src = resized;

                    _this6.imageURI = resized;
                };
            };
            this.imageInput.value = "";
        }
    }, {
        key: "resizeImage",
        value: function resizeImage(image) {
            var canvas = document.createElement('canvas');
            var context = canvas.getContext("2d");

            var width = image.width;
            var height = image.height;

            var maxSize = 400;
            var source = image;

            // calculate the width and height, constraining the proportions
            if (width > height) {
                if (width > maxSize) {
                    if (width > maxSize * 4) {
                        width /= 2;
                        height /= 2;

                        var auxCanvas = document.createElement("canvas");
                        var auxContext = auxCanvas.getContext("2d");

                        auxCanvas.width = width;
                        auxCanvas.height = height;

                        auxContext.drawImage(source, 0, 0, width, height);

                        source = auxCanvas;
                    }

                    height = Math.round(height * maxSize / width);
                    width = maxSize;
                }
            } else {
                if (height > maxSize) {
                    if (height > maxSize * 4) {
                        width /= 2;
                        height /= 2;

                        var _auxCanvas = document.createElement("canvas");
                        var _auxContext = _auxCanvas.getContext("2d");

                        _auxCanvas.width = width;
                        _auxCanvas.height = height;

                        _auxContext.drawImage(source, 0, 0, width, height);

                        source = _auxCanvas;
                    }

                    width = Math.round(width * maxSize / height);
                    height = maxSize;
                }
            }

            // resize the canvas and draw the image data into it
            canvas.width = width;
            canvas.height = height;
            context.drawImage(source, 0, 0, width, height);

            this.preview.node.appendChild(canvas); // do the actual resized preview
            var quality = this.imageQualityInput.getValue() || 0.7;

            return canvas.toDataURL("image/jpeg", quality); // get the data from canvas as 70% JPG (can be also PNG, etc.)
        }
    }]);
    return ImageUpload;
}(UI.Element);

var WorkspaceWatcher = function (_UI$Element) {
    inherits(WorkspaceWatcher, _UI$Element);

    function WorkspaceWatcher() {
        classCallCheck(this, WorkspaceWatcher);
        return possibleConstructorReturn(this, (WorkspaceWatcher.__proto__ || Object.getPrototypeOf(WorkspaceWatcher)).apply(this, arguments));
    }

    createClass(WorkspaceWatcher, [{
        key: "openTaskWorkspace",
        value: function openTaskWorkspace(evalTask) {
            var workspace = evalTask.getWorkspace(this.options.userId);
            if (!workspace.ide) {
                workspace.ide = UI.createElement(WorkspaceIDE, { workspace: workspace, plugins: PluginTypes.GLOBAL }), this.taskWorkspaceSwitcher.appendChild(workspace.ide);
            }
            this.taskWorkspaceSwitcher.setActive(workspace.ide);
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var contest = ContestStore.get(this.options.contestId);
            var taskButtons = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                var _loop = function _loop() {
                    var contestTask = _step.value;

                    var evalTask = contestTask.getEvalTask();
                    taskButtons.push(UI.createElement(Button, { label: evalTask.longName, level: Level.INFO,
                        onClick: function onClick() {
                            return _this2.openTaskWorkspace(evalTask);
                        } }));
                };

                for (var _iterator = contest.getContestTasks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    _loop();
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return [UI.createElement(
                "div",
                { ref: "taskButtons" },
                taskButtons
            ), UI.createElement(Switcher, { ref: "taskWorkspaceSwitcher", style: { height: "700px" } })];
        }
    }, {
        key: "onMount",
        value: function onMount() {
            // TODO: only add once!
            WebsocketSubscriber.addListener("globalWorkspaceEdit", function (event) {
                console.log("A workspace was edited: ", event);
            });

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = WorkspaceStore.all()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var workspace = _step2.value;

                    GlobalState.registerStream(workspace.streamName());
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }]);
    return WorkspaceWatcher;
}(UI.Element);

exports.d3 = d3;
exports.EPS = EPS;
exports.isZero = isZero;
exports.rand = rand;
exports.equal = equal;
exports.equalPoints = equalPoints;
exports.sqr = sqr;
exports.distance = distance;
exports.signedDistancePointLine = signedDistancePointLine;
exports.distancePointLine = distancePointLine;
exports.pointOnSegment = pointOnSegment;
exports.perpendicularFoot = perpendicularFoot;
exports.lineEquation = lineEquation;
exports.angleGrad = angleGrad;
exports.radian = radian;
exports.gradian = gradian;
exports.angleRad = angleRad;
exports.crossProduct = crossProduct;
exports.rotatePoint = rotatePoint;
exports.translatePoint = translatePoint;
exports.scalePoint = scalePoint;
exports.polarToCartesian = polarToCartesian;
exports.circlesIntersection = circlesIntersection;
exports.bound = bound;
exports.getVector = getVector;
exports.vectorLength = vectorLength;
exports.normalizeVector = normalizeVector;
exports.scaleVector = scaleVector;
exports.addVectors = addVectors;
exports.subtractVectors = subtractVectors;
exports.triangleArea = triangleArea;
exports.inRange = inRange;
exports.interpolationValue = interpolationValue;
exports.AjaxHandler = AjaxHandler;
exports.FixedURLAjaxHandler = FixedURLAjaxHandler;
exports.Ajax = Ajax;
exports.DispatchersSymbol = DispatchersSymbol;
exports.Dispatcher = Dispatcher;
exports.Dispatchable = Dispatchable;
exports.RunOnce = RunOnce;
exports.CleanupJobs = CleanupJobs;
exports.SingleActiveElementDispatcher = SingleActiveElementDispatcher;
exports.getAttachCleanupJobMethod = getAttachCleanupJobMethod;
exports.FileSaver = FileSaver;
exports.Plugin = Plugin;
exports.Pluginable = Pluginable;
exports.SessionStorageMap = SessionStorageMap;
exports.LocalStorageMap = LocalStorageMap;
exports.URLRouter = URLRouter;
exports.unwrapArray = unwrapArray;
exports.isLocalUrl = isLocalUrl;
exports.trimLocalUrl = trimLocalUrl;
exports.splitInChunks = splitInChunks;
exports.isIterable = isIterable;
exports.defaultComparator = defaultComparator;
exports.slugify = slugify;
exports.suffixNumber = suffixNumber;
exports.setObjectPrototype = setObjectPrototype;
exports.isNumber = isNumber;
exports.isString = isString;
exports.isPlainObject = isPlainObject;
exports.deepCopy = deepCopy;
exports.objectFromKeyValue = objectFromKeyValue;
exports.dashCase = dashCase;
exports.getCookie = getCookie;
exports.uniqueId = uniqueId;
exports.padNumber = padNumber;
exports.getOrdinalSuffix = getOrdinalSuffix;
exports.suffixWithOrdinal = suffixWithOrdinal;
exports.instantiateNative = instantiateNative;
exports.extendsNative = extendsNative;
exports.NOOP_FUNCTION = NOOP_FUNCTION;
exports.mapIterator = mapIterator;
exports.filterIterator = filterIterator;
exports.CallModifier = CallModifier;
exports.UnorderedCallDropper = UnorderedCallDropper;
exports.CallThrottler = CallThrottler;
exports.Device = Device;
exports.Deque = Deque;
exports.MultiMap = MultiMap;
exports.deprecate = deprecate;
exports.lazyCSS = lazyCSS;
exports.lazyInheritCSS = lazyInheritCSS;
exports.lazyInitialize = lazyInitialize;
exports.lazyInit = lazyInit;
exports.readOnly = readOnly;
exports.StringStream = StringStream;
exports.BlockCodeModifier = BlockCodeModifier;
exports.MarkupModifier = MarkupModifier;
exports.HeaderModifier = HeaderModifier;
exports.ParagraphModifier = ParagraphModifier;
exports.InlineCodeModifier = InlineCodeModifier;
exports.InlineLatexModifier = InlineLatexModifier;
exports.StrongModifier = StrongModifier;
exports.LinkModifier = LinkModifier;
exports.MarkupParser = MarkupParser;
exports.TestStringStream = TestStringStream;
exports.MarkupClassMap = MarkupClassMap;
exports.MarkupRenderer = MarkupRenderer;
exports.State = State;
exports.GlobalState = GlobalState;
exports.DefaultState = DefaultState;
exports.StoreSymbol = StoreSymbol;
exports.StoreObject = StoreObject;
exports.BaseStore = BaseStore;
exports.GenericObjectStore = GenericObjectStore;
exports.SingletonStore = SingletonStore;
exports.AjaxFetchMixin = AjaxFetchMixin;
exports.VirtualStoreMixin = VirtualStoreMixin;
exports.VirtualStoreObjectMixin = VirtualStoreObjectMixin;
exports.DAY_IN_MILLISECONDS = DAY_IN_MILLISECONDS;
exports.isDifferentDay = isDifferentDay;
exports.ServerTime = ServerTime;
exports.MAX_AUTO_UNIX_TIME = MAX_AUTO_UNIX_TIME;
exports.Date = Date$1;
exports.StemDate = StemDate;
exports.TimeUnit = TimeUnit;
exports.Duration = Duration;
exports.addCanonicalTimeUnit = addCanonicalTimeUnit;
exports.addCanonicalTimeUnits = addCanonicalTimeUnits;
exports.COLORS_BY_NAME = COLORS_BY_NAME;
exports.Color = Color;
exports.lighten = lighten;
exports.darken = darken;
exports.enhance = enhance;
exports.buildColors = buildColors;
exports.ColorGenerator = ColorGenerator;
exports.DoubleClickable = DoubleClickable;
exports.Draggable = Draggable;
exports.FAIcon = FAIcon;
exports.FACollapseIcon = FACollapseIcon;
exports.FASortIcon = FASortIcon;
exports.FullScreenable = FullScreenable;
exports.getTextColor = getTextColor;
exports.BasicLevelSizeStyleSheet = BasicLevelSizeStyleSheet;
exports.BasicLevelStyleSheet = BasicLevelStyleSheet;
exports.GlobalStyle = GlobalStyle;
exports.defaultToPixelsAttributes = defaultToPixelsAttributes;
exports.CreateNodeAttributesMap = CreateNodeAttributesMap;
exports.ClassNameSet = ClassNameSet;
exports.NodeAttributes = NodeAttributes;
exports.Transition = Transition;
exports.Modifier = Modifier$1;
exports.TransitionList = TransitionList;
exports.UIElement = UIElement;
exports.UI = UI;
exports.Orientation = Orientation;
exports.Direction = Direction;
exports.Level = Level;
exports.Size = Size;
exports.VoteStatus = VoteStatus;
exports.ActionStatus = ActionStatus;
exports.getOffset = getOffset;
exports.getComputedStyle = getComputedStyle;
exports.changeParent = changeParent;
exports.StyleInstance = StyleInstance;
exports.StyleElement = StyleElement;
exports.KeyframeElement = KeyframeElement;
exports.DynamicStyleElement = DynamicStyleElement;
exports.StyleSheet = StyleSheet;
exports.ExclusiveClassSet = ExclusiveClassSet;
exports.styleMap = styleMap;
exports.wrapCSS = wrapCSS;
exports.hover = hover;
exports.focus = focus;
exports.active = active;
exports.styleRuleCustom = styleRuleCustom;
exports.styleRule = styleRule;
exports.styleRuleInherit = styleRuleInherit;
exports.keyframesRule = keyframesRule;
exports.keyframesRuleInherit = keyframesRuleInherit;
exports.styleRuleWithOptions = styleRuleWithOptions;
exports.Link = Link;
exports.Panel = Panel;
exports.Image = Image$1;
exports.RawHTML = RawHTML;
exports.TimePassedSpan = TimePassedSpan;
exports.TemporaryMessageArea = TemporaryMessageArea;
exports.SlideBar = SlideBar;
exports.VerticalSlideBar = VerticalSlideBar;
exports.HorizontalSlideBar = HorizontalSlideBar;
exports.ScrollableMixin = ScrollableMixin;
exports.InfiniteScrollable = InfiniteScrollable;
exports.ViewportMeta = ViewportMeta;
exports.InputStyle = InputStyle;
exports.Input = Input;
exports.SubmitInput = SubmitInput;
exports.TextInput = TextInput;
exports.NumberInput = NumberInput;
exports.EmailInput = EmailInput;
exports.PasswordInput = PasswordInput;
exports.FileInput = FileInput;
exports.CheckboxInput = CheckboxInput;
exports.RadioInput = RadioInput;
exports.TextArea = TextArea;
exports.Select = Select;
exports.Form = Form;
exports.FormGroup = FormGroup;
exports.FormField = FormField;
exports.SVG = SVG;
exports.SVGNodeAttributes = SVGNodeAttributes;
exports.LabelStyle = LabelStyle;
exports.BadgeStyle = BadgeStyle;
exports.SimpleStyledElement = SimpleStyledElement;
exports.IconableInterface = IconableInterface;
exports.Label = Label;
exports.Badge = Badge;
exports.ProgressBar = ProgressBar;
exports.Router = Router;
exports.Route = Route;
exports.TerminalRoute = TerminalRoute;
exports.setLanguageStore = setLanguageStore;
exports.setTranslationMap = setTranslationMap;
exports.getTranslationMap = getTranslationMap;
exports.Switcher = Switcher;
exports.TabTitleArea = TabTitleArea;
exports.BasicTabTitle = BasicTabTitle;
exports.TabArea = TabArea;
exports.BaseTabAreaStyle = BaseTabAreaStyle;
exports.DefaultTabAreaStyle = DefaultTabAreaStyle;
exports.MinimalistTabAreaStyle = MinimalistTabAreaStyle;
exports.FlatTabAreaStyle = FlatTabAreaStyle;
exports.FlatTabAreaHorizontalOverflowStyle = FlatTabAreaHorizontalOverflowStyle;
exports.FlatTabArea = FlatTabArea;
exports.Button = Button;
exports.StateButton = StateButton;
exports.AjaxButton = AjaxButton;
exports.buttonColorToStyle = buttonColorToStyle;
exports.ButtonStyle = ButtonStyle;
exports.ButtonGroupStyle = ButtonGroupStyle;
exports.RadioButtonGroupStyle = RadioButtonGroupStyle;
exports.ButtonGroup = ButtonGroup;
exports.RadioButtonGroup = RadioButtonGroup;
exports.cardPanelColorToStyle = cardPanelColorToStyle;
exports.CardPanelStyle = CardPanelStyle;
exports.CardPanelHeaderStyle = CardPanelHeaderStyle;
exports.CardPanel = CardPanel;
exports.RowList = RowList$$1;
exports.CollapsiblePanel = CollapsiblePanel;
exports.DelayedCollapsiblePanel = DelayedCollapsiblePanel;
exports.FloatingWindow = FloatingWindow;
exports.VolatileFloatingWindow = VolatileFloatingWindow;
exports.Modal = Modal;
exports.ErrorModal = ErrorModal;
exports.ActionModal = ActionModal;
exports.ActionModalButton = ActionModalButton;
exports.GlobalContainer = GlobalContainer;
exports.HorizontalOverflow = HorizontalOverflow;
exports.HorizontalOverflowStyle = HorizontalOverflowStyle;
exports.DividerBar = DividerBar$$1;
exports.SectionDivider = SectionDivider$$1;
exports.TitledSectionDivider = TitledSectionDivider;
exports.Accordion = Accordion$$1;
exports.AccordionStyle = AccordionStyle;
exports.SectionDividerStyle = SectionDividerStyle;
exports.TitledDividerStyle = TitledDividerStyle;
exports.Carousel = Carousel$$1;
exports.CarouselStyle = CarouselStyle$$1;
exports.RangePanelInterface = RangePanelInterface$$1;
exports.RangeTableInterface = RangeTableInterface$$1;
exports.EntriesManager = EntriesManager$$1;
exports.Table = Table;
exports.TableRow = TableRow;
exports.TableStyle = TableStyle;
exports.SortableTableStyle = SortableTableStyle;
exports.CollapsibleTable = CollapsibleTable;
exports.CollapsibleTableInterface = CollapsibleTableInterface;
exports.CollapsibleTableRow = CollapsibleTableRow;
exports.DelayedCollapsibleTableRow = DelayedCollapsibleTableRow;
exports.TableRowInCollapsibleTable = TableRowInCollapsibleTable;
exports.collapsibleTableStyle = collapsibleTableStyle;
exports.SortableTable = SortableTable;
exports.SortableTableInterface = SortableTableInterface;
exports.DateTimePicker = DateTimePicker$$1;
exports.CodeEditor = CodeEditor;
exports.StaticCodeHighlighter = StaticCodeHighlighter;
exports.Theme = Theme;
exports.registerStyle = registerStyle;
exports.BasicOrientedElement = BasicOrientedElement;
exports.NavElement = NavElement;
exports.NavLinkElement = NavLinkElement;
exports.NavSection = NavSection;
exports.NavAnchoredNotifications = NavAnchoredNotifications;
exports.navSessionManager = navSessionManager;
exports.NavIcon = NavIcon;
exports.LeftSideNavIcon = LeftSideNavIcon;
exports.RightSideNavIcon = RightSideNavIcon;
exports.WrappedNavIcon = WrappedNavIcon;
exports.NavManager = NavManager;
exports.initializeNavbar = initializeNavbar;
exports.NavCarouselStyle = NavCarouselStyle;
exports.NavStyle = NavStyle;
exports.maxDistanceFromSide = maxDistanceFromSide;
exports.initializeSwipeRight = initializeSwipeRight;
exports.initializeSwipeLeft = initializeSwipeLeft;
exports.initializeSwipeEvents = initializeSwipeEvents;
exports.TermDefinition = TermDefinition;
exports.TermDefinitionObject = TermDefinitionObject;
exports.ProgrammingLanguageObject = ProgrammingLanguageObject;
exports.ProgrammingLanguage = ProgrammingLanguage;
exports.AceTheme = AceTheme;
exports.AceKeyboardHandler = AceKeyboardHandler;
exports.DifficultyObject = DifficultyObject;
exports.Difficulty = Difficulty;
exports.FRONT_PAGE_CHAT_ID = FRONT_PAGE_CHAT_ID;
exports.INTERVIEWS_ARCHIVE_ID = INTERVIEWS_ARCHIVE_ID;
exports.ALGORITHMS_ARCHIVE_ID = ALGORITHMS_ARCHIVE_ID;
exports.ABOUT_ARTICLES = ABOUT_ARTICLES;
exports.ContestScoring = ContestScoring;
exports.ContestScoringStore = ContestScoringStore;
exports.SocialApp = SocialApp;
exports.SocialAppStore = SocialAppStore;
exports.defaultThemeProperties = defaultThemeProperties;
exports.CSAApp = CSAApp;
exports.AppClass = AppClass;
exports.viewportMeta = viewportMeta;
exports.Article = Article;
exports.ArticleStore = ArticleStore;
exports.ArticleEditStore = ArticleEditStore;
exports.EmailConfirmed = EmailConfirmed;
exports.EmailUnsubscribe = EmailUnsubscribe;
exports.FacebookManager = FacebookManager;
exports.GoogleManager = GoogleManager;
exports.LoginWidget = LoginWidget;
exports.RegisterWidget = RegisterWidget;
exports.Login = Login;
exports.LoginModal = LoginModal;
exports.Logout = Logout;
exports.PasswordReset = PasswordReset;
exports.PasswordResetFromKey = PasswordResetFromKey;
exports.Tag = Tag;
exports.TagStore = TagStore;
exports.UserHandle = UserHandle;
exports.UserProfilePanel = UserProfilePanel;
exports.ThemeSettingsPanel = ThemeSettingsPanel;
exports.AccountSettingsPanel = AccountSettingsPanel;
exports.UserStore = UserStore;
exports.PublicUserStore = PublicUserStore;
exports.UserNotificationStore = UserNotificationStore;
exports.AbstractUsernameAutocomplete = AbstractUsernameAutocomplete;
exports.AutocompleteWindow = AutocompleteWindow;
exports.UserInputField = UserInputField;
exports.AnalyticsPanel = AnalyticsPanel;
exports.ArticleEditor = ArticleEditor;
exports.ArticleManager = ArticleManager;
exports.ArticleTranslationManager = ArticleTranslationManager;
exports.ArticleRenderer = ArticleRenderer;
exports.RecursiveArticleRenderer = RecursiveArticleRenderer;
exports.ArticleSwitcher = ArticleSwitcher;
exports.ArticleTabArea = ArticleTabArea;
exports.UserMentionPlugin = UserMentionPlugin;
exports.EnterToSendPlugin = EnterToSendPlugin;
exports.ChatMarkupRenderer = ChatMarkupRenderer;
exports.ChatPlugin = ChatPlugin;
exports.ChatWidget = ChatWidget;
exports.EditableMessage = EditableMessage;
exports.GroupChatWidget = GroupChatWidget;
exports.PrivateChatWidget = PrivateChatWidget;
exports.VotableGroupChatWidget = VotableGroupChatWidget;
exports.GroupChatMessage = GroupChatMessage;
exports.PrivateChatMessage = PrivateChatMessage;
exports.VotableChatMessage = VotableChatMessage;
exports.PreviewMarkupButton = PreviewMarkupButton;
exports.ChatMessageScrollSection = ChatMessageScrollSection;
exports.CommentWidget = CommentWidget;
exports.AsyncCommentThread = AsyncCommentThread;
exports.MessageInstance = MessageInstance;
exports.MessageInstanceStore = MessageInstanceStore;
exports.MessageThread = MessageThread;
exports.MessageThreadStore = MessageThreadStore;
exports.PrivateChatStore = PrivateChatStore;
exports.GroupChatStore = GroupChatStore;
exports.NotificationsList = NotificationsList;
exports.MiniMessage = MiniMessage;
exports.MessagesPanel = MessagesPanel;
exports.MessagesList = MessagesList;
exports.IconMessagesList = IconMessagesList;
exports.VotingWidget = VotingWidget;
exports.CommentVotingWidget = CommentVotingWidget;
exports.CommentVotingWidgetWithThumbs = CommentVotingWidgetWithThumbs;
exports.Contest = Contest;
exports.ContestStore = ContestStore;
exports.ContestEventStore = ContestEventStore;
exports.ContestTask = ContestTask;
exports.ContestTaskStore = ContestTaskStore;
exports.ContestUser = ContestUser;
exports.ContestUserStore = ContestUserStore;
exports.ContestRegisterer = ContestRegisterer;
exports.ContestRegistererStore = ContestRegistererStore;
exports.ContestAnnouncement = ContestAnnouncement;
exports.ContestAnnouncementStore = ContestAnnouncementStore;
exports.ContestQuestion = ContestQuestion;
exports.ContestQuestionStore = ContestQuestionStore;
exports.ContestAnnouncementList = ContestAnnouncementList;
exports.AnnouncementBroadcastModal = AnnouncementBroadcastModal;
exports.ArchivePanel = ArchivePanel;
exports.CountryUsersFilter = CountryUsersFilter;
exports.EvalTasksSolutionsWidget = EvalTasksSolutionsWidget;
exports.ContestAnalysis = ContestAnalysis;
exports.AnalysisModal = AnalysisModal;
exports.ContestEditPanel = ContestEditPanel;
exports.ContestList = ContestList;
exports.VirtualParticipationButton = VirtualParticipationButton;
exports.ContestTaskSummaryPanel = ContestTaskSummaryPanel;
exports.ContestTaskPanel = ContestTaskPanel;
exports.ContestTaskModal = ContestTaskModal;
exports.ContestTaskButton = ContestTaskButton;
exports.DelayedContestTaskPanel = DelayedContestTaskPanel;
exports.AdminContestTasksTable = AdminContestTasksTable;
exports.ContestTaskListWithFilters = ContestTaskListWithFilters;
exports.ContestTaskList = ContestTaskList;
exports.ContestPanel = ContestPanel;
exports.getDefaultContestStartDate = getDefaultContestStartDate;
exports.CreateContestModal = CreateContestModal;
exports.CreateContestButton = CreateContestButton;
exports.PrivateArchiveList = PrivateArchiveList;
exports.PrivateArchive = PrivateArchive;
exports.PrivateArchiveStore = PrivateArchiveStore;
exports.PrivateArchivePanel = PrivateArchivePanel;
exports.PrivateArchivePanelWrapper = PrivateArchivePanelWrapper;
exports.ContestQuestionList = ContestQuestionList;
exports.ContestTaskQuestionList = ContestTaskQuestionList;
exports.AskQuestionButton = AskQuestionButton;
exports.AskTaskQuestionButton = AskTaskQuestionButton;
exports.AdminContestQuestionPanel = AdminContestQuestionPanel;
exports.ScoreboardEntriesManager = ScoreboardEntriesManager;
exports.Scoreboard = Scoreboard;
exports.MetaContestUsersTable = MetaContestUsersTable;
exports.ContestUsersTable = ContestUsersTable;
exports.ContestUsersFilter = ContestUsersFilter;
exports.PrivateArchiveUsersTable = PrivateArchiveUsersTable;
exports.ScoreboardTable = ScoreboardTable;
exports.ContestManager = ContestManager;
exports.ContestInvitePage = ContestInvitePage;
exports.CSAAtomLogo = CSAAtomLogo;
exports.CSALogoSwarm = CSALogoSwarm;
exports.CSALogo = CSALogo;
exports.CSALoadingLogo = CSALoadingLogo;
exports.CSAAboutPage = CSAAboutPage;
exports.GenericErrorView = GenericErrorView;
exports.PageNotFoundRoute = PageNotFoundRoute;
exports.NavGlobalChat = NavGlobalChat;
exports.PlayerPopup = PlayerPopup;
exports.Definition = Definition;
exports.FacebookShare = FacebookShare;
exports.TwitterShare = TwitterShare;
exports.VKShare = VKShare;
exports.ShareButtons = ShareButtons;
exports.StateDependentElement = StateDependentElement;
exports.CSAStyle = CSAStyle$1;
exports.FrontPagePanel = FrontPagePanel;
exports.AddMethod = AddMethod;
exports.isWhiteSpace = isWhiteSpace;
exports.consoleTokenizer = consoleTokenizer;
exports.Formatter = Formatter;
exports.getTextWidth = getTextWidth;
exports.parseIntegers = parseIntegers;
exports.WebsocketCommandProcessor = WebsocketCommandProcessor;
exports.WebsocketStreamHandler = WebsocketStreamHandler;
exports.WebsocketSubscriber = WebsocketSubscriber;
exports.ProblemSetting = ProblemSetting;
exports.CSAForceLayout = CSAForceLayout;
exports.CSAForceTransition = CSAForceTransition;
exports.Graph = Graph;
exports.GraphSVG = GraphSVG;
exports.GraphEdge = GraphEdge;
exports.GraphNode = GraphNode;
exports.GlobalRatings = GlobalRatings;
exports.MinRanking = MinRanking;
exports.CSAUserRatingChart = CSAUserRatingChart;
exports.CodeforcesUserRatingSVG = CodeforcesUserRatingSVG;
exports.CSAUserRatingSVG = CSAUserRatingSVG;
exports.GraphEditor = GraphEditor;
exports.DropdownListStyle = DropdownListStyle;
exports.CSAGeometryWidget = CSAGeometryWidget;
exports.CSAGeometryWidgetSVG = CSAGeometryWidgetSVG;
exports.formatCoord = formatCoord;
exports.scaleCoord = scaleCoord;
exports.DraggablePointWithCoords = DraggablePointWithCoords;
exports.GeometryLine = GeometryLine;
exports.GeometrySegment = GeometrySegment;
exports.GeometryPolygon = GeometryPolygon;
exports.GeometryCircle = GeometryCircle;
exports.CSAPlayer = CSAPlayer;
exports.CSAPlayerContainer = CSAPlayerContainer;
exports.PlayerCardPanel = PlayerCardPanel;
exports.computeDFSCoordsUndirected = computeDFSCoordsUndirected;
exports.computeDFSCoordsDirected = computeDFSCoordsDirected;
exports.VisualQueue = VisualQueue;
exports.AdjacencyLists = AdjacencyLists;
exports.AdjacencyListsSVG = AdjacencyListsSVG;
exports.VisualArray = VisualArray;
exports.VisualListElement = VisualListElement;
exports.VisualList = VisualList;
exports.VisualStack = VisualStack;
exports.BlogEntry = BlogEntry$1;
exports.BlogEntryEditModal = BlogEntryEditModal;
exports.NewBlogEntryModal = NewBlogEntryModal;
exports.BlogEntryPreview = BlogEntryPreview;
exports.DelayedBlogEntryList = DelayedBlogEntryList;
exports.DelayedBlogEntryView = DelayedBlogEntryView;
exports.BlogEntryView = BlogEntryView;
exports.BlogRoute = BlogRoute;
exports.BlogEntryStore = BlogEntryStore;
exports.CommandManager = CommandManager;
exports.CommandInstance = CommandInstance;
exports.CommandRun = CommandRun;
exports.CommandInstanceStore = CommandInstanceStore;
exports.CommandRunStore = CommandRunStore;
exports.LinePlot = LinePlot;
exports.PointPlot = PointPlot;
exports.PointPlotElement = PointPlotElement;
exports.BasePointPlot = BasePointPlot;
exports.AxisTick = AxisTick;
exports.BasicAxis = BasicAxis;
exports.BasicChart = BasicChart;
exports.TimeChart = TimeChart;
exports.ChartSVG = ChartSVG;
exports.YoutubeIframe = YoutubeIframe;
exports.Latex = Latex;
exports.MarkupEditor = MarkupEditor;
exports.MarkupEditorModal = MarkupEditorModal;
exports.QuestionnaireStyle = QuestionnaireStyle;
exports.QuestionPage = QuestionPage;
exports.QuestionnairePanel = QuestionnairePanel;
exports.DelayedQuestionnairePanel = DelayedQuestionnairePanel;
exports.QuestionnaireModal = QuestionnaireModal;
exports.QuestionnaireButton = QuestionnaireButton;
exports.QuestionnaireAnswersPanel = QuestionnaireAnswersPanel;
exports.DelayedQuestionnaireAnswersPanel = DelayedQuestionnaireAnswersPanel;
exports.QuestionnaireStore = QuestionnaireStore;
exports.QuestionnaireQuestion = QuestionnaireQuestion;
exports.QuestionnaireInstanceStore = QuestionnaireInstanceStore;
exports.ErrorHandlers = ErrorHandlers;
exports.ErrorMessageStore = ErrorMessageStore;
exports.ErrorMessage = ErrorMessage;
exports.Language = Language;
exports.TranslationKeyStore = TranslationKeyStore;
exports.TranslationEntryStore = TranslationEntryStore;
exports.Country = Country;
exports.CountryStore = CountryStore;
exports.ALL_COUNTRIES_PLACEHOLDER = ALL_COUNTRIES_PLACEHOLDER;
exports.ForumStore = ForumStore;
exports.ForumThreadStore = ForumThreadStore;
exports.CreateForumThreadButton = CreateForumThreadButton;
exports.ForumThreadPanel = ForumThreadPanel;
exports.ForumThreadHeader = ForumThreadHeader;
exports.ForumThreadPreview = ForumThreadPreview;
exports.ForumThreadBubble = ForumThreadBubble;
exports.ForumThreadList = ForumThreadList;
exports.ForumPanel = ForumPanel;
exports.DelayedForumPanel = DelayedForumPanel;
exports.DelayedForumThreadPanel = DelayedForumThreadPanel;
exports.ForumRoute = ForumRoute;
exports.EmailCampaignStore = EmailCampaignStore;
exports.EmailCampaign = EmailCampaign;
exports.EmailGatewayStore = EmailGatewayStore;
exports.EmailGateway = EmailGateway;
exports.EmailStatusStore = EmailStatusStore;
exports.EmailStatus = EmailStatus;
exports.EmailTemplateStore = EmailTemplateStore;
exports.EmailTemplate = EmailTemplate;
exports.EmailCampaignWidget = EmailCampaignWidget;
exports.EmailGatewayWidget = EmailGatewayWidget;
exports.EmailManager = EmailManager;
exports.CustomRun = CustomRun;
exports.CustomRunStore = CustomRunStore;
exports.SourceCardPanel = SourceCardPanel;
exports.CompilationCardPanel = CompilationCardPanel;
exports.CustomRunWidget = CustomRunWidget;
exports.SubmissionWidget = SubmissionWidget;
exports.EvalJobResultsTable = EvalJobResultsTable;
exports.EvalJob = EvalJob;
exports.EvalJobStore = EvalJobStore;
exports.EvalTaskManager = EvalTaskManager;
exports.CreateEvalTaskModal = CreateEvalTaskModal;
exports.EvalTaskStatisticsWidget = EvalTaskStatisticsWidget;
exports.InteractiveTaskLog = InteractiveTaskLog;
exports.EvalJobUIHandler = EvalJobUIHandler;
exports.SubmissionSummary = SubmissionSummary;
exports.SubmissionSummaryStyle = SubmissionSummaryStyle;
exports.SubmissionSummaryPanel = SubmissionSummaryPanel;
exports.SubmissionSummaryGlobalFilter = SubmissionSummaryGlobalFilter;
exports.SubmissionSummaryContestFilter = SubmissionSummaryContestFilter;
exports.SubmissionSummaryInterviewFilter = SubmissionSummaryInterviewFilter;
exports.SubmissionSummaryPrivateArchiveFilter = SubmissionSummaryPrivateArchiveFilter;
exports.SubmissionSummaryMarkup = SubmissionSummaryMarkup;
exports.EvalTask = EvalTask;
exports.EvalTaskStore = EvalTaskStore;
exports.InteractiveBadge = InteractiveBadge;
exports.EnforcedTemplateBadge = EnforcedTemplateBadge;
exports.OutputOnlyBadge = OutputOnlyBadge;
exports.ApproximationBadge = ApproximationBadge;
exports.InterviewApp = InterviewApp;
exports.Interview = Interview;
exports.InterviewStore = InterviewStore;
exports.InterviewTask = InterviewTask;
exports.InterviewTaskStore = InterviewTaskStore;
exports.InterviewPanel = InterviewPanel;
exports.InterviewPanelWrapper = InterviewPanelWrapper;
exports.LessonList = LessonList;
exports.LessonPanel = LessonPanel;
exports.Lesson = Lesson;
exports.LessonStore = LessonStore;
exports.LessonSection = LessonSection;
exports.LessonSectionStore = LessonSectionStore;
exports.AdminPanel = AdminPanel;
exports.Icarus = Icarus;
exports.MachineInstanceWidget = MachineInstanceWidget;
exports.MachineLoggingWidget = MachineLoggingWidget;
exports.WebsiteLoggingWidget = WebsiteLoggingWidget;
exports.GeneralControlPanelWidget = GeneralControlPanelWidget;
exports.EvaluationMachinesWatcherPanel = EvaluationMachinesWatcherPanel;
exports.MachineInstance = MachineInstance;
exports.MachineInstanceStore = MachineInstanceStore;
exports.GeneralControlPanelData = GeneralControlPanelData;
exports.GeneralControlPanelDataStore = GeneralControlPanelDataStore;
exports.UserStats = UserStats;
exports.WSConnectionData = WSConnectionData;
exports.WSConnectionDataStore = WSConnectionDataStore;
exports.WSConnectionDataUI = WSConnectionDataUI;
exports.WSStreamData = WSStreamData;
exports.WSStreamDataStore = WSStreamDataStore;
exports.WSStreamDataUI = WSStreamDataUI;
exports.WSUserData = WSUserData;
exports.WSUserDataStore = WSUserDataStore;
exports.WSUserDataUI = WSUserDataUI;
exports.AdminDocumentationPanel = AdminDocumentationPanel;
exports.Video = Video;
exports.CallWidget = CallWidget;
exports.DocumentationPanel = DocumentationPanel;
exports.UserMediaRecorder = UserMediaRecorder;
exports.UserMediaStream = UserMediaStream;
exports.MultimediaCall = MultimediaCall;
exports.MultimediaCallStore = MultimediaCallStore;
exports.WSMediaChannel = WSMediaChannel;
exports.ImageUpload = ImageUpload;
exports.PublicStorageFileStore = PublicStorageFileStore;
exports.StorageServerStore = StorageServerStore;
exports.StorageLimits = StorageLimits;
exports.StorageManager = StorageManager;
exports.StorageMeta = StorageMeta;
exports.DeleteFileModal = DeleteFileModal;
exports.DeleteAllFilesModal = DeleteAllFilesModal;
exports.UploadFilesModal = UploadFilesModal;
exports.RenameFileModal = RenameFileModal;
exports.CheckerManager = CheckerManager;
exports.CompilationStatusPanel = CompilationStatusPanel;
exports.ExecutionStatusPanel = ExecutionStatusPanel;
exports.DiffWidget = DiffWidget;
exports.MergeWidget = MergeWidget;
exports.DelayedDiffWidget = DelayedDiffWidget;
exports.DiffWidgetApp = DiffWidgetApp;
exports.EnforcedTemplateStyle = EnforcedTemplateStyle;
exports.removeDecorations = removeDecorations;
exports.decorateUncollapsed = decorateUncollapsed;
exports.decorateCollapsed = decorateCollapsed;
exports.getRanges = getRanges;
exports.updateAceRanges = updateAceRanges;
exports.UserEditor = UserEditor;
exports.UserInputEditor = UserInputEditor;
exports.UserCodeEditor = UserCodeEditor;
exports.InputFileEditor = InputFileEditor;
exports.FileCodeEditor = FileCodeEditor;
exports.WorkspaceCompilerParserPlugin = WorkspaceCompilerParserPlugin;
exports.WorkspaceContestSubmitPlugin = WorkspaceContestSubmitPlugin;
exports.WorkspaceCustomNamedFilesPlugin = WorkspaceCustomNamedFilesPlugin;
exports.WorkspaceCustomRunPlugin = WorkspaceCustomRunPlugin;
exports.WorkspaceEnforcedTemplatePlugin = WorkspaceEnforcedTemplatePlugin;
exports.PluginTypes = PluginTypes;
exports.WorkspaceIDE = WorkspaceIDE;
exports.WorkspaceKeymapPlugin = WorkspaceKeymapPlugin;
exports.WorkspacePanel = WorkspacePanel;
exports.WorkspacePlugin = WorkspacePlugin;
exports.WorkspaceSettingsPlugin = WorkspaceSettingsPlugin;
exports.WorkspaceSharePlugin = WorkspaceSharePlugin;
exports.WorkspaceSingleFileManagerPlugin = WorkspaceSingleFileManagerPlugin;
exports.WorkspaceManager = WorkspaceManager;
exports.AnonymousWorkspaceManager = AnonymousWorkspaceManager;
exports.WorkspaceManagerWrapper = WorkspaceManagerWrapper;
exports.WorkspaceSettingsPanel = WorkspaceSettingsPanel;
exports.UserWorkspaceSettingsPanel = UserWorkspaceSettingsPanel;
exports.WorkspaceStore = WorkspaceStore;
exports.WorkspaceFileStore = WorkspaceFileStore;
exports.WorkspaceWatcher = WorkspaceWatcher;

Object.defineProperty(exports, '__esModule', { value: true });

});
